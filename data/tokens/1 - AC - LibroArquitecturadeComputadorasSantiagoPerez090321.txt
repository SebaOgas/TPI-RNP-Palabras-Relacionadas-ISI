See
discussions
stats
and
author
profiles
for
this
publication
at
https://www.researchgate.net/publication/349928725
ARQUITECTURA
COMPUTADORAS
9º
Edición
2021
Book
March
2021
CITATIONS
READS
111
authors
Some
of
the
authors
of
this
publication
are
also
working
on
these
related
projects
PROSEMEV
Proyecto
Seguimiento
Mejora
Educación
Virtualidad
View
project
ANÁLISIS
COMPARATIVO
PRESTACIONES
TRÁFICO
VIDEO
MULTICAST
REDES
HETEROGÉNEAS
View
project
Santiago
Cristobal
Pérez
National
University
of
Technology
Mendoza
Argentina
109
PUBLICATIONS
96
CITATIONS
SEE
PROFILE
Higinio
Alberto
Facchini
National
University
of
Technology
72
PUBLICATIONS
70
CITATIONS
SEE
PROFILE
Daniel
Argüello
National
University
of
Technology
MENDOZA
ARGENTINA
11
PUBLICATIONS
CITATION
SEE
PROFILE
All
content
following
this
page
was
uploaded
by
Santiago
Cristobal
Pérez
on
09
March
2021
The
user
has
requested
enhancement
of
the
downloaded
file
ARQUITECTURA
COMPUTADORAS
Universidad
Tecnológica
Nacional
Facultad
Regional
Mendoza
Cátedra
Arquitectura
Computadoras
Carrera
Ingeniería
Sistemas
Información
ARQUITECTURA
COMPUTADORAS
Daniel
M.
Argüello
Santiago
C.
Pérez
Higinio
A.
Facchini
Mendoza
Argentina
2021
Arquitectura
Computadoras
Daniel
M.
Argüello
Santiago
C.
Pérez
Higinio
A.
Facchini
Diseño
Tapa
Renzo
Guido
Facchini
Diseño
Interior
Renzo
Guido
Facchini
Corrección
Estilo
Renzo
Guido
Facchini
E-book
Edición
ISBN
978-950-42-0158-8
Rodriguez
273
5500
Mendoza
República
Argentina
viento
favorable
barco
adónde
Lucio
Anneo
Séneca
a.
C.
65
d.
C.
imaginación
importante
conocimiento
conocimiento
limitado
imaginación
Albert
Einstein
1879
1955
Capítulo
Representación
Numérica
Capítulo
Códigos
Numéricos
Alfanuméricos
Capítulo
Algebra
Boole
Capítulo
Sistemas
Combinacionales
Capítulo
Sistemas
Secuenciales
Capítulo
Memorias
Electrónicas
Capítulo
Arquitectura
Básica
Computadora
Capítulo
Arquitectura
Convencional
Capítulo
Arquitectura
Avanzada
Capítulo
10
Entradas
Salidas
PRÓLOGO
libro
objetivo
reunir
obra
experiencia
docente
profesional
autores
temáticas
Técnicas
Digitales
Arquitecturas
Computadoras
generar
material
integra
adecua
tópicos
dispersos
diversa
profundidad
perspectiva
bibliografías
grado
universitarios
libro
presenta
Capítulos
contenidos
Sistemas
Numeración
Códigos
Álgebra
Boole
típicos
base
conocimiento
discuten
temas
específicos
referidos
Sistemas
Electrónicos
Digitales
tipo
Combinacional
Secuencial
espe
cíficamente
Memorias
Electrónicas
continuación
plantea
Arquitectura
Básica
Computadora
usando
máquina
elemental
didáctica
facilitar
apropiación
conceptos
Finalmente
tratan
tópicos
avanzados
Arquitecturas
Convencionales
Avanzadas
Entradas
Salidas
Computadora
libro
pensando
especialmente
alumnos
años
grado
carreras
Ingeniería
Sistemas
Ingeniería
Electrónica
Tecnicaturas
TICs
UTN
carreras
grado
técnicas
TICs
general
institución
universitaria
objeto
otorgar
visión
integrada
perfil
orientación
Planes
Estudio
nacionales
latinoamericanos
Agradecemos
colaboración
generosamente
aportado
tiempo
conocimientos
revisión
elaboración
tablas
gráficas
figuras
apoyo
autoridades
presididas
Ing.
José
Balacco
Decano
Facultad
Regional
Mendoza
Daniel
Argüello
Santiago
Pérez
Higinio
Facchini
Mendoza
Argentina
diciembre
2020
pá
g.
11
CAPÍTULO
Representación
Numérica
Sistemas
Numeración
1.1
Introducción
1.2
Confiabilidad
1.3
Costo
Sistema
Numeración
Binario
2.1
Introducción
2.2
Conversión
números
distintas
bases
2.3
Complementos
binarios
2.4
Representación
números
negativos
binario
Punto
Fijo
Punto
Flotante
3.1
Introducción
3.2
Operaciones
aritméticas
3.3
Norma
IEEE
754
Ejercitación
12
Capítulo
Representación
Numérica
Sistemas
Numeración
1.1
Introducción
números
naturales
aparecen
contar
objetos
conjunto
infancia
empieza
aprender
contar
coordinan
conjuntos
prescindiendo
orden
mencionado
justificar
introducción
número
natura
formulación
axiomática
revele
consiste
operación
contar
posterioridad
invención
número
natural
surge
necesidad
ampliar
concepto
número
Aparece
número
entero
racional
irracional
número
real
Podríamos
avanzar
rápidamente
introducir
concepto
Sistema
Numeración
conjunto
reglas
convenios
permiten
representación
números
signos
palabras
Sistemas
Numeración
conocidos
Romano
descompone
número
suma
diferencia
representado
símbolo
especial
sistema
Decimal
introducir
símbolos
diversos
sumandos
utiliza
principio
valor
relativo
posicional
cifra
representa
valores
distintos
lugar
ocupa
sistemas
representan
interés
matemático
Sistema
Decimal
ue
inventado
India
siglo
IV
Cristo
llevado
Europa
árabes
Edad
Media
fundado
número
fijo
llamamos
habiendo
elegido
dedos
manos
combinación
operaciones
fundamentales
efectuadas
números
cualesquiera
origen
número
llama
13
algoritmo
numeración
sistemas
numeración
basados
valor
relativo
posicionales
algoritmo
numeración
consiste
polinomio
anbn
an-1bn-1
an-2bn-2
a1b1
a0b0
a-1b-1
a-2b-2
a-kb-k
Número
ai
número
natural
menor
símbolo
base
sistema
cantidad
símbolos
sistema
número
natural
cantidad
cifras
enteras
cantidad
cifras
fraccionarias
Obsérvese
entera
número
corresponde
términos
polinomio
base
elevada
exponentes
cero
positivos
fraccionaria
corresponde
exponentes
negativos
apreciarse
principio
valor
relativo
ejemplo
número
24,2
conocido
sistema
numeración
decimal
polinomio
24,2
101
100
10-
Obsérvese
valor
depende
posición
ocupa
número
propiedades
números
estudian
Matemáticas
válidas
cualquiera
base
utilizada
utilice
algoritmo
numeración
elegimos
base
podríamos
operaciones
algebraicas
suma
resta
multiplicación
división
etc.
problema
axiomática
teoremas
parten
algoritmo
numeración
anteriormente
eligió
10
base
hacernos
pregunta
Sistema
Numeración
Decimal
adecuado
usado
sistemas
físicos
representación
tratamiento
información
respuesta
resulta
evaluar
aspectos
costo
confiabilidad
Sistema
Físico
construir
14
1.2
Confiabilidad
sistema
físico
confiable
correcto
funcionamiento
independiente
temperatura
trabaja
envejecimiento
dispersión
tolerancia
componentes
forman
componentes
utilizan
construcción
sistemas
físicos
procesamiento
información
eléctricos
electrónicos
transistores
diodos
resistores
capacitores
inductores
etc.
cambian
parámetros
envejecimiento
temperatura
imposible
construir
componentes
idénticos
llama
dispersión
fabricantes
especifican
porcentaje
dispersión
máximo
componentes
comercializan
aclarar
mencionado
comparemo
sistemas
físicos
Figura
1.1
representan
números
distintas
bases
base
10
base
Fig
1.1a
indica
circuito
eléctrico
capaz
representar
número
decimal
base
10
Fig
1.1b
indica
circuito
eléctrico
capaz
representar
número
binario
base
consisten
foco
enciende
distintas
intensidades
luminosas
mover
llave
cantidad
posiciones
caso
caso
suponen
observador
capaz
determin
ar
número
cuestión
apreciando
intensidad
luminosa
Fig
1.1
Sistemas
físicos
representan
números
conclusión
resulta
evidente
fácil
determinar
foco
caso
prendido
apagado
caso
intensidades
posibles
15
apreciación
Supongamos
aumenta
temperatura
ambiente
circuito
envejecido
modifica
valor
resistencias
intensidad
emitida
foco
temperatura
envejecimiento
afectan
caso
b.
Finalmente
supongamos
reponer
foco
quemó
foco
dispersión
seguramente
parámetros
consideraciones
debiésemos
remplazar
resistencia
dispersión
afecta
caso
b.
conclusión
decirse
circuito
trabaja
binario
confiable
decimal
confiable
circuito
trabaje
base
sistemas
digitales
construyen
focos
llaves
considerado
aplicable
componentes
utilizan
realidad
1.3
Costo
Nuevamente
observando
Figura
1.1
punto
vista
costo
afirmar
costoso
construir
circuito
decimal
binario
Costo
proporcional
base
sistema
numeración
utilizado
necesitamos
circuitos
binarios
representar
cantidad
ejemplo
representar
número
25
necesitaríamos
circuitos
decimales
Fig.1.1a
circuitos
binarios
Fig.1.1b
Costo
proporcional
cantidad
cifras
escribir
Costo
n+1
relación
b(n+1
Módulo
Sistema
máximo
número
representable
n+1
cifras
n+1).Ln
Ln
Ln
Ln
Reemplazando
16
Costo
Ln
Ln
derivada
base
dCosto
db=
igualando
cero
obtenemos
bóptima
Concluimos
base
óptima
punto
vista
costo
realidad
expresión
costo
planteada
aproximada
Teniendo
confiabilidad
Sistema
Binario
utiliza
construcción
Sistemas
Digitales
Sistema
Numeración
Binario
2.1
Introducción
Sistema
Binario
símbolos
utilizados
llamados
dígitos
binarios
bits
bitios
aplicando
algoritmo
numeración
obtener
números
binarios
correspondientes
primeras
16
10
subíndice
10
indica
número
Sistema
Decimal
cantidades
Igualmente
podríamos
obtener
números
Sistema
Octal
Sistema
Hexadecimal
Tabla
1.1
indica
correspondencias
Obsérvese
Sistema
Hexadecimal
agregado
letras
obtener
16
símbolos
distintos
necesarios
razón
Sistema
16
cifras
binarias
corresponderá
cifra
hexadecimal
Sistema
Octal
parecido
23
cifras
binarias
corresponde
Octal
permite
encontrar
rápidamente
equivalencias
binario
octal
hexadecimal
ejemplo
0010
1001
1110
01012
29E516
110
111
111
001
000
1108
6771068
grupo
bits
recibe
nombre
nib
ble
grupo
bits
recibe
nombre
octeto
byte
17
Tabla
1.1
Correspondencia
sistemas
numeración
usual
temas
utilizar
prefijos
kilo
mega
giga
tera
etc.
similar
Sistema
Métrico
Decimal
diferencias
Kilo
1024
210
Mega
1024
220
Giga
1024
230
Tera
1024
240
decimos
ejemplo
1Mbit
indicando
1.048.576
bits
220
decimos
1Kbyte
indicando
1024
bytes
210
operaciones
aritméticas
estudiadas
álgebra
aplicadas
números
Sistema
Decimal
aplicables
números
binarios
Sistemas
responden
algoritmo
numeración
18
2.2
Conversión
números
distintas
bases
convertir
expresiones
números
distintas
bases
usarse
procedimiento
general
entera
número
términos
polinomio
base
elevada
exponentes
cero
positivos
Supongamos
miembro
igualdad
expresado
stema
Numeración
base
miembro
base
b2
Nb1
an
b2n
an-1
b2n-1
a1
b21
a0
b20
dividimos
miembro
miembro
b2
vemos
término
miembro
a0
resto
división
cifra
significativa
número
base
b2
Repitiendo
división
cociente
obtendremos
resto
sucesivamente
lle
gar
n.
ejemplo
presentado
Tabla
1.2
aclarará
expuesto
Ejemplo
b1
1010
Nb1
2510
b2
210
Tabla
1.2
Secuencia
conversión
decimal
binario
mencionado
2510
110012
19
fraccionaria
número
términos
polinomio
base
elevada
exponentes
negativos
Supongamos
miembro
igualdad
expresado
Sistema
Numeración
base
miembro
base
b2
Nb1
a-1
b2-1
a-2
b2-2
ak+1
b2k+1
a-k
b2-k
multiplicamos
miembro
miembro
observamos
término
miembro
a-1
cifra
significativa
fraccionaria
Reiterando
multiplicación
fraccionaria
resultado
obteniendo
sucesivas
cifras
significativas
ejemplo
aclarará
expuesto
Ejemplo
b1
1010
Nb1
0,2110
b2
210
0,21
0,42
0,42
0,84
0,84
1,68
0,68
1,36
0,36
0,72
0,72
1,44
0,44
0,88
mencionado
0,2110
0,0011010
números
entera
fraccionaria
aplicamos
2.3
Complementos
binarios
Complemento
base
complemento
base
número
posee
cifras
enteras
define
Cb(N
bm
20
Complemento
base
disminuida
complemento
base
disminuida
número
posee
cifras
enteras
define
Cb-1(N
bm
2-k
cantidad
cifras
fraccionarias
complementos
aplican
Sistemas
Numeración
base
utilizaremos
especialmente
Sistema
Numeración
Binario
caso
llamaremos
Complemento
Complemento
respectivamente
Veamos
ejemplos
Ejemplo
Complemento
C2(100112
1021012-
100112
1000002
100112
011012
Ejemplo
Complemento
C1(100112
1021012
100112
12
1000002
100112
-12
011002
omitirán
subíndices
indicar
números
binarios
interpretar
correctamente
Observando
ejemplos
vemos
Complemento
obtenerse
cambiando
ceros
viceversa
consecuencia
restar
1s
número
bits
consecuencia
Complemento
número
binario
obtenerse
cambiando
ceros
viceversa
sumando
definición
Complemento
caso
números
binarios
fraccionaria
ejemplo
1100011,110
definición
reglas
mencionadas
siguen
válidas
21
2.4
Representación
números
negativos
binario
números
negativos
representa
distintas
formas
Valor
Absoluto
Signo
Supongamos
número
binario
bits
bit
significativo
reserva
signo
bit
signo
Bs
restantes
valor
absoluto
Mantisa
forma
representamos
números
negativos
decimal
Bit
Signo
cero
positivo
negativo
Convenio
Complemento
bit
significativo
bit
signo
restantes
Mantisa
número
negativo
complemento
Bit
Signo
positivo
negativo
Convenio
Complemento
bit
significativo
bit
signo
restantes
Mantisa
número
negativo
complemento
Bit
Signo
positivo
negativo
Convenio
Exceso
2n-1
bit
significativo
bit
signo
restantes
Mantisa
número
negativo
complemento
Bit
Signo
negativo
positivo
Veamos
ejemplo
distintos
Convenios
número
bits
Obsérvese
Tabla
1.3
Usando
Complemento
cero
resultar
ventaja
verá
Usando
Exceso
menores
combinaciones
binarias
absolutas
corresponden
menores
equivalentes
decimales
útil
representación
exponentes
Punto
Flotante
veremos
Unidades
posteriores
verá
conveniencia
Convenios
Complementos
22
forma
operación
resta
suma
simplifica
circuitos
lógicos
excepción
representación
Valor
Absoluto
Signo
utilización
representaciones
operaciones
aritméticas
requiere
definir
regl
as
apropiadas
expondrán
posteriormente
obstante
adelantaremos
conceptos
Tabla
1.3
Representación
números
enteros
usando
bits
tabla
observarse
caso
Convenios
Complemento
Complemento
incluir
bit
signo
bit
número
ejemplo
encontrar
combinación
binaria
correspondiente
-3
Convenio
Complemento
basta
combinación
correspondiente
+3
011
encontrar
Complemento
incluyendo
Bit
Signo
C2(011
1000
011
101
forma
Bit
Signo
utiliza
bit
Veamos
ejemplo
+3
-3
usando
Convenio
Complemento
izquierda
rechaza
tratarse
números
bits
Convenio
Complemento
+1
-2
23
observa
usado
bit
signo
tratara
bit
Punto
Fijo
Punto
Flotante
3.1
Introducción
Lamentablemente
números
enteros
surgen
representaciones
binarias
dígitos
bits
fraccionarios
necesidad
llamada
Notación
Punto
Fijo
resuelve
problema
ejemplo
formato
1101001,101
caso
disponemos
10
bits
representar
número
enteros
fraccionarios
problema
construir
Sistema
Digital
debemos
fijar
formato
números
Adem
ás
ciencias
usual
necesidad
representar
números
pequeños
números
cantidad
limitada
dígitos
resulta
imposible
abarcar
amplio
rango
cantidades
llamada
Notación
Punto
Flotante
Notación
similar
Notación
Científica
divide
número
campos
muestra
Figura
1.2
Signo
Mantisa
Exponente
Signo
Exponente
Mantisa
Exponente
Mantisa
Fig
1.2
Representación
números
reales
punto
flotante
Signo
Mantisa
campo
bit
positivo
negativo
24
Exponente
campo
bits
Convención
Exceso
2n
-1
ejemplo
Exceso
64
bits
Exceso
128
requiere
bits
Mantisa(M
campo
bits
fraccionarios
número
esté
normalizado
bit
significativo
mantisa
1/2
menor
3.2
Operaciones
aritméticas
operaciones
aritméticas
números
punto
flotante
particularidades
1E1M1
2E2M2
números
punto
flotante
normalizados
Exceso
64
Multiplicación
producto
números
SpEpMp
Signo
mantisa
Sp
S1
S2
Sp
S1
S2
Exponente
Ep
E1
E2
64
valor
satisface
1/2
M1
M2
Mantisa
Mp
M1
M2
División
división
números
SdEdMd
Signo
mantisa
Sd
S1
S2
Sd
S1
S2
Exponente
Ed
E1
E2
64
valor
satisface
1/2
M1
M2
25
Mantisa
Md
M1
M2
Suma
resta
sumar
restar
números
debemos
igualar
exponentes
exponentes
Exceso
convención
menores
números
corresponden
menores
combinaciones
binarias
absolutas
comparación
sencilla
Supongamos
E1
E2
encontramos
E1
E2
Modificamos
S2E2M2
igualar
exponentes
S2(E2
j)M2/2j
procedemos
sumar
restar
mantisas
caso
resultado
normalizado
expuso
división
producto
Base
Exponenciación
objeto
aumentar
rango
representación
base
exponenciación
16
ejemplo
representación
punto
flotante
base
exponenciación
mantisa
interpretarse
Octal
grupos
bits
partiendo
coma
derecha
normalización
casos
obtiene
dígito
significativo
grupo
bits
mantisa
cero
3.3
Norma
IEEE
754
estandarizar
representación
punto
flotante
IEEE
dictó
Norma
754
1985
respetada
actualmente
mayoría
fabricantes
procesadores
norma
establece
tipos
representaciones
observa
Figura
1.3
26
Fig
1.3
Representaciones
punto
flotante
Norma
exponentes
mínimo
máximo
utilizan
casos
especiales
mantisas
normalizadas
empiezan
necesario
almacenarlo
coma
implícita
coloca
derecha
mantisa
llamada
significando
menor
consideran
clases
números
indica
Figura
1.4
Fig
1.4
Casos
especiales
números
punto
flotante
27
Ejercitación
Ejercicio
Convertir
decimal
siguientes
números
11010100112
1BF16
111101,101012
2328
575,548
2CD,516
Resolución
punto
quiera
convertir
sistema
numeración
decimal
método
apropiado
polinomio
numeración
representa
número
convertir
polinomio
opera
decimal
obteniendo
resultado
decimal
11010100112=1x29
1x28
0x27
1x26
0x25
1x24
0x23
0x22
1x21
1x20
11010100112=512
256
64
16
1=85110
Ejercicio
Convertir
octal
siguientes
números
l38210
7523,23610
111010012
1011011,10112
45BA16
DCBA,2F16
Ejercicio
Convertir
base
número
78,3
base
volverlo
base
apreciando
bits
fraccionarios
conclusiones
resultan
Ejercicio
número
decimal
representado
dígitos
hexadecimales
Ejercicio
Ordenar
siguientes
números
menor
BA316
110010112
834210
E4A16
689510
111011011112
Ejercicio
símbolos
sistema
numeración
base
14
Indicar
posibles
individuos
Ejercicio
Efectúe
siguientes
operaciones
utilizando
palabras
bits
Representando
números
negativos
convenio
complemento
28
Representando
números
negativos
convenio
complemento
35
21
-48
21
-25
-39
-63
18
Ejercicio
Indique
máximo
número
decimal
positivo
negativo
representado
convenio
complemento
utilizan
palabras
16
bits
32
bits
Ejercicio
Disponiendo
palabra
36
bits
destinado
bit
signo
número
exponente
27
mantisa
represente
punto
flotante
base
16
siguientes
números
decimales
29
52,73
0,125
0,011
Ejercicio
10
Efectúe
siguientes
operaciones
representación
punto
flotante
indicada
ejercicio
base
110011
11100,110110
101,11
1110100,0111
10110,0011
1010010,00101
0,000010011001
Ejercicio
11
Obtenga
números
decimales
rep
resentación
punto
flotante
base
10001101
1110010010100001
01010001
1111010001100001
Ejercicio
12
Indique
máximos
mínimos
números
positivos
decimales
representarse
formato
punto
flotante
indicado
simple
doble
precisión
base
Ejercicio
13
Efectúe
siguientes
operaciones
representación
punto
flotante
indicada
ejercicio
base
0,00000010111101
10011110,001
0,11111010
0,000000110
1101001010,0001
0,000001100001011
29
CAPÍTULO
Códigos
Numéricos
Alfanuméricos
Códigos
1.1
Introducción
1.2
Códigos
binarios
1.3
Códigos
BCD
1.4
Códigos
alfanuméricos
Códigos
Detectores
Correctores
Error
2.1
Introducción
2.2
Distancia
mínima
2.3
Códigos
detectores
error
2.4
Códigos
correctores
error
Encriptación
Cifrado
Códigos
4.1
Códigos
barras
4.2
Códigos
QR
Ejercitación
30
Capítulo
Códigos
Numéricos
Alfanuméricos
Códigos
1.1
Introducción
Definición
código
ley
correspondencia
biunívoca
elementos
conjuntos
código
representación
biunívoca
conjunto
elementos
forma
asigna
combinación
símbolos
determinados
viceversa
observa
Figura
2.1
comunicarse
código
utilizado
Fig
2.1
Relación
biunívoca
código
Códigos
numéricos
elementos
conjuntos
números
1.2
Códigos
binarios
sistemas
numeración
binario
octal
hexadecimal
etc.
estudiados
constituyen
códigos
representación
cantidades
31
CÓDIGOS
BINARIOS
base
código
códigos
utilizados
sistemas
digitales
sistema
numeración
binario
presentado
Tabla
2.1
recibe
nombre
código
binario
natural
Tabla
2.1
Código
binario
natural
cifras
binarias
bits
obtener
combinaciones
combinación
asignar
elemento
cantidad
distinto
grupo
bits
binarios
código
bits
asumir
combinaciones
distintas
1´s
0´s
código
útil
asignar
combinación
elemento
varían
2n
mínimo
número
bits
requeridos
escribir
código
2n
elementos
distintos
máximo
número
bits
especificado
combinaciones
podríamos
2n
permutaciones
2n
combinaciones
códigos
distintos
verán
características
particulares
Efectivamente
estudio
códigos
binarios
conocidos
aplicación
computacional
32
Códigos
binarios
continuos
progresivos
combinaciones
correspondientes
números
decimales
consecutivos
adyacentes
llaman
combinaciones
binarias
adyacentes
difieren
bit
Códigos
binarios
cíclicos
códigos
continuos
combinación
adyacente
Cuadro
2.1
muestra
casos
Cuadro
2.1
Códigos
continuos
cíclicos
ejemplo
típico
código
continuo
cíclico
llamado
GRAY
bits
necesidad
llamado
reflejado
construir
código
bits
reflejan
combinaciones
código
Gray
n-1
utiliza
principalmente
convertidores
rápidos
codificadores
combinación
binaria
contigua
cambia
bit
aumenta
velocidad
elimina
riesgo
transiciones
intermedias
ampliar
palabras
codificadas
código
bit
basta
repetir
simétricamente
com
binaciones
espejo
agregar
bit
izquierda
cero
mitad
mitad
combinaciones
posibles
Tabla
2.2
representa
código
Gray
bits
33
Tabla
2.2
Representación
código
Gray
bits
ejemplo
código
binario
continuo
cíclico
Johnson
observa
Tabla
2.3
bits
Tabla
2.3
Representación
código
Johnson
bits
1.3
Códigos
BCD
números
puros
representan
notación
octal
hexadecimal
facilidad
conversión
conversión
34
binaria
decimal
difícil
calculadoras
juegos
electrónicos
instrumentos
digitales
generalment
común
entrada
salida
números
notación
decimal
emplea
código
especial
representar
notación
código
llama
CODIGO
BCD
decimal
codificado
binario
binary
coded
decimal
técnica
convert
número
decimal
equivalente
binario
lugar
convertir
valor
decimal
entero
forma
binaria
pura
representar
dígitos
decimales
necesarios
bits
16
combinaciones
posibles
obtienen
bits
utilizan
códigos
BCD
clasificar
Ponderados
poseen
regla
formación
adjudica
peso
binarios
posición
ocupan
conjunto
bits
debiéndose
verificar
suma
algebraica
pesos
combinación
número
decimal
representado
ejemplos
típicos
BCD
natural
pesos
BCD
AIKEN
pesos
Libres
ponderados
correspondencia
decimal
binaria
arbitraria
pesos
sumas
algebraicas
general
combinaciones
forman
reglas
específicas
código
ejemplo
típico
BCD
Exceso
forma
partiendo
BCD
natural
sumándole
combinación
Tabla
2.4
presenta
tipos
códigos
BCD
Tabla
2.4
Tipos
códigos
BCD
35
conversión
número
decimal
código
BCD
realiza
simplemente
expresando
dígito
combinación
binaria
corresponde
código
especificado
ejemplo
Tabla
2.5
observa
número
decimal
926
representado
distintos
códigos
Tabla
2.5
Representación
número
926
distintos
códigos
BCD
1.4
Códigos
alfanuméricos
aplicaciones
computadoras
digitales
requieren
manejar
datos
consisten
números
letras
ejemplo
compañía
seguros
millones
clientes
computador
digital
procesar
historias
representar
nombre
dueño
póliza
forma
binaria
necesario
código
binario
alfabeto
código
binario
representar
números
decimales
caracteres
especiales
código
alfanumérico
código
binario
grupo
elementos
consistente
números
decimales
26
caracteres
alfabeto
número
símbolos
especiales
tales
códigos
conocido
ASCII
American
Standard
Code
for
Information
Interchange
Código
normalizado
americano
intercambio
información
continuación
Tabla
2.6
muestra
lista
código
ASCII
básico
estándar
bits
números
letras
mayúsculas
minúsculas
signos
puntuación
ASCII
incluye
256
códigos
divididos
conjuntos
estándar
extendido
128
conjuntos
representan
combinaciones
posibles
bits
conjunto
ASCII
básico
estándar
utiliza
bits
código
resultado
128
códigos
caracteres
127
00
7FH
hexadecimal
conjunto
ASCII
extendido
utiliza
bits
código
dando
resultado
128
códigos
adicionales
numerados
128
255
80
FFH
extendido
36
Tabla
2.6
Código
ASCII
estándar
bits
conjunto
caracteres
ASCII
básico
32
valores
asignados
códigos
control
comunicaciones
periféricos
caracteres
imprimibles
retroceso
retorno
carro
tabulación
empleados
controlar
forma
información
transferida
computadora
computadora
impresora
96
códigos
restantes
asignan
signos
puntuación
corrientes
dígitos
letras
mayúsculas
minúsculas
alfabeto
latino
códigos
ASCII
extendido
128
255
asignan
conjuntos
caracteres
varían
fabricantes
computadoras
programadores
software
códigos
intercambiables
programas
computadoras
caracteres
ASCII
estándar
ejemplo
IBM
utiliza
grupo
caracteres
ASCII
extendido
suele
denominarse
conjunto
caracteres
IBM
extendido
computadoras
personales
Apple
Computer
utiliza
grupo
similar
caracteres
ASCII
extendido
línea
computadoras
Macintosh
conjunto
caracteres
ASCII
estándar
universal
hardware
software
microordenadores
caracteres
ASCII
extendido
interpretarse
37
correctamente
programa
computadora
impresora
diseñados
Códigos
Detectores
Correctores
Error
2.1
Introducción
definida
conexión
física
transferir
información
dispositivos
sistemas
existir
formato
datos
estrategia
sincronización
envían
reciben
mensajes
incluyendo
detección
corrección
errores
Figura
2.2
esquematiza
enlace
comunicaciones
datos
bloques
cumplen
funciones
Fig
2.2
Esquema
enlace
datos
DTE
Equipo
Terminal
Datos
DCE
Equipo
Comunicación
Datos
trasferencia
ordenada
información
enlace
comunicación
logra
estableciendo
conexión
DTE
identificando
emisor
receptor
asegurando
mensajes
transfieran
correctamente
errores
controlando
transferencia
información
equipos
teléfono
transmisor
modem
etc.
conexiones
cables
repetidoras
etc.
constituyen
soporte
físico
permiten
enlace
datos
elemento
básico
considerar
estructura
mensaje
constituyendo
unidad
información
llamarse
Trama
Segmento
Datagrama
protocolo
comunicaciones
asociado
general
mensaje
estructura
Figura
2.3
38
Fig
2.3
Estructura
general
mensaje
protocolo
Teniendo
equipos
canal
expuestos
ruidos
internos
externos
alterar
información
transmite
resulta
fundamental
importancia
detectar
corregir
errores
formas
verificar
errores
qu
producen
mensaje
transmisión
Especialmente
información
numérica
aceptan
errores
necesario
detectar
presencia
producido
detecta
presencia
error
necesario
retransmitir
información
detectar
corregir
error
producido
produce
retransmisión
código
binario
utilizan
combinaciones
posibles
detectar
errores
cambia
bits
error
combinación
válida
daría
resultado
combinación
bits
válida
detectar
errores
necesario
utilizar
combinaciones
posibles
condición
necesaria
suficiente
efectivamente
detectar
corregir
errores
concepto
distancia
combinaciones
código
distancia
código
combinaciones
binarias
cualesquiera
número
bits
eben
cambiarse
pasar
combinación
2.2
Distancia
mínima
Distancia
Mínima
Dm
código
menor
distancias
combinaciones
cualesquiera
pertenecientes
código
distancia
mínima
códigos
vistos
unidad
detectar
errores
an
terior
deduce
detectar
corregir
errores
imprescindible
39
razonamiento
esquematizado
Figura
2.4
idea
capacidad
detección
corrección
errores
código
Fig
2.4
Esquema
capacidad
detección
corrección
error
código
Ci
Cj
combinaciones
válidas
código
considerado
resto
combinaciones
difieren
bits
válidas
combinaciones
válidas
caso
Dm
concluye
detectar
error
bit
combinación
válida
diferirá
bit
combinaciones
válidas
imposibilitaría
determinar
combinación
válida
proviene
corregir
caso
Dm
detectar
error
bits
corregir
bit
combinación
válida
diferirá
bit
combinación
válida
bits
permitiría
determinar
combinación
válida
proviene
probable
produzca
error
bit
corregir
bit
caso
Dm
concluye
detectar
error
bits
corregir
bits
mencionado
permite
deducir
CANTIDAD
ERRORES
DETECTABLES
Dm
CANTIDAD
ERRORES
CORREGIBLES
Dm
Distancia
mínima
Dm
40
Comentario
aproximación
válida
Sistema
Comunicaciones
probabilidad
error
bit
probabilidad
error
bits
12
ejemplo
10
-6
P2
10-12
probabilidades
errores
bits
disminuyen
abruptamente
2.3
Códigos
detectores
error
detectar
errores
debemos
lograr
Dm
simple
lograrlo
contar
número
1´s
binarios
contenidos
mensaje
agregarle
dígito
binario
bit
forma
mensaje
número
par
1´s
número
impar
1´s
llama
código
paridad
adiciona
bit
paridad
número
1´s
par
trabaja
paridad
par
impar
procedimiento
logramos
código
resultante
Dm
obviamente
costa
agregar
bit
enviar
información
necesario
ponerse
convenciones
trabaja
Cuadro
2.2
presenta
ejemplo
usando
código
BCD
natural
característica
código
trabaje
detección
errores
códigos
consiste
comprobar
número
combinación
cumple
convención
adaptada
trabaja
paridad
par
chequear
dato
recibido
cumpla
condición
error
solicitar
transmisión
dato
Cuadro
2.2
Ejemplo
códigos
bit
paridad
usando
BCD
natural
41
códigos
detectores
error
cantidad
constante
1´s
peso
constante
encontramos
código
código
biquinario
observan
Tabla
2.6
Tabla
2.7
Ejemplos
códigos
peso
constante
códigos
combinación
paridad
par
forman
pesos
asignados
2.4
Códigos
correctores
error
código
corrector
detecta
información
codificada
presenta
errores
caso
afirmativo
determina
posición
bit
bits
erróneos
corregirlos
inversión
recordar
usando
sistema
binario
bit
error
cambia
complemento
vimos
códigos
distancia
mínima
Dm=2
permiten
corrección
errores
producirse
error
combinación
obtenida
poseer
adyacentes
pertenecientes
código
correcta
ejemplo
código
detecta
combinación
errónea
01000
válida
error
produjo
bit
0100
bit
01010
ambas
combinaciones
válidas
deduce
corregir
bit
error
necesario
distancia
mínima
códigos
Dm
llaman
códigos
correctores
error
destacan
Código
Hamming
códigos
Bidimensionales
Códigos
Redundancia
Cíclica
CRC
42
2.4.1
Código
Hamming
formación
código
cualquiera
bits
adicionan
bits
formando
código
bits
código
realizan
detecciones
paridad
obteniéndose
bit
paridad
cero
dependiendo
número
bits
par
impar
conjunto
bits
paridad
forma
número
sistema
binario
natural
cuyo
equivalente
decimal
indica
posición
bit
erróneo
error
número
obtenido
cero
bits
obtienen
2p
combinaciones
cumplir
relación
ejemplo
tomaremos
código
base
código
AIKEN
detectar
corregir
errores
bit
agregarle
bits
cumplir
condición
código
resultante
bits
detectar
posibles
errores
producir
combinación
errores
considerando
posiciones
combinación
ausencia
error
necesarias
combinaciones
binarias
correctoras
error
Dichas
combinaciones
correctora
error
obtienen
bits
c1
c2
c3
número
decimal
formado
indica
posición
bit
erróneo
combinaciones
correctoras
bits
observan
Tabla
2.8
Tabla
2.8
Tabla
correctora
código
Hamming
2p
43
bit
c1
toma
valor
produce
error
bits
b1
b3
b5
b7
combinación
código
formado
número
existentes
posiciones
par
error
cualquiera
bits
convierte
impa
r.
c1
vale
número
posiciones
dadas
impar
cero
caso
contrario
representar
conclusión
función
lógica
símbolo
función
OR-Exclusiva
estudiará
posteriormente
resultado
número
par
número
impar
obtenemos
c2
c3
generar
bits
bits
agregarle
código
general
consideremos
bits
b1
b2
b4
aparecen
fórmulas
anteriores
generamos
ejemplo
b1
valer
núme
ro
b3
b5
b7
impar
b1
b3
b5
b7
b2
b3
b6
b7
b4
b5
b6
b7
Cuadro
2.3
presenta
Código
Hamming
deducido
Código
AIKEN
Tabla
corrección
C1
b1
b3
b5
b7
C2
b2
b3
b6
b7
C3
b4
b5
b6
b7
44
Cuadro
2.3
Ejemplo
código
Hamming
2.4.2
Verificación
redundancia
LRC
CRC
Resulta
interés
utilización
códigos
cíclicos
rotación
cíclica
palabra
produce
palabra
pertenece
código
ventaja
emplear
códigos
cíclicos
generación
implementar
fácilmente
empleo
registros
desplazamientos
realimentación
Verificación
Redundancia
Longitudinal
LRC
código
detector
error
bit
Utilizado
adquisición
datos
control
industria
comunicación
dispositivos
PC
Figura
2.5
observa
ejemplo
trama
información
ASCII
Fig
2.5
Ejemplo
trama
información
ASCII
3A
identifica
comienzo
trama
0D
CR
0A
LF
identifican
trama
resto
trama
binario
equivalente
45
cálculo
LRC
consiste
suma
hexadecimal
datos
calcular
complemento
01
08
00
00
61
62
CC
0011
0011
0011
0100
hexadecimal
33
34
LRC
33
34
Verificación
Redundancia
Cíclica
CRC
códigos
consisten
agregar
bits
mensaje
transmitir
bits
condición
cumple
k.
forma
obtiene
transmisión
eficiente
can
tidad
bits
agregados
relativamente
pequeña
utilización
códigos
permite
detección
corrección
errores
forma
obtener
bits
agregar
procedimiento
redundancia
cíclica
implementado
Registros
Desplazamiento
compuertas
XOR
Capítulos
fundamentado
aritmética
binaria
acarreos
Aritmética
Binaria
acarreos
llamada
aritmética
Módulo
realizan
operaciones
algebraicas
suma
resta
multiplicación
etc.
considerar
acarreos
ejemplo
1011
1011
1001
1001
0010
0010
observa
suma
resta
Módulo
resultado
obtenerse
realizando
función
XOR
bit
bit
simplificando
implementación
sumadores
restadores
suman
restan
números
iguales
resultado
cero
particularidad
cálculo
bits
agregar
bits
llama
FCS
Frame
Check
Secuency
calculan
mensaje
transmitir
bits
cantidad
bits
agregar
FCS
46
transmisor
transmitir
procesa
usando
Módu
mensaje
transmitir
𝑀2𝑘
𝐺(𝑥
𝐹𝐶𝑆
𝐺(𝑥
Observe
FCS
resto
división
bits
G(x
k+1
bits
G(x
patrón
bits
obtenido
polinomio
numeración
k+1
términos
enter
cumple
bit
significativo
significativo
MSB
LSB
G(x
normalizados
dependiendo
resultan
CRC
permiten
corregir
bits
transmisor
envía
𝑀2𝑘
𝐹𝐶𝑆
Recepto
recibe
𝑀2𝑘
𝐹𝐶𝑆
procesa
usando
Módulo
recibido
𝑀2𝑘
𝐹𝐶𝑆
𝐺(𝑥
𝑀2𝑘
𝐺/𝑥
𝐹𝐶𝑆
𝐺/𝑥
𝐹𝐶𝑆
𝐺/𝑥
𝐹𝐶𝑆
𝐺/𝑥
𝐹𝐶𝑆
𝐹𝐶𝑆
𝐺(𝑥
Observe
error
FCS
FCS
debería
cero
resto
división
receptor
cero
habido
error
transmisión
corregir
error
receptor
procesamiento
recibido
software
hardware
rápido
polinomios
generadores
G(X
rmalizados
internacionalmente
ejemplo
CRC-8
X8
X5
X4
100110001
Redundancia
bits
CRC-12
X12
X11
X3
X2
X1
11
Redundancia
16
bits
47
CRC-16
X16
X15
X2
Redundancia
16
bits
2.4.3
Códigos
bidimensionales
utilización
códigos
implica
transferencia
bloque
información
organizada
dimensiones
transmisor
organiza
estructura
bidimensional
agrega
bits
adicionales
receptor
recibe
información
bits
adicionales
procesa
detecta
corrige
errores
organización
bidimensional
observa
Figura
2.6
Fig
2.6
Organización
códigos
bidimensionales
filas
matriz
interpretan
código
binario
cuya
Dm
Asimismo
columnas
matriz
interpretan
código
binario
Dm
transmisor
agrega
bits
filas
bits
columnas
bits
forma
distancias
mínimas
mayores
ejemplo
Figura
2.7
presenta
Código
Bidimensional
código
correspondiente
filas
agregan
bits
Hamming
código
columnas
agrega
bit
paridad
48
Fig
2.7
Organización
códigos
bidimensionales
usando
Hamming
bits
paridad
código
filas
Dm
Hamming
código
columnas
Dm
código
paridad
determinar
Dm
código
Bidimensional
podríamos
encontrar
patrón
bits
error
detecta
do
receptor
basa
interpretar
concepto
Dm
cantidad
bits
cambiar
combinación
válida
código
encontrar
combinación
válida
ejemplo
Dm
código
partiendo
combinación
código
deberíamos
cambiar
bits
encontrar
combinación
válida
caso
ejemplo
figura
patrón
bits
error
detectado
receptor
dibujado
caso
código
horizontal
cambiar
bits
caso
vertical
bits
Dm
generalizar
concluir
Dmbidimensional
Dmfilas
Dmcolumnas
cálculo
bits
rectángulo
inferior
derecho
aparecen
bits
Hamming
paridad
simu
ltáneamente
afirmar
determinismo
cálculos
parten
juego
bits
matriz
paridades
coincidir
extender
conceptos
códigos
tridimensionales
códigos
multid
imensionales
consistirán
ordenamiento
bits
transmitir
tantas
direcciones
quiera
procedimiento
utilizado
aumentar
distancia
mínima
inconveniente
bajar
eficiencia
representativa
49
procesamiento
receptor
aumenta
críticamente
ejemplo
caso
figura
Dm
corregir
bits
15%
transmitido
consiste
bits
agregados
Encriptación
Cifrado
introducción
computadoras
especialmente
empresas
evidente
necesidad
herramientas
automáticas
proteger
archivos
informaciones
almacenadas
memoria
nombre
genérico
tema
herramientas
diseña
das
proteger
datos
frustrar
usuarios
autorizados
informáticos
Seguridad
Computadoras
unidad
temática
necesitado
desarrollarse
introducción
redes
facilidades
comunicación
transportar
datos
ecnología
esencial
redes
automáticas
aplicaciones
seguridad
computadoras
Encriptación
Cifrado
medida
efectiva
amenaza
usuarios
autorizados
encriptado
cifrado
datos
inte
rpretarse
almacenamiento
transmisión
datos
sensibles
forma
cifrada
terminología
utilizada
campo
destaca
nombre
texto
plano
asignado
datos
originales
texto
plano
cifrado
sometiéndolo
algoritmo
cifrado
cuyas
entradas
texto
plano
clave
cifrado
salida
algoritmo
forma
cifrada
texto
plano
llama
texto
cifrado
detalles
algoritmo
normalmente
dominio
público
clave
cifrado
mantiene
secreto
texto
cifrado
ininteligible
cualquiera
posea
clave
cifrado
guarda
computadoras
principales
organización
transmite
líneas
comunicaciones
redes
esq
uema
empleado
debería
trabajo
involucrado
romperlo
sobrepase
ventaja
potencial
pudiera
obtenerse
técnicas
diferenciadas
utilizar
algoritmos
sustitución
permutación
sustitución
enfoques
básicos
cifrado
practica
tradicionalmente
clave
cifrado
determinar
caracter
texto
plano
caracter
texto
cifrado
sustituir
carácter
técnica
permutación
caracteres
texto
plano
simplemente
reorganizados
secuencia
influencia
clave
cifrado
ejemplo
podríamos
técnica
sustitución
algoritmo
elemental
cifrar
texto
plano
clave
cifrado
50
Texto
plano
TEXTO
DEMO
Clave
PRUEBA
Suponemos
simplicidad
únicos
caracteres
datos
manejar
letras
mayúsculas
espacios
blanco
algoritmo
cifrado
sustitución
Dividimos
texto
plano
bloques
longitud
clave
cifrado
espacios
blanco
mostrados
explícitamente
Remplazamos
caracter
texto
plano
entero
esté
rango
00
26
usando
espacio
blanco
00
01
26
05192005
00
0519
00
2114
00
2005242115
00
04051315
Repetimos
paso
clave
cifrado
16
18
21
05
02
01
bloque
texto
plano
remplazamos
caracter
suma
módulo
27
codificación
enteros
codificación
enteros
carácter
correspondiente
clave
cifrado
05192005
00
0519
00
2114
00
2005242115
00
04051315
16182105
02
0116
18
2105
02
0116182105
02
01161821
21001410
02
0608
18
1519
02
2121151520
02
05210409
Remplazamos
codificación
enteros
resultado
paso
equivalente
caracteres
procedimiento
descifrado
ejemplo
directo
clave
caso
pareciera
difícil
infiltrado
determinar
clave
conocimiento
previo
teniendo
texto
plano
texto
cifrado
Aunqu
obvio
esquemas
sofisticados
51
técnicas
sustitución
permutación
particularmente
segura
algoritmos
combinan
proporcionar
alto
grado
seguridad
algoritmos
DES
Estándar
cifrado
datos
clave
64
bits
años
personas
sugerido
probablemente
DES
seguro
aplicaciones
Alternativamente
aparecido
algoritmos
amp
liado
tamaño
clave
claves
encriptar
desencriptar
RSA
códigos
4.1
Códigos
Barras
Código
Barras
arreglo
paralelo
barras
espacios
contiene
información
codificada
barras
espacios
símbolo
información
leída
dispositivos
ópticos
lectores
código
barras
envían
información
leída
computadora
información
entrada
teclado
código
barras
definirse
conjunto
símbolos
hechos
patrones
barras
espacios
blancos
negros
códigos
barras
codifican
bits
información
datos
leídos
scanners
especiales
códigos
barras
conjunto
bases
datos
códigos
barras
requieren
ingreso
manual
humano
leídos
automáticamente
scanners
virtualmente
libres
error
Scanners
códigos
barras
leen
patrón
barras
blancas
negras
claras
oscuras
decodifican
código
convirtiéndolo
string
caracteres
generalmente
guarda
base
datos
Ventajas
ventajas
procedimientos
colección
datos
imprime
bajos
costos
Permite
porcentajes
bajos
error
equipos
lectura
impresión
código
barras
flexibles
fáciles
conectar
instalar
52
Beneficios
código
barras
técnica
entrada
datos
captura
manual
reconocimiento
óptico
cinta
magnética
tecnología
código
barras
tecnología
implementar
sistema
co
lección
datos
identificación
automática
presenta
beneficios
Virtualmente
retrasos
lee
información
usada
mejora
exactitud
datos
costos
fijos
labor
bajos
control
calidad
servicio
cliente
contar
categorías
información
mejora
competitividad
Aplicaciones
aplicaciones
código
barras
cubren
prácticamente
tipo
actividad
humana
industria
comercio
instituciones
educativas
instituciones
médicas
gobierno
etc.
Control
material
proceso
Control
inventario
Control
tiempo
asistencia
Punto
venta
Control
calidad
Control
inventario
Embarques
recibos
Control
documentos
Facturación
Bibliotecas
Bancos
sangre
Hospitales
Control
acceso
Control
tiempo
asistencia
Características
código
barras
símbolo
código
barras
características
nombrar
Densidad
anchura
elemento
barra
espacio
angosto
símbolo
código
barras
mils
milésimas
pulgada
código
barras
mide
longitud
física
densidad
WNR
Wide
to
Narrow
Ratio
razón
grosor
elemento
angosto
ancho
Usualmente
1:3
1:2
Quiet
Zone
53
área
blanca
principio
símbolo
código
barras
área
necesaria
lectura
conveniente
símbolo
Simbologías
símbolo
código
barras
impresión
física
código
barras
Simbología
forma
codifica
información
barras
espacios
símbolo
código
barras
simbologías
aplicaciones
características
principales
características
definen
simbología
código
barras
siguientes
Numéricas
alfanuméricas
longitud
fija
longitud
variable
Discretas
continuas
Número
anchos
elementos
Autoverificación
Figuras
2.8
2.13
presentan
ejemplos
simbologías
códigos
barras
EAN
UPC
Comercio
detallista
autoverificable
numérico
longitud
fija
Fig
2.8
Simbología
EAN
UPC
54
Código
39
Industrial
alfanumérico
44
caracteres
Fig
2.9
Simbología
Código
39
Codabar
Bancos
sangre
bibliotecas
Fig
2.10
Simbología
Codabar
2/5
Aplicaciones
numéricas
aerolíneas
numérico
Fig
2.11
Simbología
2/5
55
Código
93
Complementa
código
39
alfanumérico
Fig
2.12
Simbología
Código
93
Código
128
Industrial
alfanumérico
128
caracteres
ASCII
Fig
2.13
Simbología
Código
128
4.2
Códigos
QR
código
QR
código
barras
bidimensional
cuadrado
almacenar
datos
codificados
códigos
QR
folletos
carteles
revistas
etc.
códigos
QR
permiten
interactuar
mundo
smartphones
Específicamente
código
QR
extiende
datos
disposición
objeto
físico
crean
medida
digital
operaciones
marketing
tecnología
permite
acelera
servicios
web
móviles
herramienta
digital
creativa
56
Fig
2.14
Ejemplo
Código
QR
escanear
código
QR
utilizando
teléfono
inteligente
obtiene
acceso
inmediato
contenido
lector
código
QR
continuación
acción
abrir
navegador
web
URL
específica
provocarse
acciones
almacenamiento
tarjeta
visita
lista
contactos
teléfono
inteligente
conectarse
red
inalámbrica
códigos
QR
crearon
1994
Denso
Wave
subsidiaria
japonesa
Grupo
Toyota
tecnología
libre
famoso
códigos
barras
2D
mundo
ganado
éxito
Japón
década
2000
estándar
2011
japonese
escanearon
diariamente
códigos
QR
número
SMS
enviados
2010
códigos
QR
comenzaron
expandirse
EE.UU
Europa
códigos
QR
personalizar
marcas
incorporen
identi
dad
visual
códigos
QR
personalizar
seguir
reglas
estructura
códigos
QR
sigan
legibles
Figuras
15
20
presentan
ejemplos
simbologías
códigos
barras
57
Fig
2.15
Ejemplo
Código
QR
usado
ticket
acceso
evento
Fig
2.16
Código
QR
usado
Wikipedia
58
Fig
2.17
Ejemplo
Código
QR
usado
cartel
comercial
59
Fig
2.18
Ejemplo
Código
QR
Fig
2.19
Ejemplo
Código
QR
60
Fig
2.20
Ejemplo
Código
QR
Ejercitación
Ejercicio
tabla
código
Gray
bits
Ejercicio
cantidad
bits
necesitaría
código
Gray
codificar
ángulos
grados
360
grados
Ejercicio
tabla
código
Jhonson
bits
Indique
características
presenta
código
Ejercicio
Completar
cuadro
códigos
indicados
codificación
números
decimales
enunciados
códigos
auto
complementarios
Decimal
BCD
2421
BCD
EXC3
BCD
3421
BCD
5421
7,25
23,1
67,5
81
95,8
104,3
237
982,99
61
Ejercicio
Representar
número
927
binario
natural
BCD
EXS
Comentar
resultado
efectuar
análisis
comparativo
facilidad
obtener
representaciones
longitud
bits
necesarios
caso
Ejercicio
Indicar
distancia
mínima
código
BCD
Aiken
Obtener
código
paridad
impar
incorporación
bit
paridad
distancia
mínima
código
resultante
Ejercicio
Realice
tabla
código
Hamming
detección
corrección
bit
tomando
código
base
información
BCD
3421
Ejercicio
bits
código
Hamming
detectar
corregir
error
datos
originalmente
codifican
combinaciones
bits
bits
12
bits
Ejercicio
Indicar
distintas
combinaciones
binarias
asignadas
siguientes
nú-meros
caracteres
símbolos
especiales
código
ASCII
bits
Ejercicio
10
Indicar
números
caracteres
símbolos
especiales
pertenecen
combinaciones
código
ASCII
bits
representan
siguientes
números
octal
75
12
105
62
52
13
74
132
55
27
62
Ejercicio
11
texto
sométalo
algoritmo
cifrado
UNIVERSIDAD
TECNOLOGICA
NACIONAL
Suponemos
simplicidad
únicos
caracteres
datos
manejar
letras
mayúsculas
espacios
blanco
clave
cifrado
cadena
caracteres
ESTUDIAR
Ejercicio
12
texto
codificado
palabra
clave
AVANTI
descífrelo
utilizando
esquema
ÑLTNÑNSANCNIFJAZUIDQNOMN
63
CAPÍTULO
CAPÍTULO
Álgebra
Boole
Visión
General
Álgebra
Boole
1.1
Introducción
1.2
Postulados
1.3
Teoremas
Funciones
Lógicas
2.1
Introducción
2.2
Teoremas
funciones
lógicas
Minimización
Funciones
Lógicas
3.1
Introducción
3.2
Método
simplificación
Karnaugh
Compuertas
Lógicas
Ejercitación
64
Capítulo
Álgebra
Boole
Visión
General
Álgebra
Boole
1.1
Introducción
Sistema
aspecto
amplio
definirse
conjunto
elementos
guardan
relación
elemento
sistema
sistema
subsistema
Sistemas
clasifican
SISTEMAS
NATURALES
ARTIFICIALES
ELÉCTRICOS
ELECTRÓNICOS
ANALÓGICOS
DIGITALES
COMBINACIONALES
SECUENCIALES
Sistema
digital
cuyos
elementos
digitales
adoptar
valores
discretos
Unidad
conclusión
base
elección
sistema
numeración
adecuada
punto
vista
confiabilidad
costo
razón
Sistemas
Digitales
trabajan
elementos
físicos
binarios
adoptar
valores
estudio
Sistemas
Digitales
necesita
estudiar
álgebra
binaria
Álgebra
George
Boole
data
1854
dudas
apropiada
Claude
Shannon
1938
adaptó
álgebra
aplicación
sistemas
digitales
65
Seguidamente
estudia
brevemente
Álgebra
Boole
funciones
booleanas
minimización
finalmente
compuertas
lógicas
1.2
Postulados
álgebras
Boole
utilidad
definir
propiedad
bivalente
álgebras
compuestas
elementos
álgebra
conjunto
elementos
binarios
relacionados
operaciones
lógicas
producto
suma
cumplen
siguientes
postulados
letras
etc.
indican
variables
binarias
elemento
identidad
𝑎.
operaciones
cumplen
propiedad
conmutativa
𝑎.
𝑏.
Propiedad
distributiva
𝑎.
𝑎.
𝑎.
𝑏.
Complementación
inversión
lógica
𝑎̅
𝑎.
𝑎̅
1.3
Teoremas
teoremas
importantes
Dualidad
igualdad
lógica
válida
intercambian
operadores
elementos
identidad
simetría
postulados
demuestra
teorema
álgebra
conjunto
cerrado
resultados
aplicar
operaciones
lógicas
variables
pertenecen
álgebra
66
álgebra
cumple
𝑎.
Ley
Idempotencia
𝑎.
Ley
involución
𝑎̿
operaciones
lógicas
asociativas
𝑎.
𝑏.
𝑎.
Absorción
𝑎.
𝑎.
8)
Leyes
Morgan
𝑛̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅̅
𝑎̅.
𝑏̅.
𝑐̅
𝑛̅
𝑎.
𝑏.
𝑛̅̅̅̅̅̅̅̅̅̅̅̅
𝑎̅
𝑏̅
𝑐̅
𝑛̅
excepción
teorema
aparecen
expresiones
obsérvese
dual
recomienda
alumno
demostrar
teoremas
forma
algebraica
basándose
postulados
operaciones
distributivas
prescindiremos
paréntesis
encierran
productos
lógicos
símbolo
producto
indicará
sucesivo
forma
ejemplo
expresión
𝑏.
escribirá
𝑏𝑐(𝑏
67
Funciones
Lógicas
2.1
Introducción
función
lógica
variable
binaria
depende
variables
binarias
relacionadas
operaciones
lógicas
función
lógica
nota
f(a
expresión
lógica
involucra
variables
función
adoptará
valor
expresión
valor
determinado
variables
ejemplo
𝑓(𝑎
𝑎𝑏̅
𝑎𝑐
f(a
función
variables
corresponde
Tabla
Tabla
3.1
decirse
tabla
forma
expresar
función
lógica
Tabla
3.1
Tabla
función
f(a
2.2
Teoremas
funciones
lógicas
Teorema
Álgebra
Boole
cumple
𝑓(𝑎
𝑎𝑓(1
𝑎̅𝑓(0
68
demostrar
igualdad
basta
reemplazar
expresión
verificar
cumple
casos
considerando
función
cuestión
restricciones
válida
dual
𝑓(𝑎
𝑓(0
𝑛)][𝑎̅
𝑓(1
función
general
teorema
posee
corolarios
útiles
hora
simplificar
obtener
expresión
simple
función
funciones
expresiones
general
lógicas
obtienen
efectuando
producto
miembro
miembro
expresión
𝑎̅
indica
continuación
𝑎𝑓(𝑎
𝑎[𝑎𝑓(1
𝑎̅𝑓(0
Aplicando
propiedad
distributiva
miembro
obtiene
𝑎𝑓(𝑎
𝑎𝑓(1
Corolario
multiplicamos
miembro
miembro
𝑎̅
𝑎̅𝑓(𝑎
𝑎̅[𝑎𝑓(1
𝑎̅𝑓0
Aplicando
propiedad
distributiva
miembro
obtiene
𝑎̅𝑓(𝑎
𝑎̅𝑓(0
Corolario
Aplicando
dualidad
corolarios
anteriores
obtienen
𝑓(𝑎
𝑓(0
Tercer
Corolario
𝑎̅
𝑓(𝑎
𝑎̅
𝑓(1
Cuarto
Corolario
Teorema
II
función
lógica
expresarse
forma
canónica
sumatoria
términos
aparecen
variables
forma
producto
lógico
términos
llaman
MINTERMS
productoria
términos
aparecen
variables
forma
suma
lógica
términos
llaman
MAXTERMS
69
casos
función
xpresada
forma
canónica
términos
minterms
maxterms
llaman
términos
canónicos
demostrará
teorema
función
variables
f(a
hará
extensivo
variables
Aplicando
Teorema
f(a
𝑓(𝑎
𝑎𝑓(1
𝑎̅𝑓(0
Aplicando
nuevamente
Teorema
f(1
f(0
𝑓(1
𝑎𝑓(1
𝑏̅𝑓(1
𝑓(0
𝑎𝑓(0
𝑏̅𝑓(0
Remplazando
expresión
inicial
obtiene
𝑓𝑎
𝑎𝑏𝑓(1,1
𝑎𝑏̅𝑓(1,0
𝑎̅𝑏𝑓(0,1
𝑎̅𝑏̅𝑓(0,0
observa
función
expresarse
sumatoria
minterms
afectados
coeficiente
consiste
valor
función
calcula
remplazando
variables
minterm
acompaña
variable
correspondiente
directa
negada
respectivamente
Teniendo
f(a
función
cualquiera
álgebra
Boole
dual
𝑓𝑎
𝑓(0,0)][𝑎
𝑏̅
𝑓(0,1)][𝑎
𝑏̅
𝑓(0,1)][𝑎̅
𝑏̅
𝑓(1,1
Análogamente
función
expresarse
productoria
maxterms
afectados
coeficiente
consiste
valor
función
calcula
remplazando
variables
maxterm
acompaña
variable
correspondiente
directa
negada
respectivamente
generalización
resultados
obtenidos
funciones
variables
resulta
evidente
obtener
notación
sencilla
funciones
lógicas
suele
asignar
término
canónico
número
decimal
obtiene
dando
pesos
variables
70
encuentran
expresadas
forma
directa
negada
convenio
observa
Tabla
3.2
Tabla
3.2
Pesos
variables
booleanas
variable
aparece
forma
negada
peso
asignado
cero
ejemplo
usando
convenio
término
canónico
cualquiera
𝑎̅𝑏𝑐̅𝑑
correspondiente
minterm
función
variables
número
decimal
10
convenio
mencionado
permite
forma
llamada
compacta
notar
función
𝑓(𝑎
𝑓(𝑖
2n−1
i=0
2𝑛
𝑓(𝑖
2n−1
𝑖=0
expresión
deduce
regla
pasar
función
canónica
minterms
maxterms
viceversa
buscan
términos
canónicos
expresión
función
complementa
2n
términos
función
buscada
ejemplo
función
variables
minterms
𝑓(𝑎
∑(0
10
13
14
15
abajo
símbolo
sumatoria
indica
cantidad
variables
términos
canónicos
11
12
complementos
15
13
11
expr
esión
canónica
maxterms
función
𝑓(𝑎
∏(3
11
13
71
Nótese
verificación
suma
número
minterms
maxterms
función
2n
Minimización
Funciones
Lógicas
3.1
Introducción
importante
obtener
mínima
expresión
función
menor
cantidad
variables
operaciones
involucradas
métodos
minimización
basan
postulados
álgebra
conveniencia
agregar
oportunamente
términos
expresión
función
aplicar
métodos
necesario
función
esté
expresada
forma
canónica
vio
punto
función
lógica
expresable
forma
canónica
minterms
maxterms
Supóngase
función
canónica
variables
posee
expresión
siguientes
términos
canónicos
𝑎̅𝑏𝑐𝑑̅
𝑎𝑏𝑐𝑑̅
observa
sacarse
factor
común
forma
𝑏𝑐𝑑̅(𝑎̅
postulado
𝑎̅
𝑏𝑐𝑑̅1
𝑏𝑐𝑑̅
perdido
variable
a.
procedimiento
sistematiza
detectando
términos
canónicos
función
difieran
directo
negado
variable
saca
factor
común
eliminando
variables
ejemplo
𝑓(𝑎
∑(0
4,8,12
72
expresión
algebraica
𝑓(𝑎
𝑎̅𝑏̅𝑐̅𝑑̅
𝑎̅𝑏̅𝑐𝑑̅
𝑎̅𝑏̅𝑐̅𝑑
𝑎̅𝑏̅𝑐𝑑
ve
adyacentes
sacarse
factor
común
𝑓(𝑎
𝑎̅𝑏̅𝑑̅(𝑐
𝑐̅
𝑎̅𝑏̅𝑑(𝑐
𝑐̅
𝑎̅𝑏̅𝑑̅
𝑎̅𝑏̅𝑑
términos
quedan
canónicos
adyacentes
quedando
finalmente
𝑓(𝑎
𝑎̅𝑏̅𝑑̅
𝑎̅𝑏̅𝑑
𝑎̅𝑏̅(𝑑̅
𝑎̅𝑏̅
3.2
Método
Simplificación
Karnaugh
E.
W.
Veitch
1952
propuso
método
gráfico
identificación
términos
adyacentes
función
Posteriormente
Maurice
Karnaugh
modificó
conoce
actualmente
Consiste
mapas
aplicables
funciones
variables
método
resulta
práctico
funciones
variables
casos
método
numérico
estudia
libro
ejemplo
mapa
Karnaugh
muestra
Figura
.1
mapa
funciones
variables
números
binarios
columnas
filas
siguen
código
Gray
variables
corresponden
variables
directas
negadas
cuadro
números
decimales
signados
término
canónico
convención
indicada
anterioridad
tabla
genérica
particularizarse
función
determinada
marcando
términos
canónicos
forman
función
forma
ncillo
identificar
términos
canónicos
adyacentes
limitan
lados
ejemplo
término
canónico
14
posee
cuatros
términos
adyacentes
10
12
15
73
Fig
3.1
Mapa
Karnaugh
funciones
variables
Formar
grupo
colindantes
mapa
corresponde
sacar
factor
común
perder
variable
cambia
suponer
conveniencia
grupos
contengan
cantidad
interior
seguir
reglas
función
variables
minterms
𝑓(𝑎
∑(0
1,2,3,6,7,8,9,10,11,14,15
mapa
corresponde
indicado
Figura
3.2
grupo
-2
corresponde
sacar
factor
común
pérdida
variable
b.
grupo
3-1
pierde
variable
b.
observa
grupos
adyacentes
juntar
grupo
-1-2-3
pierden
variables
b.
razonamiento
válido
grupo
-9-10-11
pierde
variables
b.
grupos
adyacentes
formarse
grupo
-1-2-
3-8-9-10-11
queda
variable
grupo
vertical
seguido
procedimiento
Cabe
aclarar
términos
canónicos
10
11
usado
realizarse
teorema
término
canónico
repetirse
quiera
alterar
valor
función
74
Fig
3.2
Mapa
Karnaugh
función
ejemplo
función
minimizada
queda
𝑓(𝑎
𝑐̅
Cabe
aclarar
expresión
suma
función
inicial
minterms
sumatoria
visto
enunciarse
regla
formación
grupos
agrupan
cantidad
potencia
grupo
resultante
subdividirse
grupos
menores
agrupan
restantes
siguiendo
regla
pudiendo
conveniente
agrupado
anteriormente
repite
caso
funciones
variables
tablas
pequeñas
regla
formación
grupos
invita
alumno
sugerir
serías
tablas
visitar
Pr
áctico
correspondiente
resolviendo
ejercicios
propuestos
75
Compuertas
Lógicas
realización
práctica
implementación
funciones
lógicas
compuertas
lógicas
base
constructiva
electrónica
digital
funciones
lógicas
presentan
interés
práctico
Figura
3.3
muestran
compuertas
lógicas
comunes
Fig
3.3
Listado
compuertas
lógicas
comunes
figura
aparecen
compuertas
entradas
compuertas
entradas
disponibles
comercialmente
circuitos
integrados
chips
SSI
Escala
Integración
Pequeña
función
76
cantidad
compuertas
chip
suele
clasificar
CI
escalas
integración
SSI
escala
integración
pequeña
10
compuertas
CI
MSI
escala
integración
media
10
100
compuertas
CI
LSI
escala
integración
100
1000
compuertas
CI
VLSI
escala
integración
1000
compuertas
CI
hora
implementar
función
lógica
torna
importante
minimización
ejemplo
función
𝑓(𝑥
∑(2,4,5,6
implementamos
función
minimizar
btenemos
circuito
Figura
3.4
Fig
3.4
Implementación
compuertas
lógicas
función
minimizar
invita
lector
minimizar
función
comparar
resultados
obtenidos
77
Ejercitación
Ejercicio
Hallar
expresiones
canónicas
siguientes
funciones
Representar
tabla
correspondiente
ccbadcbaf
deacebaedcbaf
cbabccacbaf
Ejercicio
Simplificar
siguientes
expresiones
aplicando
teoremas
álgebra
Boole
rpqpqrrqpqppqrrqpf
cbddbadcbcbabdacabcbdcbaf
Ejercicio
Dadas
siguientes
funciones
representadas
expresión
canónica
comprensión
suma
productos
producto
sumas
obtener
representaciones
forma
producto
sumas
suma
productos
respectivamente
7,5,2
=cbaf
=
14,12,8,4,3,1
dcbaf
Ejercicio
Obtener
tabla
función
canónica
comprensión
forma
producto
sumas
función
variables
toma
valor
variables
toman
valor
Ejercicio
Obtener
tabla
función
canónica
comprensión
extensión
forma
suma
productos
producto
sumas
función
variables
toma
valor
variable
menor
peso
vale
peso
vale
78
Ejercicio
Demostrar
siguientes
igualdades
cedapcedap
baba
=
acabcaa
=
Ejercicio
leyes
Morgan
indicar
siguientes
igualdades
correcta
bccababccaab
baabccbaabcbacba
Ejercicio
Dadas
siguientes
funciones
representadas
expresión
canónica
comprensión
suma
productos
producto
sumas
obtener
representaciones
forma
producto
sumas
suma
productos
respectivamente
=
15,14,9,8,6,4
dcbaf
6,5,2,1
=cbaf
Ejercicio
Minimizar
método
karnaugh
funciones
expresadas
forma
canónica
extensión
Ejercicio
Ejercicio
10
siguientes
expresiones
corresponden
funciones
minimizadas
expresadas
forma
suma
productos
Obtener
funciones
minimizadas
expresadas
form
producto
sumas
correspondientes
bdacadcbbcddcbaf
79
acdbdcbadcbaf
cbbdbadcbaf
Ejercicio
11
sistema
digital
opera
código
BCD
EXC
desea
implementar
generador
paridad
impar
Indicar
función
simple
forma
producto
sumas
suma
productos
satisface
requisito
Ejercicio
12
registro
bits
cuyas
salidas
disponibles
exterior
almacena
información
numérica
decimal
código
BCD
Natural
desea
implementar
sistema
digital
detecte
número
contenido
registro
superior
inferior
Indicar
función
simple
forma
producto
sumas
suma
productos
satisface
requisito
80
81
CAPÍTULO
Sistemas
Combinacionales
Sistemas
Digitales
Sistemas
Combinacionales
2.1
Introducción
2.2
Sistemas
combinacionales
MSI
Casos
Comunes
Sistemas
Combinacionales
MSI
3.1
Codificadores
3.2
Decodificadores
3.3
Multiplexores
3.4
Demultiplexores
3.5
Comparadores
3.6
Detectores
Generadores
paridad
3.7
Sumadores
3.8
Unidades
aritméticas
lógicas
Ejercitación
82
Capítulo
Sistemas
Combinacionales
Sistemas
Digitales
sistema
digital
conjunto
elementos
binarios
relacionados
distinguen
tipos
variables
sistema
digital
variables
entrada
variables
salida
dependen
entrada
Funcionalmente
variables
entrada
dividen
grupos
variables
proceso
variables
control
Figura
4.1
Fig
4.1
Diagrama
sistema
digital
combinación
variables
entrada
Vector
entrada
corresponde
combinación
variables
salida
Vector
salida
sistema
combinacional
repita
conjunto
valores
variables
entrada
repetirá
salida
Figura
4.2
muestran
corres
pondencias
entradas
salidas
sistema
combinacional
vector
entrada
corresponder
salida
sistema
llama
secuencial
repite
conjunto
valores
variables
entrada
necesariamente
repetirá
salida
sistemas
secuenciales
poseer
memoria
interna
salidas
consecuencia
evolución
entradas
Figura
4.3
muestran
correspondencias
sistema
secuencial
83
Fig
4.2
Correspondencias
Sistema
Combinacional
Fig
4.3
Correspondencias
Sistema
Secuencial
Sistemas
Combinacionales
2.1
Introducción
definido
punto
concluye
Sistema
combinacional
salidas
cosa
funciones
lógicas
entradas
Figura
4.4
ve
diagrama
bloque
combinacional
entradas
salidas
escribir
𝑧𝑖
𝑓𝑖(𝑥1
𝑥2
𝑥𝑛
84
Fig
4.4
Diagrama
bloque
sistema
circuito
combinacional
deduce
diseñar
circuito
combinacional
bastará
minimizar
funciones
requeridas
finalmente
implementar
compuertas
lógicas
2.2
Circuitos
combinacionales
MSI
funciones
lógicas
complejas
diseño
basado
minimización
posterior
implementación
compuertas
lógicas
adecuado
técnicas
integración
permitido
CI
complejos
ejemplo
MSI
dispone
CI
100
puertas
bloques
funcionales
MSI
fines
específicos
aplicarse
implementación
funciones
lógicas
variables
ventajas
principales
disminución
CI
necesarios
tiempo
diseño
número
conexiones
externas
facilidad
mantenimiento
continuación
describen
brevemente
Combinacionales
MSI
comunes
Casos
Comunes
Sistemas
Combinacionales
MSI
3.1
Codificadores
Permiten
codificar
líneas
entrada
Generalmente
codifican
binario
BCD
Figura
4.5
muestra
codificador
binario
entradas
salidas
circuito
interno
tabla
codificador
supone
activa
entrada
caso
salida
calcularse
función
OR
bit
85
bit
salidas
correspondientes
entradas
activadas
independientemente
decodificadores
llaman
prioridad
Fig
4.5
Codificador
binario
entradas
salidas
tabla
Figura
4.5
remplazan
ceros
izquierda
entradas
obtiene
codificador
prioridad
entrada
prioridad
define
salida
entrada
activa
salidas
cero
estuviera
activada
entrada
D0
evitar
problema
codificadores
cuentan
salida
adicional
indica
ausencia
activación
entradas
codificadores
suelen
contar
entrada
habilitación
chip
activado
válida
tabla
chip
funciona
3.2
Decodificadores
combinacionales
poseen
entradas
salidas
orden
adecuado
salida
activa
codi
ficación
correspondiente
inyecta
entrada
Generalmente
binarios
BCD
caso
decodificador
binario
entradas
poseerá
salidas
decodificador
realiza
opuesto
codificador
Figura
4.6
muestra
decodificador
tabla
86
decodificadores
usarse
decodificar
útiles
implementar
funciones
lógicas
salidas
minterm
función
variables
Aprovechando
entrada
habilitación
suelen
aumentar
número
variables
Figura
4.7
decodificador
implementar
función
F(z
1,3,6,7
Fig
4.6
Decodificador
entradas
salidas
Fig
4.7
Decodificador
3x8
implementar
función
F.
Figura
4.7
observa
entrada
habilitación
decodificador
habilitado
cualesquiera
valores
salida
activará
Figura
4.8
mues
tra
obtener
decodificador
16
partiendo
decodificadores
87
Fig
4.8
Decodificador
4x16
decodificadores
3x8
3.3
Multiplexores
Disponen
2n
líneas
entrada
canales
línea
salida
líneas
selección
función
líneas
selección
determina
entrada
aparece
salida
Figura
4.9
indica
función
multiplexor
Figura
4.10
circuito
multiplexor
canales
Fig
4.9
Funcionamiento
multiplexor
multiplexores
multiplexar
usarse
eficazmente
implementar
funciones
lógicas
Supongamos
función
implementar
F(a
0,1,5,6,7
88
Fig
4.10
Multiplexor
canales
implementar
función
variables
necesita
multiplexor
entradas
selección
variables
ejemplo
conectan
líneas
selección
tercer
variable
conecta
canales
altura
conveniente
contar
tabla
función
ejemplo
presentada
Tabla
4.1
tabla
función
construye
tabla
auxiliar
presentada
Tabla
4.2
tabla
auxiliar
obtiene
verificando
vale
función
combinaciones
permite
determinar
valores
conectar
canales
multiplexor
Figura
4.11
Tabla
4.1
Tabla
función
F.
89
Tabla
4.2
Tabla
auxiliar
procedimiento
generalizarse
variables
conectan
líneas
selección
multiplexor
restante
canales
tabla
auxiliar
multiplexores
canales
combinarse
multiplexores
ejemplo
Figura
4.12
muestra
multiplexor
32
canales
16
canales
canales
entrada
habilitación
activa
salida
multiplexor
independientemente
valor
entradas
Fig
4.11
Implementación
función
usando
multiplexor
3.4
Demultiplexores
Cumplen
función
opuesta
multiplexores
entrada
salidas
entradas
selección
salida
seleccionada
valor
entrada
Figura
4.13
muestra
demultiplexor
canales
salida
circuito
demultiplexor
coincidente
decodificador
posea
entrada
habilitación
razón
encuentran
90
demultiplexores
específicos
Figura
4.14
indica
obtener
demultiplexor
canales
decodificador
entrada
habilitación
Fig
4.12
Multiplexor
32
canales
usando
multiplexores
16
canales
Fig
4.13
Demultiplexor
canales
salida
usual
encontrar
familias
lógicas
multiplexores
demultiplexores
circuitos
cumplir
ambas
funciones
91
Fig
4.14
Demultiplexor
canales
usando
decodificador
2x4
3.5
Comparadores
Realizan
comparación
números
binarios
bits
circuito
básico
realiza
comparación
bit
indica
Figura
4.15
Fig
4.15
Circuito
básico
comparación
bit
circuito
responde
tabla
Tabla
4.3
Comparadores
bits
diseñan
Comparadores
poseen
entradas
permite
comparadores
elevado
número
bits
partiendo
comparadores
menores
ejemplo
Figu
ra
4.16
muestra
comparador
bits
partiendo
comparadores
bits
92
Tabla
4.3
Tabla
comparador
Fig
4.16
Comparador
bits
usando
comparadores
bits
3.6
Detectores
Generadores
paridad
CI
capaces
generar
detectar
paridad
conjunto
bits
Figura
4.17
muestra
generador
detector
paridad
bits
circuito
Fig
4.17
Generador
Detector
paridad
bits
93
señales
control
TO
paridad
impar
paridad
par
permiten
seleccionar
paridad
recomienda
alumno
obtener
tabla
circuito
verificar
funcionamiento
3.7
Sumadores
CI
realizan
suma
aritmética
númer
bits
sumadores
disponibles
escala
integración
MSI
estudiaremos
suma
resta
binaria
Suma
binaria
indicar
suma
aritmética
utilizaremos
símbolo
diferenciarlo
usado
suma
lógica
sumar
bits
implementar
circuito
Figura
4.18
llamado
Semisumador
cuya
tabla
observa
Tabla
4.4
Fig
4.18
Semisumador
sumador
parcial
Tabla
4.4
Tabla
semisumador
Supóngase
desea
sumar
números
binarios
bits
94
c4
c3
c2
c1
c0
a3
a2
a1
a0
b3
b2
b1
b0
s3
s2
s1
s0
observa
necesarios
circuitos
columna
capaz
sumar
bits
ai
bi
ci
implementa
circuito
Figura
4.19
llamado
Sumador
cuya
tabla
presenta
Tabla
4.5
Fig
4.19
Sumador
interconexión
Sumadores
Totales
permite
obtener
Cuádruple
Sumador
capaz
suma
aritmética
números
binarios
bits
Figura
4.20
Resta
binaria
recordarse
convenios
representación
números
negativos
binario
implementar
circuito
resta
operación
verá
restar
números
realizando
suma
complemento
95
Tabla
4.5
Tabla
sumador
Fig
4.20
Cuádruple
sumador
caso
convenio
complemento
números
binarios
signados
convenio
complemento
Véase
desarrollo
C2(B
2n
2n
expresión
observa
resultado
obtenido
difiere
buscado
valor
n.
resultado
interpretarse
acarreo
despreciar
paréntesis
resulta
positivo
caso
parént
esis
resulte
negativo
resultado
expresado
complemento
96
caso
complemento
números
binarios
signados
convenio
complemento
desarrollo
caso
C1(B
2n
2n
expresión
observa
resultado
obtenido
difiere
buscado
valor
error
defecto
valor
resultado
interpretarse
acarreo
sumarse
resultado
parénte
sis
resulta
positivo
caso
paréntesis
resulte
negativo
resultado
expresado
complemento
conveniente
alumno
verifique
párrafo
par
casos
Figura
4.21
muestra
Sumador
Restador
complemento
bits
Cuádruple
sumador
Figura
4.22
muestra
Sumador
Restador
bits
complemento
Cuádruple
sumador
figuras
aparece
circuito
detector
rebasamiento
salida
rebasado
sumador
cero
caso
contrario
Nótese
entradas
circuito
bits
signo
números
entrada
resultado
Fig
4.21
Sumador
Restador
bits
complemento
97
Fig
4.22
Sumador
Restador
bits
complemento
3.8
Unidades
aritméticas
lógicas
bloques
funcionales
escala
MSI
permiten
operaciones
lógicas
aritméticas
números
binarios
generalmente
bits
operación
selecciona
colocando
valores
adecuados
líneas
selección
Figura
4.23
muestra
ALU
típica
bits
bloques
funci
onales
conectarse
cascada
operaciones
números
número
bits
Fig
4.23
ALU
bits
98
Ejercitación
Ejercicio
Diseñe
sistema
combinacional
accione
motor
limpiaparabrisas
sabiendo
funciona
llave
general
auto
contacto
activa
control
limpiaparabrisas
desactiva
motor
funcionando
escobillas
lleguen
costado
izquierdo
Obtener
solución
imple
implementarla
compuertas
correspondientes
Ejercicio
diseño
implementación
llaves
luz
colocadas
pie
cima
escalera
prender
luz
llave
abajo
apagarla
llave
viceversa
Ejercicio
Utilizar
decodificadores
implementar
siguientes
funciones
10,8,6,0
=dcbaf
13,8,7,5,1
=dcbaf
Ejercicio
diseño
comparador
números
bits
sistema
salidas
menor
diseño
compuertas
NAND
Ejercicio
Diseñar
sistema
combinacional
excitación
variables
entrada
genere
salidas
activen
display
BCD
segmentos
representación
dígitos
decimales
Considerar
combinaciones
entrada
corresponden
código
BCD
8421
restantes
16
posibles
letras
alfabeto
f.
Obtener
solución
simple
implementarla
compuertas
NOR
99
Ejercicio
registro
salidas
paralelo
A0
-A3
contiene
carácter
codificado
BCD
5421
generador
paridad
agregar
correspondiente
bit
Ap
permita
elegir
paridad
par
impar
llave
selectora
Utilizar
decodificadores
multiplexores
Ejercicio
diagrama
figura
indica
sistema
arranque
motor
eléctrico
variables
binarias
control
permitirán
arranque
motor
xiste
paridad
impar
casos
especiales
llamados
emergencia
permitirán
arranque
ocurren
variables
cero
simultáneamente
compuertas
Ejercicio
Construir
multiplexor
can
ales
multiplexores
canales
Ejercicio
detector
desbordamiento
aritmético
intervalo
valores
representar
números
bits
sistema
numérico
complemento
-2n-1
N<=
2n-1
100
101
CAPÍTULO
Sistemas
Secuenciales
Visión
General
Sistemas
Secuenciales
1.1
Introducción
1.2
caso
estudio
Biestables
2.1
Introducción
2.2
Biestables
asíncronos
2.3
Biestables
síncronos
Tipos
Biestables
3.1
Introducción
3.2
Biestables
JK
3.3
Biestables
3.4
Biestables
Aplicaciones
Biestables
4.1
Registros
desplazamiento
4.2
Transferencias
registros
4.3
Contadores
4.4
Multiplicación
división
binaria
Ejercitación
102
Capítulo
Sistemas
Secuenciales
Visión
General
Sistemas
Secuenciales
1.1
Introducción
Sistemas
Digitales
cuyas
salidas
dependen
entradas
momento
evolucionado
anteriormente
Sistema
Secuencial
capaz
memorizar
mencionada
evolución
decirse
qu
salidas
Sistema
Secuencial
dependen
entradas
concepto
equivalente
permite
plantear
esquema
general
Sistema
Secuencial
partiendo
Sistema
Combinacional
realimentado
entradas
est
combinacional
formadas
variables
independientes
salidas
mencionado
observarse
Figura
5.1
observa
tipo
variables
llamadas
variables
internas
bloque
indica
circuito
capaz
mantener
entradas
valor
tiempo
lector
deducir
sistema
evolucionará
distintos
internos
arribar
estable
Efectivamente
valor
variables
entrada
dete
rminado
salidas
combinacional
adoptarán
realimentan
salidas
combinacional
cambiarán
nuevamente
proceso
llamado
evolución
automática
sistema
repetirá
valor
variables
internas
coincida
estable
variables
internas
deja
pasar
izquierda
derecha
momentos
obtiene
Sistema
Secuencial
Síncrono
muestra
Figura
5.2
103
Fig
5.1
Sistema
Secuencial
Asíncrono
Fig
5.2
Sistema
Secuencial
Síncrono
104
diseño
básico
sistemas
consiste
plantear
tabla
concepto
tiempo
función
lógica
depende
variables
independientes
depende
ejemplo
𝑓(𝑎
observa
función
indicada
aparece
miembros
expresión
carezca
sentido
interpretarse
𝑝𝑡+1
𝑓(𝑎
𝑝𝑡
subíndice
t+1
interpreta
valor
adoptará
conjunto
valores
tenían
variables
depende
instante
t.
1.2
caso
estudio
aclarar
conceptos
anteriores
plantea
resolución
problema
Considere
construcción
Sistema
Digital
alarma
domiciliaria
posea
variables
entrada
Variable
entrada
sensor
ejemplo
proviene
sensor
puerta
Variable
entrada
inicialización
variable
salida
Variable
salida
sirena
sistema
deberá
funcionar
variable
tome
valor
activará
salida
activada
permanecerá
condición
salida
quedará
activada
variable
pase
variable
toma
valor
desactivará
salida
desactivada
permanecerá
condición
salida
quedará
desactivada
variable
pase
valer
simultáneamente
propone
tabla
Tabla
5.1
concepto
tiempo
explicado
105
Tabla
5.1
Tabla
sistema
secuencial
ejemplo
entradas
combinacional
án
variables
izquierda
indican
produce
combinación
variables
entrada
importa
valor
adopte
t+1
implementar
circuito
realiza
mapa
Karnaugh
función
Fi
gura
5.3
presenta
caso
función
forma
minterms
Figura
5.4
caso
maxterms
t+1
3
t+1
3
corresponden
minterms
maxterms
decidido
incluirlos
expresiones
obtenerse
minimización
óptima
Fig
5.3
Función

106
Fig
5.4
Función

Figura
5.3
𝑄𝑡+1
𝑄𝑡
𝑅̅
𝑄𝑡𝑅̅̿̿̿̿̿̿̿̿̿̿
resulta
circuito
Figura
5.5
Fig
5.5
Circuito
Biestable
SR
NAND
Figura
5.4
deducirse
circuito
figura
5.6
formado
compuertas
NOR
realimentadas
107
Fig
5.6
Circuito
Biestable
SR
NOR
conceptos
útiles
compuertas
lógicas
reales
diferencian
ideales
Poseen
tiempo
retardo
señal
lógica
tarda
tiempo
nulo
atravesar
compuerta
Disipan
calor
característica
especial
importancia
Sistemas
Secuenciales
Efectivamente
figura
5.1
aparecen
elementos
necesarios
secuencial
funcione
elementos
estuvieran
línea
lógica
debería
Biestables
Figuras
5.5
5.6
elementos
aparecen
razón
funcionan
construidos
compuertas
reales
retardo
cumple
función
elementos
M.
II
señal
lógica
indicar
siguientes
partes
Figura
5.7
108
Fig
5.7
Componentes
señal
lógica
Biestables
2.1
Introducción
vio
problema
Biestables
secuenciales
poseen
estables
variables
internas
adoptar
caso
permanecerán
indefinidamente
cambien
variables
entrada
secuenciales
simples
poseen
variable
interna
Biestables
representan
circuitos
base
construcción
secuenciales
complejos
clasificar
Biestables
BIESTABLE
ASÍNCRONOS
SÍNCRONOS
ACTIVADOS
NIVEL
MAESTRO
ESCLAVO
ACTIVADOS
FLANCOS
109
2.2
Biestables
asíncronos
entradas
actúan
directamente
biestable
ejemplos
biestables
vistos
problema
alarma
domiciliaria
Fig
5.5
Fig
5.6
decirse
tabla
Tabla
5.1
válida
momento
2.3
Biestables
síncronos
Biestables
cuentan
entrada
adicional
entrada
sincronismo
reloj
actúa
señal
Biestables
síncronos
dividen
activados
nivel
maestro
esclavo
activados
flancos
Biestables
Síncronos
activados
nivel
biestables
tabla
válida
presencia
nivel
activo
entrada
sincronismo
figura
5.8
muestra
biestable
SR
síncrono
nivel
observa
RS
asíncrono
agrega
circuito
disparo
Figura
5.8
muestra
SR
activado
nivel
Figura
5.8
SR
activado
nivel
Fig
5.8
Biestable
SR
síncrono
nivel
Biestables
síncronos
maestro
esclavo
110
formados
biestables
activados
nivel
Figura
5.9
muestra
biestable
SR
maestro
esclavo
observa
Ck
funcionando
biestable
maestro
momento
Ck
información
maestro
pasa
esclavo
biestable
actúa
estuviera
activado
flanco
bajada
señal
sincronismo
obstante
diferencia
activados
flancos
ntradas
actúan
maestro
tiempo
Ck
Fig
5.9
Biestable
SR
maestro
esclavo
Biestables
activados
flancos
Biestables
entradas
actúan
presencia
flanco
subida
bajada
entrada
sincron
ismo
tabla
válida
instantes
Figura
5.10
muestra
SR
activado
flanco
SR
síncrono
nivel
agrega
circuito
detecto
flancos
Figura
5.11
muestra
símbolo
utilizado
tipo
biestables
Figura
5.11
muestra
SR
sincronizado
flanco
subida
Figura
5.11
muestra
SR
sincronizado
flanco
bajada
111
Fig
5.10
Biestable
SR
activado
flanco
Fig
5.11
Representación
biestables
activados
flanco
Biestables
SR
tabla
Dependiendo
clase
SR
tabla
válida
nivel
activo
flanco
activo
corresponda
forma
reducida
indicar
tabla
SR
indica
Tabla
5.2
Tabla
5.2
Tabla
biestable
SR
112
Tipos
Biestables
3.1
Introducción
tipos
Biestables
SR
biestable
JK
biestable
biestable
D.
encuentran
disponibles
clases
asíncronos
síncronos
nivel
etc.
tablas
indicadas
Tabla
5.3
respectivamente
Tabla
5.3
Biestables
JK
D.
3.2
Biestables
JK
Tabla
5.3
t+1
Q’t
salida
adopta
valor
opuesto
razón
aplicación
práctica
biestables
JK
síncronos
activados
flancos
Figuras
5.12
5.13
muestran
biestables
JK
Fig
5.12
Biestable
JK
Maestro
Esclavo
SR
nivel
113
Fig
5.13
Biestable
JK
flanco
ascendente
SR
flanco
3.3
Biestables
disponibles
comercialmente
obtienen
biestable
JK
T.
obtenerse
biestable
flancos
3.4
Biestables
Tabla
5.3
muestra
tabla
biestable
concluye
carece
aplicación
biestable
asíncrono
biestables
disponen
comercialmente
síncronos
nivel
Latch
Maestro
Esclavo
flanco
obtenerse
SR
síncrono
Figura
5.14
JK
Figura
5.14
sincronismo
Figura
5.14
usarse
SR
nivel
maestro–esclavo
flanco
resultará
biestable
nivel
maestro–esclavo
flanco
respectivamente
Fig
5.14
supone
JK
maestro-esclavo
flanco
114
Fig
5.14
Biestable
implementado
biestables
SR
JK
Aplicaciones
Biestables
biestables
secuenciales
básicos
capaces
memorizar
bit
infinidad
aplicaciones
principales
encuentran
Memorias
electrónicas
desarrolladas
Capítulo
Registros
Contadores
4.1
Registros
desplazamiento
sistema
secuencial
síncrono
almacena
bits
información
formato
información
tipos
serie
bits
transfieren
línea
paralelo
transfieren
simultáneament
registros
clasificarse
Registros
Desplazamiento
Entrada
serie
salida
serie
Entrada
serie
salida
paralela
Entrada
paralela
salida
serie
II
Registros
propiamente
dichos
Registros
Entrada
paralela
salida
paralela
115
Registros
desplazamiento
serie
serie
considerará
registros
cantidad
bits
almacenados
principalmente
caso
serie
serie
Figuras
5.15
5.16
observan
registros
bits
Fig
5.15
Registro
desplazamiento
bits
serie
serie
Fig
5.16
Registro
desplazamiento
paralelo
serie
bits
116
Registros
propiamente
dichos
Consisten
conjunto
biestables
sincronizados
nivel
flancos
cuyas
entradas
sincronismo
encuentran
unidas
extensivo
sistema
digital
Figura
5.17
muestra
registro
bits
cuyas
salidas
provistas
inversores
tri-estado
conectarse
bus
Fig
5.17
Registro
paralelo
paralelo
bits
4.2
Transferencias
registros
actividad
Sistema
Digital
transferencia
contenidos
distintos
registros
Guía
Didáctica
presenta
computadora
elemental
funcionamiento
basa
transferencia
registros
Lenguajes
Programación
Hardware
permiten
diseñar
sistemas
digitales
basándose
transferencias
registros
común
estructuras
117
aparece
bus
conjunto
líneas
lógicas
transporta
información
encuentran
colgados
registros
registros
actuar
elementos
interconexión
bus
distintas
unidades
funcionales
registros
almacenamiento
tempo
rario
información
exclusivamente
Figura
5.18
presenta
forma
interconexión
registros
llamada
BUS
COMÚN
registros
bits
entradas
registros
conectadas
Unidad
Funcional
ALU
ejemplo
funcionando
caso
registro
salida
salidas
registros
conectadas
Unidad
Funcional
Unidad
Memoria
ejemplo
funcionando
cas
registro
entrada
Figura
indica
deberían
señales
control
cabo
transferencia
registros
señales
control
generadas
general
Unidad
Control
Bus
eficie
ncia
depende
medida
prestaciones
velocidad
procesamiento
Sistema
Digital
forma
construir
sistema
interconexión
registros
usando
registros
salida
tri
-estado
indicado
Figura
5.17
ejemplo
apreciarse
Figura
5.19
figura
aprecian
registros
salida
tri
-estado
registro
entradas
salidas
información
poseen
entradas
control
Enable
Control
salida
manejadas
Unidad
Control
Bus
Unidades
Funcionales
Supóngase
ejemplo
Unidad
Funcional
procesado
información
necesario
transferirla
Registro
finalmente
procesada
Unidad
Funcional
II
jemplo
Unidad
Control
Bus
deberá
118
Fig
5.18
Interconexión
registros
bus
común
Fig
5.19
Interconexión
registros
usando
registros
tri-estado
119
Recibir
Unidad
Funcional
señal
listo
Unidad
Funcional
dispone
información
carga
Registro
Enable
envía
señal
listo
Unidad
Control
Bus
Activar
señal
Salida
Control
vuelca
bus
contenido
Registro
A.
Activar
señal
Enable
cargar
Registro
información
presente
Bus
Desactivar
señales
Salida
Control
Enable
C.
Indicar
Unidad
Funcional
II
Registro
información
procesar
Unidad
Funcional
II
recibir
señal
Unidad
Control
Bus
lee
contenido
Registro
señal
Salida
Control
C.
visto
intuir
importancia
Bus
Sistemas
Digitales
Capítulo
desarrolla
Sistema
Dig
ital
basado
estructura
Von
Newman
Bus
unidad
4.3
Contadores
sistema
secuencial
formado
biestables
lógica
combinacional
capaz
almacenar
binario
código
cantidad
impu
lsos
recibidos
entrada
aplicarse
divisor
frecuencia
control
tiempos
generador
direcciones
sistemas
memoria
secuenciador
unidades
control
etc.
Contadores
Asíncronos
secuenciales
síncronos
formados
conjunto
biestables
síncronos
flancos
denominación
asíncrono
refiere
tipo
secuencial
entradas
sincronismo
biestables
unidas
general
salida
biestable
sirve
entrada
sincronismo
Figura
5.20
muestra
contador
binario
bits
asíncrono
obsérvese
salidas
biestables
conectan
entradas
sincronismo
verse
diagrama
tiempo
contador
120
Fig
5.20
Contador
asíncrono
bits
Diagrama
circuital
Diagrama
tiempo
Contadores
Síncronos
similares
anteriores
comparten
señal
reloj
rápidos
complejos
asíncronos
Figura
5.21
muestra
contador
binario
natural
síncrono
bits
Nótese
diferencia
Figura
5.20
contador
entradas
sincronismo
biestables
unidas
complejo
puesto
compuertas
Fig
5.21
Contador
binario
natural
bits
síncrono
diseño
contadores
realiza
planteando
tabla
temporal
obtener
funciones
correspondientes
minimizan
teniendo
biestable
elegido
biestables
utilizados
121
contadores
registros
desplazamiento
biestables
síncrono
maestro
esclavo
activados
flancos
4.4
Multiplicación
división
binaria
multiplicación
división
binaria
implican
circuitos
naturaleza
combinacional
secuencial
momento
adecuado
mencionar
principales
características
4.4.1
Multiplicación
binaria
multiplicación
sucesión
sumas
multiplicar
números
MULTIPLICANDO
multiplicador
obtener
PRODUCTO
deberíamos
sumar
MULTIPLICADOR
tantas
indique
multiplicando
Veremos
ALU
procesador
incluye
sumador
tonces
multiplicación
resolver
software
programa
procese
sumas
mencionadas
solución
requiere
tiempo
producto
variable
alto
resolver
problema
elevado
tiempo
producto
dependiente
valor
factores
implementar
multiplicador
hardware
caso
ALU
incluye
hardware
circuito
multiplica
alternativas
construir
multiplicador
hardware
Multiplicador
paralelo
concurrente
Multiplicador
serie
secuencial
Multiplicador
paralelo
Consiste
aplicar
algoritmo
multiplicación
conocemos
escuela
primaria
ejemplo
números
binarios
bits
1001
0110
0000
1001
1001
0000
0110110
122
hacerse
observaciones
resultado
bits
pretendemos
producto
bits
deberemos
chequear
rebasamiento
multiplicamos
números
bits
producto
superar
máxima
cantidad
representable
bits
consideran
números
signo
datos
convertir
números
positivos
tratar
bit
signo
separadamente
multiplicar
valores
absolutos
Finalmente
deberá
expresar
resultado
convenio
representación
números
negativos
utilizado
circuito
Figura
5.22
ejemplifica
hardware
multiplicador
paralelo
bits
detector
rebasamiento
overflow
suma
comienza
inyectan
circuito
MULTIPLICANDO
M3M2M1M0
multiplicador
m3m2m1m0
conjunto
compuertas
AND
realizan
paralelo
productos
parciales
sumarán
sumadores
bits
conectados
serie
compuerta
OR
genera
overflow
tiempo
producto
TPp
circuito
𝑇𝑃𝑝
𝑇𝑎𝑛𝑑
3𝑇𝑠𝑢𝑚𝑎𝑑𝑜𝑟
Tand
tiempo
retardo
compuerta
AND
Tsumador
tiempo
retardo
SUMADOR
BITS
123
Fig
5.22
Multiplicador
paralelo
bits
generación
overflow
tomamos
unidad
retardo
retardo
AND
llamamos
𝑇𝑃𝑝
𝑇𝑎𝑛𝑑
3.4𝑇𝑎𝑛𝑑
Tsumador
4Tand
caso
general
multiplicador
bits
tiempo
producto
aum
enta
número
bits
aumenta
significativamente
complejidad
hardware
ejemplo
consideremos
multiplicadores
32
bits
caso
necesitan
31
sumadores
32
bits
lograr
tiempos
suma
supuestos
ejempl
𝑇𝑃𝑝
𝑇𝑎𝑛𝑑
4(𝑛
1)𝑇𝑎𝑛𝑑
4𝑛
3)𝑇𝑎𝑛𝑑
124
bits
requieren
generadores
acarreo
anticipado
32
bits
complica
hardware
Multiplicador
serie
secuencial
aproximación
simplifica
hardware
mejora
promedio
TP
número
bits
elevado
utiliza
único
sumador
cambian
adecuadamente
entradas
desplazamiento
funcionamiento
implica
secuencia
señales
control
motivo
llama
multiplicador
secuencial
multiplicador
ALU
procesador
secuencia
señales
control
generarse
circuito
control
especial
Unidad
Control
Cableada
Capítulo
llama
multiplicación
serie
hardware
microprograma
Unidad
Control
Microprogramada
Capítulo
llama
multiplicación
firmware
Figura
5.23
observa
multiplicador
serie
bits
Fig
5.23
Multiplicador
serie
bits
generador
overflow
RD1
RD2
registros
desplazamiento
paralelo-serie
bits
cuyo
contenido
aparece
salidas
inferiores
diagrama
señales
controlan
RD
125
borra
RD
CP1
carga
RD1
CP2
carga
RD2
Ck
desplaza
bit
derecha
contenidos
RD1
RD2
continuación
describe
funcionamiento
multiplicador
borrados
RD
suministra
MULTIPLICANDO
multiplicador
carga
RD2
señal
CP2
dispara
secuencia
BIT
espera
SUMADOR
BITS
resultado
carga
RD1
señal
CP1
BIT
pasamos
desplaza
derecha
contenidos
RD1
RD2
señal
Ck
Terminar
repetido
saltar
tiempo
multiplicación
TPs
circuito
𝑇𝑃𝑠
𝑇𝑐𝑝1
𝑇𝑠𝑢𝑚𝑎𝑑𝑜𝑟
𝑇𝑑
Tcp1
tiempo
carga
RD1
Tsumador
tiempo
suma
SUMADOR
BITS
Td
tiempo
necesario
desplazar
contenidos
RD1
RD2
aproximamos
𝑇𝑐𝑝1
𝑇𝑑
𝑇𝑠𝑢𝑚𝑎𝑑𝑜𝑟
4𝑇
𝑇𝑃𝑠
2𝑇
4𝑇)4
caso
multiplicador
bits
tiempo
producto
multiplicador
1s
𝑇𝑃𝑠
6𝑛𝑇
multiplicador
0s
𝑇𝑃𝑠
𝑛𝑇
Finalmente
consideramos
promedio
números
cantidad
1s
0s
tiempo
multiplicación
media
126
aumenta
número
bits
complejidad
hardware
aumenta
significativamente
caso
multiplicador
paralelo
ejemplo
construir
multiplicador
serie
32
bits
necesario
único
sumador
32
bits
registros
desplazamiento
16
bits
Tabla
5.4
comparan
tiempos
producto
aproximados
alternativas
planteadas
Tabla
5.4
Comparativa
aproximada
tiempos
producto
ve
multiplicadores
serie
rápidos
complejos
multiplicadores
paralelo
válido
comentar
multiplicador
paralelo
paralelizamos
acarreos
salida
sumadores
parciales
componen
lograríamos
tiempo
producto
independiente
número
bits
factor
TPp
estaría
orden
𝑇𝑃𝑝
5𝑇
𝑇𝑔𝑎
Tga
tiempo
propagación
generador
acarreo
anticipado
bits
tiempo
menor
vistos
anteriormente
resulta
hardware
complejo
𝑇𝑃𝑠
3,5𝑛𝑇
127
4.4.2
División
binaria
DIVISIÓN
sucesión
RESTAS
DIVIDIR
números
DIVIDENDO
divisor
obtener
COCIENTE
RESTO
deberíamos
restar
DIVIDENDO
divisor
tantas
obtener
RESTO
menor
DIVISOR
dijimos
anteriormente
ALU
procesador
incluye
sumador
división
resolver
software
programa
solución
consume
tiempo
división
variable
alto
resolver
problema
ALUs
incluyen
hardware
circuito
implementa
división
caso
aplica
algoritmo
división
aprende
tempranamente
escuela
ejemplo
división
entera
números
binarios
signo
bits
1101
0010
10
0110
10
10
01
algoritmo
describirse
Tomamos
MSB
DIVIDENDO
comparamos
divisor
menor
divisor
colocamos
COCIENTE
representará
MSB
COCIENTE
tomamos
MSB
DIVIDENDO
comparamos
nuevamente
menor
divisor
colocamos
COCIENTE
Segui
mos
menor
caso
restamos
bits
considerados
DIVIDENDO
divisor
colocamos
COCIENTE
Seguimos
procedimiento
agotar
bits
DIVIDENDO
resultado
resta
división
resolver
hardware
división
construirse
divisores
paralelos
concurrentes
divisores
serie
secuenciales
resultan
circuitos
complejidad
cambio
divisores
serie
resultan
circuitos
relativamente
simples
128
Figura
5.24
observa
ejemplo
divisor
serie
bits
Fig
5.24
Circuito
divisor
serie
bits
RD1
RD2
registros
desplazamiento
paralelo
serie
disponibilidad
contenidos
comparador
compara
RESTO
contenido
RD1
divisor
salida
compuerta
OR
indica
RESTO
divisor
generar
cociente
biestable
S-R
determinar
realiza
resta
operan
resultado
identificados
forma
DIVIDENDO
D3D2D2D0
entrada
Divisor
d3d2d1d0
entrada
COCIENTE
C3C2C1C0
salida
129
RESTO
R3R2R1R0
salida
funcionamiento
circuito
describir
secuencia
repetirse
tantas
bits
tengan
números
inicializa
RD1
RD2
biestable
SR
desplaza
bit
izquierda
RD1
RD2
Ck1
Ck2=1
repetición
desplazar
RD1
Ck1
terminar
contenido
RD2
COCIENTE
contenido
RD1
RESTO
RD1
divisor
resta
carga
resultado
RD1
Ck1
RD1
menor
divisor
faltan
repeticiones
saltar
tabla
5.5
presenta
verificación
funcionamiento
1101
0010
tiempo
división
circuito
similar
tiempo
producto
TPs
3,5nT
Comparando
Figuras
5.23
5.24
ve
circuitos
Multiplicador
Divisor
similares
disponemos
sumador
restador
registros
desplazam
iento
reversibles
desplacen
izquierda
derecha
señal
control
hardware
multiplicar
dividir
caso
multiplicador
serie
divisor
serie
ALU
controlarse
señales
control
generadas
hardware
Unidad
Control
cableada
caso
ALU
división
hardware
señales
control
generadas
microprograma
Unidad
Control
microprogramada
ALU
división
firmware
130
Tabla
5.5
Secuencia
control
circuito
divisor
Figura
5.24
Ejercitación
Ejercicio
tabla
biestable
131
Ejercicio
Explicar
significado
cuadro
brevedad
sintetiza
utilización
biestable
J-K
R-S
D.
Ejercicio
Deducir
flip
-flop
síncrono
asíncrono
funcionamiento
Ejercicio
Determinar
código
usando
registro
desplazamiento
biestables
-K.
Suponer
inicialmente
QO
Ql
Q2
Q3=0
132
Ejercicio
diagramas
bloque
registros
desplazamiento
entrada
serie
salida
serie
entrada
serie
salida
paralelo
entrada
paralelo
salida
serie
entra-da
paralelo
salida
paralelo
Ejercicio
biestable
SR
obtener
JK
biestable
JK
obtener
biestable
T.
biestable
SR
obtener
biestable
D.
Ejercicio
Determinar
Sistema
combinacional
necesario
indicar
contadores
binarios
alcanzado
valor
equivalente
decimal
52
inicie
conteo
nuevamente
133
CAPÍTULO
Memorias
Electrónicas
Visión
General
1.1
Introducción
1.2
Clasificación
memorias
electrónicas
Memorias
Acceso
Aleatorio
RAM
2.1
Definición
2.2
Memorias
RAM
lectura
escritura
2.3
Memorias
RAM
lectura
ROM
2.4
Extensión
longitud
palabra
capacidad
Memorias
Acceso
Serie
3.1
Definición
3.2
Registros
desplazamiento
3.3
Memorias
FIFO
3.4
Memorias
LIFO
Ejercitación
134
Capítulo
Memorias
Electrónicas
Visión
General
1.1
Introducción
memorias
dispositivos
almacenamiento
datos
instrucciones
computadora
Llamamos
sistema
memoria
conjunto
dispositivos
algoritmos
hardware
software
control
Diversos
dispositivos
capaces
almacenar
información
deseable
procesador
tuviese
acceso
inmediato
ininterrumpido
memoria
lograr
velocidad
procesamiento
Desafortunadamente
memorias
velocidades
similares
procesador
caras
razón
información
almacenada
distribuye
forma
compleja
variedad
memorias
características
físicas
distintas
clasificación
funcional
memorias
Memoria
interna
Constituida
registros
internos
CPU
Unidad
Central
Procesos
Procesador
tipo
memoria
estudia
Capítulo
caracteriza
alta
velocidad
Memoria
central
principal
Almacena
programas
datos
relativamente
rápida
accedida
directamente
CPU
bus
tipo
memoria
Guía
Didáctica
Memoria
secundaria
almacenamiento
programas
sistema
archivos
capacidad
anteriores
lenta
acceso
CPU
indirecto
principales
tecnologías
magnética
óptica
definir
parámetros
generales
aplicables
memorias
Unidad
almacenamiento
Bit
135
Capacidad
almacenamiento
Cantidad
bits
almacenarse
unidad
almacenamiento
bit
byte
encontramos
capacidades
Kb
1Kb
1024
bytes
Mb
1Mb
1024
Kb
Gb
1Gb
1024
Mb
etc
memorias
consideran
organiz
adas
palabras
palabra
conjunto
bits
accede
simultáneamente
Tiempo
acceso
ta
tarda
leer
escribir
palabra
memoria
momento
direcciona
velocidad
acceso
ba=1
ta
mide
palabras
Figura
6.1
Tipo
acceso
Acceso
aleatorio
tiempo
acceso
similar
posición
Acceso
serie
tiempo
acceso
depende
posición
ocupa
palabra
memoria
Tiempo
ciclo
tc
Indica
mínimo
tiempo
accesos
sucesivos
memoria
tiempo
tc
tiempo
ta
ancho
banda
memoria
define
inversa
tc
indicativo
cantidad
palabras
procesables
unidad
tiempo
físico
Electrónicas
construidas
semiconductores
Magnéticas
basadas
fenómeno
histéresis
materiales
ferromagnéticos
Ópticas
utilizan
tecnología
láser
Estabilidad
Volatilidad
contenido
memoria
pierde
suspende
alimentación
eléctrica
Almacenamiento
dinámico
bit
almacena
carga
capacidad
parásita
transistor
MOS
información
pierde
capacitor
descarga
necesario
refresco
periódic
restaurar
contenido
deteriore
Lectura
destructiva
DRO
efectuar
lectura
pierde
información
proceso
acompañarse
restauración
Tabla
6.1
136
Fig
6.1
Tiempo
acceso
palabras
seg
función
costo
/bit
Tabla
6.1
Clasificación
memorias
usando
principales
características
137
1.2
Clasificación
memorias
electrónicas
memorias
electrónicas
considerarse
sistema
digital
mixto
combinacional
secuencial
capaz
almacenar
información
binaria
acceder
introducir
extraer
información
parcialmente
momento
función
tipo
acceso
memorias
clasifican
Memorias
acceso
aleatorio
RAM
ta
similar
posición
subdividen
Memorias
lectura
escritura
llamadas
activas
caracterizan
ta
lectura
escritura
similares
presentan
volatilidad
pierden
contenido
dejan
alimentadas
subdividen
Memorias
estáticas
SRAM
Memoria
dinámicas
DRAM
Memorias
lectura
ROM
llamadas
pasivas
caracterizan
ta
escritura
lectura
presentan
volatilidad
pierden
contenido
alimentación
subdividen
ROM
graban
fabricante
PROM
graban
usuario
EPROM
graban
usuario
borrado
realiza
luz
ultravioleta
EEPROM
graban
usuario
borrado
realiza
eléctricamente
posición
posición
FLASH
graban
usuario
borrado
realiza
eléctricamente
Memorias
acceso
serie
tiempo
acceso
ta
depende
posición
palabra
memoria
memorias
lectura
escritura
subdividen
Registros
desplazamiento
Memorias
pila
LIFO
escritura
lectura
Memorias
cola
FIFO
escritura
lectura
138
Memorias
Acceso
Aleatorio
RAM
2.1
Definición
60
aparecen
circuitos
integrados
permiten
construir
memorias
alta
capacidad
Actualmente
encuentran
memorias
semiconductoras
orden
Gb
considerar
memoria
conjunto
posiciones
formada
celdas
células
elementales
esquema
general
memoria
acceso
aleatorio
verse
Figura
6.2
diagrama
bloque
Figura
6.3
Fig
6.2
Esquema
general
memoria
RAM
tipo
celda
depend
clase
memoria
trate
tecnología
utilizada
RAM
lectura
escritura
celdas
consisten
biestables
asíncronos
estudiados
Capítulo
RAM
lectura
ROM
consisten
diodos
transistores
139
Fig
6.3
Diagrama
bloques
memoria
RAM
memorias
RAM
operan
dirección
conjunto
bits
transfiere
registro
direcciones
decodificador
direcciones
procesa
dirección
selecciona
posición
memoria
posición
seleccionada
lee
escribe
función
señales
control
lectura
contenido
posición
seleccionada
transfiere
registro
datos
salida
bits
escritura
caso
RAM
lectura
escritura
transfiere
registro
datos
entrada
cargado
anteriormente
posición
seleccionada
organización
interna
memorias
RAM
2D
3D
Organización
2D
Bidimensional
celdas
organizan
matriz
dimensiones
filas
vienen
dadas
número
palabras
columnas
longitud
cantidad
bits
palabra
Figura
6.4
celda
binaria
accede
línea
selección
organización
memorias
pequeña
capacidad
140
Fig
6.4
Esquema
memoria
RAM
2D.
Organización
3D
Tridimensional
celda
binaria
accede
líneas
selección
activación
simultánea
ambas
determina
selección
celda
logra
reducir
tamaño
decodificadores
Figura
6.5
Fig
6.5
Esquema
memoria
RAM
3D.
destaca
cantidad
líneas
salidas
decodificador
organización
2D
LS2D
cantidad
líneas
direccionamiento
141
valor
cantidad
líneas
salidas
decodificador
reduce
organización
3D
LS3D
m/2
considerando
decodificadores
iguales
reducción
líneas
logra
costa
agregar
decodificador
compuerta
AND
palabra
2.2
Memorias
RAM
lectura
escritura
2.2.1
Memorias
RAM
lectura
escritura
estáticas
elemento
básico
celda
elemental
memorias
consiste
biestable
asíncrono
estudiado
Guía
Didáctica
compuertas
adicionales
manejar
selección
control
celda
Figura
6.6
muestra
celda
básica
caso
organización
2D.
observa
línea
selección
activa
lógico
habilita
celda
lectura
escritura
̅⁄
operación
lectura
entradas
biestable
bloquean
habilita
compuerta
AND
salida
̅⁄
bloquea
compuerta
AND
salida
habilita
entrada
biestable
Figura
6.7
muestra
celda
básica
caso
organización
3D.
142
Fig
6.6
Celda
básica
organización
2D.
Fig
6.7
Celda
básica
organización
3D.
observa
compuerta
AND
entradas
completa
selección
143
Figura
6.8
muestra
RAM
lectura
escritura
organización
interna
2D
celda
básica
Figura
16
palabras
bits
Fig
6.8
RAM
lectura
escritura
organización
2D.
líneas
acceso
externas
memoria
Líneas
direccionamiento
A0
A3
Bus
direcciones
líneas
unidireccionales
externas
selección
palabra
acceder
16
combinaciones
posibles
bits
asociados
líneas
Líneas
datos
01
O3
Bus
datos
líneas
bidireccionales
externas
actuar
entradas
salidas
lograr
líneas
bidireccionales
buffer
triestado
forma
evita
líneas
entrada
salida
independientes
144
Señales
control
lectura
escritura
̅⁄
̅⁄
lee
memoria
̅⁄
escribe
memoria
Señales
control
𝐶𝑆̅̅̅̅
líneas
datos
colocan
alta
impedancia
𝐶𝑆̅̅̅̅
̅⁄
líneas
datos
externas
conectan
líneas
datos
entrada
interiores
memoria
líneas
datos
salida
interiores
memoria
colocan
alta
impedancia
𝐶𝑆̅̅̅̅
̅⁄
líneas
datos
externas
conectan
líneas
datos
salida
interiores
memoria
líneas
datos
entrada
interiores
memoria
colocan
alta
impedancia
𝑂𝐸̅̅̅̅
deshabilitan
circuitos
salida
memoria
señales
𝐶𝑆̅̅̅̅
̅⁄
Ciclo
lectura
ciclo
escritura
correcta
operación
memoria
necesita
temporización
adecuada
señales
aplicadas
líneas
Tabla
6.2
presentan
combinaciones
posibles
líneas
control
escritura
lectura
habilitación
memoria
representada
esquemáticamente
Figura
6.9
Tabla
6.2
Combinaciones
líneas
control
escritura
lectura
variedad
memorias
requiere
temporización
fabricante
provee
diagramas
tiempo
involucran
señales
memoria
Figuras
6.10
observa
diagrama
tiempo
operación
lectura
escritura
memoria
general
145
ciclo
lectura
escritura
comienza
aplicación
dirección
líneas
direccionamiento
bus
direcciones
línea
𝐶𝑆̅̅̅̅
𝐶𝐸̅̅̅̅
ve
Tabla
6.2
cero
momento
Fig
6.9
Diagrama
bloques
memoria
RAM
estática
lectura
𝑊̅⁄
𝐸̅⁄
colocarse
datos
leer
aparecerán
líneas
salida
datos
Dout
cabo
tiempo
A.
tiempo
lectura
escritura
𝑊̅⁄
colocarse
tiempo
mínimo
tAW
tiempo
fijación
dirección
pasar
indicar
operación
escritura
valor
mantenerse
tiempo
tWP
ancho
pulso
escritura
garantizar
datos
hayan
almacenado
RAM
datos
escribir
líneas
entrada
datos
in
momento
aparece
dirección
mantenerse
tiempo
tWP
tiempo
tiempo
ciclo
indicativo
cantidad
operaciones
sucesivas
unidad
tiempo
observa
tC
ta
146
Fig
6.10
Diagrama
tiempo
operación
lectura
escritura
2.2.2
Memorias
RAM
lectura
escritura
dinámicas
memorias
celda
básica
consiste
capacidad
parásita
compuerta
transistor
MOS
circuitos
asociados
control
Puesto
pérdidas
inevitables
capacitor
descarga
necesario
restaurar
periódicamente
información
proceso
llama
refresco
refresco
consiste
lectura
seguida
escritura
automática
ms
dependiendo
memoria
actuando
proceso
refresco
147
acceder
memoria
velocidad
memorias
menor
estáticas
densidad
integración
apreciablemente
estructura
interna
memorias
generalmente
3D
número
filas
ROW
columnas
COLUMN
bits
dirección
divididos
m/2
filas
m/2
columnas
Figura
6.11
Generalmente
líneas
dirección
multiplexadas
tiempo
exterior
suministran
m/2
bits
filas
cargan
registro
filas
señal
RAS
suministran
m/2
bits
columnas
cargan
registro
columnas
señal
CAS
reduce
bus
direcciones
mitad
Fig
6.11
Estructura
interna
memorias
RAM
escritura
lectura
dinámicas
DRAM
aplicación
dirección
fila
provoca
celdas
fila
lean
restauren
lugar
operación
lectura
escritura
operación
refresco
realiza
Controlador
RAM
dinámica
incluido
memoria
exterior
memorias
lentas
estáticas
poseen
característica
interesante
casos
necesario
leer
escribir
direcciones
consecutivas
memoria
caso
colocarse
datos
fila
necesario
cambiar
dirección
columna
operación
traduce
148
velocidades
mayores
estáticas
posibl
complejo
aprovecharlo
generalidad
casos
2.3
Memorias
RAM
lectura
ROM
memorias
programadas
realizan
operaciones
lectura
volátiles
utilizarse
almacenar
códigos
generadores
caracteres
funciones
aritméticas
complejas
unidades
control
microprogramadas
almacenamiento
partes
sistema
operativo
BIOS
organización
interna
memorias
similar
RAM
lectura
escritura
arte
entrada
salida
sencilla
necesario
considerar
salidas
sucede
líneas
control
ROM
memorias
RAM
suele
utilizar
término
referencia
memorias
lectura
escritura
2.3.1
Memorias
ROM
construcción
utilizan
diodos
transistores
conexiones
indica
conexiones
indica
verse
Figura
6.12
presencia
elemento
acoplador
diodo
realiza
fabricante
suministrarle
información
requerida
Fig
6.12
Esquema
conexiones
memoria
ROM
diodos
utilizan
elementos
acopladores
conexión
diodos
línea
implementa
función
OR
señales
149
entrada
decirse
ROM
2n
bits
combinacional
variables
entrada
funciones
salidas
bus
datos
Figura
6.12
triestado
permitir
conexión
memoria
bus
común
2.3.2
Memorias
PROM
elementos
conexión
diodos
transistores
fusible
serie
Inic
ialmente
memoria
presenta
conexiones
establecidas
programación
consiste
destruir
fusible
lugares
almacenarse
direccionando
palabra
deseado
inyectando
corriente
adecuada
salidas
conexión
queda
abierta
existiera
elemento
acoplador
deduce
programada
memoria
volver
Internamente
memorias
similares
ROM
verse
Figura
6.13
grabación
memorias
necesario
utilizar
equipos
grabación
especiales
disponibles
comercialmente
2.3.3
Memorias
RPROM
diferencia
anteriores
memorias
RPOM
reescritas
usuario
necesario
contar
eq
uipos
grabación
específicos
tipo
memoria
grabación
realiza
memoria
circuito
conectada
distinguen
tipos
RPROM
EPROM
celdas
constituidas
puertas
flotantes
transistores
MOS
descarga
realiza
luz
ultravioleta
exponiendo
celda
minutos
reprogramación
eléctrica
aplicando
tensiones
superiores
funcionamiento
permanente
vuelva
grabarse
EEPROM
Similares
anteriores
diferencia
borrado
posición
posición
eléctricamente
casos
realizarse
memoria
inserta
circuito
FLASH
Similares
anteriores
borrado
realiza
simultáneamente
posiciones
150
Fig
6.13
Esquema
conexiones
memoria
ROM
2.4
Extensión
longitud
palabra
capacidad
aumentar
capacidad
memoria
partiendo
circuitos
integrados
menor
capacidad
lograrse
aumentando
longitud
palabra
cantidad
2.4.1
Extensión
longitud
palabra
Figura
6.14
observa
memoria
palabras
k.m
bits
partiendo
CI
palabras
bits
líneas
dirección
control
compartidas
CI
líneas
datos
amplían
k.m
bits
151
Fig
6.14
Memoria
palabras
k.m
bits
2.4.2
Extensión
número
palabras
Figura
6.15
observa
memoria
2kN
palabras
bits
partiendo
CI
palabras
bits
líneas
dirección
necesarias
interconectan
CI
seleccionar
2p
palabras
CI
resto
líneas
dirección
inyectan
decodificador
cuyas
salidas
conectan
líneas
selección
CS
CI
señal
𝑊̅⁄
común
CI
bus
datos
común
CI
gracias
tecnología
triestados
CI
ampliar
longitud
palabra
cantidad
suman
técnicas
indicadas
ejemplo
interesante
observar
Figura
6.16
Finalmente
disponemos
memorias
RAM
palabras
bits
pretendemos
memoria
palabras
bits
procede
calcula
número
Chips
Número
CIs
Entero
N’/N
calcula
decodificador
entradas
2k
Número
CIs
baja
dirección
conecta
líneas
dirección
CIs
líneas
2p
alta
dirección
bits
conecta
entradas
decodificador
salidas
decodificador
conectan
entradas
selección
CS
CI
líneas
datos
conectan
bus
común
bits
152
Fig.6.15
Memoria
2kN
palabras
k.m
bits
153
Fig.6.16
Memoria
ejemplo
Memorias
Acceso
Serie
3.1
Definición
tiempo
escritura
lectura
posición
depende
situación
física
interior
memoria
escribir
leer
memorias
preciso
pasar
posiciones
anteriores
Figura
6.17
154
Fig
6.17
Esquema
memoria
serie
memorias
serie
nformación
organizarse
formas
Organización
bit
bit
disponen
serie
palabras
bits
conforman
Figuras
6.18
6.19
memoria
posee
línea
entrada
información
salida
ispone
líneas
control
lectura
escritura
Fig
6.18
Esquema
memoria
serie
bit
bit
Fig
6.19
Detalles
memoria
serie
bit
bit
Organización
posición
posición
disponen
palabras
serie
bits
conforman
paralelo
Figuras
6.20
6.21
caso
entradas
información
salidas
información
líneas
control
presentes
memorias
clasificar
tipos
Registros
desplazamiento
memorias
FIFO
memorias
LIFO
155
Fig
6.20
Esquema
memoria
serie
posición
posición
Fig
6.21
Detalles
memoria
serie
posición
posición
3.2
Registros
desplazamiento
información
desplaza
posición
sentido
orden
lectura
escritura
orden
externa
desplazamiento
constituida
impulsos
generador
reloj
clock
tipos
registros
desplazamiento
estáticos
dinámicos
156
3.2.1
Registros
desplazamiento
estáticos
impulsos
desplazamiento
anularse
tiempo
indefinido
información
almacenada
pierda
constituidos
biestables
síncronos
activados
flancos
Figura
6.22
Fig
6.22
Esquema
registro
desplazamiento
estático
3.2.2
Registros
desplazamiento
dinámicos
impulsos
desplazamiento
anularse
información
perdería
celda
elemental
caso
capacidad
parásita
puerta
transistor
MOS
similar
DRAM
sencillez
celdas
alta
densidad
integración
permitido
construir
CI
capacidad
costo
restaurar
información
registros
salidas
conectan
entradas
forma
información
circula
permanentemente
registro
sincrónicamente
impulsos
reloj
circuito
Figura
6.23
funciona
corre
ctamente
realice
operación
lectura
escritura
concluir
necesario
agregar
circuitos
permitan
operaciones
lectura
escritura
casos
deberá
adicionar
circuito
exterior
permitir
operaciones
mencionadas
157
Fig
6.23
Esquema
registro
desplazamiento
dinámico
caso
lectura
propone
circuito
Figura
6.24
escritura
circuito
Figura
6.25
Fig
6.24
Circuito
operación
lectura
158
Fig
6.25
Circuito
operación
escritura
invita
alumno
interpretar
funcionamiento
circuitos
ciclos
lectura
escritura
3.3
Memorias
FIFO
memorias
serie
información
entra
sale
First
Input
First
Output
Figura
6.26
indica
FIFO
bloque
funcionamiento
observa
Figura
6.27
memorias
FIFO
implementarse
registros
desplazamiento
estáticos
unidad
control
siguientes
características
tipo
memoria
lectura
destructiva
leer
dato
leído
memoria
operación
lectura
escritura
produci
desplazamiento
resto
memoria
memoria
llena
escribirse
Unidad
Control
deberá
capaz
generar
señal
Memoria
llena
159
Generar
señales
control
necesarias
dato
escrito
esté
disponible
lectura
Deberá
aceptar
entradas
exteriores
señal
lectura
escritura
señal
inicio
ciclo
señal
sincronismo
Fig
6.26
Esquema
memoria
FIFO
Fig
6.27
Funcionamiento
memoria
FIFO
Figura
6.28
muestra
diagrama
bloques
simplificado
memoria
FIFO
implementada
registro
desplazamiento
estático
FIFO
encuentran
CI
LSI
aplicaciones
acoplar
sis
temas
digitales
velocidades
procesamiento
Figura
6.29
sistema
rápido
llenando
FIFO
lento
160
vaciando
capacidad
memoria
acorde
diferencia
velocidades
tamaño
bloque
transferir
Fig
6.28
Diagrama
bloques
memoria
FIFO
implementada
registro
desplazamiento
estático
Fig
6.29
Ejemplo
aplicación
memoria
FIFO
sistemas
digitales
3.4
Memorias
LIFO
memorias
información
entra
sale
Last
Input
First
Output
Figura
6.30
indica
diagrama
bloque
Figura
6.31
funcionamiento
memoria
LIFO
LIFO
implementarse
registro
desplazamiento
reversible
verse
Figura
6.32
registro
desplazamiento
reversible
formado
biestables
síncronos
multiplexores
salida
memoria
salida
biestable
entrada
canal
multiplexor
sugiere
alumno
interpretar
Figura
6.32
ciclos
lectura
escritura
161
diagrama
bloque
LIFO
indicado
Figura
6.33
Fig
6.30
Esquema
memoria
LIFO
Fig
6.31
Funcionamiento
memoria
LIFO
162
Fig
6.32
Diagrama
bloques
memoria
LIFO
implementada
registro
desplazamiento
reversible
Fig
6.33
Diagrama
bloque
LIFO
Ejercitación
Ejercicio
Determinar
valor
n1
n2
memoria
Kbytes
64
Kbytes
1Mbytes
4096
palabras
32
bits
65536
palabras
16
bits
524288
palabras
64
bits
163
Ejercicio
bits
direccionamiento
necesarios
localización
palabra
memoria
256
posiciones
1024
Ejercicio
bits
posee
memoria
32Kx8
32
cantidad
posiciones
direccionar
cantidad
bits
posición
palabra
bits
direccionamiento
necesarios
Ejercicio
memorias
RAM
256
posiciones
bits
necesitarán
direcciona
ambas
obtener
memoria
512
posiciones
conexión
Ejercicio
memoria
partiendo
pastillas
Ejercicio
Indique
cantidad
biestables
memoria
RAM
Gbytes
Ejercicio
Suponga
memoria
Mbytes
tamaño
decodificadores
técnicas
2D
3D
respectivamente
Memoria
Acceso
Aleatorio
RAM
Bus
Direcciones
Bus
Datos
164
Ejercicio
Suponga
determinado
sistema
control
almacenar
temperatura
sensores
hora
24
hs
temperatura
viene
dada
dígitos
p.
ej.
100.6
028.7
grados
centígrados
registro
temperaturas
meses
cuyos
valores
máximo
mínimo
esperables
150
10
°C
capacidad
memoria
necesitaría
registro
Considere
lectura
codificar
dígitos
BCD
forma
binaria
ASCII
seleccionar
forma
demande
capacidad
memoria
Ejercicio
Teniendo
tamaño
memoria
definida
ejercicio
tiempo
llenará
dicha
memoria
sensores
registran
valores
minutos
Ejercicio
10
circuito
combinacional
acepta
número
trada
bits
codificado
binario
natural
genera
cuadrado
salidas
correspondientes
Escribir
tabla
circuito
obtendría
funcionamiento
remplazando
circuito
combinacional
memoria
ROM
tamaño
memoria
ROM
Mostrar
esquema
conexiones
pertinente
165
CAPÍTULO
Arquitectura
Básica
Computadora
Arquitectura
Von
Neumann
Máquina
Elemental
2.1
Introducción
2.2
Arquitectura
computadora
elemental
2.3
conjunto
instrucciones
2.4
ciclo
máquina
2.5
Flujo
información
2.6
Unidad
control
2.7
Unidad
control
microprogramada
2.8
Bus
máquina
elemental
2.9
Unidad
aritmética
lógica
Ejercitación
166
Capítulo
Arquitectura
Básica
Computadora
Arquitectura
Von
Neumann
estructura
básica
computadora
compuesta
elementos
Figura
7.1
Unidad
Proceso
Central
CPU
Unidad
Memoria
UM
Unidad
Entrada
Salida
UE
Unidad
Buses
UB
Programa
Almacenado
UM
PA
Fig
7.1
Estructura
básica
computadora
elementos
funcionamiento
reciben
nombre
Arquitectura
Computadoras
John
von
Neumann
recuerdo
principales
propulsores
1903
-1957
utilizaremos
definición
COMPUTADORA
167
común
referenciar
elementos
HARDWARE
quinto
SOFTWARE
funcionamiento
Computadora
implica
fuerte
cooperación
unidades
componen
supone
memoria
reside
conjunto
ordenado
INSTRUCCIONES
llamado
PROGRAMA
Funcionamiento
INSTRUCCIONES
PROGRAMA
buscadas
ejecutadas
secuencialmente
CPU
programa
finaliza
ejecución
instrucción
necesario
obtener
datos
guardar
resultados
UM
obtener
datos
enviarlos
UE
necesario
coordinar
movimiento
datos
UM
UE
S.
CPU
UNIDAD
PROCESAMIENTO
CENTRAL
Unidad
Central
Procesos
Procesador
REGISTROS
REGISTROS
usados
principalmente
almacenar
temporalmente
información
datos
direcciones
instrucciones
Unidad
Aritmética
Lógica
ALU
ALU
realiza
operaciones
lógico-aritméticas
necesarias
eventualmente
ejecución
instrucción
Unidad
Control
UC
UC
CPU
realiza
concretamente
control
sistema
genera
conjunto
señales
control
órdenes
diseminan
Sistema
UM
UNIDAD
MEMOR
IA
almacena
programas
datos
principalmente
memoria
RAM
lectura
escritura
necesario
leer
escribir
obstante
porción
UM
ROM
almacenar
programas
tipo
datos
cambien
deber
ían
permanecer
quite
alimentación
UE
UNIDAD
ENTRADA
SALIDA
encarga
interconectar
computadora
dispositivos
externos
periféricos
accesibles
usuario
teclado
monitor
impresora
etc.
uales
ingresar
extraer
información
CPU
UE
cuentan
INTERFACES
generalmente
realizan
adaptación
niveles
eléctricos
señales
CONTROLADORES
sistemas
digitales
controlar
periféricos
específicos
168
UB
UNIDAD
BUSES
cumple
función
transportar
información
unidades
Sistema
tipo
información
clasificarse
buses
BUS
DATOS
Transporta
Operandos
Instrucciones
BUS
DIRECCIONES
Transporta
Direcciones
BUS
CONTROL
Transporta
señales
Control
PA
PROGRAMA
ALMACENADO
conjunto
INSTRUCCIONES
almacenadas
correlativamente
Unidad
Memoria
programas
comienzo
instrucciones
máquina
conocen
Set
Instrucciones
Máquina
Elemental
2.1
Introducción
estudiar
arquitectura
computadora
definida
presentaremos
Máquina
Elemental
utilizando
planteo
Caxton
Foster
libro
Arquitectura
Computadoras
Previo
desarrollo
necesario
distinguir
máquinas
asíncronas
síncronas
primeras
órdenes
emitidas
UC
suceden
secuencialmente
cambio
síncronas
órdenes
emitidas
UC
forma
síncrona
señal
sincronismo
externa
llamada
reloj
máquinas
asíncronas
rápidas
síncronas
acciones
ordenadas
UC
tardan
tarda
hardware
involucrado
síncronas
acciones
tardan
periodo
reloj
ventaja
mencionada
máquinas
construyen
síncronas
simplicidad
hardware
inferir
UC
máquina
asíncrona
deberá
contar
hardware
adicional
detecte
finalización
acciones
ordenadas
implica
complicación
justifica
ganancia
tiempo
resultaría
características
principales
computadora
Arquitectura
von
Neumman
sistema
binario
aritmética
complemento
169
memoria
4096
16
4096
posiciones
memoria
16
bits
punto
fijo
datos
16
bits
15
bits
mantisa
bit
signo
observa
Figura
7.2
Fig
7.2
Formato
datos
numéricos
punto
fijo
instrucciones
formato
fijo
16
bits
bits
código
operación
12
bits
campo
dirección
presentan
Figura
7.3
Fig
7.3
Formato
instrucciones
BUS
común
16
bits
multiplexado
datos
direcciones
ALU
realiza
operandos
siguientes
operaciones
ADD
OR
XOR
AND
RAL
NOT
Capacidad
manejar
128
periféricos
170
Externamente
consola
llaves
pulsadores
luces
permite
operador
comunicarse
Máquina
aspecto
muestra
Figura
7.4
Fig
7.4
Consola
máquina
elemental
Diagrama
Bloques
Máquina
Elemental
presenta
Figura
7.5
171
Fig
7.5
Diagrama
bloques
máquina
elemental
2.2
Arquitectura
computadora
elemental
2.2.1
Unidad
procesamiento
central
CPU
REGISTROS
ACC
16
bits
registro
Acumulador
registro
propósitos
generales
utiliza
distintos
fines
172
16
bits
registro
Instrucciones
registro
propósito
especial
utiliza
guardar
instrucción
buscado
memoria
PC
12
bits
registro
Contador
Programa
registro
propósitos
especiales
utiliza
guardar
dirección
memoria
próxima
instrucción
buscar
Registro
16
bits
Registro
16
bits
Registros
Operandos
entrada
ALU
registros
propósito
especial
accedidos
programador
bit
re
gistro
propósito
especial
Permite
generar
ALU
realiza
operaciones
lógico
-aritméticas
mencionadas
operandos
ubicados
registros
Y.
Genera
señal
OV
overflow
resultado
suma
aritmética
supera
capacidad
representación
UC
Unidad
Control
entrada
sincronismo
genera
órdenes
sincronismo
flancos
Reloj
tipos
Unidades
Control
UC
Cableada
UC
Microprogramada
2.2.2
Unidad
memoria
UM
memoria
RAM
lectura
escritura
vistas
anteriormente
Posee
registro
asociado
líneas
datos
llamado
MBR
16
bits
pasará
información
lea
escriba
memoria
posee
registro
asociado
líneas
dirección
llamado
MAR
12
bits
cuyo
contenido
deberá
dirección
memoria
pretende
acceder
RAM
Tiempo
Acceso
400
ns
2.2.3
Unidad
Entrada
Salida
dispositivos
entrada
salida
observan
casos
CONSOLA
conectada
directamente
BUS
interior
posee
hardware
posibilita
comunicación
CPU
pulsadores
16
llaves
16
luces
Registro
Llaves
16
bits
reflejan
16
llaves
binarias
16
luces
indican
contenido
pulsadores
definidos
Pulsador
ARRANQUE
Start
Pulsador
PARADA
Stop
173
Pulsador
CARGAR
PC
Load
PC
Acción
Transfiere
contenido
SR
PC
Pulsador
DEPOSITAR
Deposite
Acción
Transfiere
contenido
SR
posición
memoria
indicada
PC
incrementa
PC
Pulsador
EXAMINAR
Examine
Acción
Transfiere
contenido
posición
memoria
indicada
PC
incrementa
PC
Pulsador
RESET
Reset
Acción
Borra
RAM
Registros
DISPOSITIVOS
EXTERNOS
llamados
periféricos
P0
P63
entrada
P0
P63
salida
destinado
BUS
bidireccional
dedicado
bits
Datos
BUS
bits
selección
periférico
hardware
inferfa
muestra
Figura
7.5
transferencias
entrada
salida
Blue
realizadas
control
programa
veremos
instrucciones
acumulador
ejecuta
instrucción
entrada
salida
Unidad
Control
genera
señal
Transferencia
TRA
dispositivos
externos
dispositivo
seleccionado
responderá
señal
Ready
completa
do
tarea
tipo
control
llama
HANDSHAKING
2.3
Conjunto
instrucciones
anticipamos
computadora
posee
tipo
instrucción
longitud
fija
16
bits
formato
Figura
7.6
Fig
7.6
Formato
instrucciones
bits
código
operación
dispone
sumo
16
instrucciones
presentan
Tabla
7.1
174
Tabla
7.1
Conjunto
instrucciones
descripción
instrucciones
HLT
XXXX
Detiene
funcionamiento
computadora
Presionando
pulsador
START
consola
principal
computadora
arranca
nuevamente
siguiendo
ejecución
instrucción
HALT
campo
direcciones
XXXX
ignora
175
ADD
XXXX
Realiza
suma
aritmética
complemento
operandos
ubicados
acumulador
dirección
memoria
expresada
campo
XXXX
deja
resultado
acumulador
contenido
dirección
memoria
XXXX
cambia
dato
encontraba
acumulador
resultado
suma
215-1
menor
215
computadora
detiene
XOR
XXXX
Realiza
OR
-Exclusiva
bit
bit
operandos
ubicados
acumulador
dire
cción
memoria
expresada
campo
XXXX
deja
resultado
acumulador
contenido
dirección
memoria
XXXX
cambia
dato
encontraba
acumulador
AND
XXXX
Realiza
AND
bit
bit
operan
ubicados
acumulador
dirección
memoria
expresada
campo
XXXX
deja
resultado
acumulador
contenido
dirección
memoria
XXXX
cambia
dato
encontraba
acumulador
IOR
XXXX
Realiza
OR
bit
bit
operandos
ubicados
acumulador
dirección
memoria
expresada
campo
XXXX
deja
resultado
acumulador
contenido
dirección
memoria
XXXX
cambia
dato
qu
encontraba
acumulador
NOT
XXXX
bit
dato
acumulador
remplazado
complemento
lógico
dirección
memoria
XXXX
ignora
LDA
XXXX
contenido
ubicación
memoria
XXXX
copia
acumulador
contenido
dirección
memoria
XXXX
cambia
dato
encontraba
acumulador
STA
XXXX
contenido
acumulador
copia
dirección
memoria
XXXX
contenido
acumulador
cambia
dato
encontraba
dirección
memoria
176
SRJ
XXXX
Sirve
salto
programa
subrutina
realiza
copia
contador
programa
12
bits
bajos
acumulador
bits
altos
acumulador
ponen
ceros
copia
número
XXXX
contador
programa
próxima
instrucción
tomada
dicha
dirección
JMA
XXXX
Produce
salto
dirección
programa
bit
signo
acumulador
deci
acumulador
contiene
número
negativo
cumple
dicha
condición
copia
número
XXXX
contador
programa
próxima
instrucción
toma
dirección
cumple
condición
bit
signo
acumulador
cero
dato
acumulador
positivo
cero
instrucción
realiza
programa
normalmente
JMP
XXXX
Produce
salto
incondicional
programa
copia
número
XXXX
contador
programa
próxima
instrucción
ejecutar
toma
dirección
XXXX
INP
XXYY
bits
peso
acumulador
colocan
cero
carácter
bits
viene
dispositivo
externo
YY
coloca
baja
acumulador
XX
campo
dirección
ignora
próxima
instrucción
ejecuta
transferencia
dato
completado
OUT
XXYY
bits
significativos
acumulador
envían
dispositivo
externo
YY
XX
campo
dirección
ig
nora
dispositivo
externo
aceptar
dato
momento
computadora
espera
podido
trasferencia
RAL
XXXX
bits
acumulador
rotan
lugar
izquierda
bit
AC15
coloca
ACo
desplazamiento
cíclico
campo
direcciones
XXXX
ignora
CSA
XXXX
número
registro
llaves
introducido
llaves
consola
copia
acumulador
campo
direcciones
XXXX
ignora
177
NOP
XXXX
instrucción
campo
direcciones
XXXX
ignora
2.4
Ciclo
instrucción
llama
ciclo
instrucción
computadora
procedimiento
consta
tareas
necesarias
buscar
ejecutar
completamente
instrucción
programa
almacenado
memoria
sintetizar
forma
Búsqueda
instrucción
memoria
Lectura
interpretación
instrucción
Ejecución
Almacenamiento
resultados
Preparación
leer
próxima
instrucción
computadora
elemental
BLUE
ciclo
instrucción
básico
compuesto
partes
CICLO
BÚSQUEDA
CICLO
EJECUCIÓN
Ciclo
Búsqueda
instrucción
almace
memoria
apuntada
Contador
Programa
PC
localiza
memoria
copia
Registro
Instrucciones
RI
número
almacenado
PC
incrementa
logrando
apunte
próxima
celda
memoria
instrucción
completar
Ciclo
búsqueda
instrucción
analiza
decodifica
ejecuta
presente
instrucción
necesita
búsqueda
memoria
dato
operando
ciclo
máquina
termina
momento
necesario
buscar
operando
memoria
comienza
Ciclo
Ejecución
acceso
memoria
traer
operando
necesario
completar
instrucción
2.5
Flujo
información
analizar
instrucciones
detalle
mostraremos
movimientos
información
registros
máquina
Flujo
direcciones
addreses
Máquina
Elemental
movimientos
registros
12
bits
Figura
7.7
178
Load
PC
envía
12
bits
bajos
registro
llaves
SR
PC
Saltos
JMP
JMA
SRJ
envían
12
bits
bajos
PC
SRJ
salto
subrutina
envía
12
bits
PC
Acumulador
ACC
Búsqueda
instrucción
envía
12
bits
PC
MAR
Búsqueda
Operando
envía
12
bits
bajos
RI
MAR
Flujo
instrucciones
operandos
Máquina
Elemental
movimientos
registros
16
bits
Figura
7.8
CSA
copia
16
bits
SR
ACC
Deposit
copia
16
bits
SR
MBR
Instrucciones
copian
MBR
RI
LDA
copia
16
bits
MBR
ACC
STA
copia
16
bits
ACC
MBR
Operaciones
ALU
ciclo
ejecución
Copia
16
bits
ACC
Registro
ALU
Copia
16
bits
MBR
Registro
ALU
Resultado
salida
ALU
copia
ACC
posibles
transferencias
vistas
necesario
implementar
esquema
relación
registros
memoria
unidades
ejemplo
BUS
COMUN
elegido
Máquina
Elemental
PUNTO
PUNTO
179
Fig
7.7
transmisión
direcciones
Blue
Fig
7.8
transmisión
instrucciones
operandos
Blue
180
2.6
Unidad
control
máquinas
síncronas
Unidades
Control
Síncronas
entrada
sincronismo
reloj
emite
pulsos
periodos
tiempos
fijos
frecuencia
reloj
pulso
realizan
tareas
ventaja
mantiene
distintas
tareas
dispositivo
orden
secuencia
hardware
sencillo
desventaja
tarea
tiempo
duración
ciclo
reloj
tarea
unidad
control
coordinar
acciones
máquina
trabajo
neces
ita
secuencia
pulsos
señales
generarse
sincrónicamente
reloj
maneras
diseñar
Unidad
Control
Unidad
Control
Cableada
Unidad
Control
Microprogramada
Ambas
verse
caja
negra
exactament
entradas
salidas
diferencia
implementación
interna
2.6.1
Unidad
Control
Cableada
Figura
7.9
presenta
Diagrama
Bloques
Unidad
Control
Cableada
integrada
siguientes
componentes
DECODIFICADOR
INSTRUCCIONES
Sistema
Combinacional
decodificador
binario
entradas
16
salidas
utiliza
determinar
instrucción
contiene
entradas
IR12
IR15
181
Fig
7.9
Diagrama
bloques
Unidad
Control
Cableada
SECUENCIADOR
Sistema
Secuencial
Máquina
182
SECUENCIADOR
consta
Figura
7.10
biestables
definir
distintos
mencionados
RUN
arranque
biestable
Set
-Reset
arranca
pone
salida
botón
START
pone
salida
botón
STOP
instrucción
HALT
detección
overflow
aritmético
STATE
biestable
condiciones
salidas
determinar
ciclo
búsqueda
Fetch
ciclo
ejecución
Execute
biestable
relacionado
TRA
transferencia
biestable
Set-Reset
pone
inicia
transferencia
pone
recibe
seña
Ready
periférico
discute
biestable
tareas
relacionadas
Pulsadores
EXA
DEP
reloj
externo
Mhz
LÓGICA
CONTROL
Sistema
Combinacional
consiste
conjunto
compuertas
generan
señales
control
2.6.2
Secuenciador
señal
sincronismo
oscilador
Mhz
llamado
RELOJ
divide
secuencia
pulsos
llamado
CICLO
MEMORIA
líneas
distintas
separadas
tiempo
125
ns
RUN
máquina
funcionando
contador
pulsos
reloj
comenzando
inicialmente
cero
salidas
contador
conectadas
entradas
decodificador
binario
cuyas
salidas
pulsos
125
ns
BÚSQUEDA
EJECUCION
FUNCIONANDO
RUN
DETENIDA
STOP
183
llega
1001
CP9
contador
borra
comienza
CICLO
MEMORIA
pulso
CP9
sincronizar
biestable
borrar
biestable
SR
nombre
instrucción
proceso
ciclo
toma
valor
caso
instrucciones
ciclo
toma
valor
forma
máquina
pasa
CICLO
BÚSQUEDA
CICLO
EJECUCIÓN
automáticamente
CP8
Nótese
máquina
arranca
RUN
presionar
pulsador
START
detiene
presionar
STOP
OV
instrucción
HLT
BÚSQUEDA
biestable
SR
genera
señal
TRA
periféricos
condiciones
ven
Figura
7.10
recibe
señal
READY
periféricos
pone
cero
pulsadores
EXA
DEP
funcionan
RUN
disparan
único
CICLO
MEMORIA
Figura
7.11
muestra
diagrama
tiempo
secuenciador
aparecen
CP1
CP8
CP9
CICLO
MEMORIA
menor
duración
Ciclo
Búsqueda
biestable
RUN
arranca
reloj
biestable
STATE
Búsqueda
inicia
ciclo
búsqueda
máquina
máquina
carga
instrucción
cuya
dirección
PC
registro
instrucciones
necesita
operador
cargado
PROGRAMA
Memoria
dirección
instrucción
PC
Consola
secuencia
ciclo
búsqueda
presenta
Tabla
7.2
184
Fig
7.10
Diagrama
bloques
secuenciador
Fig
7.11
Diagrama
tiempos
secuenciador
185
pulso
reloj
copia
contenido
contador
programa
PC
registro
direcciones
memoria
MAR
registro
ALU
inicia
ciclo
lectura
memoria
pulso
reloj
coloca
número
+1
registro
ALU
pulso
reloj
esperamos
realice
suma
PC
pulso
copia
resultado
suma
salida
ALU
contador
Programa
incrementa
PC
listo
indicar
próxima
instrucción
pulso
copia
dato
memoria
registro
buffer
memoria
MBR
pulso
copia
contenido
MBR
registro
instrucción
culmina
Ciclo
Búsqueda
instrucción
cuestión
req
uiere
ejecución
acceder
memoria
dato
utilizar
pulsos
reloj
ejecutar
instrucciones
BLUE
caso
instrucciones
HALT
NOP
JMP
JMA
SRJ
CSA
NOT
RAL
indica
Tabla
7.2
finalizan
ciclo
memoria
asignado
Búsqueda
necesitan
ciclo
memoria
llamamos
instrucciones
ciclo
búsqueda
ejecución
instrucciones
realizan
ciclo
memoria
finalizar
ciclo
búsqueda
empieza
ciclo
asignarse
nuevamente
Búsqueda
Tabla
7.2
Ciclo
búsqueda
186
instrucción
requiere
ejecución
acceder
memoria
instrucciones
INP
OUT
necesario
asignar
ciclo
Ejecución
Ciclo
Ejecución
instrucciones
requieren
dato
memoria
operación
lógica
matemática
transferencia
datos
memoria
requieren
segu
ndo
ciclo
memoria
LDA
STA
ADD
XOR
AND
IOR
acceder
memoria
necesario
ciclo
memoria
observa
Tabla
7.3a
7.3b
instrucciones
requieren
ciclo
acceden
memor
ia
ejecución
caso
particular
instrucciones
INP
OUT
Utilizan
ciclos
esperar
periférico
involucrado
tantos
ciclos
tiempo
espera
Tabla
7.4
187
Tabla
7.3
Ejecución
instrucciones
ciclos
188
Tabla
7.4
Ciclo
búsqueda
instrucciones
INP
OUT
Figura
7.12
hardware
relacionado
Entrada
Salida
detalle
189
Fig
7.12
Lógica
funcionamiento
S.
2.6.3
Lógica
control
observa
Figura
7.13
entradas
bloque
combinacional
códigos
operación
decodificados
pulsos
reloj
Búsqueda
Ejecución
salidas
órdenes
concretas
emite
unidad
control
aclarar
consiste
hardware
bloqu
LÓGICA
CONTROL
veamos
ejemplo
casos
UC
emitir
orden
CARGAR
MAR
máquina
parada
presiona
pulsador
EXA
DEP
CP1
máquina
funcionando
Búsqueda
CP1
máquina
funcionando
Ejecución
instrucciones
LDA
STA
ADD
IOR
AND
XOR
CP1
190
circuito
control
deberá
máquina
parada
biestable
significa
producirá
única
secuencia
pulsos
CP1
CP8
operador
presionó
EXA
DEP
Fig
7.13
Vista
parcial
lógica
control
recuadro
indica
retardo
50
ns
permitir
establezca
BUS
verá
poste
riormente
Circuitos
similares
planteado
corresponderán
señales
emitidas
Unidad
Control
2.7
Unidad
control
microprogramada
esquema
general
máquina
elemental
unidad
control
microprogramada
simplemente
microprogramada
observa
Figura
7.14
Obsérvese
único
cambiado
máquina
elemental
Unidad
Control
parecido
arquitectura
von
Neumman
llamado
MÁQUINA
INTERIOR
búsqueda
ejecución
macroinstrucción
realizadas
micro
programas
residentes
micro
-ROM
contenido
ROM
microprogramas
ROM
llama
FIRMWARE
dirección
microinstrucción
ejecutar
proporcionada
código
operación
macroinstrucción
16
primeras
posiciones
microinstrucción
compuesta
45
bits
divididos
campos
Acción
Test
Envíe
Reciba
Falso
Éxito
significado
verse
Tabla
campo
Acción
relacionado
órdenes
Unidad
Control
191
leer
memoria
escribir
memoria
etc.
campo
Test
relaciona
necesidad
chequear
máquina
momento
Bit
15
acumulador
señal
overflow
etc.
campos
Envíe
Reciba
enviar
contenidos
registros
bus
levantarlos
campos
falso
éxito
relacionados
resultado
chequeo
indicado
campo
Test
definen
próxima
microinstrucción
ejecutar
Nótese
máquina
interior
posee
contador
programa
Tabla
7.5
verse
contenido
ROM
microprogramas
correspondientes
instrucción
Fig
7.14
Máquina
elemental
unidad
control
microprogramada
192
Microinstrucción
Máquina
Microprogramada
Tabla
7.5
Formato
microinstrucción
máquina
elemental
microprogramada
193
circuito
UNIDAD
CONTROL
MICROPROGRAMADA
observa
Figura
7.15
Obsérvese
contenido
micro-MAR
biestables
Figura
orígenes
Contenido
campo
FALSO
caso
salida
multiplexor
cero
Contenido
campo
ÉXITO
caso
salida
multiplexor
código
operación
macrointrucción
residente
registro
instrucciones
caso
bit
campo
acción
Cero
caso
RESET
señal
proviene
botón
Master
Reset
consola
operador
casos
Unidad
Control
ejecutando
microprograma
correspondiente
macroinstrucción
ciclo
búsqueda
Tablas
6a
muestra
contenido
ROM
256
45
ejemplo
describirá
ciclo
búsqueda
máquina
microprograma
correspondiente
comienza
dirección
rotulada
RNI
campo
Acción
contenido
indicando
acción
necesaria
campo
Envíe
envía
PC
bus
campo
Reciba
carga
MAR
bus
campo
test
verifica
alguien
apretado
botón
STOP
consola
apretado
próxima
microinstrucción
dirección
rotulada
HALT
apretado
próxima
microinstrucción
RNI1
RNI1
RNI5
realiza
incremento
PC
carga
contenido
posición
memoria
direccionada
RNI6
orden
cargar
micro
-MAR
código
operación
macroinstrucción
almacenada
bit
circuito
control
micro-MAR
194
Fig
7.15
Unidad
control
microprogramada
195
196
197
Tabla
7.6
Contenido
ROM
256
45
conveniente
análisis
microprogramas
comprender
funcionamiento
completo
Guía
Didáctica
discuten
ventajas
desventajas
máquinas
microprogramadas
facilidad
firmware
poseen
cantidad
instrucciones
contraposición
máquinas
microprogramadas
poseen
características
instrucciones
198
2.8
Bus
máquina
elemental
analizamos
órdenes
emite
UC
Cableada
Microprogramada
concluir
mayoría
implica
transferencia
registros
exactitud
20
señales
enviar
BUS
cargar
BUS
órdenes
implican
transferencias
LEER
ESCRIBIR
TRA
TRA
actividad
máquina
resuelve
transfiriendo
registros
mencionado
registros
eficazme
nte
interconectados
lograrse
arquitectura
BUS
COMÚN
término
refiere
existirá
único
BUS
interconecta
distintas
partes
Máquina
BUS
COMÚN
transportar
dato
16
bits
instrucción
16
its
dirección
12
bits
distintos
momentos
razón
llama
bus
multiplexado
señales
control
diseminadas
Máquina
BUS
especial
llamamos
BUS
CONTROL
Figura
7.16
observa
circuito
resuelve
requerimientos
señales
control
Enviar
ACC
Cargar
MBR
señal
Cargar
MBR
retardada
tiempo
respuesta
biestable
compuertas
AND
OR
199
Fig
7.16
Circuito
resuelve
requerimientos
señales
control
Obsérvese
enviar
registro
BUS
cargar
registro
BUS
simultáneamente
ejemplo
orden
ENVÍE
PC
CARGUE
MAR
conexión
Registro
MBR
BUS
requiere
circuito
adicional
Registro
conectado
memoria
Figura
7.17
indica
conexión
200
Fig
7.17
Circuito
asociado
Registro
MBR
2.9
Unidad
aritmética
lógica
ALU
Máquina
Elemental
realiza
operaciones
AND
OR
IOR
XOR
ADD
operandos
contenidos
registros
Y.
operaciones
lógicas
realizan
bit
bit
suma
aritmética
realiza
conveni
Complemento
acarreo
desprecia
Adicionalmente
ALU
realiza
operación
NOT
C1
RAL
rotación
bits
izquierda
contenido
Z.
operaciones
mencionadas
realiza
simultánea
permanentemente
momento
calculando
resultados
contenido
registros
Y.
unidad
control
cargar
registros
operandos
seleccionar
salida
necesita
diagrama
bloques
ALU
observa
Figura
7.18
201
Fig
7.18
Diagrama
bloques
unidad
aritmética
lógica
recomienda
lector
circuito
ALU
ejercitar
aprendido
ALU
16
Compuertas
AND
16
Compuertas
XOR
16
Compuertas
IOR
16
Compuertas
NOT
Sumador
16
bits
circuito
rebasamiento
OV
acarreo
C2
Compuertas
AND
OR
implementar
selección
salida
conveniente
mencionar
tiempo
tarda
ALU
suma
aritmética
ADD
ayor
necesario
operaciones
lógicas
requieren
hardware
ciclos
máquina
ALU
tarda
sumar
ADD
máximo
200
ns
resto
operaciones
80
ns
ALU
suma
UC
debería
esperarla
pulso
reloj
caso
UC
Cableada
microinstrucción
caso
UC
Microprogramada
Observe
Figuras
7.10
7.15
202
Ejercitación
Ejercicio
efecto
siguientes
instrucciones
octal
Indique
mnemónico
correspondiente
177777
137701
140277
013150
042322
125000
075303
104210
063501
Ejercicio
Complete
cuadro
restantes
formas
representación
Mnemónico
octal
binario
ADD
50
150510
1111000001001000
NOT
33
0011000001010110
110350
XOR
276
Ejercicio
Escriba
programa
comenzando
ubicación
400
intercambie
contenidos
ubicaciones
550
551
Expresarlo
representación
octal
mnemónica
Ejercicio
Escriba
representación
octal
programa
contenido
acumulador
ubicaciones
3007
3010
3011
3012
ejecución
programa
3001
LDA
3007
3002
IOR
3010
3003
AND
3011
3004
STA
3012
3005
OUT
01
3006
HLT
3007
110771
3010
145735
203
3011
074000
3012
77177
Ejercicio
Escriba
programa
comience
ubicación
550
efectúe
operación
lógica
AND
contenido
ubicación
560
563
Depositar
resultado
560
indicar
valor
resultante
octal
siguientes
datos
decimal
560
+1307
563
+2431
Ejercicio
Proyecte
secuencia
instrucciones
efectúe
salto
ubicación
255
contenido
dirección
300
cero
ubicación
333
contenido
distinto
cero
Ejercicio
Suponga
máquina
elemental
dotada
doble
instrucciones
modificaría
estructura
palabra
manteniendo
longitud
objeto
palabras
direccionarse
directamente
propuesta
Ejercicio
Escriba
programa
efectúe
multiplicación
números
usando
método
sumas
sucesivas
Ejercicio
Escriba
instrucciones
blue
código
programa
lenguaje
alto
nivel
tipo
C++
considerando
variables
enteras
proponiendo
posiciones
memoria
almacenamiento
datos
programa
for
10
a[i
b[i
204
Ejercicio
10
instrucciones
Máquina
Elemental
escriba
código
o10
while
i<0
do
a[i]=
b[i
i+1
break
a[i]=
17o
done
Ejercicio
11
Escriba
instrucciones
blue
expresión
algebraica
programa
lenguaje
alto
nivel
tipo
C++
considerando
variables
enteras
proponiendo
posiciones
memoria
almacenamiento
datos
programa
Realizarlo
subrutina
indicar
expresamente
paso
retomo
subrutina
programa
principal
Ejercicio
12
Realice
circuito
Unidad
Control
Cableada
usando
contador
decodificador
generar
pulsos
CP1
CP8
Ciclo
Máquina
Máquina
Elemental
205
CAPÍTULO
Arquitectura
Convencional
Visión
General
1.1
Formato
instrucciones
1.2
Modos
direccionamiento
Hardware
Software
2.1
Registros
2.2
Máquina
elemental
indexada
2.3
estructura
convencional
Microprocesador
8088
3.1
Introducción
3.2
Diagrama
bloques
Ejercitación
206
Capítulo
Arquitectura
Convencional
Visión
General
Capítulo
veremos
inicialmente
conceptos
formato
instrucciones
modos
direccionamiento
haremos
modificaciones
Máquina
Elemental
obtener
Máquina
Elemental
Indexada
MEI
arquit
ectura
actual
computadora
agregaremos
Interrupciones
Máquina
Elemental
Indexada
MEI
finalmente
estudiaremos
microprocesador
INTEL
8088
ejemplo
máquina
CPU
convencional
1.1
Formato
instrucciones
sentido
ge
neral
instrucción
involucre
operación
diódica
operandos
resultado
requiere
piezas
datos
código
operación
Ubicación
operando
Ubicación
operando
Ubicación
resultado
Ubicación
próxima
instrucción
1.1.1
Formato
direcciones
primeras
máquinas
solían
piezas
instrucción
Figura
8.1
ejemplo
Fig
8.1
Formato
general
instrucciones
direcciones
207
instrucción
ADD
implica
sumar
colocar
resultado
buscar
próxima
instrucción
D.
1.1.2
Formato
direcciones
pieza
eliminar
dirección
próxima
instrucción
instrucciones
colocan
forma
sucesiva
memoria
próxima
instrucción
obtiene
ayuda
registro
llamado
contador
programa
Fig
8.2
Fig
8.2
Formato
general
instrucciones
direcciones
instrucción
ADD
implica
sumar
colocar
resultado
buscar
próxima
instrucción
PC
1.1.3
Formato
direcciones
pieza
eliminar
ubicación
resultado
Fig
8.3
ejemplo
Fig
8.3
Formato
general
instrucciones
direcciones
instrucción
ADD
implica
208
sumar
colocar
resultado
buscar
próxima
instrucción
PC
dirección
operando
utiliza
1.1.4
Formato
dirección
pieza
eliminar
dirección
operando
operando
registro
CPU
Figura
8.4
ejemplo
Fig
8.4
Formato
general
instrucciones
dirección
instrucción
ADD
implica
sumar
contenido
Acc
colocar
resultado
Acc
buscar
próxima
instrucción
PC
caso
máquina
elemental
vista
Capítulo
1.2
Modos
direccionamiento
medios
facilitan
tarea
programación
permitiendo
acceso
datos
Modos
Direccionamiento
indican
procesador
calcular
dirección
absoluta
real
efectiva
determinar
encuentran
datos
espec
ifican
obtener
operando
operando
ubicado
Memoria
Registro
CPU
Instrucción
dato
instrucción
almacenada
CPU
importante
aclarar
ue
general
instrucción
realiza
operación
lógico
-aritmética
involucrados
209
operandos
realiza
operación
indicarse
OPER1
OPER2
MNEMÓNICO
OPER2
OPER1
caso
instrucciones
realizan
operaciones
único
operando
OPER2
aparece
MNEMÓNICO
OPER1
caso
instrucciones
realizan
movimientos
datos
suele
indicar
operandos
OPERfuente
OPERdestino
indicando
ubicación
origen
destino
movimiento
MNEMÓNICO
OPERdestino
OPERfuente
mencionado
queda
instrucción
operandos
coexistan
Modos
Direccionamiento
ubicado
operando
especifica
siguientes
modos
direccionamiento
MODOS
DIRECCIONAMIENTO
OPERANDO
CPU
OPERANDO
MEMORIA
DIRECCIONAMIENTO
INMEDIATO
DIRECCIONAMIENTO
REGISTRO
DIRECCIONAMIENTO
DIRECTO
DIRECCIONAMIENTO
INDIRECTO
MEMORIA
DIRECCIONAMIENTO
INDIRECTO
REGISTRO
INDEXADO
210
1.2.1
Operando
CPU
direccionamiento
inmediato
operando
instrucción
Máquina
Elemental
vista
disponemos
direccionamiento
registro
operando
Registro
CPU
Máquina
Elemental
ejemplificado
instrucciones
NOT
Operando
ACC
operación
único
operando
ACC
RAL
Operando
ACC
caso
similar
CSA
OPERfuente
SR
OPERdestino
ACC
operación
movimiento
datos
operando
1.2.2
Operando
memoria
direccionamiento
directo
dirección
operando
instrucción
Ejemplo
siguientes
instrucciones
Máquina
Elemental
LDA
XXXX
OPERfuente
dirección
XXXX
Memoria
direccionamiento
directo
OPERdestino
ACC
direccionamiento
registro
STA
XXXX
OPERfuente
Acc
direccionamiento
registro
OP
ERdestino
dirección
XXXX
Memoria
direccionamiento
directo
ejemplos
direccionamiento
directo
instrucciones
ADD
XXXX
IOR
XXXX
XOR
XXXX
casos
OPER2
Memoria
dirección
XXXX
indica
instrucción
direccionamiento
directo
OPER1
211
registro
CPU
ACC
direccionamiento
Registro
direccionamiento
indirecto
memoria
instrucción
especifica
dirección
dirección
operando
direccionamiento
máquina
elemental
soporte
implica
ampliar
hardware
software
Máquina
Elemental
veremos
posteriormente
direccionamiento
indirecto
registro
dirección
operando
Registros
destinados
direccionamiento
Máquina
Elemental
caso
necesario
ampliar
componentes
Máquina
Elemental
Direccionami
ento
realidad
indirecto
dirección
operando
instrucción
Registro
razón
suele
llamar
Indirecto
Registro
modos
direccionamiento
indirecto
útiles
programador
relación
tareas
comunes
ámbito
programación
tareas
Modificar
direcciones
Generar
contadores
implementar
lazos
repetitivos
Reducir
espacio
ocupado
memoria
instrucciones
Permitir
reubicación
código
Facilitar
manejo
estructuras
datos
continuación
presentan
par
ejemplos
facilitados
direccionamiento
Supongamos
máquina
elemental
deseamos
sumar
sucesivamente
conjunt
100
números
ubicados
correlativamente
memoria
Deberíamos
tomar
números
sumarlos
colocar
suma
parcial
posición
memoria
llegar
número
100
problema
común
mover
bloque
datos
sector
memoria
interesante
contar
hardware
software
faciliten
incremento
dirección
memoria
conteo
operaciones
realizadas
Surge
idea
mejorar
hardware
facilitar
tareas
mencionadas
212
Hardware
Software
2.1
Registros
agregar
registros
máquina
elemental
objeto
obtener
mejoras
operativas
2.1.1
Registros
índices
agregar
Registros
Índice
máquina
elemental
registros
16
bits
Registro
Índice
Fuente
RIF
Registro
Índice
Destino
RID
trabajar
Registros
Índice
modificaremos
formato
instrucción
indicar
direccionamiento
Planteamos
formato
Figura
8.5
Fig
8.5
Formato
instrucción
modificado
bits
Código
Operación
podremos
32
instrucciones
usando
16
bits
Campo
Dirección
podremos
direccionar
65536
posiciones
memoria
bits
Campo
Modificador
podremos
seleccionar
Modos
Direccionamiento
instrucciones
campos
requerirán
posiciones
16
bits
asignando
posición
Campo
Dirección
instrucciones
necesiten
Campo
Modificador
Campo
Dirección
almacenarán
posición
16
bits
instrucciones
Máquina
Elemental
Blue
ciclo
permanecen
Máquina
Elemental
Indexada
MEI
cuparán
posición
memoria
213
Directo
contenido
Campo
Modificador
Campo
Dirección
dirección
operando
ejemplo
LDA
1000
Carga
Acc
contenido
posición
1000
Indirecto
memoria
contenido
Campo
Modificador
Campo
Dirección
apunta
posición
memoria
cuyo
contenido
operando
dirección
ejemplo
suponiendo
contenido
posición
1000
3400
LDA
1000
Carga
Acc
contenido
posición
3400
Indirecto
registro
Indexado
contenido
Campo
Modificador
contenido
RIF
suma
Campo
Dirección
obteniendo
dirección
operando
ejemplo
Suponiendo
contenido
RIF
5000
LDA
1000
Carga
Acc
contenido
posición
6000
1000
5000
contenido
Campo
Modificador
contenido
RID
suma
Campo
Dirección
obteniendo
dirección
operando
Sumador
Direcciones
suma
indicada
direccionamiento
indexado
agregamos
sumador
CPU
dedicado
tarea
forma
tiempo
ALU
Sumador
registros
entrada
Registro
Registro
16
bits
suma
resultado
contenido
tercer
registro
agregaremos
Registro
Base
16
bits
Decodificador
Campo
Modificador
decodificar
campo
Modificador
implementamos
Unidad
Control
decodificador
DECODIFICADOR
CAMPO
MODIFICADOR
Decodificador
Instrucciones
existente
permite
simultáneamente
decodificación
Código
Operación
instrucción
Campo
Modificador
214
2.1.2
Registros
base
programador
escribe
programa
definir
dirección
comienzo
memoria
necesita
programa
datos
asociados
idea
arbitraria
comúnmente
usada
comience
dirección
CE
RO
razones
programa
comenzar
dirección
CERO
existir
programa
residente
memoria
momento
Multiprogramación
comenzar
dirección
CERO
primeras
posiciones
memoria
reservan
tareas
manejo
entrada
salida
discutirá
posteriormente
imaginar
necesidad
programa
administrador
sistema
podríamos
llamar
Monitor
programa
debería
tareas
encargarse
decidir
ejecución
programas
usuario
asignándole
direcciones
comienzo
área
memoria
utilizar
Proceso
llamado
ensamblado
programa
programador
forma
antemano
dirección
comienzo
programa
disponible
momento
ejecución
programa
cargado
Monitor
necesitar
reubicarlo
consolidar
áreas
vacías
memoria
desfragmentación
Programa
Cargador
Reubicable
Relocating
Loader
solución
reubicar
programas
memoria
programa
Monitor
debería
capaz
distinguir
constantes
programa
usuario
modificar
direcciones
reubicables
programa
modificar
ensamblarlo
alternativa
permite
reubicar
programas
utilizando
herramienta
hardware
agregar
registro
llamado
REGISTRO
BASE
16
bits
Registro
Base
Registro
Índice
sentido
contenido
suma
campo
dirección
instrucción
obtener
dirección
efectiva
diferencia
consiste
usuario
común
control
contenido
Registro
Base
contenido
Registro
Base
suma
dirección
efectiva
realiza
referencia
memoria
Ejecución
instrucción
Aclaremos
ejemplo
Supongamos
usuario
escribe
programa
comienza
dirección
CERO
0000
ENI
1000
coloque
valor
1000
Registro
Índice
RID
0001
LDA
1234
cargue
Acc
contenido
posición
2234
1234
1000
215
Supongamos
Relocating
Loader
razones
mencionadas
carga
programa
dirección
5000
resultado
ejecución
introduce
siguientes
modificaciones
5000
ENI
1000
coloque
valor
1000
Registro
Índice
RID
5001
LDA
6234
cargue
Acc
contenido
posición
7234
6234
1000
observa
modificada
instrucción
dirección
5000
constante
modifica
instrucción
dirección
5001
dirección
máquina
Registro
Base
tarea
Relocating
Loader
simplificarse
desplazamiento
dirección
cargado
Registro
Base
instrucción
privilegiada
suma
dirección
efectiva
realiza
referencia
memoria
constantes
inmunes
influencia
referencia
memoria
modifica
automáticamente
cantidad
dirección
inicial
programa
2.2
Máquina
elemental
indexada
propone
Máquina
Elemental
Indexada
MEI
incluyendo
Registros
Índice
Registro
Base
Sumador
Direcciones
registros
entrada
RB
diagrama
bloques
máquina
muestra
Figura
8.6
figura
indica
cursiva
hardware
Obsérvese
Sumador
Direcciones
realiza
suma
aritmética
direcciones
operandos
Registro
16
bits
Registro
16
bits
Registro
base
16
bits
genera
dirección
tiempo
jecución
realiza
suma
Nótese
suma
influye
Búsqueda
dirección
instrucción
buscada
contenido
Registro
PC
acarreo
sumador
216
Fig
8.6
Diagrama
bloques
Máquina
Elemental
Indexada
2.2.1
Conjunto
instrucciones
máquina
elemental
indexada
Tabla
8.1
presentan
detalles
conjunto
instrucciones
Máquina
Elemental
Indexada
columna
izquierda
paréntesis
indica
cantidad
posiciones
memoria
ocupa
instrucción
presentan
instrucciones
Máquina
Elemental
permanecen
función
básica
Máquina
Elemental
Indexada
instrucciones
acceso
memoria
disponen
modos
direccionamiento
lógicamente
instrucciones
propuestas
Máquina
Elemental
Indexada
requerimientos
arquitectónicos
217
218
219
220
Tabla
8.1
Conjunto
instrucciones
Máquina
Elemental
Indexada
2.2.2
Ciclos
máquina
cambios
Máquina
Elemental
reflejan
ciclo
búsqueda
ejecución
continuación
presentan
Tabla
8.2
Tabla
8.6
casos
instrucciones
Blue
LDA
XXXXXX
Cargue
Acc
contenido
posición
memoria
XXXXXX
RID
aspecto
LDA
XXXXXX
Memoria
ciclos
búsqueda
ejecución
observan
Tabla
8.2
221
Tabla
8.2
Formato
ciclos
búsqueda
ejecución
instrucción
LDA
XXXXXX
222
ciclo
búsqueda
Máquina
Elemental
ciclo
ejecución
consta
ciclos
memoria
CP1
ciclo
ejecución
direcciona
posición
obtener
campo
dirección
instrucción
instrucción
ocupa
palabras
Memoria
CP2
CP4
incrementa
nuevamente
PC
forma
ciclo
búsqueda
apunte
próxima
instrucción
CP5
CP6
cargan
registros
entrada
sumador
direcciones
calcular
dirección
efectiva
operando
CP1
ejecución
direcciona
operando
orden
lectura
CP2
CP5
espera
memoria
CP6
envía
dato
leído
Acumulador
Finalmente
CP8
coloca
máquina
búsqueda
instrucción
observa
ins
trucción
utilizan
ciclos
máquina
LDA
XXXXXX
Carga
ACUMULADOR
contenido
dirección
indicada
contenido
XXXXXX
aspecto
LDA
XXXXXX
Memoria
ciclos
búsqueda
ejecución
observan
Tabla
8.3
223
224
Tabla
8.3
Formato
ciclos
búsqueda
ejecución
instrucción
LDA
XXXXXX
observa
direccionamiento
indirecto
requiere
ciclos
máquina
LDA
XXXXXX
Cargue
Acc
contenido
posición
XXXXXX
aspecto
LDA
XXXXXX
Memoria
ciclos
búsqueda
ejecución
observan
Tabla
8.4
225
Tabla
8.4
Formato
ciclos
búsqueda
ejecución
instrucción
LDA
XXXXXX
226
INC
XXX
Incrementar
Registro
Índice
RIF
valor
XXX
número
signado
bits
aspecto
INC2
XXX
Memoria
ciclos
búsqueda
ejecución
observan
Tabla
8.5
Tabla
8.5
Formato
ciclos
búsqueda
ejecución
instrucción
INC2
valor
XXXXXX
227
ENI
XXXXXX
Cargar
RID
valor
XXXXXX
aspecto
ENI
RID
XXXXXX
Memoria
ciclos
búsqueda
ejecución
observan
Tabla
8.6
Tabla
8.6
Formato
ciclos
búsqueda
ejecución
instrucción
ENI3
XXXXXX
228
Comentarios
Máquina
Elemental
Indexada
formato
fijo
instrucción
instrucciones
referencia
memoria
modos
direccionamiento
ejemplo
instrucción
LIX
XXXXXX
posee
direccionamiento
indexado
estaría
autoindexando
instrucciones
ciclos
máquina
ejecutarse
dependiendo
instrucción
direccionamiento
sugiere
lector
deduzca
ciclos
máquina
instrucciones
Máquina
Elemental
Indexada
MEI
indican
Capítulo
2.2.3
Interrupciones
entradas
-salidas
Máquina
Elemental
llevan
cabo
control
CPU
usando
instrucciones
INP
OUT
formas
manejar
operaciones
entrada
salida
inmovilizan
CPU
ocurre
transferencia
datos
velocidad
periféricos
general
inferior
CPU
eventos
producen
frecuencia
importancia
conveniente
atenderlos
momento
ocurren
eventos
externos
generan
directamente
programa
periférico
conveniente
manejar
problemas
arreglar
hardware
forma
ue
eventos
ocurren
produzca
suspensión
interrupción
automática
programa
corriente
transfiera
control
temporariamente
rutina
diseñada
especialmente
manejar
eventos
planteadas
cosas
podríamos
cla
sificar
transferencia
Entrada
Salida
forma
Control
CPU
Interrupciones
Manejo
229
Manejo
Entrada
Salida
Control
Procesador
general
operaciones
entrada
salida
iniciadas
procesador
iniciada
operación
Procesador
espera
complete
continúa
programa
principal
caso
máquina
elemental
Obsérvese
velocidad
dispositivo
inferior
Procesador
caso
general
inmovilizado
tiempo
dispositivo
sufre
desperfecto
Procesador
esperar
eternamente
Manejo
Entrada
Salida
Interrupciones
opción
principio
iniciar
operación
entrada
salida
continuar
programa
principal
dispositivo
cuestión
termina
solicita
pedido
atención
solicitud
interrupción
er
atendido
Procesador
finaliza
operación
esquema
eficaz
pérdida
tiempo
esperando
periférico
requiere
hardware
instrucciones
especiales
soporten
dispositivo
solicite
atención
necesario
identificarlo
asignar
prioridades
esquema
interrupciones
útil
caso
dispositivos
requieren
operación
entrada
salida
necesariamente
iniciadas
Procesador
anteriormente
verá
identifica
dispositivo
solicita
Interrupción
interrupciones
clasificar
Polling
Interrupciones
Vectorizadas
describir
Sistema
Elemental
Interrupciones
Máquina
Elemental
mencionar
concepto
interrupción
extiende
eventos
necesariamente
externos
caso
llamadas
interrupciones
internas
cuy
230
origen
proviene
interior
Procesador
desborde
registros
división
cero
código
operación
válido
etc.
llamadas
interrupciones
software
dispara
proceso
interrupción
instrucciones
especiales
2.2.4
Sistema
elemental
interrupciones
define
Biestable
Unidad
Control
llama
Sistema
Interrupción
valor
bit
controlarse
instrucciones
ION
IOF
UC
desactiva
procesando
interrupción
activa
proceso
concluido
sistema
interrupciones
habilitado
sistema
interrupciones
deshabilitado
dispositivo
capac
idad
interrumpir
posee
línea
solicitud
interrupción
pone
necesita
atención
Banderas
Dispositivo
BD
compuerta
OR
cuya
salida
línea
única
pedido
IRQ
interrupción
CPU
interrupcio
nes
habilitadas
SI=1
IRQ
pasa
produce
interrupción
ejecución
programa
corriente
justo
comienzo
ciclo
búsqueda
instrucción
actual
termina
ejecutarse
eventos
ocurren
CPU
acepta
interrupción
Biestable
coloca
inhabilitando
sistema
interrupciones
contenido
PC
guarda
posición
CERO
carga
PC
valor
dispara
ciclo
búsqueda
eventos
cabo
Unidad
Control
esquema
Figura
8.7
biestable
PRO
indica
CPU
atendiendo
interrupción
verá
condiciona
acciones
realiza
instrucción
INP
YY
figura
obs
ervan
Biestable
biestable
PRO
Biestable
mencionado
tercer
Biestable
auxiliar
encargado
generar
señal
señal
dispara
ciclo
INTERRUPCIÓN
máquina
Búsqueda
Ejecución
Interrupción
231
Interrupción
ocurre
ve
Figura
línea
IRQ
indicando
dispositivo
requiere
atención
sistema
interrupciones
habilitado
CP8
Ejecución
ciclo
Búsqueda
instrucción
corriente
ciclo
asegura
finalización
ejecución
instrucción
corriente
Fig
8.7
Unidad
Control
incluyendo
sistema
elemental
interrupciones
Ciclo
Interrupción
Tabla
8.7
indica
ciclo
interrupción
232
Tabla
8.7
Ciclo
interrupción
Rutina
Interrupción
posición
memoria
instrucción
salto
rutina
interrupción
cuya
tarea
consiste
secuencia
acciones
Figura
8.8
233
Fig
8.8
Secuencia
acciones
rutina
interrupción
Salvar
guardar
memoria
contenidos
Registros
Contexto
PC
restituirlos
terminado
proceso
acción
implementarse
automáticamente
ciclo
interrupción
caso
implicar
ciclo
máquina
Determinar
qui
én
causó
interrupción
acción
realizarse
POLLING
llamados
VEC
TORES
INTERRUPCIÓN
Saltar
Subrutina
Atención
periférico
determinado
Subrutina
específica
periférico
realiza
transferencia
Entrada
Salida
finalizar
Subrutinas
Atención
Periféricos
saltan
porción
código
restaura
contexto
esencial
transparente
est
proceso
interrupción
programa
principal
Programa
principal
continuará
234
hubiera
Restaurar
contexto
implica
volver
cargar
registros
CPU
valores
tenían
acción
habilitar
SISTEMA
INTERR
UPCIONES
retornar
Programa
Principal
realizarse
instrucción
llamada
RTI
Retorno
Interrupción
evitar
retornar
produzca
interrupción
pendiente
ciclo
máquina
RTI
muestra
Tabla
8.8
Tabla
8.8
Ciclo
máquina
instrucción
RTI
235
Polling
determinar
periférico
solicitó
interrupción
aplicarse
técnica
POLLING
recuerda
dispositivo
capacidad
interrumpir
posee
Bandera
Dispositivo
BD
BD
indica
solicita
interrupción
caso
contrario
técnica
polling
pregunta
secuencialmente
BD
orden
BD
resulta
salto
subrutina
atención
periférico
corresponda
proponer
instrucción
verifique
banderas
SKF
XX
Omitir
próxima
instrucción
XX
CERO
XX
representa
bandera
corresponde
dispositivos
solicitan
interrupción
rutina
interrupción
llamada
POLLING
aspecto
SKF
bandera
omitir
próxima
instrucción
JMP
Rutina1
Salte
Rutina
Atención
Dispositivo
SKF
bandera
omitir
próxima
instrucción
JMP
Rutina2
Salte
Rutina
Atención
Dispositivo
SKF
bandera
omitir
próxima
instrucción
JMP
Rutina3
Salte
Rutina
Atención
Dispositivo
SKF
bandera
omitir
próxima
instrucción
JMP
Rutina4
Salte
Rutina
Atención
Dispositivo
orden
realiza
verificación
banderas
dispositivo
Rutina
Interrupción
determina
prioridad
dispositivo
solicita
atención
caso
existir
solicitud
esquema
probable
periférico
atendido
difícilmente
atendido
solución
aspecto
cambiar
prioridades
alterando
orden
instrucciones
práctico
236
alternativa
implementa
Máquina
Elemental
Indexada
agregar
registro
llamado
Registro
Máscara
RM
cuyo
contenido
modificarse
instrucción
EMR
Valor
registro
permite
enmascarar
evitar
curso
solicitudes
interrupción
Figura
8.9
presenta
sistema
interrupciones
descripto
Fig
8.9
Sistema
interrupciones
usando
Banderas
Dispositivos
Registro
Máscaras
prioridades
Banderas
Dispositivo
BD
bits
provienen
dispositivos
solicitan
atención
borran
instrucción
SKF
XX
lee
bandera
237
Vector
Interrupciones
método
implementa
Máquina
Elemental
Indexada
determinar
interrumpe
llamado
VECTORIZADO
esquema
dispositivo
interrumpir
asigna
dirección
llamada
vector
interrupción
Trap
Vector
Address
dirección
suplida
dispositivo
interrumpe
programador
almacenar
dirección
comienzo
Rutina
Atención
corresponda
forma
toma
lugar
salto
indirecto
vector
Rutina
Atención
Figura
8.10
inferirse
método
rápido
POLLING
necesario
preguntar
bandera
bandera
conveniente
considerar
señal
reconocimiento
interrupción
ACK
generada
Unidad
Control
reconocido
solicitud
interrupción
comienza
proceso
atención
Figura
8.11
indica
conexionado
externo
CPU
señal
reconocimiento
ACK
encadena
Dispositivo
siguientes
prioridad
Dispositivo
izquierda
señal
similar
señal
BD
bandera
solicitud
interrupción
pone
dispositivo
correspondiente
necesita
atención
dispositivo
ecibe
señal
reconocimiento
ACK
vuelca
BUS
dibujado
dirección
pone
bandera
I.
señal
bit
registro
máscara
distribuido
periféricos
pone
programa
hardware
software
necesario
implementación
verificación
vectorizada
desarrolla
invita
lector
planteo
2.2.5
Inicio
transferencia
comprender
realiza
transferencia
Entrada
Salida
necesario
consideraciones
Periféricos
periféricos
dispositivos
características
externos
MEI
Básicamente
debemos
considerar
periféricos
poseer
238
Fig
8.10
Vector
Interrupciones
Elementos
micromecán
ica
servomotores
relay
motores
paso
paso
sensores
ópticos
sensores
magnéticos
indicadores
luminosos
componentes
electrónicos
media
potencia
etc.
Circuitos
electrónicos
permiten
controlar
elementos
constitutivos
periférico
CONTROLADOR
Circuitos
electrónicos
permiten
adaptación
niveles
tensión
corriente
INTERFASE
conectarlos
MEI
general
acciones
control
periférico
realizan
Controladores
sistemas
electrónicos
dedicados
específicamente
periférico
cuestión
forma
control
nivel
tarea
CPU
CPU
ve
Periféricos
registros
comunica
mayoría
periféricos
Controladores
dejan
CPU
siguientes
registros
239
REGISTRO
DATOS
fluyen
datos
transferencia
REGISTRO
CONTROL
CPU
envía
comandos
REGISTRO
refleja
periférico
Fig
8.11
Sistema
interrupciones
usando
bit
Dispositivos
señal
ACK
CPU
prioridades
periféricos
clasifican
función
dirección
datos
fluyen
Bus
Periféricos
Entrada
Periféricos
salida
datos
dirigen
Periférico
Salida
viceversa
simplificar
explicación
considerar
periféricos
REGISTRO
DATOS
Ciclo
instrucciones
entrada
salida
interrupciones
transferencias
entrada
salida
general
iniciadas
programa
instrucciones
INP
YY
OUT
YY
240
instrucciones
ciclos
máquina
vistos
máquina
Elemental
diferencia
consiste
ue
realizan
verificación
señal
Ready
Simplemente
TRA
pulso
reloj
TRA
OUT
YY
espera
señal
Periférico
genera
pulso
reloj
duración
indica
Periféric
YY
comienzo
transferencia
salida
Tabla
8.9
periférico
recibir
TRA
carga
Registro
Entrada
valor
bits
significativos
ACC
BUS
comienza
acción
correspondiente
or
ejemplo
imprimir
programador
deberá
cargar
ACC
dato
desea
transferir
instrucción
OUT
YY
Tabla
8.9
Ciclo
instrucción
OUT
YY
INP
YY
genera
pulso
TRA
instrucción
OUT
YY
PRO
CPU
involucrada
Proceso
Interrupción
Tabla
8.10
caso
CPU
esté
Proceso
Interrupción
lugar
Rutina
Interrupción
genera
TRA
CP8
cargan
bits
significativos
ACC
valor
Registro
Salida
periférico
YY
PYY
Bus
S.
241
Tabla
8.10
Ciclo
instrucción
INP
YY
sugiere
lector
ejercitación
escribir
Subrutina
manejar
impresora
Periférico
salida
capaz
escribir
caracter
ASCII
desean
escribir
100
caracteres
ubicados
Memoria
posición
1000
Controladores
elementales
periféricos
PERIFÉRICO
SALIDA
Perifé
rico
Salida
ejecutado
instrucción
OUT
YY
Registro
Datos
cargará
dato
esté
BUS
periférico
seleccionado
YY
reciba
señal
TRA
iniciará
acciones
Ejemplo
Periférico
Salida
P32
OUT
32
Figura
8.12
Fig
8.12
Transferencia
salida
periférico
32
242
PERIFÉRICO
ENTRADA
Periférico
Entrada
ejecutado
instrucción
INP
YY
opciones
PRO
Máquina
atendiendo
interrupción
ejecuta
INP
YY
periférico
YY
recibe
TRA
inicia
acciones
obtener
dato
solicitado
PRO
Máquina
atendiendo
interrupción
Registro
Datos
dato
solicitado
disp
onible
Bus
periférico
seleccionado
CP7
instrucción
INP
YY
señal
TRA
genera
caso
instrucción
INP
YY
Ejemplo
Periférico
Entrada
P16
INP
16
Figura
8.13
Fig
8.13
Transferencia
entrada
periférico
16
Registro
puntero
pila
Sistema
Interrupciones
descripto
permite
CPU
interrumpida
atendiendo
interrupción
dirección
retorno
guardada
posición
CERO
perdería
contexto
máquina
incluido
PC
guardara
memoria
estructura
LIFO
pila
cuya
dirección
inicial
indicara
Registro
atender
interrupciones
interrupción
interrupciones
anidadas
registro
llama
REGISTRO
PUNTERO
PILA
SP
interrupción
incrementarse
Registro
cantidad
adecuada
contenido
decrementarse
retorno
interrupción
biestable
debería
ponerse
justo
comienzo
Rutina
Atención
Dispositivo
243
programador
escribir
Rutina
Interrupción
dispositivos
menor
prioridad
puedan
interrumpir
proceso
interrupción
corriente
prioridad
habr
ía
agregar
hardware
instrucciones
deja
lector
bosquejar
modelación
Máquina
Elemental
Indexada
Interrupciones
anidadas
2.3
estructura
convencional
máquina
esencial
procesador
actual
generalización
conceptos
introducidos
previamente
llevaría
organización
memoria
máquina
convencional
Imaginemos
programa
memoria
multiprogramación
contexto
necesario
programa
posiblemente
distintos
usuarios
deb
poseer
sector
memoria
código
datos
opera
datos
locales
Exista
ctor
destinado
datos
compartidos
programas
datos
globales
Esté
previsto
sector
destinado
Sistema
Interrupciones
sector
destinado
PILA
Exista
sector
destinado
programa
Monitor
administre
Sistema
observa
memoria
organizada
sectores
Monitor
cumplir
básicamente
siguientes
tareas
Organizar
Memoria
Administrar
ejecución
Programas
Reubicar
Programas
Prioridades
Memoria
disponible
Datos
Globales
Administrar
Interrupciones
Habilitación
Prioridades
Definir
tamaño
PILA
función
actual
Sistema
resumen
Monitor
administrar
recursos
Siste
ma
adecuadamente
dependerá
desenvolvimiento
máquina
distintos
requerimientos
usuario
apartado
verá
microprocesador
Intel
8088
sirvió
CPU
primeras
PC
Computadora
Personal
arquitectura
244
fundamental
alcance
inicial
Guías
Didácticas
conserva
procesadores
actuales
máquina
convencional
Microprocesador
Intel
8088
3.1
Introducción
término
microprocesador
refiere
CPU
contenida
circuito
integrado
mercado
microprocesadores
utilizados
CPU
máquina
convencional
elegido
Intel
8088
Figura
8.14
in
iciador
PC
IBM
PC
XT
estructura
similar
procesadores
Intel
8086
80186
80286
80386
80486
Pentium
difundido
Fig
8.14
Configuración
pines
8088
Intel
8088
siguientes
características
generales
Interfase
bus
datos
bits
Arquitectura
interna
16
bits
245
Capacidad
direccionamiento
Mbyte
Compatibilidad
Software
8086
CPU
Variedad
modos
direccionamiento
Operaciones
bloques
palabras
bytes
Aritmética
signada
-signada
16
bits
binario
decimal
incluyendo
multiplicación
división
14
registros
16
bits
líneas
pines
8088
describen
Tabla
8.11
bus
datos
bit
8088
microprocesador
16
bits
multiplexado
tiempo
líneas
datos
momento
direcciones
memoria
Tabla
8.11
Símbolos
tipo
función
pines
8088
246
3.2
Diagrama
Bloques
Figura
8.15
Fig
8.15
Diagrama
bloques
microprocesador
8088
247
3.2.1
BIU
EU
funciones
internas
8088
divididas
lógicamente
unidades
procesamiento
BIU
EU
unidades
interactuar
directamente
realizando
operaciones
asincrónicamente
Unidad
Interfaz
bus
BIU
cumple
siguientes
funciones
Busca
instrucciones
memoria
Llena
cola
instrucciones
consta
bytes
FIFO
Proporciona
control
bus
Proporciona
EU
operandos
procesar
BIU
formada
sumador
conjunto
registros
16
bits
cola
instrucciones
bytes
circuitos
relacionados
control
bus
tareas
pre-búsqueda
instrucciones
realiza
BIU
indicados
Figura
8.15
Unidad
ejecución
EU
recibe
instrucción
buscada
previamente
BIU
encarga
ejecutarla
EU
consta
Unidad
Control
CU
Unidad
Lógico
Aritmética
ALU
conjunto
registros
16
bits
Figura
8.15
observa
8088
posee
buses
internos
ALU
posee
registros
temporarios
entrada
estando
limitada
entrada
salida
ALU
registro
temporario
fluir
bus
registro
incluidos
entrada
operaciones
16
bits
condiciones
resultantes
almacenadas
registro
condiciones
BIU
detecta
bus
externo
ocioso
envía
solicitud
memoria
leer
byte
flujo
instrucciones
bytes
leídos
almacenados
temporariamente
cola
instrucciones
EU
requiere
byte
instrucción
toma
cola
dimensión
bytes
cola
responde
compromiso
EU
esperando
byte
colas
largas
ocuparían
bus
llenándose
bytes
utilizarse
ejemplo
ejecuta
instrucción
salto
Unidad
Control
8088
micropr
ogramada
posee
ROM
504
palabras
21
bits
recomienda
leer
máquina
elemental
microprogramada
almacena
90
248
microprocedimientos
instrucción
ejecutarse
requerirá
microprocedimiento
instr
ucción
almacenada
cola
instrucciones
transferida
registro
instrucciones
decodificador
extrae
disemina
Unidad
Control
información
relacionada
fuente
destino
operando
transfiere
registros
N.
código
operación
transfiere
registro
indicar
ALU
operación
registro
indicar
ALU
operación
16
bits
código
operación
transfiere
combinacional
PLA
obtener
dirección
comienzo
microprocedimiento
correspondiente
microprocedimiento
máximo
16
microinstrucciones
exclusivos
instrucción
ejemplo
microprocedimientos
comunes
instrucciones
relacionados
cálculo
direcciones
formato
microinstrucción
8088
observa
Figura
8.16
incluye
siguientes
campos
Fig
8.16
Formato
microinstrucción
8088
Campo
Fuente
Indica
registro
fuente
operación
Campo
Destino
Indica
registro
destino
operación
Campo
Tipo
Indica
tipo
microinstrucción
Operación
ALU
Operación
memoria
Salto
corto
Salto
Llamada
microprocedimiento
Contabilidad
Campo
ALU
Indica
operación
ALU
Campo
Registro
Proporciona
operando
Campo
Condición
Indica
activación
registro
249
microinstrucciones
ejecutan
ciclo
rel
oj
dirección
microinstrucción
ejecutar
proporciona
código
operación
instrucción
PLA
cargando
microMAR
observa
Figura
8.14
microMAR
cargado
ROM
traslación
mapea
direcciones
bits
registro
SR
ROM
traslación
microprograma
requiere
salto
registro
SR
utiliza
guardar
dirección
retorno
micro-subrrutina
estudio
detalle
funcionam
iento
Unidad
Control
8088
escapa
alcance
Guía
Didáctica
obstante
considerar
similar
máquina
elemental
microprogramada
microprograma
8088
microprocesadores
accesible
usuario
estructura
particular
micro
consecuencia
consideraciones
tecnológicas
mercado
posteriormente
harán
consideraciones
generales
ventajas
desventajas
microprogramación
3.2.2
Registros
8088
8088
catorce
registros
agrupan
siguientes
categorías
Registros
generales
registros
generales
16
bits
dividen
grupos
registros
direccionables
16
bits
bits
AX
Acumulador
usado
almacenar
resultados
operaciones
lectura
escritura
memoria
puertos
AH
BX
Base
usado
direccionamiento
BH
BL
CX
Contador
usado
interacciones
contador
CH
CL
DX
Datos
usado
acceso
datos
DH
DL
registros
índice
registros
base
BP
Puntero
base
usado
direccionamiento
Índice
usado
direccionamiento
DI
Índice
usado
direccionamiento
SP
Puntero
pila
apunta
irección
pila
utilizada
250
Registros
segmento
registros
16
bits
propósitos
especiales
relacionados
segmentación
memoria
CS
Selecciona
área
memoria
destinada
código
programa
DS
Selecciona
área
memoria
destinada
datos
SS
Selecciona
área
memoria
destinada
pila
STACK
Selecciona
área
memoria
destinada
Registros
control
registros
16
bits
propósitos
especiales
Registro
condiciones
Bit
Acarreo
C=1
acarreo
Bit
usado
Bit
Paridad
P=1
resultado
número
par
Bit
usado
Bit
AC
Acarreo
auxiliar
AC
acarreo
bit
bit
resultado
Bit
usado
Bit
Cero
Z=1
resultado
cero
Bit
Signo
S=1
resultado
negativo
Bit
Trap
T=1
ocurre
interrupción
Bit
Interrupción
I=1
indica
interrupciones
habilitadas
Bit
10
Dirección
D=1
indica
sentido
alto
procesamiento
cadenas
Bit
11
Overflow
O=1
overflow
Bit
12
usado
Bit
13
usado
Bit
14
usado
Bit
15
usado
IP
Puntero
instrucciones
indica
dirección
próxima
instrucción
ejecutar
3.2.3
Organización
memoria
memoria
organizada
conjunto
segmentos
secuencia
lineal
64
kbytes
memoria
direcciona
usando
componentes
dirección
consistentes
selector
segmento
16
bits
offset
16
bits
Figura
8.17
indica
segmento
seleccionado
indica
byte
deseado
segmento
instrucciones
direccionan
251
operandos
memoria
deberán
especificar
segmento
offset
mayoría
casos
necesario
indicar
forma
explícita
segmento
registro
segmento
correcto
elegido
automáticamente
Tabla
8.12
Instrucciones
especiales
permiten
especificar
segmento
casos
determinados
Fig
8.17
Suma
segmento
offset
Cabe
mencionar
memoria
disponible
finalidad
primeras
03FFh
posiciones
verá
posteriormente
encuentran
destinadas
proceso
interrupciones
Fh
posiciones
FFF0h
FFFFh
reservadas
operaciones
carga
programa
inicial
8088
recibe
señal
pin
RESET
inicializa
IP
apunte
posición
FFF0h
debería
instrucción
salto
rutina
inicio
desprende
memoria
RAM
Necesariamente
sectores
memoria
ROM
252
Tabla
8.12
Selección
registro
segmento
3.2.4
Modos
direccionamiento
8088
posibles
modos
direccionamiento
especificar
operandos
provistos
instrucciones
operan
registros
operandos
inmediatos
operando
registro
operando
registros
generales
16
bits
ejemplo
MOV
AX
DX
DX
AX
operando
inmediato
operando
incluido
instrucción
ejemplo
MOV
AH
14
14
AH
modos
direccionamiento
restantes
permiten
especificar
operandos
ubicados
segmento
memoria
observó
dirección
operando
memoria
posee
componentes
16
bits
selector
segmento
offset
selector
segmento
suple
registros
segmento
offset
calcula
suma
combinaciones
siguientes
elementos
dirección
desplazamiento
valor
16
bits
incluido
instrucción
base
contenido
registro
base
BP
BX
índice
contenido
registro
índice
DI
253
combinación
elementos
dirección
define
siguientes
modos
directo
offset
contenido
instrucción
desplazamiento
ejemplo
MOV
14
DS
10h
14h
indirecto
registro
offset
contenido
registros
BX
BP
DI
ejemplo
MOV
BX
CX
CX
DS
10h
BX
basado
offset
resulta
suma
desplazamiento
contenido
BP
BX
ejemplo
MOV
BP
2A
2A
DS
10h
BP
3h
indexado
offset
resulta
suma
desplazamiento
contenido
DI
ejemplo
MOV
2A
2A
DS
10h
3h
basado
indexado
offset
resulta
suma
contenido
registro
base
registro
índice
ejemplo
MOV
BP
2A
2A
DS
10h
BP
basado
indexado
desplazamiento
offset
resulta
suma
contenido
registro
base
registro
índice
desplazamiento
ejemplo
MOV
BP
I+
2A
2A
DS
10h
BP
3h
Cabe
aclarar
acarreo
sumas
ignora
desplazamiento
valor
signado
caso
valor
bits
extiende
16
bits
MSB
bit
signo
cabe
aclarar
offset
obtenerse
registro
IP
búsqueda
instrucción
instrucciones
salto
caso
contenido
IP
modificarse
formas
salto
relativo
contenido
IP
suma
desplazamiento
salto
directo
contenido
IP
cambia
desplazamiento
254
salto
indirecto
contenido
IP
cambiado
offset
obtenido
cualquiera
modos
indirectos
vistos
anteriormente
3.2.5
Conjunto
instrucciones
instrucciones
8088
dividen
categorías
Transferencia
datos
Aritméticas
Lógicas
desplazamiento
rotación
manipulación
cadenas
control
programa
control
procesador
instrucción
referirse
cero
operandos
operando
residir
registro
instrucción
memoria
instrucciones
cero
operando
NOP
HLT
byte
longitud
operando
INC
DEC
usualmente
bytes
longitud
operandos
MOV
ADD
usualmente
longitud
bytes
referencia
reg
istro
locación
memoria
instrucciones
permiten
siguientes
tipos
operaciones
registro
registro
memoria
registro
inmediato
registro
registro
memoria
inmediato
memoria
tipos
datos
soporta
8088
Entero
Valor
numérico
signado
16
bits
operaciones
asumen
representación
complemento
Ordinal
Valor
numérico
signo
16
bits
Puntero
cantidad
32
bits
compuesto
selector
segmento
offset
16
bits
Cadena
Secuencia
continua
bytes
palabras
contener
64
Kbytes
BCD
byte
representa
dígito
BCD
BCD
empaquetado
byte
representa
dígitos
BCD
nibble
255
3.2.6
Direccionamiento
Entrada
Salida
operaciones
entrada
salida
direccionar
64
registros
S.
dirección
aparece
bus
direcciones
forma
dirección
memoria
instrucciones
entrada
salida
puerto
variable
registro
DX
contener
dirección
registro
puerto
capacidad
direccionamiento
cambio
instrucciones
puerto
fijo
direccionar
256
locaciones
página
cero
3.2.7
Interrupciones
8088
8088
provisto
sistema
interrupciones
vectorizado
clasificar
Interrupciones
iniciadas
hardware
Externas
enmascarables
pin
INTR
enmascarables
pin
NMI
Internas
Interrupciones
iniciadas
software
instrucción
INT
XX
interrupción
resulta
transferencia
control
programa
primeras
1024
03FF
posiciones
memoria
reside
tabla
256
elementos
contiene
punteros
programas
servicio
interrupción
elemento
puntero
bytes
corresponde
llama
tipo
interrupción
dispositivo
interrumpe
suministra
proceso
reconocimiento
interrupción
valor
bits
vector
tipo
interrupción
corresponda
interrupción
inicia
pin
NMI
prioridad
pin
INTR
producirá
interrupción
tipo
general
activar
rutinas
falla
alimentación
vector
suplido
internamente
ocurre
interrupción
tipo
automáticamente
borra
bit
registro
enmascarar
posibles
interrupciones
iniciadas
pin
INTR
interrupción
requerida
pin
INTR
interrupciones
encuentran
habilitadas
bit
I=1
registro
256
inicia
proceso
atención
interrupción
termina
ejecutar
instrucción
corriente
bit
borra
salva
contexto
actual
contenido
conjunto
registros
stack
emite
señal
reconocimiento
interrupción
INTA
recibirla
dispositivo
interrumpe
vuelca
bus
vector
vector
utiliza
terminar
puntero
rutina
atención
interrupción
transfiere
control
dicha
rutina
terminada
rutina
restituye
contexto
continúa
ejecución
programa
interrumpido
caso
existir
dispositivo
externo
interrumpir
necesita
adicionar
hardware
controlador
interrupciones
ejemplo
controlador
8258
capaz
manejar
dispositivos
interrupciones
software
reciben
tratamiento
iniciadas
INTR
vector
caso
suministra
campo
XX
instrucción
INT
XX
vectores
disponibles
utilizados
8088
reserva
usos
específicos
Microprocesador
8088
may
oría
CPUs
PCs
Rutinas
Servicio
forman
programa
interrumpido
aportadas
sistema
operativo
cargan
disco
directamente
memoria
ROM
BIOS
Basic
Input
Output
System
ru
tina
servicio
interrupción
porción
código
ocupa
cabo
tarea
específica
tipo
interrupción
soporta
ejecución
programa
registros
internos
procesador
PC
AX
SP
etc.
contienen
información
vinculada
rutina
servicio
utiliza
registros
ejecución
necesario
momento
interrupción
información
contenida
registros
resguarde
memoria
recupere
finaliza
ejecución
rutina
servicio
permite
programa
original
continuar
comprende
importancia
preservar
contenido
contador
programa
puntero
instrucciones
contiene
dirección
pró
xima
instrucción
ejecutar
contenidos
registros
almacenan
zona
memoria
principal
denominada
Pila
Stack
trabaja
modalidad
LIFO
Last
In
First
Out
retorno
rutina
servicio
determinado
instrucción
IRET
rescata
registros
Pila
257
salvaguardados
ciclo
reconocimiento
interrupción
cargándolos
CPU
Ejercitación
Ejercicio
Represente
estructura
CPU
8088
indicando
composición
interna
subunidades
BIU
EU
conexión
memoria
principal
Mbytes
buses
correspondientes
Ejercicio
efecto
siguientes
instrucciones
octal
Indique
mnemónico
correspondiente
Acceda
set
instrucciones
simulador
8088
resolución
ejercicio
F4
BE503A
BF028B
B80100
01D8
F7D2
35AF00
F7D9
E900FF
E822FF
3400
A21300
Ejercicio
Complete
cuadro
restantes
formas
representación
Mnemónico
hexadecimal
binario
MOV
CX
DX
09D8
0111010111111010
XOR
AX
BX
0111001111110110
F7D9
INC
Ejercicio
Indique
cantidad
bytes
almacenamiento
modos
direccionamiento
utilizados
instrucciones
cuadro
Ejercicio
258
Ejercicio
Indique
posición
memoria
accederá
leer
instrucción
contenidos
registros
IP
CS
1F1A
F341
respectivamente
Ejercicio
Suponiendo
contenidos
registros
DS
Segmento
Datos
CS
Segmento
Código
024B
B000
respectivamente
indicar
posición
física
inicio
segmentos
datos
código
Ejercicio
Suponiendo
contenidos
registros
DS
Segmento
Datos
CS
Segmento
Código
000
B246
respectivamente
indicar
posición
física
inicio
segmentos
datos
código
Observa
problema
Ejercicio
Indicar
valor
queda
almacenado
operando
destino
ejecutar
siguientes
instrucciones
ADD
AX
BX
ADD
AX
BX
ADD
BX,0124
ADD
1A1B
ADD
BX
SI+1A
Datos
AX=1A1B
BX=147A
SI=2682
AL=1B
DS:147A
AB
DS:147B
DC
DS:1A1B=12
DS:269C=21
DS:269D
A2
Ejercicio
Escriba
instrucciones
8088
código
programa
lenguaje
alto
nivel
tipo
C++
considerando
variables
enteras
proponiendo
posiciones
memoria
almacenamiento
datos
programa
for
10
a[i
b[i
259
CAPÍTULO
Arquitectura
Avanzada
Visión
General
Pipeline
2.1
Introducción
2.2
Predicción
dirección
salto
2.3
Pipeline
máquina
elemental
Memoria
Caché
3.1
Principio
localidad
3.2
Manejo
caché
DMA
4.1
Controlador
DMA
4.2
Scanner
Evolución
Arquitecturas
5.1
CISC
5.2
RISC
5.3
Comparación
RISC
CISC
Evolución
Procesador
8088
6.1
Funcionamiento
básico
procesador
Intel
80486
6.2
Funcionamiento
básico
procesador
Intel
Pentium
Ejercitación
260
Capítulo
Arquitectura
Avanzada
Visión
General
objetivo
diseño
computadora
rápida
logra
veloz
hardware
limitaciones
velocidad
propagación
señales
eléctricas
conductor
cobre
orden
20
cm
ns
ns
recorre
20
cm
pretende
construir
máquina
ciclo
instrucción
nanosegundos
bus
debería
longitud
significativamente
menor
20
cm
presenta
brecha
tecnológica
limitación
medida
aumentamos
velocidad
máquina
aumenta
calor
generado
construirlas
reducido
espacio
dificulta
tarea
disiparlo
Construir
máquinas
rápidas
confiables
costoso
producción
serie
implica
elevados
costos
impracticable
construir
máquinas
rápidas
basándose
tecnologías
rápidas
aumentar
velocidad
argumento
gestores
trabajan
simultáneamente
realizan
gestión
menor
tiempo
gestor
Obviamente
gestor
deberá
tarea
organizar
acciones
gestores
Ade
debería
preverse
gestor
tareas
organización
caso
gestor
encargado
falle
tipo
procesamiento
denomina
PROCESAMIENTO
PARALELO
implica
CPUs
trabajando
coordinada
simultáneamente
comando
forma
aumentar
velocidad
procesamiento
definimos
𝑉𝑝
𝐼𝑛𝑠𝑡𝑟𝑢𝑐𝑐𝑖𝑜𝑛𝑒𝑠
𝑈𝑛𝑖𝑑𝑎𝑑
𝑑𝑒
𝑡𝑖𝑒𝑚𝑝𝑜
𝐼𝑛𝑠𝑡𝑟𝑢𝑐𝑐𝑖𝑜𝑛𝑒𝑠
𝑆𝑒𝑔𝑢𝑛𝑑𝑜
adicionar
hardware
necesario
qu
CPU
busque
comience
ejecutar
instrucción
terminado
ejecutar
instrucción
corriente
mecanismo
llama
PROCESAMIENTO
PIPELINE
261
mencionado
aumentar
velocidad
procesamiento
podríamos
agreg
ar
memoria
rápida
menor
capacidad
UM
cercana
CPU
bus
privado
almacenar
datos
frecuente
evitando
UM
memora
rápida
conoce
MEMORIA
CACHÉ
Finalmente
agregar
hard
ware
permita
transferencias
datos
directamente
Unidad
Memoria
periféricos
viceversa
intervención
mínima
CPU
forma
aumentaría
velocidad
procesamiento
dejaría
disponible
CPU
dure
transferencia
recurso
conocido
Acceso
Directo
Memoria
DMA
Pipeline
2.1
Introducción
Unidad
Control
tarea
analizó
previamente
acciones
realiza
secuencialmente
Búsqueda
Ejecución
subdividir
Decodificación
Cálculo
Direcciones
Búsqueda
Operandos
Ejecución
propiamente
dicha
Guardar
resultado
notar
subdividir
Ejecución
instrucción
tareas
tarden
tiempos
similares
asignan
Unidades
Funcionales
tarea
mencionada
Unidades
Funcionales
operan
forma
simultánea
coordinada
aumentar
velocidad
procesamiento
factor
importante
Unidad
Control
extrae
instrucción
dirige
unidades
funcionales
ejecución
Unidad
Control
procede
extraer
próxima
instrucción
envía
unidades
funcionales
sucesivamente
unidades
funcionales
estén
ocupadas
Supongamos
Unidad
Control
Unidades
Funcionales
indica
Tabla
9.1
Horizontalmente
262
considerado
tiempo
indicados
CICLOS
MEMORIA
números
13
Unidad
Control
coordina
acciones
suministrar
sucesivas
Unidades
Funcionales
Instrucciones
indicadas
I1
I2
IS
etc.
IS
indica
instrucción
Salto
Tabla
9.1
Comportamiento
Unidades
Funcionales
13
ciclos
memoria
Figura
9.1
presenta
ejemplo
Pipeline
Consiste
Unidades
Funcionales
Unidad
Control
dedicadas
funciones
específicas
Tabla
9.1
observa
proceso
ciclo
procede
buscar
instrucción
ciclo
decodifica
instrucción
busca
instrucción
sucesivamente
Fig
9.1
Ejemplo
pipeline
2.2
Predicción
dirección
salto
instrucción
representa
salto
observa
Tabla
9.1
ciclo
procede
buscar
próxima
instrucción
ejecutar
Teniendo
estadísticamente
verifica
instrucci
ones
salto
representan
30
programa
incremento
velocidad
lograrse
pipeline
factor
caso
ve
263
reducido
porcentaje
indicado
Vale
pena
estudiar
tipos
saltos
posibles
disminuir
porcentaje
categorías
saltos
saltos
incondicionales
saltos
condicionales
saltos
iterativos
forma
disminuir
porcentaje
penalización
salto
condicional
ejecutar
próxima
instrucción
considerar
salto
caso
efectivamente
salto
concreta
perdido
continúa
proceso
normal
pipeline
salto
produce
eliminarse
instrucciones
actualmente
línea
volver
comenzar
infiere
técnica
dotar
procesador
registros
auxiliares
salven
contexto
sistema
momento
salto
forma
restituirlos
caso
salto
produzca
técni
ca
eficaz
caso
saltos
incondicionales
producen
técnica
utilizada
predicción
dirección
salto
programador
raramente
escribe
programa
fuente
lenguaje
ensamblador
nstrucciones
máquina
Generalmente
escribe
lenguaje
nivel
superior
Pascal
Visual
HTML
etc
CPU
entiende
programa
escrito
lenguaje
máquina
programa
lenguaje
ensamblador
traducido
1s
0s
necesario
traducir
programa
fuente
escrito
lenguaje
superior
lenguaje
máquina
proceso
llama
COMPILACIÓN
programa
realiza
COMPILADOR
clases
predicciones
estáticas
momento
compilación
dinámicas
momento
ejecución
caso
Compilador
estima
dirección
instrucciones
salto
genera
ejemplo
saltos
iterativos
probable
salto
produzca
inicio
iteración
incondicionales
conoce
di
rección
condicionales
suponer
probabilidad
ocurrencia
condición
función
estimar
dirección
probable
caso
Unidad
Control
construye
tabla
saltos
guarda
comportamiento
decidir
dirección
próxima
instrucción
probable
requiere
agregar
hardware
264
utilización
técnicas
logrado
reducir
porcentaje
penalización
10
PIPELINE
co
mo
ejemplo
cuente
técnicas
predicción
dirección
salto
aumentar
Vp
expresión
𝑉𝑝(𝑝𝑖𝑝𝑒𝑙𝑖𝑛𝑒
𝑉𝑝
0,9
cantidad
Unidades
Funcionales
UC
factor
dep
ende
tiempo
acceso
memoria
reloj
máquina
2.3
Pipeline
máquina
elemental
Ciclos
Máquina
Máquina
Elemental
observó
BUS
UM
reparte
Pulsos
BUS
eventualmente
órdenes
OL
OE
Pulsos
esperan
UM
Pulsos
orden
puntual
ej.
TRA=1
idea
aprovechar
cantidad
pulsos
acción
forma
BUS
esté
ocupado
tiempo
lograrse
reestructurando
UC
Unidades
Funcionales
Búsqueda
Ejecución
puedan
funcionar
forma
simultánea
forma
esperando
UM
usarse
bus
alcanzar
permanente
UM
di
sparando
ciclos
memoria
permanentemente
2.3.1
Unidad
control
pipeline
Unidad
Control
Cableada
consta
Unidades
Funcionales
Unidad
Funcional
Búsqueda
UFB
Unidad
Funcional
Ejecución
UFE
unidades
funcionar
simultáneamente
ciclo
contará
pulsos
CP1
CP6
suponemos
UM
tiempo
acceso
pulsos
sexto
pulso
necesario
rescatar
dato
eventualmente
leído
UM
265
instrucciones
Máquina
Elemental
simples
formato
fijo
decodificación
código
operación
simple
decodificación
cuan
do
instrucción
buscada
carga
Registro
Instrucciones
CP6
diagrama
bloque
UC
PIPELINE
ve
Figura
9.2
órdenes
búsqueda
ejecución
emiten
sincrónicamente
pulsos
CP1
CP6
Secuenciador
abilita
UFB
UFE
señales
HB
Unidad
Control
observará
biestable
diferencia
vemos
biestable
UFB
cuya
salida
HB
habilitar
Unidad
Funcional
Búsqueda
biestable
UFE
cuya
salida
habilitar
Unidad
Funcional
Ejecución
simplificar
mantiene
habilitada
Unidad
Funcional
Ejecución
RUN
generar
CP1
CP6
contador
binario
natural
bits
decodificador
binar
io
UC
Cableada
Guía
Didáctica
Ciclo
Memoria
pulsos
reloj
Tabla
9.2
PIPELINE
tiempo
transcurre
abajo
columna
izquierda
acumulado
pulsos
requeridos
ejecutar
distintas
instrucciones
columna
ACCIONES
indica
Unidad
Control
PREGUNTA
Agregar
incrementador
Máquina
Elemental
resultaría
aumento
velocidad
procesamiento
2.3.2
Secuenciador
UC
pipeline
Figura
9.3
presenta
secuenciador
Unidad
Control
Pipeline
arranca
Máquina
START
UC
pone
HB
señal
RUN
1er
ciclo
266
Fig
9.2
Diagrama
bloque
Unidad
Control
267
Fig
9.3
Secuenciador
Unidad
Control
finaliza
ciclo
Unidad
Funcional
Búsqueda
define
función
instrucción
contenida
BUFB
instrucción
siguientes
ADD
XOR
AND
IOR
LDA
STA
INP
OUT
UC
BUFB
instrucción
cualquiera
restantes
HB
queda
finaliza
ciclo
Unidad
Funcional
Ejecución
BUFB
pone
BUFB=
268
2.3.3
Ciclos
Pipeline
269
270
271
Tabla
9.2
Ciclos
pipeline
272
2.3.4
Incrementador
contador
programa
adicionado
UC
incrementador
PC
Figura
9.4
evitar
ALU
ahorran
pulsos
Fig
9.4
Incrementador
PC
2.3.5
Predicción
dirección
salto
predicción
dirección
salto
implementamos
hardware
circuito
Figura
9.5
Fig
9.5
Circuito
predicción
salto
instrucción
buscado
instrucción
salto
próxima
instrucción
buscará
dirección
contiene
registro
IR0-
12
dirección
indica
PC
ejemplo
predicción
dinámica
estima
dirección
salto
momento
ejecución
2.3.6
Comparación
máquina
elemental
Tabla
9.2
observa
ejecutar
instrucciones
Máquina
Elemental
PIPELINE
necesitan
119
pulsos
reloj
Comparando
cantidad
necesaria
Máquina
Elemental
PIPELINE
lector
calcular
160
pulsos
vemos
mejora
velocidad
procesamiento
35
273
Memoria
Caché
3.1
Principios
localidad
realiza
referencia
memoria
probable
próximas
referencias
realicen
cercanías
tiempo
ejecución
programa
emplea
iteraciones
número
limitado
instrucciones
principio
localidad
comportamiento
máquina
verifica
lapso
arbitrario
90%
referencias
memoria
caen
área
relativamente
pequeña
principio
representa
base
sistemas
memoria
caché
velocidad
memoria
principal
sistema
menor
CPU
atendiendo
mencionado
conveniente
disponer
memoria
adicional
caché
esté
cerca
CPU
controlada
pequeña
encarecer
sistema
bus
privado
definir
técnica
apropiada
llenado
teniendo
principio
localidad
idea
general
llenado
caché
Unidad
Control
realiza
ciclo
lectura
memoria
dispare
simultáneamente
ciclo
lectura
Caché
indica
Figura
9.6
Fig
9.6
Simultaneidad
ciclo
lectura
memoria
caché
culminar
Ciclo
lectura
Caché
dato
continúa
ciclo
lectura
memoria
concluido
escribe
Caché
obviamente
culminar
Ciclo
lectura
Caché
dato
274
continúa
ciclo
lectura
memoria
dato
caché
mejora
velocidad
formalizarse
tcaché
tiempo
acceso
memoria
caché
tmem
tiempo
acceso
memoria
principal
proporción
aciertos
fracción
lecturas
satisfechas
caché
𝑇𝑖𝑒𝑚𝑝𝑜
𝑚𝑒𝑑𝑖𝑜
𝑑𝑒
𝑎𝑐𝑐𝑒𝑠𝑜
𝑡𝑐𝑎𝑐ℎé
𝑡𝑚𝑒𝑚(1
3.2
Manejo
caché
necesario
contenido
caché
memoria
consistentes
coincidan
importante
hora
mover
bloque
datos
memoria
programas
necesiten
datos
área
memoria
¨cacheado¨.
técnicas
consistencia
Escritura
memoria
escribe
caché
escribe
memoria
técnica
asegura
coincidan
momento
Retrocopiado
memoria
actualiza
cuand
necesario
ejemplo
falta
transferir
bloque
datos
memoria
periférico
evitar
transferencia
completa
Caché
adiciona
bit
palabra
memoria
caché
indica
modificada
cargó
memoria
DMA
4.1
Controlador
DMA
ocurre
transferencia
Entrada
Salida
Máquina
Elemental
ejemplo
transferir
bloque
datos
memoria
periférico
viceversa
realiza
ACC
salida
programador
deberá
cargar
ACC
instrucción
OUT
YY
caso
entrada
instrucción
INP
YY
cargará
ACC
dato
periférico
275
idea
aumentar
velocidad
transferencia
evitar
intervenga
CPU
proceso
contáramos
procesador
auxiliar
controlar
bus
memoria
ceda
CPU
transferencia
devuelva
control
CPU
ez
finalizada
estaríamos
evitando
intervención
CPU
podríamos
aumentar
velocidad
supone
procesador
auxiliar
hardware
software
especialmente
diseñados
función
UC
tareas
compartiendo
BUS
procesador
auxiliar
esté
esperando
UM
Periférico
procesador
auxiliar
llama
Controlador
DMA
Direct
Access
Memory
controlador
DMA
contar
Unidad
Control
capaz
comunicarse
CPU
controlar
UM
BUS
registros
almacenar
Dirección
Inicial
Memoria
Bloque
transferir
registro
almacenar
Cantidad
Palabras
transferir
Registro
Datos
esquema
sop
orte
hardware
canal
datos
DMA
indica
Figura
9.7
Fig
9.7
Diagrama
bloque
canal
DMA
Observar
trayectoria
datos
transferencia
DMA
pasa
CPU
razón
transferencia
rápida
276
Controlador
DMA
maneja
interrupciones
CPU
inicia
transferencia
DMA
enviándole
Controlador
DMA
dirección
inicial
bloque
datos
enviar
periférico
recibir
cantidad
palabras
transmitir
cediéndole
control
BUS
Controlador
DMA
culmina
transferencia
solicita
INTERRUPCIÓN
transfere
ncia
termina
recuperando
CPU
control
BUS
4.2
Scanner
explicado
controlador
DMA
computadora
independiente
programa
fijo
almacenado
memoria
ROM
capaz
generar
ciclos
memoria
proporcionando
dirección
memoria
órdenes
lectura
escritura
caso
capaz
coordinar
acciones
CPU
peticionar
atención
UM
CPU
tareas
seguramente
UM
transferencia
DMA
BUS
ocioso
esperando
dato
escriba
lea
UM
lapsos
CPU
BUS
conflictos
CPU
necesita
acceder
UM
dure
transferencia
representa
problema
caso
transferencias
extensas
efectivamente
demorar
inaceptablemente
ejecución
programa
casos
conveniente
seguir
ejecutando
programa
lentamente
proceso
transferencia
DMA
implementación
sistema
permita
realizarlo
recibe
nombre
ROBO
CICLO
4.2.1
Robo
ciclo
UM
podía
requerida
CPU
Máquinas
DMA
UM
requerida
controlador
DMA
controladores
DMA
caso
técnica
utilizada
lograr
aprovechamiento
UM
apuntando
aumentar
velocidad
procesamiento
agregar
hardware
administre
UM
hardware
administrador
llamado
scanner
funciona
llave
selectora
gira
constantemente
busca
procesador
necesite
UM
Supongamos
UM
compartida
CPU
DMA
Scanner
dispositivo
contaría
Puertos
Scanner
examinaría
puerto
277
requerimiento
servicio
Scanner
detiene
atiende
requerimiento
requerimiento
atendido
Scanner
avanza
puerto
sucesivamente
velocidad
avance
puerto
menor
tiempo
ciclo
memoria
variaciones
esquema
planteado
permiten
asignar
prioridades
procesadores
asegurar
recurso
periféricos
rápidos
Evolución
Arquitecturas
5.1
Introducción
invento
microprogramación
Wilkes
principio
cincuenta
idea
complejo
microcódigo
irresistible
razones
validez
años
memorias
significativamente
lentas
CPU
forma
posibilidad
bibliotecas
aplicaciones
frecuente
residentes
microcódigo
ROM
rápida
lugar
memoria
principal
representaba
solución
ideal
elevar
nivel
lenguaje
máquina
incorporando
instrucciones
complejas
parecía
discusión
microprogramación
permitía
modificar
agregar
instrucciones
camb
iando
microprograma
significa
simplemente
cambiar
memoria
ROM
microprogramación
discusión
años
arquitectura
siguió
proceso
perfeccionamiento
micromemoria
costosa
recordemos
rápida
limita
dimensión
micromemoria
ancha
45
bits
máquina
elemental
microprogramada
llama
horizontal
implica
microinstrucciones
ejecutar
instrucción
máquina
rápida
contrapartida
pensar
micromemoria
angosta
microprogramac
ión
vertical
microinstrucciones
instrucción
menor
costo
micromemoria
verse
UC
microprogramada
secuencias
microinstrucciones
comunes
instrucción
dió
idea
escribir
microrutinas
usables
instrucciones
residir
microROM
angosta
combinarla
microprogramación
horizontal
alternativas
compromiso
costo
perfomance
arquitectura
máquinas
llama
CISC
Complex
Instruction
Set
Computer
278
5.2
CISC
computadores
360
370
IBM
surgidos
década
70
mayoría
procesadores
CPU
computadoras
incluidos
minicomputadoras
PC
personales
Pentium
P6
Intel
68
0x0
Motorola
CISC
Complex
Instruction
Set
Computer
denominación
ejecutar
instrucciones
simples
ordenan
sumar
restar
números
registros
CPU
resultado
asignarlo
registros
instrucciones
complejas
usados
movimientos
cadenas
caracteres
longitud
variable
procesamiento
textos
instrucciones
simples
decodificación
ejecutarse
puls
reloj
complejas
requieren
número
pulsos
depende
secuencia
pasos
necesarios
ejecución
describió
paso
cabo
combinaciones
binarias
microinstrucciones
aparecen
líneas
control
UC
pulso
reloj
activa
circuitos
intervienen
paso
sucesivas
microinstruc
iones
requiera
ejecución
instrucción
compleja
provistas
ROM
firmware
Control
almacena
forma
UC
procesador
CISC
necesariamente
contener
ROM
microinstrucciones
ejecutar
instrucciones
complejas
características
CISC
general
operación
ordena
instrucción
procesador
CISC
presenta
variantes
aplicadas
diversas
estructuras
datos
simples
constantes
variables
matrices
instrucción
ordena
sumar
variantes
códigos
función
estructura
datos
opera
existieran
tantas
instrucciones
ordenan
operación
estructuras
datos
típicas
definido
operar
concepto
279
planteado
previamente
nombre
modos
direccionamiento
instrucción
existencia
modos
direccionamiento
operación
ordena
instrucción
características
complejidad
procesadores
CISC
manifiesta
repertorio
set
instrucciones
máquina
CISC
presente
número
elevado
códigos
operación
IBM
370
210
instrucciones
300
VAX
230
80486
Asimismo
exige
instrucciones
ocupan
distinta
cantidad
bytes
memoria
Resulta
instrucciones
ejecutables
cantidad
pulsos
rel
oj
procesador
CISC
aprovechar
eficazmente
pipeline
producción
instrucciones
5.3
RISC
setenta
velocidad
memorias
acercó
CPU
resultaba
difícil
escribir
depurar
mantener
microprogra
especialistas
comenzaron
analizar
tipo
instrucciones
usadas
programas
resultados
sorprendentes
85%
instrucciones
asignación
condicionales
llamadas
procedimientos
80%
instrucciones
asignación
término
41%
procedimientos
argumentos
80%
procedimientos
variables
locales
conclusión
teóricamente
escribir
programas
complicados
mayoría
programas
reales
consisten
simples
asignaciones
declaraciones
condicionales
llamadas
procedimientos
número
reducido
parámetros
conclusión
extrema
importancia
tendencia
agregar
funciones
microcódigo
lenguaje
máquina
complicado
microprograma
lento
número
elevado
modos
direccionamiento
significa
decodificación
realizarse
línea
implicaría
repetir
cientos
microcódigo
sacrificado
velocidad
incorporar
instrucciones
práctica
rara
afirmar
idea
eliminar
microcódigo
programas
corran
directamente
hardware
residiendo
rápida
memoria
principal
Surgen
computadoras
número
reducido
instrucciones
llamadas
máquinas
RISC
Reduced
280
Instruction
set
Computer
Wilkes
maquinas
RISC
microprogramación
computadoras
complejas
eficientes
industria
volviendo
raíces
construyendo
máquinas
sencillas
rápidas
denominación
RISC
aplicada
instrucciones
característica
importante
completan
ciclo
usando
pipeline
intensivamente
entendiendo
ciclo
extracción
operandos
registro
colocarlos
bus
ejecutarlos
ALU
guardar
resultado
registro
operación
lleve
cabo
ciclo
formar
conjunto
instrucciones
5.3.1
Arquitectura
carga
almacenamiento
instrucción
ejecutarse
ciclo
resulta
referencia
memoria
representan
problema
instrucciones
ordinarias
operandos
registros
permitido
direccionamiento
registros
únicas
instrucciones
referencia
memoria
LOAD
STORE
lograr
ejecuten
ciclo
recurre
exigir
instrucción
inicie
ciclo
importar
cuan
do
termine
logra
comenzar
instrucciones
ciclos
alcanzado
promedio
instrucción
ciclo
RISC
poseen
procesamiento
línea
pipeline
ejemplo
RISC
unidades
funcionales
tendría
aspecto
Tabla
9.5
ejemplo
apreciar
instrucciones
ordinarias
ejecutan
ciclos
instrucción
LOAD
indicada
ejecuta
ciclos
observa
instrucción
termina
ejecutarse
termine
ocurre
instrucción
S.
casos
Compilador
verifica
instrucción
afectada
instrucción
L.
proceso
continúa
problemas
caso
contrario
lgo
hacerse
ejemplo
Compilador
reemplazar
instrucción
NOP
implica
degradación
velocidad
caso
instrucciones
salto
JUMP
producirá
problema
similar
solución
ins
trucción
salto
comienza
ejecutarse
independientemente
salto
cabo
casos
Compilador
responsable
colocar
instrucción
281
útil
salto
caso
encontrar
adecuad
coloca
instrucción
NOP
Tabla
9.3
Procesador
RISC
etapas
instrucciones
generadas
Compilador
ejecutadas
directamente
hardware
interpretadas
microcódigo
razón
velocidad
RISC
complejidad
soporta
microcódigo
CISC
traslada
código
usuario
RISC
instrucción
compleja
implica
microinstrucciones
CISC
RISC
implicaría
número
similar
instrucciones
ocuparía
memoria
tenerse
instrucciones
complejas
representan
porcentaje
menor
programa
real
recomienda
comparar
tiempos
ciclo
instrucción
máquina
elemental
máquina
elemental
microprogramada
razón
reducido
número
instrucciones
responde
idea
simplificar
decodificador
instrucciones
modos
direccionamiento
conviene
reducirlos
mínimo
formato
instrucción
RISC
Figura
9.8
pu
ede
apreciarse
generar
distintos
modos
direccionamiento
Fig
9.8
Formato
típico
instrucción
282
operando
operación
toma
registro
origen
instrucciones
ordinarias
ADD
operandos
dependen
vale
I.
operando
especifican
bits
campo
desplazamiento
representa
direccionamiento
registro
operando
campo
desplazamiento
representa
direccionamiento
inmediato
instrucciones
LOAD
STORE
desplazamiento
sumado
registro
origen
obtener
dirección
memoria
representa
direccionamiento
indexado
desplazamiento
cero
representa
direccionamiento
indirecto
registro
5.3.2
Registros
múltiples
reducir
número
cargas
almacenamientos
LOAD
STORE
chip
RISC
registros
raro
encontrar
RISC
500
registros
aprovechando
carece
firmware
organización
registros
aspecto
importante
RISC
anteriormente
importante
tráfico
memoria
consecuencia
llamados
procedimientos
implica
transmitir
parámetros
salvar
registros
etc.
lugar
diseñadores
RISC
plantear
organización
registros
llamada
traslape
registros
traslape
registros
consiste
general
momento
CPU
accede
subgrupo
general
32
bits
divididos
grupos
Figura
9.9
registros
encuentran
momento
accesibles
CPU
representan
registros
globales
utilizables
procedimiento
cambio
grupo
24
registros
accesibles
CPU
dependiendo
valor
puntero
registros
puntero
ajusta
procedimiento
invo
cado
actual
organización
permite
intercambiar
valores
procedimientos
necesidad
referir
memoria
283
Fig
9.9
Organización
registros
usados
traslape
5.4
Comparación
RISC
CISC
conceptos
introducidos
apartados
anteriores
establecer
comparación
arquitecturas
RISC
CISC
considerando
características
particulares
5.4.1
semántica
programas
alto
nivel
Buscando
optimizar
performance
procesadores
realizaron
estadísticas
inst
rucciones
máquina
usadas
Resultó
instrucciones
simples
-que
20%
repertorio
instrucciones
procesador
CISC
constituían
80%
programas
típicos
ejecutados
91%
sentencias
usadas
lenguajes
lto
nivel
Fortran
Pascal
Basic
etc.
tipo
Asignar
valor
variable
IF
condicional
CaIl
llamar
procedimiento
Loop
repetir
secuencia
promedio
constituyen
47%
23%
15%
6%
respectivamente
concepción
CISC
busca
menor
disparidad
lenguajes
alto
nivel
lenguaje
máquina
llamar
salto
semántico
Recordar
sentencia
traducir
secuencia
instrucciones
máquina
I1
I2
I3
I4
284
Suponiendo
lenguaje
alto
nivel
dicha
sentencia
común
usara
frecuentemente
CISC
hiciera
corresponder
sentencia
instrucción
máquina
reemplazara
instrucciones
citadas
conseguiría
escribiendo
ROM
Control
extensa
secuencia
microcódigos
ejecutar
Ix
existir
equivalencias
sentencias
alto
nivel
instrucciones
máquina
programa
traductor
niveles
compilador
sencillo
fabricar
tiempos
compilación
disminuirían
objetivos
arquitecturas
CISC
comprende
concepción
llegar
extremo
fabricar
CISC
instrucciones
máquina
equivalentes
sentencias
usadas
lenguaje
alto
nivel
usarían
programa
lenguaje
alto
nivel
utiliza
información
sirvió
planificar
proces
adores
repertorio
instrucciones
simples
operar
números
registros
CPU
resultado
asignarlo
registros
presentan
modos
direccionamiento
simples
instrucciones
ejecutan
pulso
reloj
decodificada
traducir
lenguaje
alto
nivel
tipo
instrucciones
empleando
mínimo
requiere
RISC
programa
compilador
inteligente
elaborado
necesario
compilador
software
complejo
contrapartida
hardware
simple
5.4.2
Considerando
transferencia
datos
CPU
memoria
mover
datos
memoria
registro
sentido
contrario
necesario
existencia
instrucciones
ordenen
movimientos
lenguaje
assembler
RISC
denominan
LOAD
STORE
respectivamente
instrucciones
usarlas
programas
compiladores
inteligentes
puesto
requier
pulsos
ejecutadas
decodificadas
diferencia
CISC
instrucción
opción
requerir
dato
memoria
285
número
instrucciones
repertorio
procesador
RISC
reducido
70
150
instrucciones
modelo
Puesto
mayoría
instrucciones
RISC
ejecutan
pulso
reloj
resulta
pipeline
eficaz
terminándose
ejecutar
promedio
instrucción
pulso
reloj
promedio
instrucciones
tipo
LOAD
STORE
requieren
pulsos
decodificadas
instrucciones
RISC
formato
fijo
ejemplo
bytes
CISC
ocupan
distinta
cantidad
bytes
redunda
sencillez
velocidad
procesamiento
constar
instrucciones
cuya
fase
ejecución
demanda
mayormente
pulso
sumo
requiere
ROM
Control
generar
microcódigo
aparecer
salidas
UC
pulso
reloj
comandar
procesador
bits
código
operación
instrucción
llega
registro
instrucción
RI
ejecutado
procesador
RISC
sirven
base
circuito
UC
convierta
directamente
combinación
bits
aparecer
salidas
UC
microcódigo
pulso
reloj
ejecute
instrucción
cuestión
UC
RISC
contiene
ROM
control
microcódigos
permite
ganar
velocidad
evita
acceso
ROM
beneficia
diseño
chip
contiene
procesador
RISC
superficie
ocupa
ROM
Control
CISC
RISC
aprovechada
aumentar
-como
32-
número
registros
general
CPU
número
registros
permite
utilizar
instrucciones
LOAD
STORE
redunda
accesos
memoria
principal
mayoría
instrucciones
complejidad
trae
parejado
rendimiento
pipeline
mantenga
dependencia
resultado
instrucción
ejecutar
recurso
ejemplo
registro
CPU
requerido
etapas
pipeli
ne
factor
influye
RISC
CISC
resultando
velocidad
procesamiento
ejemplo
resultado
instrucción
dato
puesto
mayoría
requiere
pulsos
fases
ejecutarse
uando
instrucción
pipeline
pasa
fase
ejecución
anteriores
entraron
pipeline
completaron
dicha
fase
espera
dato
opera
instrucción
cargó
registro
memoria
instrucción
286
pipeline
llegan
instrucciones
máquina
planificadas
compilador
inteligente
5.4.3
Comportamiento
salto
subrutinas
interrupciones
procesadores
CISC
pierden
tiempo
instrucciones
llamado
subrutina
interrupciones
consiguientes
accesos
pila
memoria
principal
requieren
estadísticas
indican
llamado
procedimientos
98%
utilizan
argumentos
92%
variables
locales
Asimismo
1%
casos
llega
llamadas
sucesivas
niveles
anidamiento
procedimiento
llame
cuarto
etc
RISC
pos
een
número
elevado
registros
usarse
manejo
llamados
lugar
perder
tiempo
escribir
leer
pila
ubicada
memoria
5.4.4
Cuadro
comparativo
RISC
CISC
aspectos
discutidos
previamente
resumirse
tabla
comparativa
observa
Tabla
9.4
Tabla
9.4
Comparación
características
RISC
CISC
287
comparación
RISC
CISC
determinar
entendiendo
rápida
extremo
compleja
factores
tenerse
podríamos
orientarnos
preguntas
tipo
programas
corren
máquina
Programas
llamadas
procedimientos
saltos
corren
CISC
programas
cortos
recursivos
corren
RISC
tipo
compilador
usó
entendible
compilador
implica
programas
rápidos
Deberían
usarse
programas
punto
flotante
visto
RISC
contar
hardware
adicional
tipo
cálculo
tenerse
recursos
sistema
CPU
unidades
entrada
salida
sistema
operativo
etc.
tecnología
construir
CPU
máquinas
podríamos
comparar
distintas
tecnologías
distintos
tiempos
reloj
distintos
buses
etc
cosas
considerarse
cantidad
memor
ia
utilizada
sentido
RISC
memoria
CISC
teniendo
memorias
baratas
considerar
aspecto
medirse
tráfico
memoria
máquina
realice
programa
referencias
memoria
tiempos
similares
general
cálculos
desempeño
favorecen
máquinas
RISC
conclusión
tomarse
desestimar
arquitectura
CISC
Simplemente
significa
as
máquinas
RISC
desempeñan
CISC
construidas
diseño
tuvieron
respetar
compatibilidad
procesadores
anteriores
ejemplo
80486
hubiera
compatible
8088
seguramente
arquitectura
CISC
habría
Evolución
Procesador
8088
evolución
tecnología
permitido
construyan
procesadores
veloces
rendimiento
principales
ítems
adicionado
mejorado
288
capacidad
memoria
aumento
tamaño
dato
32
bits
64
bits
actualmente
frecuencias
reloj
superan
3.000
Mhz
pipeline
obtención
anticipada
próximas
instrucciones
ejecutar
memoria
caché
número
registros
CPU
operación
multitarea
multitasking
tiempo
mejoras
permitido
procesadores
familia
puedan
ejecutar
instrucciones
modelos
anteriores
ca
mbiar
software
desarrollado
logrando
necesaria
compatibilidad
relación
mejoras
citadas
ejemplo
Intel
incorporado
procesadores
observa
Tabla
9.5
8086
utiliza
tipo
pipeline
realiza
obtención
anticipada
próximas
instrucciones
ejecutar
procesador
80286
aumenta
frecuencia
reloj
25
MHz
presenta
opción
coprocesador
matemático
externo
opcional
80287
multitasking
protegido
sistema
operativo
preparado
Opera
memoria
ALU
16
bits
24
líneas
dirección
acceder
24
16
MB
memoria
principal
Opera
25
Mhz
80386
perfeccionar
innovaciones
80
286
corno
opcional
externo
memoria
caché
Maneja
32
bits
registros
internos
32
bits
líneas
dirección
32
pudiendo
direccionar
32
GB
memoria
Opera
40
MHz
289
Tabla
9.5
Mejoras
procesadores
Intel
8086
80586
procesador
80486DX
opera
datos
32
bits
32
líneas
dirección
80386
Presenta
pipeline
elaborado
interior
coprocesador
matemático
caché
KB
obtienen
forma
simultánea
promedio
próximas
instrucciones
ejecutar
procesadores
RISC
instrucciones
incluidas
usadas
resguardar
datos
pila
486
ejecutan
pulso
reloj
utilizan
microcódigo
ROM
Control
Pentium
opera
internamente
32
bits
comunica
exterior
64
líneas
datos
32
dirección
Contiene
pipeline
ALU
ejecutar
simultáneamente
instrucciones
pulso
reloj
ambas
simples
procesador
super
escalar
modelo
Von
Neumann
escalar
concepciones
RISC
predicción
saltos
condicionales
punto
flotante
rápido
486
P6
designado
Intel
opera
interna
externam
ente
número
bits
Pentium
Presenta
pipeline
posibilidad
ejecutar
instrucciones
simples
pulsos
reloj
Permite
ejecutar
instrucciones
orden
establecido
programa
reordenadas
hardware
convierte
instrucciones
80x86
operaciones
simples
tipo
RISC
Incorpora
registros
32
bits
290
relación
registros
clásicos
80x86
150
MHz
llegar
50%
rápido
Pentium
computador
sistema
operativo
totalmente
32
bits
OS/2
Windows
NT
Windows
95
chip
P6
5.5
millones
transistores
viene
adosado
chip
contiene
caché
externo
nivel
level
-L2
256
51
KB
15.5
31
millones
transistores
respectivamente
Pentium
caché
interno
L1
separado
KB
instrucciones
KB
datos
característica
P6
conectarse
directamente
procesadores
P6
multiprocesamiento
requerimientos
actuales
velocidad
procesamiento
necesario
desarrollo
máquinas
designadas
Von
Neumann
sentido
procesadores
operando
juntos
paralelo
ejecutar
forma
independiente
instrucciones
programa
programas
independientes
operar
diversos
datos
tiempo
conoce
multiprocesamiento
contrapuesto
uniprocesamiento
Vo
Neumann
arquitecturas
Von
Neumann
CPU
terminar
ejecutar
juntas
instrucciones
pulso
reloj
confundirse
multiprocesamiento
multiprogramación
Multitasking
traducible
multitarea
consiste
ejecución
alternada
CPU
programas
memoria
principal
Dada
velocidad
procesamiento
parecerle
usuario
simultánea
ejecución
programas
cuya
ejecución
realidad
alterna
rápidamente
6.1
Funcionamiento
básico
procesador
Intel
80486
continuación
describiremos
principales
bloques
interior
procesador
486
funciones
cumplen
Figura
9.10
aparecen
siguientes
sub-bloques
bloques
registros
direcciones
RDl
datos
RDA
pertenecen
Unidad
Interconexión
Bus
BIU
inglés
encargada
comunicación
exterior
32
líneas
datos
32
líneas
direcciones
bus
instrucciones
datos
leídos
memoria
pasan
caché
interno
KB
procesador
Unidad
caché
KB
guarda
instrucciones
datos
seguramente
requeridos
próximamente
291
bus
128
líneas
leer
caché
16
bytes
pasan
buffer
Unidad
pre-carga
instrucciones
correspondientes
promedio
instrucciones
ejecutar
llegan
juntas
entrar
pipeline
caché
leído
envíen
32
bits
datos
ALU
registro
CPU
64
bits
datos
Uni
dad
Punto
Flotante
FPU
inglés
escritura
caché
32
64
bits
respectivamente
Unidad
Pre
-carga
proporciona
direcc
iones
próximas
instrucciones
ejecutar
guarda
orden
buffers
16
bytes
decodificada
Unidad
Decodificación
realiza
decodificaciones
instrucción
Unidad
Control
UC
líneas
salen
activa
operaciones
pulso
reloj
distintos
bloques
CPU
conforme
establecen
microcódigos
ROM
Control
Unidad
segmentación
paginación
protección
memoria
conocida
Unidad
manejo
memoria
MMU
inglés
encarga
proporcionar
direcciones
físicas
memoria
utiliza
programa
unidad
convierte
referencia
dirección
dato
viene
instrucción
correspondiente
dirección
física
Puesto
memoria
PC
divide
segmentos
necesario
subdividirse
páginas
unidad
encarga
protección
escrituras
permitidas
zonas
reservadas
memoria
292
Fig
9.10
Bloques
sub-bloques
Intel
80486
unidades
participan
pipeline
instrucciones
486
consta
etapas
progresan
pulso
reloj
compás
millones
ciclos
Pre-carga
pre-fetch
consiste
llegada
códigos
próximas
instrucciones
entrarán
pipeline
buffers
16
bytes
Unidad
Pre-carga
formar
cola
Decodificación
Uni
dad
Decodificación
llegan
bytes
instrucción
separar
bytes
forman
código
máquina
código
operación
número
referencia
dirección
dato
códigos
operación
bytes
Decodificación
código
operación
identificado
paso
decodificado
permite
determinar
secuencia
microcódigo
contenida
ROM
Control
merced
UC
generará
señales
control
enviará
líneas
salen
unidad
controla
ejecute
instrucción
pulso
reloj
instrucción
simple
ejecuta
pulso
293
tiempo
pasa
etapa
pipeline
bytes
código
entran
etapa
codificación
Ejecución
ejecuta
operación
ALU
ejemplo
leyendo
dato
operar
caché
Paralelamente
acción
recién
descripta
ejecutando
tareas
decodificación
Almacenamiento
resultados
etapa
de1
pipeline
completándose
ejecución
instrucción
resultado
ALU
almacena
flags
genera
resultantes
operación
registro
6.2
Funcionamiento
básico
procesador
Intel
Pentium
Figura
9.11
esquema
básico
Pentium
basado
486
Fig
9.11
Bloques
Intel
Pentium
386
486
Pentium
instrucciones
enteros
siguen
pipeline
etapas
etapa
pre-carga
supone
caché
interno
KB
encuentran
próximas
instrucciones
ejecutar
Pentium
pasan
promedio
juntas
bu
ffer
Unidad
294
pre-carga
almacenar
32
bytes
buffers
caché
leen
32
bytes
acceso
datos
caché
KB
memorias
caché
separadas
permite
accede
próximas
instrucciones
ejecutar
caché
tiempo
accede
datos
esperar
Pentium
bus
datos
externo
interno
64
bits
llega
caché
posibilita
ac
ceso
caché
externo
leer
dato
instrucción
contenido
accede
memoria
principal
caché
reciba
doble
datos
instrucciones
486
Pentium
contiene
pipeline
instrucciones
operan
números
enteros
procesar
instrucciones
forma
independiente
fábrica
autos
líneas
montaje
superescalar
capaz
terminar
ejecutar
instrucciones
pulso
procesadores
RISC
requiere
caché
datos
instrucciones
Asimismo
existir
duplicado
unidad
decodificadora
decodificar
instrucciones
unidad
segmen
tación
generadora
direcciones
datos
ALU
Puesto
instrucciones
proceso
simultáneo
necesitar
acceder
juntas
caché
datos
leer
dato
operar
caché
duplicado
número
líneas
datos
direcciones
decodificación
entran
instrucciones
tiempo
determina
ambas
procesarán
juntas
pipeline
seguirá
pipeline
identifica
porción
instrucci
ón
permite
formar
dirección
dato
pasa
unidad
segmentación
correspondiente
código
operación
pasará
codificación
instrucción
números
punto
flotante
opera
datos
64
bits
ocupan
pipelines
números
enteros
32
bits
procesarse
instrucción
instrucciones
pasan
etapas
correspondientes
instrucciones
enteros
requiere
etapas
pipeline
exclusivo
punto
flotante
decirse
Pentium
presenta
pipeline
etapas
instrucciones
enteros
ejecutan
etapas
295
denominadas
instrucciones
simples
enteros
pre
-carga
decodificaciones
pasos
ejecutan
pulsos
reloj
complejidad
instrucciones
simples
ejemplo
datos
operar
registros
UCP
resultado
operación
asignado
registro
UCP
ejecutan
pulso
reloj
decodificación
decodificación
determina
par
instrucciones
identificadas
simples
orden
depende
resultado
ejecución
pipelines
procesan
paralelo
ambas
ejecutan
cantidad
pulsos
reloj
cabo
terminan
ejecutar
simultáneamente
forma
Pentium
ejecutar
instrucciones
pulso
reloj
significa
resultados
operaciones
ordenadas
obtienen
tiempo
Ejercitación
Ejercicio
imposible
pipeline
instru
cciones
etapas
reduzca
tiempo
ciclo
instrucciones
mitad
comparación
diseño
pipeline
Justifique
Ejercicio
diferencia
localidad
espacial
localidad
temporal
Desarrolle
Ejercicio
Desarrolle
programas
pseudocódigo
favorezca
localidad
espacial
temporal
contrario
Ejercicio
apareció
memoria
caché
sistema
disponía
única
caché
procesadores
actuales
disponen
diversos
niveles
memoria
caché
número
niveles
apropiados
Justifique
Ejercicio
relaciona
principio
localidad
múltiples
niveles
jerarquía
memoria
computadora
Desarrolle
296
Ejercicio
diseños
sistemas
incluyeron
memoria
caché
disponían
única
caché
almacenar
referencias
operandos
instrucciones
procesadores
actuales
tienden
cachés
separadas
divididas
dedica
instrucciones
datos
operandos
Considere
conceptos
pipeline
búsqueda
datos
asociados
correspondan
Ejercicio
procesadores
RISC
unidades
control
microprogramadas
cableadas
Justifique
Ejercicio
resulta
importante
desarrollo
compiladores
máquinas
RISC
Justifique
297
CAPÍTULO
10
Entradas
Salidas
Módulos
Canales
Procesadores
1.1
Introducción
1.2
Módulo
1.3
Diagrama
bloques
módulo
1.4
Técnicas
operaciones
1.5
Ejemplo
módulo
1.6
Canales
procesadores
Datos
Señales
Interfaces
2.1
Datos
señales
2.2
Ancho
banda
2.3
Señalización
2.4
Interface
serie
paralela
2.5
Configuraciones
punto-a-punto
multipunto
2.6
Medios
enlace
Casos
Estudio
3.1
Puerto
USB
3.2
Puerto
Ethernet
3.3
Puerto
Bluetooth
3.4
Puerto
HDMI
3.5
Puerto
Wi-Fi
Ejercitación
298
Capítulo
10
Entradas
Salidas
Módulos
Canales
Procesadores
1.1
Introducción
tercer
componente
fundamental
computadora
Unidad
Entradas
Salidas
UE
CPU
memoria
realidad
conjunto
módulos
especializados
conectan
habitualmente
sistema
buses
bus
direcciones
bus
datos
bus
control
controla
comunicación
dispositivos
periféricos
simplemente
perifé
ricos
módulo
capacidad
necesaria
permitir
comunicación
periférico
sistema
buses
periféricos
conectan
directamente
sistema
buses
alcanzar
CPU
memoria
caso
especial
diversos
motivos
periféricos
debería
disponerse
lógica
adicional
CPU
dispositivo
mayoría
periféricos
lentos
CPU
memoria
desaprovecharía
tiempo
prestaciones
conectándolos
sistema
buses
alta
velocidad
inconveniente
CPU
memoria
gestionen
transferencias
periféricos
altos
rendimientos
Finalmente
periféricos
distintos
constructivamente
utilizan
datos
formatos
tamaños
distintos
computadora
comunican
módulos
interface
nexo
procesador
memoria
conjunto
buses
di
spositivos
periféricos
usando
enlaces
datos
específicos
Figura
10.1
periféricos
comunican
computadora
enlace
módulo
específico
enlace
permite
intercambio
señales
control
datos
entr
módulo
dispositivo
externo
señales
control
determina
función
periférico
señales
indica
dispositivo
ejemplo
señalar
preparado
transferencia
Finalmente
datos
produce
efectivo
intercambio
información
digital
envía
recibe
módulo
S.
299
Fig
10.1
Módulo
S.
expuesto
periférico
deberá
lógica
control
controla
operación
módulo
S.
señales
eléctricas
datos
requerir
transducción
adecuación
caso
salida
entrada
dependiendo
características
operativas
periférico
Finalmente
di
spositivo
disponer
memoria
buffer
almacenar
temporalmente
datos
vienen
módulo
periférico
aspectos
muestran
Figura
10.2
periféricos
clasifican
sentido
transferencia
datos
Periféricos
entrada
Periféricos
salida
Periféricos
entrada-salida
interactúan
interacción
humanos
interacción
máquinas
300
Fig
10.2
Diagrama
bloques
dispositivo
externo
periférico
1.2
Módulos
CPU
requerir
comunicación
periférico
necesidades
programa
CPU
memoria
principal
buses
compartirse
transferencias
datos
periféricos
módulos
deberán
incluir
funciones
control
temporización
coordinen
tráfico
recursos
internos
externos
computadora
módulos
comunicarse
procesador
recibirá
órdenes
intercambiará
datos
información
bus
control
bus
datos
respectivamente
lógicamente
comunicación
periférico
enlaces
externos
implica
órdenes
información
datos
función
común
módulo
almacenamiento
temporal
datos
capacidad
resuelve
diferencia
velocidades
dispositivos
internos
externos
ejemplo
ráfaga
datos
proviene
CPU
memoria
principal
almacenarse
301
buffer
módulo
enviarse
periférico
velocidad
criterio
seguirse
transferencia
sentido
contrario
libera
memoria
principal
tiempo
ocupada
operación
transferencia
lenta
Finalmente
problemas
mecánicos
eléctricos
periféricos
informarse
función
detección
errores
comunicarse
CPU
1.3
Diagrama
bloques
módulo
Figura
10.3
presenta
diagrama
bloques
módulo
S.
previamente
módulo
conecta
CPU
memoria
líneas
bus
sistema
indicadas
izquierda
figura
datos
almacenan
temporalme
nte
registros
datos
internos
módulo
tantos
registros
lógica
control
módulo
interactúa
CPU
líneas
control
módulo
preparado
reconocer
direcciones
provienen
CPU
generar
direcciones
asociadas
periféricos
controla
motivo
módulo
dirección
única
conjunto
único
direcciones
controla
dispositivo
externo
Finalmente
posee
lógica
dedicada
interfaz
dispositivos
controla
términos
módulo
oculta
detalles
temporización
formatos
datos
aspectos
constructivos
dispositivos
externos
procesador
observa
versión
simplificada
periférico
aplica
órdenes
lectura
escritura
módulos
clasificarse
detalles
procesamiento
presentados
CPU
Canal
procesador
módulo
encarga
mayoría
detalles
procesamiento
presentando
CPU
interface
alto
niv
esquema
computadoras
mainframes
Controlador
dispositivo
módulo
sencillo
requiere
CPU
control
detallado
302
Fig
10.3
Diagrama
bloques
módulo
S.
1.4
Técnicas
operaciones
operaciones
discutido
Capítulo
8)
utilizar
técnicas
programada
datos
intercambian
procesador
módulo
S.
programa
ejecuta
CPU
controla
directamente
operación
S.
procesador
envía
orden
módulo
esperar
operación
concluya
gestión
operación
programa
ejecutándose
CPU
rápida
genera
desperdicio
tiempo
interrupciones
CPU
envía
orden
continúa
ejecutando
instrucciones
interrumpida
módulo
terminado
operación
Acceso
directo
memoria
DMA
módulo
memoria
principal
intercambian
datos
directamente
intervención
CPU
primeras
técnicas
CPU
responsable
almacenar
datos
leídos
módulo
memoria
operación
entrada
leerlos
memoria
operación
salida
303
1.5
Ejemplo
módulo
ejemplo
módulo
utilizado
programada
interrupciones
interface
programable
Intel
82C55A.
módulo
propósito
general
integrado
chip
diseñado
usarse
conjunto
CPU
8088/8086
Figura
10.4
muestra
diagrama
bloques
general
derecha
observa
interface
externa
24
líneas
salidas
digitales
programables
8088/86
registro
control
registro
establecer
diversos
modos
operación
configuraciones
operativas
24
líneas
dividen
grupos
registros
bits
llamados
C.
registro
funcionar
puerto
bits
Alternativamente
registro
subdividirse
rse
grupos
bits
asociados
registros
B.
configuración
subgrupos
contienen
señales
control
registros
B.
izquierda
interface
interna
conecta
bus
datos
8088/86
líneas
datos
bidireccional
D0-D7
transferir
datos
puertos
información
registro
control
líneas
direcciones
A0-A1
seleccionan
puertos
registro
control
82C55
usarse
controlar
diversos
dispositivos
simples
Figura
10.5
muestra
diagrama
bloques
controlar
terminan
teclado
pantalla
teclado
roporciona
bits
entrada
datos
bits
SHIFT
CONTROL
líneas
adicionales
sincronización
teclado
pantalla
conectada
puerto
datos
bits
bits
significado
específico
pantalla
líneas
control
sincronización
304
Fig
10.4
Diagrama
bloques
interface
programable
periféricos
802C55A
Intel
305
Fig
10.5
Interface
teclado
pantalla
usando
802C55A.
1.6
Canales
procesadores
evolución
computadoras
creciente
complejidad
computadoras
manifestado
componentes
incluidos
módulos
S.
evolución
describirse
secuencia
dispositivos
simples
CPU
controla
directamente
periférico
CPU
programada
interrupciones
incorporación
controlador
módulo
S.
CPU
independiza
aspectos
específicos
interfaces
dispositivos
externos
CPU
necesita
esperar
termine
operación
comienzo
transferencia
mecanismo
interrupciones
306
CPU
permite
acceso
directo
módulo
memoria
DMA
transfiere
bloque
datos
memoria
participación
CPU
comienzo
transferencia
funciones
realizan
participación
CPU
aspecto
releva
CPU
tarea
mejorando
prestaciones
generales
computadora
complejidad
módulo
crecido
forma
incluye
mejoras
significativas
siguientes
módulo
comportarse
procesador
reperto
rio
instrucciones
orientado
S.
CPU
procesador
ejecute
programa
memoria
interrumpida
completa
secuencia
entera
caso
módulo
recibe
nombre
canal
S.
incluye
memoria
local
transformando
módulo
computadora
arquitectura
módulo
controlar
conjunto
dispositivos
mínima
intervención
CPU
caso
módulo
llama
procesador
S.
habitualmente
nombres
canal
procesador
intercambiada
canal
extensión
concepto
DMA
canal
ejecutar
instrucciones
relevando
CPU
dichas
operacio
nes
modos
operativos
Canal
selector
Figura
10.6
controla
dispositivos
velocidad
elevada
instante
dedica
transferir
datos
dispositivos
Canal
multiplexor
Figura
10.6
controlar
dispositivos
tiempo
307
Fig
10.6
Arquitectura
canal
308
Datos
Señales
Interfaces
2.1
Datos
señales
DATO
ente
abstracto
contiene
información
lograr
representación
física
utilizamos
ondas
electromagnéticas
representación
llamamos
SEÑAL
señales
electromagnéticas
CONTÍNUAS
intensidad
varía
suavemente
tiempo
DISCRETAS
intensidad
cambia
bruscamente
tiempo
cas
cantidad
valores
adoptar
señal
tiempo
nivel
alto
nivel
señal
llama
señal
binaria
Figura
10.7a
indica
señal
continua
figura
10.7b
señal
discreta
Fig
10.7
Señales
continuas
discretas
309
datos
señales
continuos
discretos
datos
continuos
llama
ANALÓGICOS
discretos
llama
DIGITALES
datos
analógicos
digitales
transportarse
fuente
destino
transporte
propagación
procesamiento
señales
recibe
nombre
TRANSMISIÓN
2.2
Ancho
banda
demostrar
serie
Fourier
señal
formada
componentes
sinusoidales
distintas
frecuencias
dominio
frecuencias
componentes
conforman
llamamos
ESPECTRO
señal
ancho
espectro
llama
ANCHO
BANDA
ABSOLUTO
señal
señal
discreta
espectro
infinitas
componentes
sinusoid
ales
ancho
banda
infinito
observando
detalle
espectro
señales
discretas
ve
energía
concentra
sector
estrecho
banda
conoce
ANCHO
BANDA
EFECTIVO
simplemente
ANCHO
BANDA
AB
señal
unidad
Hz
ancho
banda
AB
concepto
esencial
transmisión
datos
verifica
sistemas
transmisión
transmisor
receptor
transferir
efi
cazmente
banda
limitada
frecuencias
banda
define
ancho
banda
sistema
transmisión
ancho
banda
implica
costo
sistema
ancho
banda
AB
relacionado
velocidad
transmisión
mide
cantidad
datos
transmitirse
unidad
tiempo
transmisiones
digitales
velocidad
transmisión
VT
mide
bits
bps
indica
cantidad
bits
transmitir
AB
sistema
transmisión
velocidad
transmitir
datos
general
comprobarse
AB
Hz
sistema
transmisión
transmitir
velocidad
transmisión
VT
bps
Hz
máximo
dependiendo
características
canal
comunicaciones
atenuación
ruido
distorsión
tasa
errores
310
2.3
Señalización
transformación
dato
representación
electromagnética
propagación
física
recibe
nombre
señalización
dato
analógico
señalizar
obtener
señal
analógica
ejemplo
voz
teléfono
obtener
señal
digital
ejemplo
voz
CODEC
dato
digital
señalizar
obtener
señal
analógica
ejemplo
usando
MODEM
obtener
señal
digital
ejemplo
transmisor
digital
señales
analógicas
digitales
transmisión
analógica
transmisión
digital
transmisión
digital
avanzado
desplazando
transmisión
analógica
muchísimas
aplicaciones
sucede
señalización
digital
analógica
razones
Evolución
soporte
digital
hardware
CIs
mayores
prestaciones
Integridad
datos
Repetidoras
lugar
amplificadores
Multiplexado
eficacia
técnicas
digitales
mx
tiempo
Seguridad
integración
Encriptación
Señalización
digital
suele
mencionar
señalización
digital
codificación
codificación
realiza
transformación
datos
digitales
señales
digitales
señalizaciones
utilizadas
NRZ
NRZI
BIPOLAR
AMI
PSEUDOTERNARIO
MANCHESTER
MANCHESTER
DIFERENCIAL
Figura
10.8
muestra
codificaciones
311
Fig
10.8
Señalización
Digital
transmisiones
realizan
CPU
UM
UE
presentan
señalizaciones
digitales
generalmente
NRZ
-L
BUS
representa
guiado
transmisiones
computado
ra
exterior
periféricos
utilizan
tipo
señalización
controladores
periféricos
Unidad
conectados
BUS
COMÚN
BUS
S.
arquitectura
Máquina
actual
incluye
controladores
estandarizados
facilitar
generalizar
transmisión
datos
máquina
controladores
reciben
nombre
¨puertos¨
corresponden
estándares
incluyen
protocolos
transmisión
2.4
Interface
serie
paralela
interface
periférico
módulo
características
funcionamiento
periférico
principales
características
interface
serie
paralela
Figura
10.9
312
Fig
10.9
paralela
serie
interface
paralela
líneas
conectadas
módulo
dispositivo
periférico
transfieren
bits
simultáneamente
bus
datos
interface
serie
línea
transmi
tir
datos
bits
transmitirse
interfaces
paralelas
utilizaron
usualmente
dispositivos
alta
velocidad
generación
interfaces
series
alta
velocidad
interfaces
par
alelas
comunes
Cualquiera
caso
módulo
establecer
diálogo
periférico
diálogo
operación
escritura
requiere
módulo
envíe
señal
control
solicitando
permiso
enviar
datos
periférico
reconocer
solicitud
módulo
inicie
transferencia
datos
finalmente
periférico
reconocer
recepción
datos
2.4.1
Transmisión
paralela
caso
transmiten
bits
requerirá
tantas
líneas
bits
transmitan
líneas
adicionales
resolver
sincronismo
tipo
transmisión
usual
unidades
internas
computadora
BUS
ejemplo
comunicación
CPU
UM
UE
S.
usó
transmisiones
computadora
periféricos
interface
BUS
dedicado
313
cooperación
Transmisor
Receptor
lugar
técnicas
diferenciadas
Transmisión
paralela
control
Estroboscópico
Transmisión
paralela
Handshaking
Transmisión
paralela
control
estroboscópico
líneas
datos
tipo
transmisión
paralelo
línea
sincronismo
figura
10.10
indica
caso
Fig
10.10
Transmisión
Paralela
estroboscópica
Receptor
detecta
flanco
bajada
línea
sincronismo
lee
guarda
líneas
datos
Figura
10.11
Fig
10.11
Diagrama
tiempo
transmisión
paralela
estroboscópica
314
Transmisión
paralela
handshaking
caso
líneas
datos
líneas
control
resuelven
sincronismo
líneas
Señal
Envío
Transmisor
genera
señal
avisa
Receptor
líneas
datos
dato
enviado
Señal
Aceptación
Receptor
genera
señal
avisa
Transmisor
recibido
guardado
dato
Transmisor
recibe
señal
aceptación
borra
Señal
envío
asimismo
receptor
ve
señal
envío
borrada
borra
señal
aceptación
forma
culmina
handshaking
apretón
manos
Figura
10.1
aprecia
lógica
Figura
10.1
diagrama
tiempo
handshaking
Fig
10.12
Lógica
funcionamiento
transmisión
paralela
handshaking
315
Fig
10.13
Diagrama
tiempo
ejemplifica
handshaking
transmisión
paralela
sensible
perturbaciones
electromagnéticas
externas
internas
cable
señal
sincronismo
degrada
metros
distancias
mayores
utiliza
transmisión
serie
2.4.2
Transmisión
serie
tipo
transmisión
bits
envían
utilizan
distintas
señalizaciones
tipos
transmisión
serie
Transmisión
Asíncrona
Transmisión
Síncrona
Transmisión
asíncrona
caso
datos
organizan
carácter
carácter
bits
carácter
bits
carácter
envían
serie
carácter
sucesivamente
única
línea
Figura
10.14
Receptor
oportunidad
sincronizarse
ca
rácter
carácter
Fig
10.14
Transmisión
serie
asíncrona
316
transmite
carácter
línea
comunicación
reposo
receptor
espera
recibir
bit
comienzo
receptor
detectó
bit
comienzo
empieza
leer
carácter
leído
carácte
carácter
bit
paridad
receptor
espera
leer
1.5
bits
parada
proceso
repite
carácter
carácter
logrando
forma
sincronización
necesario
receptor
conozca
velocidad
transmisor
incluye
bit
paridad
Figura
10.15
muestra
caso
transmisión
carácter
bits
transmisión
serie
asíncrona
Fig
10.15
Diagrama
tiempo
transmisión
serie
asíncrona
Velocidad
Modulación
velocidad
modulación
define
VT
Velocidad
Modulación
BAUDIOS
VT
Velocidad
Transmisión
bps
cantidad
bits
elemento
señal
Nota
lector
verificar
señalización
Manchester
señalización
NRZ-L
317
Ejemplo
transmisión
serie
asíncrona
figura
10.16
indica
ejemplo
norma
RS232C
Fig
10.16
RS232
ejemplo
transmisión
asíncrona
esquema
interfaces
incluidas
verse
Figura
10.17
Fig
10.17
Esquema
completo
comunicación
RS232
Supongamos
siguientes
valores
VT
110
bps
110
baudios
Tiempo
palabra
11
bits
1/
110
bits
0,1
VT
palabras
0,1
10
palabras
VT
carga
útil
10
palabras
bits
/palabra
70
bps
ejemplo
señalización
utilizada
implica
elemento
señal
bits
baudios
bps
iguales
318
relación
eficiencia
enlace
Eficiencia
VT(carga
útil)/VT
100
Eficiencia
70/110
100
63
transmisión
serie
asíncrona
acabamos
sincronización
logra
receptor
VT
detecta
bit
comienzo
Seguramente
reloj
receptor
corrimiento
reloj
transmisor
desfasaje
inevitable
representa
problema
verse
Figura
10.18
Fig
10.18
Desfasaje
temporización
transmisor
receptor
Transmisión
síncrona
caso
transmite
bloque
cantidad
importante
bits
utilizar
bits
comienzo
parada
caso
asíncrono
tipos
transmisión
serie
síncrona
Transmisión
síncrona
línea
sincronización
Transmisión
síncrona
autosincronizada
caso
línea
adicional
reloj
sincronización
Figura
10.19
utilizado
receptor
leer
bit
guardarlo
sincronización
establecerse
flanco
descendente
reloj
técnica
funciona
distancias
cortas
mayores
distancias
señal
sincronismo
sufre
degradación
importante
319
Fig
10.19
Transmisión
serie
síncrona
reloj
independiente
alternativa
transmite
sincronismo
señal
datos
Figura
7.20
técnica
ahorra
línea
sincronismo
especial
evita
degradación
contrapartida
requiere
ancho
banda
ejemplo
caso
señal
ización
Manchester
usada
Redes
LAN
Cableadas
Ethernet
señalización
demanda
elementos
señal
bit
Fig
10.20
Transmisión
serie
síncrona
reloj
incorporado
datos
cualquiera
técnicas
sincronización
mencionadas
tipo
transmisión
necesita
sincronización
adicional
receptor
identificar
comienzo
bloque
bits
trama
Consiste
adicionar
patrón
bits
conocido
ejemplo
llamado
delimitador
trama
receptor
detecta
delimitador
comienza
termina
trama
trama
comienza
conjunto
bits
cabecera
control
incluye
metadatos
dependen
protocolo
comunicación
or
ejemplo
direcciones
origen
destino
tipo
prioridad
tráfico
tamaño
trama
bloque
datos
etc.
bloque
datos
termina
conjunto
bits
cola
control
bits
verificación
checksum
figura
10.21
representa
trama
320
Fig
10.21
Trama
transmisión
serie
síncrona
eficiencia
transmisión
síncrona
relación
bits
efectivos
datos
bits
significativamente
asíncrona
tenerse
bloque
datos
contiene
cantidad
bits
superior
campos
ejemplo
protocolos
reales
campos
control
delimitador
48
bits
bloque
datos
orden
8000
bits
eficiencia
caso
Eficiencia
8000/8048
100
99,4
resultado
superior
caso
asíncrono
2.5
Configuraciones
punto-a-punto
multipunto
conexión
módulo
computador
periféricos
punto-a-punto
multipunto
interface
punto-a-punto
proporciona
línea
específica
módulo
dispositivo
externo
Figura
10.22
computadoras
personales
comunicación
teclado
monitor
dispositivos
tipo
punto-a-punto
Fig
10.22
Topología
punto
punto
321
interfaces
externas
multipunto
utilizadas
soportar
dispositivos
enlace
interfaces
multipunto
buses
externos
Figura
10.23
Fig
10.23
Topología
Multipunto
2.6
Medios
transmisión
medios
transmisión
utilizados
comunicaciones
computadoras
periféricos
computadoras
redes
datos
LAN
Cableadas
Ethernet
Inalámbricas
Wi-Fi
clasificarse
Medios
Guiados
Medios
Guiados
Inalámbricos
casos
comunicación
computadora
dispositivos
concreta
ondas
electromagnéticas
características
calidad
transmisión
determinadas
tipo
señal
características
utilizado
2.6.1
Medios
guiados
medios
guiados
proporcionan
camino
físico
señal
propaga
actualidad
computadora
comunicarse
básicamente
cualquiera
siguientes
medios
guiados
Par
Trenzado
Fibra
Óptica
322
Par
trenzado
par
trenzado
consiste
cables
embutidos
aislante
entrecruzados
forma
espiral
par
cables
estable
enlace
comunicación
aplicaciones
agrupan
pares
envoltura
protectora
Figura
10.24
Fig
10.24
Cable
pares
trenzados
par
trenzado
datos
digitales
distancia
cortas
alcanzar
velocidades
transmisión
orden
Gbps
largas
distancias
llegar
velocidades
transmisión
orden
Mbps
barato
usarse
topologías
punto
punto
multipunto
usarse
pares
trenzados
apantallados
apantallar
apantallado
UTP
utiliza
habitualmente
ambientes
computacionales
Figura
10.25
telefonía
evitar
interferencias
electromagnéticas
externas
pares
trenzados
malla
metálica
cubre
pares
STP
mejora
resultados
ambientes
críticos
323
Fig
10.25
Cable
par
trenzado
apantallado
Fibra
óptica
fibra
óptica
flexible
capaz
transportar
información
digital
haz
luz
utilizar
comunicaciones
computacionales
Figura
10.26
observa
patch
cord
fibra
transporta
luz
nú
cleo
fibra
cristal
plástico
micras
diámetro
velocidad
transmisión
llegar
cientos
Gbps
distancias
decenas
kilómetros
cable
liviano
menor
atenuación
aislamiento
electromagnético
pares
trenzados
324
Fig
10.26
Cable
fibra
óptica
2.6.2
Medios
guiados
inalámbricos
medios
guiados
inalámbricas
utilizan
antena
transmitir
recibir
aire
vacío
agua
transmisión
antena
radia
energía
electromagnética
circundante
recepción
capta
ondas
electromagnéticas
rodea
comunicaciones
inalámbricas
separan
clasifican
bandas
frecuencias
muestra
Tabla
10.1
325
Tabla
10.1
Características
bandas
comunicaciones
comunicaciones
inalámbricas
usadas
comunicaciones
computadora
notebook
netbook
dispositivos
móviles
transferencias
información
acceder
red
datos
Figura
10.2
bandas
frecuencias
normalmente
ubicadas
banda
SHF
conocida
microondas
Fig
10.27
Comunicaciones
inalámbricas
326
Casos
Estudio
3.1
Puerto
USB
Visión
general
Universal
Serial
Bus
USB
estándar
industrial
desarrollado
mediados
años
1990
define
cables
conectores
protocolos
usados
bus
conectar
comunicar
proveer
alimentación
eléctrica
ordenadores
periféricos
dispositivos
electró
nicos
1996
lanzó
especificación
USB
1.0
popular
1998
USB
1.1
USB
diseñado
estandarizar
conexión
periféricos
mouse
teclados
memorias
USB
Figura
10.2
8)
joysticks
escáneres
cámaras
digitales
teléfonos
móviles
reproductores
multimedia
impresoras
dispositivos
multifuncionales
sistemas
adquisición
datos
módems
tarjetas
red
tarjetas
sonido
tarjetas
sintonizadoras
televisión
grabadora
DVD
externa
discos
duros
externos
disquetera
externas
desplazado
conectores
puerto
serie
puerto
paralelo
puerto
juegos
Apple
Desktop
Bus
PS/2
Fig
10.28
Memoria
USB
campo
aplicación
extiende
actualidad
dispositivo
electrónico
componentes
automóviles
327
reproductores
modernos
juguetes
implementado
variaciones
industrial
militar
nota
influencia
teléfonos
inteligentes
Europa
creado
norma
móviles
deberán
veni
cargador
microUSB
tabletas
PDAs
videoconsolas
reemplazado
conectores
propietarios
completo
Aspectos
técnicos
puerto
USB
permite
conectar
127
dispositivos
estándar
ordenadores
generación
incluyen
puertos
USB
3.0
modernos
USB
1.1
anticuados
puerto
totalmente
plug
and
play
conectar
dispositivo
reconocido
instalado
inmediata
cable
USB
transfieren
datos
alimentar
dispositivos
externos
limitaciones
tipo
conexiones
longitud
cable
superar
metros
cumplir
especificaciones
Standard
USB
iguales
1.1
2.0
Figura
10.29
Fig
10.29
Cables
USB
328
dispositivos
USB
clasifican
tipos
velocidad
transferencia
datos
Baja
velocidad
1.0
Tasa
transferencia
1,5
Mbit
188
kB
Utilizado
dispositivos
interfaz
humana
teclados
ratones
mouse
cámaras
web
etc.
Velocidad
completa
1.1
Tasa
transferencia
12
Mbit
1,5
MB
estándar
rápida
especificación
USB
2.0
Alta
velocidad
2.0
Tasa
transferencia
480
Mbit
60
MB
tasa
real
práctica
máxima
280
Mbit
35
MB
cable
USB
2.0
dispone
líneas
par
datos
par
alimentación
dispositivos
fabricados
actualidad
trabajan
velocidad
Superalta
velocidad
3.0
tasa
transferencia
4,8
Gbit
600
MB
velocidad
bus
rápida
USB
2.0
incluido
contactos
adicionales
compatible
estándares
anteriores
especificaciones
USB
1.0
1.1
2.0
definen
tipos
conectores
conectar
dispositivos
servidor
B.
capa
mecánica
cambiado
conectores
ejemplo
fabricantes
mantienen
señales
protocolos
característicos
USB
3.2
Puerto
Ethernet
Visión
general
puerto
viene
integrado
tarjeta
principal
motherboard
computadora
tarjeta
placa
red
NIC
Network
Interface
Card
utiliza
interconectar
computadora
computadoras
dispositivos
red
red
LAN
Local
Area
Network
cableada
Figura
10
30
muestra
puerto
Ethernet
red
LAN
cableada
cable
UTP
329
Fig
10.30
Puerto
Ethernet
cable
UTP
placa
red
puerto
Ethernet
RJ
-45
Registered
Jack
45
interfaz
física
posee
pines
conexiones
eléctricas
extremos
cables
par
trenzado
UTP
STP
Figura
10.31
variante
puerto
Ethernet
interfaz
física
cables
fibra
óptica
Fig
10.31
Cable
par
trenzado
puerto
Ethernet
330
Aspectos
técnicos
puerto
Ethernet
tarjeta
red
adaptador
red
Figura
10.27
muestra
puerto
Ethernet
cableado
par
trenzado
UTP
Permite
comunicación
aparatos
conectados
compartir
recursos
computadoras
discos
duros
CD-ROM
impresoras
etc
tarjetas
red
llama
NIC
Network
Interface
Card
diversos
tipos
adaptadores
función
tipo
cableado
arquitectura
utilice
red
ctualmente
común
tipo
Ethernet
utilizando
interface
conector
RJ-45
término
tarjeta
red
suele
asociar
tarjeta
expansión
insertada
ranura
interna
computador
observa
Figura
10.32
suele
utilizar
referirse
placa
integrada
placa
principal
madre
computadora
notebook
netbook
tablets
Fig
10.32
Placa
red
Ethernet
puerto
par
trenzado
UTP
tarjetas
red
Ethernet
cable
UTP
utilizan
conectores
RJ-
45
comunicaciones
10/100/1000
Mbps
actualmente
empezando
utilizar
10
Gigabit
Ethernet
331
Alternativamente
puertos
Ethernet
Fibra
Óptica
1000
Mbps
superior
Figura
10
33
conectores
usuales
aplicaciones
fibra
óptica
MM
ST
Straight
Tip
fibra
MultiModo
na
solución
simple
conectar
computadora
directamente
red
fibra
óptica
alta
velocidad
ofrece
conexión
fibra
directa
susceptible
interferencia
electromagnética
Fig
10.33
Placa
red
puerto
Ethernet
fibra
óptica
3.3
Puerto
Bluetooth
Visión
general
puerto
BlueTooth
puerto
inalámbrico
viene
integrado
tarjeta
principal
otherboard
computadora
estandarizado
dispositivos
móviles
notebooks
netbooks
tablets
computadoras
tengan
recurso
conectividad
inalámbrica
integrada
tarjeta
placa
red
NIC
Network
Interface
Card
utiliza
interconectar
computadora
computadoras
dispositivos
red
red
WPAN
Redes
Inalámbricas
Área
Personal
Bluetooth
na
especificación
industrial
posibilita
transmisión
voz
datos
dispositivos
enlace
332
radiofrecuencia
banda
ISM
2,4
GHz
principales
objetivos
pretenden
norma
Facilitar
comunicaciones
equipos
móviles
Eliminar
cables
conectores
Ofrecer
posibilidad
crear
pequeñas
redes
inalámbricas
facilitar
sincronización
datos
equipos
personales
dispositivos
frecuencia
utilizan
tecnología
siguientes
dispositivos
PDA
teléfonos
móviles
computadoras
portátiles
computadoras
impresoras
cámaras
digitales
Aspectos
técnicos
Bluetooth
diseñado
especialmente
dispositivos
consumo
req
uieren
corto
alcance
emisión
basados
transceptores
transmisores
receptores
costo
dispositivos
incorporan
protocolo
comunicarse
encuentran
alcance
comunicaciones
realizan
radiofrecuencia
forma
dispositivos
alineados
habitaciones
separadas
potencia
transmisión
suficiente
dispositivos
clasifican
Clase
Clase
Clase
referencia
potencia
transmisión
Tabla
10.2
Tabla
10.2
Clases
Bluetooth
mayoría
casos
cobertura
efectiva
dispositivo
clase
extiende
conecta
transceptor
clase
gracias
sensibilidad
potencia
transmisión
dispositivo
clase
dispositivos
Bluetooth
clasificarse
capacidad
canal
observa
Tabla
10.3
333
Tabla
10.3
Versiones
velocidad
Bloototh
utilidad
Bluetooth
desarrollada
1994
Jaap
Haartsen
Mattisson
Sven
reemplazo
cable
trabajando
Ericsson
Lund
Suecia
prestaciones
publicadas
Bluetooth
Special
Interest
Group
SIG
SIG
anunció
formalmente
20
mayo
1998
membresía
20.000
empresas
mundo
creado
Ericsson
IBM
Intel
Toshiba
Nokia
posteriormente
sumaron
compañías
versiones
estándares
Bluetooth
diseñadas
retro
compatibilidad
permite
estándar
cubra
versiones
anteriores
versiones
recientes
3.0
4.0
versión
3.0
HS
especificación
Core
Bluetooth
aprobada
Bluetooth
SIG
2009
Soporta
velocidades
teóricas
transferencia
datos
24
Mbit
enlace
Bluetooth
propiamente
conexión
Bluetooth
nativa
utiliza
negociación
establecimiento
tráfico
datos
alta
velocidad
realiza
enlace
Wi
-Fi
Justamente
principal
novedad
AMP
Alternate
MAC
PHY
adición
Wi
-Fi
transporte
alta
velocidad
especificación
incorporación
transmisión
alta
velocidad
obligatoria
dispositivos
marcados
HS
incorporan
enlace
Wi-Fi
alta
velocidad
transferencia
datos
dispositivo
Bluetooth
3.0
sufijo
HS
soporta
alta
velocidad
334
SIG
Bluetooth
completó
2010
especificación
núcleo
Bluetooth
versión
4.0
incluye
Bluetooth
clásico
Bluetooth
alta
velocidad
protocolos
Bluetooth
consumo
bluetooth
alta
velocidad
basa
Wi
-Fi
Bluetooth
clásico
consta
protocolos
Bluetooth
preexistentes
bluetooth
baja
energía
Bluetooth
Low
Energy
BLE
subconjunto
Bluetooth
v4.0
pila
protocolos
completamente
desarrollar
rápidamente
enlaces
sencillos
alternativa
protocolos
estándar
Bluetooth
introdujeron
Bluetooth
v1.0
v4.0
dirigido
aplicaciones
baja
potencia
alimentados
pila
botón
3.4
Puerto
HDMI
Visión
general
puerto
HDMI
High
-Definition
Multimedia
Interface
Interface
multimedia
alta
definición
norma
audio
vídeo
digital
cifrado
compresión
HDMI
provee
interface
Figura
10
34
fuente
audio
vídeo
digital
computadora
sintonizador
TDT
reproductor
Blu-ray
Tablet
PC
monitor
audio
vídeo
digital
compatible
televisor
digital
DTV
Fig
10.34
Conector
interface
HDMI
HDMI
permite
vídeo
computarizado
mejorado
alta
definición
audio
digital
multicanal
único
cable
335
Aspectos
técnicos
conector
estándar
HDMI
tipo
19
pines
Tabla
10.4
definido
versión
resolución
-tipo
B-
generalizado
tipo
29
pines
permitiendo
canal
vídeo
expandido
pantallas
alta
resolución
diseñado
resoluciones
altas
tamaño
imagen
HDMI
tipo
compatible
atrás
enlace
simple
DVI
usado
monitores
computadoras
tarjetas
gráficas
modernas
fuente
DVI
conectarse
monitor
HDMI
viceversa
adaptador
cable
adecuado
audio
características
control
remoto
HDMI
estarán
disponibles
HDMI
tipo
forma
similar
compatible
atrás
enlace
trial
DVI
Tabla
10.4
Asignación
pines
conector
HDMI
tipo
A.
336
conector
HDMI
diseñado
equipos
utilicen
impidan
usuario
copia
contenido
audio
-vídeo
transmitido
cifrado
dichos
datos
aparición
versión
HDMI
2002
sucedido
sucesivas
revisiones
resumen
Tabla
10.5
especificación
HDMI
define
longitud
máxima
cable
cables
atenuación
señal
alta
determinada
longitud
lugar
HDMI
especifica
mínimo
nivel
potencia
materiales
calidades
construcción
permitirán
cables
longitudes
jor
cumplimiento
requisitos
técnicos
cables
permitirá
soportar
formatos
vídeo
resolución
atenuación
señal
interferencia
causada
cables
compensadas
utilización
ecualizadores
norma
HDMI
1.3
definidas
categorías
cables
llamados
Categoría
Estándar
HDTV
Categoría
alta
velocidad
superior
HDTV
reducir
confusión
acerca
cables
soporte
distintos
formatos
vídeo
Usando
conductores
calibre
28
AWG
cable
metros
fabricar
fácil
económica
especificaciones
categoría
cable
conductores
grosor
24
AWG
construcción
estricta
tolerancias
factores
alcanzar
longitudes
12
15
metros
cables
fibra
óptica
doble
cable
Cat
-5
estándar
cobre
utilizar
ampliar
HDMI
100
metros
compañías
ofrecen
amplificadores
ecualizadores
repetidores
encadenar
cables
HDMI
337
Tabla
10.5
Resumen
sucesivas
revisiones
HDMI
3.5
Puerto
Wi-Fi
Visión
general
puerto
Wi
-Fi
puerto
inalámbrico
viene
integrado
tarjeta
principal
motherboard
computadora
estandarizado
dispositivos
móviles
notebooks
netbooks
tablets
smartphones
computadoras
recurso
conectividad
inalámbrica
integrada
tarjeta
placa
red
NIC
Network
Interface
Card
placas
red
Wi-Fi
conexión
USB
utiliza
interconectar
computadora
computadoras
dispositivos
red
red
WLAN
Wireless
LAN
NIC
Wi
-Fi
vienen
variedades
dependiendo
norma
ajustan
Usualmente
802.11a
802.11b
802.11
802.11n
tiempo
populares
802.11b
transmite
11
Mbit
1,375
MB
802.11
transmite
54
338
Mbit
6,75
MB
Actualmente
protocolo
viene
utilizando
802.11n
capaz
transmitir
600
Mbit
s.
Actualmente
capa
física
soporta
velocidad
teórica
300
Mbit
s.
Aspectos
técnicos
tecnología
surgió
necesidad
establecer
mecanismo
conexión
inalámbrica
fuese
compatible
distintos
dispositivos
Buscando
compatibilidad
1999
importantes
empresas
reunieron
crear
Wireless
Ethernet
Compatibility
Alliance
WECA
actualmente
llamada
Wi-Fi
Alliance
objetivo
designar
marca
permitiese
fomentar
fácilmente
tecnología
inalámbrica
asegurar
compatibilidad
equipos
norma
inalámbrica
IEEE
802.11
diseñada
sustituir
equivalente
cableado
IEEE
802.3
Ethernet
único
diferencia
red
Wi
-Fi
red
Ethernet
transmiten
tramas
paquetes
datos
resto
idéntico
red
local
inalámbrica
802.11
completamente
compatible
servicios
redes
locales
LAN
cable
802.3
Ethernet
diversos
tipos
Wi
-Fi
basado
estándar
original
IEEE
802.11
siguientes
estándares
IEEE
802.11b
IEEE
802.11
IEEE
802.11n
disfrutan
aceptación
internacional
banda
2.4
GHz
disponible
universalmente
velocidad
11
Mbit
54
Mbit
300
Mbit
respectivamente
estándar
IEEE
802.11a
conocido
WIFI
opera
banda
GHz
disfruta
operatividad
canales
relativamente
limpios
banda
GHz
recientemente
habilitada
tecnologías
Bluetooth
microondas
ZigBee
WUSB
estén
utilizando
interferencias
alcance
menor
estándares
trabajan
2.4
GHz
10%
frecuencia
frecuencia
menor
alcance
tecnologías
inalámbricas
Bluetooth
funcionan
frecuencia
2.4
GHz
presentar
interferencias
tecnología
Wi
-Fi
versión
1.2
estándar
Bluetooth
ejemplo
actualizó
especificación
existieran
interferencias
utilización
simultánea
ambas
tecnologías
339
problemas
enfrenta
actualmente
tecnología
Wi
-Fi
progresiva
saturación
espectro
radioeléctrico
masificación
usuario
s.
afecta
especialmente
conexiones
larga
distancia
100
metros
tenerse
Wi
-Fi
diseñado
conectar
computadoras
dispositivos
móviles
red
distancias
reducidas
dispositivos
Wi-Fi
dividir
grupos
Dispositivos
Distribución
Red
destacan
routers
puntos
acceso
APs
Repetidores
Wi-Fi
Figura
10.35
servicio
Wi-Fi
dispositivos
terminales
Dispositivos
Terminales
equipos
NIC
Wi-Fi
placa
red
Wi-FI
internas
tarjetas
PCI
USB
caso
computadoras
personales
dispositivos
móviles
Fig
10.35
Router
Wi-Fi
Dispositivos
Distribución
Red
puntos
acceso
APs
dispositivos
generan
set
servicios
definirse
Red
Wi
-Fi
conectar
dispositivos
APs
permiten
conectar
dispositivos
forma
inalámbrica
red
existente
340
agregarse
APs
red
generar
redes
cobertura
amplia
conectar
antenas
amplifiquen
señal
repetidores
inalámbricos
equipos
utilizan
extender
cobertura
red
inalámbrica
conectan
red
existente
señal
débil
crean
señal
limpia
conectar
equipos
alcance
funcionan
punto
acceso
router
inalámbricos
dispositivos
compuestos
especialmente
di
señados
redes
pequeñas
hogareñas
pequeña
oficina
dispositivos
incluyen
Router
encargado
interconectar
redes
ejemplo
red
hogar
internet
punto
acceso
explicado
generalmente
switch
permite
conectar
equipos
vía
cable
Ethernet
USB
tarea
tomar
conexión
internet
brindar
acceso
equipos
conectemos
cable
forma
inalámbrica
dispositivos
terminales
clasifican
egún
tipo
tarjeta
Wi-Fi
servicio
red
Wi-Fi
tipos
mayoritarios
tarjetas
PCI
tarjetas
PCMCIA
tarjetas
USB
tarjetas
PCI
Wi-Fi
agregan
vienen
fábrica
computadoras
personales
perdiendo
terreno
tarjetas
USB
grupo
agregarse
tarjetas
MiniPCI
vienen
integradas
computadora
portátil
disponible
mercado
tarjetas
PCMCIA
modelo
utilizó
primeras
computadoras
personales
cayendo
desuso
integración
tarjeta
inalámbricas
internas
computadoras
tarjetas
USB
Wi-Fi
tipo
tarjeta
común
conectar
PC
personal
portátil
ventajas
tecnología
USB
encontrarse
tarjetas
USB
estándar
802.11n
estándar
liberado
redes
inalámbricas
impresoras
cámaras
Web
periféricos
funcionan
tecnología
Wi
-Fi
permitiendo
ahorro
cableado
instalaciones
redes
especialmente
movilidad
341
Ejercitación
Ejercicio
computadora
capaz
ejecutar
10
instrucciones
desea
conectar
computador
únicamente
periférico
velocidad
transferencia
20.000
bytes
sg
realizan
operaciones
lectura
bloques
1.024
bytes
pretende
comportamiento
pareja
computador-periférico
técnicas
entrada-
salida
programada
interrupciones
DMA
rutina
transferencia
programada
consta
10
instrucciones
rutina
tratamiento
interrupció
interrupciones
consta
20
instruciones
rutina
inicializacón
DMA
consta
instrucciones
operación
escritura
dato
memoria
controlador
ocupa
buses
500
ns
pide
Indicar
número
instrucciones
procesos
computador
tipos
previstos
Ejercicio
ejercicio
suponiendo
velocidad
transferencia
periférico
100.000
bytes
bloques
512
bytes
Ejercicio
computadora
ejecutar
100.000
instrucciones
tiempo
tarda
leer
bloque
2048
bytes
indicar
instrucciones
quedarían
disponibles
procesos
conectamos
sistema
DMA
supone
rutina
inicialización
DMA
consta
instrucciones
operación
escritura
dato
memoria
controlador
ocupa
buses
750
nseg
Ejercicio
sistema
controlado
operador
serie
comandos
introducen
teclado
intervalo
horas
introducen
promedio
sesenta
comandos
Suponga
procesador
comprueba
teclado
100
ms
chequea
periodo
horas
po
rcentaje
reduciría
número
comprobaciones
teclado
utilizase
interrupciones
342
Ejercicio
módulo
DMA
transfiere
caracteres
memoria
robo
ciclo
dispositivo
transmite
9600
bps
procesador
ejecuta
instrucciones
ritmo
millón
disminuye
velocidad
procesador
DMA
Ejercicio
Considere
sistema
transferencia
bus
necesita
500
ns
transferencia
control
bus
sentido
procesador
dispositivo
necesita
250
ns
dispositivos
velocidad
transferencia
50
Kbytes
utiliza
DMA
datos
transfieren
byte
byte
Suponga
emplea
DMA
ráfaga
interface
DMA
adquiere
control
bus
empezar
transferencia
bloque
mantiene
control
transferencia
completa
tiempo
dispositivo
bus
ocupado
transfieren
128
bytes
Repita
cálculo
utiliza
robo
ciclo
Ejercicio
puertos
direccionar
8088
Desarrolle
Ejercicio
ventajas
8088
mapeadas
memoria
Desarrolle
analice
opción
utiliza
8088
343
Índice
contenidos
Capítulo
Representación
Numérica
Sistemas
Numeración
12
1.1
Introducción
12
1.2
Confiabilidad
14
1.3
Costo
15
Sistema
Numeración
Binario
16
2.1
Introducción
16
2.2
Conversión
números
distintas
bases
18
2.3
Complementos
binarios
19
2.4
Representación
números
negativos
binario
21
Punto
Fijo
Punto
Flotante
23
3.1
Introducción
23
3.2
Operaciones
aritméticas
24
3.3
Norma
IEEE
754
25
Ejercitación
27
Capítulo
Códigos
Numéricos
Alfanuméricos
Códigos
30
1.1
Introducción
30
1.2
Códigos
binarios
30
1.3
Códigos
BCD
33
1.4
Códigos
alfanuméricos
35
Códigos
detectores
correctores
error
37
2.1
Introducción
37
2.2
Distancia
mínima
38
2.3
Códigos
detectores
error
40
2.4
Códigos
correctores
error
41
2.4.1
Código
Hamming
42
2.4.2
Verificación
redundancia
LRC
CRC
44
2.4.3
Códigos
bidimensionales
47
Encriptación
cifrado
49
códigos
51
4.1
Códigos
barras
51
4.2
Códigos
QR
55
Ejercitación
60
Capítulo
Álgebra
Boole
Visión
General
Álgebra
Boole
64
1.1
Introducción
64
1.2
Postulados
65
1.3
Teoremas
65
344
Funciones
lógicas
67
2.1
Introducción
67
2.2
Teoremas
Funciones
Lógicas
67
Minimización
Funciones
Lógicas
71
3.1
Introducción
71
3.2
Método
Simplificación
Karnaugh
72
Compuertas
Lógicas
75
Ejercitación
77
Capítulo
Sistemas
Combinacionales
Sistemas
Digitales
82
Sistemas
Combinacionales
83
2.1
Introducción
83
2.2
Circuitos
Combinacionales
MSI
84
Casos
Comunes
Sistemas
Combinacionales
MSI
84
3.1
Codificadores
84
3.2
Decodificadores
85
3.3
Multiplexores
87
3.4
Demultiplexores
89
3.5
Comparadores
91
3.6
Detectores
Generadores
Paridad
92
3.7
Sumadores
93
3.8
Unidades
Aritméticas
Lógicas
97
Ejercitación
98
Capítulo
Sistemas
Secuenciales
Visión
general
sistemas
secuenciales
102
1.1
Introducción
102
1.2
Caso
Estudio
104
Biestables
108
2.1
Introducción
108
2.2
Biestables
Asíncronos
109
2.3
Biestables
Asíncronos
109
Tipos
Biestables
112
3.1
Introducción
112
3.2
Biestables
JK
112
3.3
Biestables
113
3.4
Biestables
113
Aplicaciones
Biestables
114
4.1
Registros
Desplazamiento
114
4.2
Transferencias
Registros
116
4.3
Contadores
119
4.4
Multiplicación
División
Binaria
121
4.4.1
Multiplicación
binaria
121
4.4.2
División
binaria
127
345
Ejercitación
130
Capítulo
Memorias
Electrónicas
Visión
general
134
1.1
Introducción
134
1.2
Clasificación
memorias
electrónicas
137
Memorias
acceso
aleatorio
RAM
138
2.1
Definición
138
2.2
Memorias
RAM
lectura
escritura
141
2.2.1
Memorias
RAM
lectura
escritura
estáticas
141
2.2.2
Memorias
RAM
lectura
escritura
dinámicas
146
2.3
Memorias
RAM
lectura
ROM
148
2.3.1
Memorias
ROM
148
2.3.2
Memorias
PROM
149
2.3.3
Memorias
RPROM
149
2.4
Extensión
longitud
palabra
capacidad
150
2.4.1
Extensión
longitud
palabra
150
2.4.2
Extensión
número
palabras
151
Memorias
acceso
serie
153
3.1
Definición
153
3.2
Registros
desplazamiento
155
3.2.1
Registros
desplazamiento
estáticos
156
3.2.2
Registros
desplazamiento
dinámicos
156
3.3
Memorias
FIFO
158
3.4
Memorias
LIFO
160
Ejercitación
162
Capítulo
Arquitectura
Básica
Computadora
Arquitectura
Von
Neumann
166
Máquina
elemental
168
2.1
Introducción
168
2.2
Arquitectura
Computadora
Elemental
171
2.2.1
Unidad
Procesamiento
Central
171
2.2.2
Memorias
RAM
lectura
escritura
dinámicas
172
2.2.3
Unidad
Entrada
Salida
172
2.3
Conjunto
Instrucciones
173
2.4
Ciclo
Máquina
177
2.5
Flujo
Información
177
2.6
Unidad
Control
180
2.6.1
Unidad
Control
Cableada
180
2.6.2
Secuenciador
182
2.6.3
Lógica
Control
189
2.7
Unidad
control
microprogramada
190
2.8
Bus
máquina
elemental
198
2.9
Unidad
aritmética
lógica
200
346
Ejercitación
202
Capítulo
Arquitectura
Convencional
Visión
General
206
1.1
Formato
Instrucciones
206
1.1.1
Formato
direcciones
206
1.1.2
Formato
direcciones
207
1.1.3
Formato
direcciones
207
1.1.4
Formato
dirección
208
1.2
Modos
direccionamiento
208
1.2.1
Operando
CPU
210
1.2.2
Operando
memoria
210
Hardware
Software
212
2.1
Registros
212
2.1.1
Registros
índices
212
2.1.2
Registros
base
213
2.2
Máquina
Elemental
Indexada
215
2.2.1
Conj
instrucciones
máquina
elemental
indexada
216
2.2.2
Ciclos
máquina
220
2.2.3
Interrupciones
228
2.2.4
Sistema
elemental
interrupciones
230
2.2.5
Inicio
transferencia
237
2.3
Estructura
Convencional
243
Microprocesador
Intel
8088
244
3.1
Introducción
244
3.2
Diagrama
Bloques
246
3.2.1
BIU
EU
247
3.2.2
Registros
8088
249
3.2.3
Organización
memoria
250
3.2.4
Modos
direccionamiento
252
3.2.5
Conjunto
instrucciones
254
3.2.6
Direccionamiento
Entrada
Salida
255
3.2.7
Interrupciones
8088
255
Ejercitación
257
Capítulo
Arquitectura
Avanzada
Visión
general
260
Pipeline
261
2.1
Introducción
261
2.2
Predicción
Dirección
Salto
262
2.2
Pipeline
Máquina
Elemental
264
2.3.1
Unidad
control
pipeline
264
2.3.2
Secuenciador
UC
pipeline
265
2.3.3
Ciclos
Pipeline
268
347
2.3.4
Incrementador
contador
programa
272
2.3.5
Predicción
dirección
salto
272
2.3.6
Comparación
máquina
elemental
272
Memoria
Caché
273
3.1
Principios
localidad
273
3.2
Manejo
caché
274
DMA
274
4.1
Controlador
DMA
274
4.2
Scanner
276
4.2.1
Robo
ciclo
276
Evolución
Arquitecturas
277
5.1
Introducción
277
5.2
CISC
278
5.3
RISC
279
5.3.1
Arquitectura
carga
almacenamiento
280
5.3.2
Registros
múltiples
282
5.4
Comparación
RISC
CISC
283
5.4.1
semántica
programas
alto
nivel
283
5.4.2
Considerando
transferencia
datos
CPU
memoria
284
5.4.3
Comportamiento
salto
subrutinas
interrupciones
286
5.4.4
Cuadro
comparativo
RISC
CISC
286
Evolución
procesador
8088
287
6.1
Funcionamiento
básico
procesador
Intel
80486
290
6.2
Funcionamiento
básico
procesador
Intel
Pentium
293
Ejercitación
295
Capítulo
10
Entradas
Salidas
Módulos
Canales
Procesadores
298
1.1
Introducción
298
1.2
Módulos
300
1.3
Diagrama
bloques
módulo
301
1.4
Técnicas
operaciones
302
1.5
Ejemplo
módulo
303
1.6
Canales
procesadores
305
Datos
Señales
Interfaces
308
2.1
Datos
Señales
308
2.2
Ancho
Banda
309
2.3
Señalización
310
2.4
Interface
serie
paralela
311
2.4.1
Transmisión
paralela
312
2.4.2
Transmisión
serie
315
2.5
Configuraciones
punto-a-punto
multipunto
320
2.6
Medios
transmisión
321
2.6.1
Medios
guiados
321
348
2.6.2
Medios
guiados
inalámbricos
324
Casos
Estudio
326
3.1
Puerto
USB
326
3.2
Puerto
Ethernet
328
3.3
Puerto
Bluetooth
331
3.4
Puerto
HDMI
334
3.5
Puerto
Wi-Fi
337
Ejercitación
341
Índice
contenidos
343
Índice
Figuras
349
Índice
Tablas
355
Índice
Cuadros
357
349
Índice
Figuras
Capítulo
Representación
Numérica
Figura
1.1
Sistemas
físicos
representan
números
14
Figura
1.2
Representación
números
reales
punto
flotante
23
Figura
1.3
Representaciones
punto
flotante
Norma
754
26
Figura
1.4
Casos
especiales
números
punto
flotante
26
Capítulo
Códigos
Numéricos
Alfanuméricos
Figura
2.1
Relación
biunívoca
código
30
Figura
2.2
Esquema
capacidad
detección
corrección
error
código
37
Figura
2.3
Estructura
general
mensaje
protocolo
38
Figura
2.4
Esquema
capacidad
detección
corrección
error
código
39
Figura
2.5
Figura
Esquema
enlace
datos
44
Figura
2.6
Organización
códigos
bidimensionales
47
Figura
2.7
Organización
códigos
bidimensionales
usando
Hamming
bit
paridad
48
Figura
2.8
Simbología
EAN
UPC
53
Figura
2.9
Simbología
Código
39
54
Figura
2.10
Simbología
Codabar
54
Figura
2.11
Simbología
2/5
54
Figura
2.12
Simbología
Código
93
55
Figura
2.13
Simbología
Código
128
55
Figura
2.14
Ejemplo
Código
QR
56
Figura
2.15
Ejemplo
Código
QR
ticket
acceso
evento
57
Figura
2.16
Código
QR
usado
Wikipedia
57
Figura
2.17
Ejemplo
Código
QR
usado
cartel
comercial
58
Figura
2.18
Ejemplo
Código
QR
59
Figura
2.19
Ejemplo
Código
QR
59
Figura
2.20
Ejemplo
Código
QR
60
Capítulo
Álgebra
Boole
Figura
3.1
Mapa
Karnaugh
funciones
variables
73
Figura
3.2
Mapa
Karnaugh
función
ejemplo
74
Figura
3.3
Listado
compuertas
lógicas
comunes
75
Figura
3.4
Implementación
compuertas
lógicas
función
minimizar
76
350
Capítulo
Sistemas
Combinacionales
Figura
4.1
Diagrama
sistema
digital
82
Figura
4.2
Correspondencias
Sistema
Combinacional
83
Figura
4.3
Correspondencias
Sistema
Secuencial
83
Figura
4.4
Diagrama
bloque
sistema
circuito
Combinacional
84
Figura
4.5
Codificador
binario
entradas
salidas
85
Figura
4.6
Decodificador
entradas
salidas
86
Figura
4.7
Decodificador
3x8
implementar
función
86
Figura
4.8
Decodificador
4x16
decodificadores
3x8
87
Figura
4.9
Funcionamiento
multiplexor
87
Figura
4.10
Multiplexor
canales
88
Figura
4.11
Implementación
función
usando
multiplexor
89
Figura
4.12
Multiplexor
32
canales
usando
multiplexores
16
canales
90
Figura
4.13
Demultiplexor
canales
salida
90
Figura
4.14
Demultiplexor
canales
usando
decodificador
2x4
91
Figura
4.15
Circuito
básico
comparación
bit
91
Figura
4.16
Comparador
bits
usando
comparadores
bits
92
Figura
4.17
Generador
Detector
paridad
bits
92
Figura
4.18
Semisumador
sumador
parcial
93
Figura
4.19
Sumador
94
Figura
4.20
Cuádruple
sumador
95
Figura
4.21
Sumador
Restador
bits
complemento
96
Figura
4.22
Sumador
Restador
bits
complemento
97
Figura
4.23
ALU
bits
97
Capítulo
Sistemas
Secuenciales
Figura
5.1
Sistema
Secuencial
Asíncrono
103
Figura
5.2
Sistema
Secuencial
Síncrono
103
Figura
5.3
Función
105
Figura
5.4
Función
106
Figura
5.5
Circuito
Biestable
SR
NAND
106
Figura
5.6
Circuito
Biestable
SR
NOR
107
Figura
5.7
Componentes
señal
lógica
108
Figura
5.8
Biestable
SR
síncrono
nivel
109
Figura
5.9
Biestable
SR
maestro
esclavo
110
Figura
5.10
Biestable
SR
activado
flanco
111
Figura
5.11
Representación
biestables
activados
flanco
111
Figura
5.12
Biestable
JK
Maestro
Esclavo
SR
nivel
112
Figura
5.13
Biestable
JK
flanco
ascendente
SR
flanco
113
351
Figura
5.14
Biestable
implementado
biestables
SR
JK
114
Figura
5.15
Registro
desplazamiento
bits
serie-serie
115
Figura
5.16
Registro
desplazamiento
paralelo–serie
bits
115
Figura
5.17
Registro
paralelo
paralelo
bits
116
Figura
5.18
Interconexión
registros
bus
común
118
Figura
5.19
Interconexión
registros
usando
registros
tri-estado
118
Figura
5.20
Contador
asíncrono
bits
Diagrama
circuital
Diagrama
tiempo
120
Figura
5.21
Contador
binario
natural
bits
síncrono
120
Figura
5.22
Multiplicador
paralelo
bits
generación
overflow
123
Figura
5.23
Multiplicador
serie
bits
generación
overflow
124
Figura
5.24
Circuito
divisor
serie
bits
128
Capítulo
Memorias
Electrónicas
Figura
6.1
Tiempo
acceso
palabras
seg
función
costo
/bit
136
Figura
6.2
Esquema
general
memoria
RAM
138
Figura
6.3
Diagrama
bloques
memoria
RAM
139
Figura
6.4
Esquema
memoria
RAM
2D
140
Figura
6.5
Esquema
memoria
RAM
3D
140
Figura
6.6
Celda
básica
organización
2D
142
Figura
6.7
Celda
básica
organización
2D
142
Figura
6.8
RAM
lectura
escritura
organización
2D
143
Figura
6.9
Diagrama
bloques
memoria
RAM
estática
145
Figura
6.10
Diagrama
tiempo
operación
lectura
escritura
146
Figura
6.11
Estructura
interna
memorias
RAM
escritura
lectura
dinámicas
DRAM
147
Figura
6.12
Esquema
conexiones
memoria
ROM
148
Figura
6.13
Esquema
conexiones
memoria
ROM
150
Figura
6.14
Memoria
palabras
k.m
bits
151
Figura
6.15
Memoria
2kN
palabras
k.m
bits
152
Figura
6.16
Memoria
ejemplo
153
Figura
6.17
Esquema
memoria
serie
154
Figura
6.18
Esquema
memoria
serie
bit
bit
154
Figura
6.19
Detalles
memoria
serie
bit
bit
154
Figura
6.20
Esquema
memoria
serie
posición
posición
155
Figura
6.21
Detalles
memoria
serie
posición
posición
155
Figura
6.22
Esquema
registro
desplazamiento
estático
156
Figura
6.23
Esquema
registro
desplazamiento
dinámico
157
Figura
6.24
Circuito
operación
lectura
157
Figura
6.25
Circuito
operación
escritura
158
Figura
6.26
Esquema
memoria
FIFO
159
Figura
6.27
Funcionamiento
memoria
FIFO
159
352
Figura
6.28
Diagrama
bloques
memoria
FIFO
implementada
registro
desplazamiento
estático
160
Figura
6.29
Ejemplo
aplicación
memoria
FIFO
sistemas
digitales
160
Figura
6.30
Esquema
memoria
LIFO
161
Figura
6.31
Funcionamiento
memoria
LIFO
161
Figura
6.32
Diagrama
bloques
memoria
LIFO
implementada
registro
desplazamiento
reversible
162
Figura
6.33
Diagrama
bloque
LIFO
162
Capítulo
Arquitectura
Básica
Computadora
Figura
7.1
Estructura
básica
computadora
166
Figura
7.2
Formato
datos
numéricos
punto
fijo
169
Figura
7.3
Formato
instrucciones
169
Figura
7.4
Consola
máquina
elemental
170
Figura
7.5
Diagrama
bloques
máquina
elemental
171
Figura
7.6
Formato
instrucciones
173
Figura
7.7
transmisión
direcciones
Blue
179
Figura
7.8
transmisión
instrucciones
operandos
Blue
179
Figura
7.9
Diagrama
bloques
Unidad
Control
Cableada
181
Figura
7.10
Diagrama
bloques
secuenciador
184
Figura
7.11
Diagrama
tiempos
secuenciador
184
Figura
7.12
Lógica
funcionamiento
189
Figura
7.13
Vista
parcial
lógica
control
190
Figura
7.14
Máquina
elemental
unidad
control
Microprogramada
191
Figura
7.15
Unidad
control
microprogramada
194
Figura
7.16
Circuito
resuelve
requerimientos
señales
control
199
Figura
7.17
Circuito
asociado
Registro
MBR
200
Figura
7.18
Diagrama
bloques
unidad
aritmética
lógica
201
Capítulo
Arquitectura
Convencional
Figura
8.1
Formato
general
instrucciones
direcciones
206
Figura
8.2
Formato
general
instrucciones
direcciones
207
Figura
8.3
Formato
general
instrucciones
direcciones
207
Figura
8.4
Formato
general
instrucciones
dirección
208
Figura
8.5
Formato
instrucción
modificado
212
Figura
8.6
Diagrama
bloques
Máquina
Elemental
Indexada
216
353
Figura
8.7
Unidad
Control
incluyendo
sistema
elemental
Interrupciones
231
Figura
8.8
Secuencia
acciones
rutina
interrupción
233
Figura
8.9
Sistema
interrupciones
usando
Banderas
Dispositivos
Registro
Máscaras
prioridades
236
Figura
8.10
Vector
Interrupciones
238
Figura
8.11
Sistema
interrupciones
usando
bit
Dispositivos
señal
ACK
CPU
prioridades
239
Figura
8.12
Transferencia
salida
periférico
32
241
Figura
8.13
Transferencia
entrada
periférico
16
242
Figura
8.14
Configuración
pines
8088
244
Figura
8.15
Diagrama
bloques
microprocesador
8088
246
Figura
8.16
Formato
microinstrucción
8088
248
Figura
8.17
Suma
segmento
offset
251
Capítulo
Arquitectura
Avanzada
Figura
9.1
Ejemplo
pipeline
262
Figura
9.2
Diagrama
bloque
Unidad
Control
266
Figura
9.3
Secuenciador
Unidad
Control
267
Figura
9.4
Incrementador
PC
272
Figura
9.5
Circuito
predicción
salto
272
Figura
9.6
Simultaneidad
ciclo
lectura
memoria
caché
273
Figura
9.7
Diagrama
bloque
canal
DMA
275
Figura
9.8
Formato
típico
instrucción
281
Figura
9.9
Organización
registros
usados
traslape
283
Figura
9.10
Bloques
sub-bloques
Intel
80486
292
Figura
9.11
Bloques
Intel
Pentium
293
Capítulo
10
Entradas
Salidas
Figura
10.1
Módulo
299
Figura
10.2
Diagrama
bloques
dispositivo
externo
Periférico
300
Figura
10.3
Diagrama
bloques
módulo
302
Figura
10.4
Diagrama
bloques
interface
programable
periféricos
802C55A
Intel
304
Figura
10.5
Interface
teclado
pantalla
usando
802C55A
305
Figura
10.6
Arquitectura
canal
307
Figura
10.7
Señales
continuas
discretas
308
Figura
10.8
Señalización
Digital
311
Figura
10.9
paralela
serie
312
Figura
10.10
Transmisión
Paralela
Stroboscópica
313
354
Figura
10.11
Diagrama
tiempo
transmisión
paralela
Stroboscópica
313
Figura
10.12
Lógica
funcionamiento
transmisión
paralela
handshaking
314
Figura
10.13
Diagrama
tiempo
ejemplifica
handshaking
315
Figura
10.14
Transmisión
serie
asíncrona
315
Figura
10.15
Diagrama
tiempo
transmisión
serie
Asíncrona
316
Figura
10.16
RS323
ejemplo
transmisión
asíncrona
317
Figura
10.17
Esquema
completo
comunicación
RS232
317
Figura
10.18
Desfasaje
temporización
transmisor
receptor
318
Figura
10.19
Transmisión
serie
síncrona
reloj
independiente
319
Figura
10.20
Transmisión
serie
síncrona
reloj
incorporado
datos
319
Figura
10.21
Trama
transmisión
serie
síncrona
320
Figura
10.22
Topología
punto
punto
320
Figura
10.23
Topología
Multipunto
321
Figura
10.24
Cable
pares
trenzados
322
Figura
10.25
Patch
cord
cable
UTP
323
Figura
10.26
Patch
cord
fibra
324
Figura
10.27
Comunicaciones
inalámbricas
325
Figura
10.28
Memoria
USB
326
Figura
10.29
Cables
USB
327
Figura
10.30
Puerto
Ethernet
cable
UTP
placa
red
329
Figura
10.31
Cable
par
trenzado
puerto
Ethernet
329
Figura
10.32
Placa
red
Ethernet
puerto
par
trenzado
UTP
330
Figura
10.33
Placa
red
puerto
Ethernet
fibra
óptica
331
Figura
10.34
Conector
interface
HDMI
334
Figura
10.35
Router
Wi-Fi
339
355
Índice
Tablas
Capítulo
Representación
Numérica
Tabla
1.1
Correspondencia
sistemas
numeración
17
Tabla
1.2
Secuencia
conversión
decimal
binario
18
Tabla
1.3
Representación
números
enteros
usando
representación
bits
22
Capítulo
Códigos
Numéricos
Alfanuméricos
Tabla
2.1
Código
binario
natural
31
Tabla
2.2
Representación
código
Gray
bits
33
Tabla
2.3
Representación
código
Johnson
bits
33
Tabla
2.4
Tipos
códigos
BCD
34
Tabla
2.5
Representación
número
926
distintos
códigos
BCD
35
Tabla
2.6
Código
ASCII
estándar
bits
36
Tabla
2.7
Ejemplos
códigos
peso
constante
.41
Tabla
2.8
Tabla
correctora
código
Hamming
42
Capítulo
Álgebra
Boole
Tabla
3.1
Tabla
función
f(a
67
Tabla
3.2
Pesos
variables
booleanas
70
Capítulo
Sistemas
Combinacionales
Tabla
4.1
Tabla
función
88
Tabla
4.2
Tabla
auxiliar
89
Tabla
4.3
Tabla
comparador
92
Tabla
4.4
Tabla
semisumador
93
Tabla
4.5
Tabla
sumador
95
Capítulo
Sistemas
Secuenciales
Tabla
5.1
Tabla
sistema
secuencial
ejemplo
105
Tabla
5.2
Tabla
biestable
SR
111
Tabla
5.3
Biestables
JK
112
Tabla
5.4
Comparativa
aproximada
tiempos
productos
126
Tabla
5.5
Secuencia
control
circuito
divisor
Figura
5.24
130
Capítulo
Memorias
Electrónicas
Tabla
6.1
Clasificación
memorias
usando
principales
características
136
Tabla
6.2
Combinaciones
líneas
control
escritura
lectura
144
356
Capítulo
Arquitectura
Básica
Computadora
Tabla
7.1
Conjunto
Instrucciones
174
Tabla
7.2
Ciclo
búsqueda
185
Tabla
7.3
Ejecución
instrucciones
ciclos
187
Tabla
7.4
Ciclo
búsqueda
instrucciones
INP
OUT
188
Tabla
7.5
Formato
microinstrucción
máquina
elemental
microprogramada
192
Tabla
7.5
Contenido
ROM
256
45
197
Capítulo
Arquitectura
Convencional
Tabla
8.1
Conjunto
instrucciones
Máquina
Elemental
Indexada
220
Tabla
8.2
Formato
ciclos
búsqueda
ejecución
instrucción
LDA
3,XXXXXX
221
Tabla
8.3
Formato
ciclos
búsqueda
ejecución
instrucción
LDA
1,XXXXXX
224
Tabla
8.4
Formato
ciclos
búsqueda
ejecución
instrucción
LDA
0,XXXXXX
225
Tabla
8.5
Formato
ciclos
búsqueda
ejecución
instrucción
INC2
valor
XXXXXX
226
Tabla
8.6
Formato
ciclos
búsqueda
ejecución
instrucción
ENI3
XXXXXX
227
Tabla
8.7
Ciclo
interrupción
232
Tabla
8.8
Ciclo
máquina
instrucción
RTI
234
Tabla
8.9
Ciclo
instrucción
OUT
YY
240
Tabla
8.10
Ciclo
instrucción
INP
YY
241
Tabla
8.11
Símbolos
tipo
función
pines
8088
245
Tabla
8.12
Selección
registro
segmento
252
Capítulo
Arquitectura
Avanzada
Tabla
9.1Comportamiento
Unidades
Funcionales
13
ciclos
memoria
262
Tabla
9.2
Ciclos
pipeline
271
Tabla
9.3
Procesador
RISC
etapas
281
Tabla
9.4
Comparación
características
RISC
CISC
286
Tabla
9.5
Mejoras
procesadores
Intel
8086
80586
289
Capítulo
10
Entradas
Salidas
Tabla
10.1
Características
bandas
comunicaciones
325
Tabla
10.2
Clases
Bluetooth
332
Tabla
10.3
Versiones
velocidad
Bloototh
333
Tabla
10.4
Asignación
pines
conector
HDMI
tipo
335
Tabla
10.5
Resumen
sucesivas
revisiones
HDMI
337
357
Índice
Cuadros
Capítulo
Códigos
Numéricos
Alfanuméricos
Cuadro
2.1
Códigos
continuos
cíclicos
32
Cuadro
2.2
Ejemplo
códigos
bit
paridad
usando
BCD
Nat
40
Cuadro
2.3
Ejemplo
código
Hamming
44
358
View
publication
statsView
publication
stats
