UML
Patrones
introducción
análisis
diseño
orientado
objetos
proceso
unificado
www
.librosite.net
larman
Craig
Larman
2ª
EdiciónMuestra
artefactos
Proceso
Unificado
evolución
temporal
c-comenzar
r-refinar
Disciplina
Artefacto
Inicio
Elab
Const
Trans
Iteración
/p59I1
E1
C1
Cn
T1
T2
Modelado
Negocio
Modelo
Dominio
Requisitos
Modelo
Casos
Visión
Especificación
Complementaria
Glosario
Diseño
Modelo
Diseño
Documento
Arquitectura
SW
Modelo
Datos
Implementación
Modelo
Implementación
Gestión
Proyecto
Plan
Desarrollo
SW
Pruebas
Modelo
Pruebas
Entorno
Marco
Desarrollo
Sistema
introducirArticulo
id
cantidad
Procesar
Venta
Cliente
llega
Cajero
realiza
venta
Casos
Diagramas
Secuencia
Sistema
crear
NuevaVenta
Venta
marcaDeTiempo
Registro
11
CatalogoDeProductos
conceptos
dominio
eventos
sistema
Modelo
Dominio
Modelo
Casos
Modelo
Diseño
Registro
introducirArticulo
id
cantidad
CatalogoDeProductos
espec
getEspecificacion
id
añadirLineaDeVenta
espec
cantidad
Venta
realización
caso
diagramas
interacción
clases
conceptuales
dominio
inspiran
nombres
clases
software
diseño
crearNuevaVenta
create
Registro
crearNuevaVenta
introducirArticulo
CatalogoDeProductos
getEspecificacion
EspecificacionDelProducto
clases
diseño
descubiertas
diseño
realizaciones
casos
resumir
diagramas
clases
Cajero
Procesar
Venta
Diagramas
Casos
Cajero
Capturada-en
Muestra
relaciones
artefactos
Proceso
UnificadoPatrones
Software
Generales
Asignación
Responsabilidades
GRASP
Patrón
Descripción
Experto
Información
principio
general
diseño
objetos
asignación
responsabilidades
Asigne
responsabilidad
experto
información
clase
información
necesaria
cabo
responsabilidad
Creador
crea
Nótese
Factoría
solución
alternativa
frecuente
Asigne
clase
responsabilidad
crear
instancia
clase
cumple
puntos
siguientes
contiene
registra
agrega
utiliza
estrechamente
datos
inicialización
Controlador
gestiona
evento
sistema
Asigne
responsabilidad
gestionar
mensaje
evento
sistema
clase
represente
opciones
Representa
sistema
global
dispositivo
subsistema
controlador
fachada
Representa
escenario
caso
lugar
evento
sistema
controlador
caso
sesión
Acoplamiento
soporte
bajas
dependencias
incremento
reutilización
evaluativo
Asigne
responsabilidades
acoplamiento
innecesario
mantenga
Alta
Cohesión
mantener
manejable
complejidad
evaluativo
Asigne
responsabilidades
cohesión
permanezca
alta
Polimorfismo
responsable
comportamiento
varía
función
tipo
alternativas
comportamientos
relacionados
varían
tipo
clase
asigne
responsabilidad
comportamiento
utilizando
operaciones
polimórficas
tipos
varía
comportamiento
Fabricación
Pura
responsable
desesperado
violar
principios
alta
cohesión
acoplamiento
Asigne
conjunto
altamente
cohesivo
responsabilidades
clase
comportamiento
artificial
conveniencia
representa
concepto
dominio
problema
inventado
soporte
alta
cohesión
acoplamiento
reutilización
Indirección
asignar
responsabilidades
evitar
acoplamiento
directo
Asigne
responsabilidad
objeto
intermedio
mediar
componentes
servicios
acoplan
directamente
Variaciones
Protegidas
asignar
responsabilidades
objetos
subsistemas
sistemas
variaciones
inestabilidad
elementos
influya
deseable
elementos
Identifique
puntos
variaciones
predecibles
inestabilidad
asigne
responsabilidades
crear
interfaz
estable
ellos.d
metodoAbstracto
operacion1
5UML
PATRONES
INTRODUCCIÓN
ANÁLISIS
DISEÑO
ORIENTADO
OBJETOS
PROCESO
UNIFICADO
ediciónUML
PATRONES
INTRODUCCIÓN
ANÁLISIS
DISEÑO
ORIENTADO
OBJETOS
PROCESO
UNIFICADO
edición
CRAIG
LARMAN
Traducción
Begoña
Moros
Valle
Universidad
Murcia
Supervisión
traducción
revisión
técnica
Jesús
García
Molina
Universidad
Murcia
Madrid
México
Santafé
Bogotá
Aires
Caracas
Lima
Montevideo
San
Juan
San
José
Santiago
São
Paulo
White
PlainsLARMAN
C.
UML
PATRONES
introducción
análisis
diseño
orientado
objetos
proceso
unificado
edición
PEARSON
EDUCACIÓN
S.A.
Madrid
2003
ISBN
84-205-3438-2
Materia
Informática
681.3
Formato
195
/H11003250
Páginas
624
Datos
catalogación
bibliográfica
derechos
reservados
Queda
prohibida
excepción
prevista
ley
forma
reproducción
distribución
comunicación
pública
transformación
obra
contar
autorización
titulares
propiedad
intelectual
infracción
derechos
mencionados
constitutiva
delito
propiedad
intelectual
arts
270
sgts
Código
Penal
DERECHOS
RESERV
ADOS
2003
edición
español
PEARSON
EDUCACIÓN
S.A.
Núñez
Balboa
120
28006
Madrid
LARMAN
C.
UML
PATRONES
introducción
análisis
diseño
orientado
objetos
proceso
unificado
edición
ISBN
84-205-3438-2
Depósito
Legal
M-
PRENTICE
HALL
sello
editorial
autorizado
PEARSON
EDUCACIÓN
S.A.
Traducido
APPLYING
UML
AND
PATTERNS
An
Introduction
to
Object-Oriented
Analysis
and
Design
and
the
Unified
Process
Second
edition
by
Craig
Larman
Published
by
Pearson
Education
Inc
Publishing
as
Prentice
Hall
PTR
Prentice
Hall
Inc
2002
All
rights
reserved
ISBN
0-13-092569-1
Edición
español
Equipo
editorial
Editor
David
Fayerman
Aragón
Técnico
editorial
Ana
Isabel
García
Equipo
producción
Director
José
Antonio
Clares
Técnico
José
Antonio
Hernán
Diseño
cubierta
equipo
diseño
PEARSON
EDUCACIÓN
S.A.
Composición
COPIBOOK
S.L.
Impreso
IMPRESO
ESPAÑA
PRINTED
IN
SPAIN
libro
impreso
papel
tintas
ecológicosPara
Julie
apoyo
habría
Haley
Hannah
Gracias
aguantar
papá
distraído
vez!Parte
Introducción
An
álisis
diseño
orientado
objetos
sarrollo
iterativo
Proceso
Unificado
13
Ca
so
estudio
sistema
punto
venta
NuevaEra
27
Inicio
Inicio
33
Compren
sión
requisitos
Modelo
Ca
sos
escritura
requisitos
contexto
43
Identificaci
ón
requisitos
inicio
elaboraci
ón
103
Elaboración
Iteración
Modelo
Ca
sos
representación
diagramas
secuencia
sistema
113
10
Modelo
Dominio
vi
sualización
conceptos
121
11
Modelo
Dominio
añadir
sociaciones
145
12
Modelo
Dominio
añadir
atributo
157
13
Modelo
Ca
sos
añadir
detalles
contratos
opera-
ciones
167
14
requisitos
diseño
iteración
181
15
Notaci
ón
diagramas
interacción
185
16
GRASP
di
seño
objetos
responsabilidades
201
17
Modelo
Di
seño
realizaci
ón
ca
sos
so
patrone
GRASP
231
18
Modelo
Di
seño
determinación
visibilidad
261
RESUMEN
CONTENIDO19
Modelo
Di
seño
creación
diagramas
clases
diseño
267
20
Modelo
Implementaci
ón
transformación
diseños
código
281
Elaboración
Iteración
21
Iteraci
ón
requisitos
91
22
GRASP
ás
patrones
asignar
responsabilidades
305
23
Di
seño
realizaciones
casos
patrones
diseño
GoF
321
Elaboración
Iteración
24
Iteraci
ón
requisitos
35
25
Relacione
casos
361
26
Modelado
generalizaci
ón
36
27
Refinamiento
modelo
dominio
383
28
Añadir
DSSs
contratos
401
29
Modelado
comportamiento
diagrama
407
30
Di
seño
arquitectura
lógica
patrones
417
31
Organizaci
ón
paquetes
modelos
diseño
implementación
443
32
Introducci
ón
análisis
arquitectural
SAD
451
33
Di
seño
realizaciones
casos
objetos
patrones
473
34
Di
seño
framework
persistencia
patrones
501
Temas
especiales
35
dibujo
diagrama
herramientas
531
36
Introducci
ón
cuestiones
relacionadas
planificación
iterativa
proyecto
53
37
Comentario
acerca
desarrollo
iterativo
UP
553
38
ás
notación
UML
567
VIII
RESUMEN
CONTENIDOCONTENIDO
Presentación
Prólogo
Introducción
Capítulo
Análisis
diseño
orientado
objetos
Aplicación
UML
patrones
DOO
Asignación
responsabilidades
análisis
diseño
análisis
diseño
orientados
objetos
ejemplo
UML
10
Lecturas
adicionales
10
Capítulo
Desarrollo
iterativo
Proceso
Unificado
idea
importante
UP
desarrollo
iterativo
14
Conceptos
prácticas
UP
adicionales
18
fases
UP
términos
orientados
planificación
disciplinas
UP
flujos
trabajo
20
Adaptación
proces
Marco
Desarrollo
22
UP
ágil
23
ciclo
vida
cascada
secuencial
24
entendió
UP
25
Lecturas
adicionales
25
Capítulo
Caso
estudio
sistema
punto
venta
NuevaEra
.2
sistema
punto
venta
NuevaEra
27
Capas
arquitectónicas
énfasis
caso
estudio
28
Estrategia
libro
aprendizaje
desarrollo
iterativo
9X
CONTENIDO
Inicio
Capítulo
Inicio
Inicio
analogía
34
fase
inicio
35
artefactos
crearse
fase
inicio
35
entendió
fase
inicio
36
Capítulo
Comprensión
requisitos
Tipos
requisitos
40
Lecturas
adicionales
41
Capítulo
Modelo
Casos
escritura
requisitos
contexto
Objetivos
historias
44
Antecedentes
44
Casos
valor
añadido
45
Casos
requisitos
funcionales
46
Tipos
casos
formatos
46
Ejemplo
completo
Procesar
Venta
47
Explicación
secciones
52
Objetivos
alcance
caso
56
Descubrimiento
actores
principales
objetivos
casos
60
Enhorabuena
escrito
casos
perfectos
64
Escritura
casos
estilo
esencial
independiente
interfaz
usuario
65
Actores
67
Diagramas
casos
68
Requisitos
contexto
lista
características
nivel
70
casos
orientados
objetos
71
Casos
UP
72
Caso
estudio
casos
fase
inicio
NuevaEr
Lecturas
adicionales
76
Artefactos
UP
contexto
proceso
77
Capítulo
Identificación
requisitos
Ejemplos
PDV
NuevaEr
Ejemplo
NuevaEra
Especificación
Complementaria
Parcial
80
Comentario
Especificación
Complementaria
84
Ejemplo
NuevaEra
Visión
Parcial
87
Comentario
Visión
90
Ejemplo
NuevaEra
Glosario
Parcial
94
Comentario
Glosario
Diccionario
Datos
95
Especificaciones
fiables
Oxímoron
96
Artefactos
disponibles
sitio
web
proyecto
97
UML
fase
inicio
97
artefactos
requisitos
UP
97CONTENIDO
XI
Lecturas
adicionales
99
Artefactos
UP
contexto
proceso
100
Capítulo
inicio
elaboración
103
Punto
control
sucedió
inicio
104
elaboración
105
Planificación
iteración
106
Requisitos
énfasis
iteración
habilidades
DOO
fundamentales
108
artefactos
crearse
elaboración
108
entendió
elaboración
110
Elaboración
Iteración
Capítulo
Modelo
Casos
representación
diagramas
secuencia
sistema
Comportamiento
sistema
114
Diagramas
secuencia
sistema
114
Ejemplo
DSS
115
DSS
sistemas
115
DSS
casos
116
Eventos
sistema
límites
sistema
116
Asignación
nombres
eventos
operaciones
117
Mostrar
texto
caso
118
DSS
Glosario
118
DSS
UP
118
Lecturas
adicionales
11
Artefactos
UP
120
Capítulo
10
Modelo
Dominio
visualización
conceptos
Modelos
Dominio
122
Identificación
clases
conceptuale
126
Clases
conceptuales
candidatas
dominio
ventas
12
Guías
modelado
negocio
130
Resolución
clases
conceptuales
similares
Registro
vs
TPDV
132
Modelado
mundo
irreal
Clases
conceptuales
especificación
descripción
133
Notación
UML
modelos
métodos
perspectivas
múltiples
136
Reducción
salto
representación
138
Ejemplo
Modelo
Dominio
PDV
NuevaEra
140
Modelos
Dominio
UP
140
Lecturas
adicionales
142
Artefactos
UP
142
Capítulo
11
Modelo
Dominio
añadir
asociaciones
145
Asociaciones
145
Notación
asociaciones
UML
146XII
CONTENIDO
Localización
asociaciones—lista
asociaciones
comunes
147
Guías
asociaciones
148
Roles
14
detalladas
asociaciones
150
Asignación
nombres
asociaciones
151
Múltiples
asociaciones
tipos
152
Asociaciones
implementación
152
Asociaciones
Modelo
Dominio
PDV
NuevaEra
153
Modelo
Dominio
PDV
NuevaEra
154
Capítulo
12
Modelo
Dominio
añadir
atributos
157
Atributos
157
Notación
atributos
UML
158
Tipos
atributos
válidos
158
Clases
tipos
datos
primitivos
160
Deslizarse
diseño
atributo
clave
ajena
162
Modelado
cantidades
unidades
atributos
162
Atributos
Modelo
Dominio
NuevaEr
Multiplicidad
LineaDeVenta
Articulo
163
Conclusión
Modelo
Dominio
164
Capítulo
13
Modelo
Casos
añadir
detalles
contra-
tos
operaciones
Contratos
167
Ejemplo
contrato
introducirArticulo
168
Secciones
contrato
16
Postcondiciones
16
Discusión
postcondiciones
introducirArticulo
171
escritura
contratos
lugar
actualizaciones
Modelo
Dominio
172
útiles
contratos
Contratos
vs
casos
173
Guías
contratos
173
Ejemplo
PDV
NuevaEra
contratos
174
Cambios
Modelo
Dominio
175
Contratos
operaciones
UML
176
Contratos
operaciones
UP
177
Lecturas
adicionales
178
Capítulo
14
requisitos
diseño
iteración
181
Iterativamente
correcto
correcto
181
semanas
hacerse
exactamente
182
Pasar
diseño
objetos
182
Capítulo
15
Notación
diagramas
interacción
Diagramas
secuencia
colaboración
186
Ejemplo
diagrama
colaboración
realizarPago
187
Ejemplo
diagrama
secuencia
realizarPago
187
diagramas
interacción
importantes
188Notación
general
diagramas
interacción
18
Notación
básica
diagramas
colaboración
90
Notación
básica
diagramas
secuencia
95
Capítulo
16
GRASP
diseño
objetos
responsabilidades
201
Responsabilidades
métodos
202
Responsabilidades
diagramas
interacción
203
Patrones
204
GRASP
Patrones
Principios
Generales
Asignar
Responsabilidades
205
Notación
diagrama
clases
UML
206
Experto
Información
Experto
207
Creador
211
Acoplamiento
214
Alta
Cohesión
217
Controlador
221
Dis
eño
objetos
tarjetas
CRC
22
Lecturas
adicionales
230
Capítulo
17
Modelo
Diseño
realización
casos
patrones
GRASP
Realizaciones
casos
232
Comentarios
artefactos
232
Realizaciones
casos
iteración
NuevaEra
236
Diseño
objetos
crearNuevaVenta
236
Diseño
objetos
introducirArticulo
23
Diseño
objetos
finalizarVenta
243
Diseño
objetos
realizarPago
247
Diseño
objetos
ponerEnMarcha
252
Conexión
capa
UI
capa
dominio
255
Realizaciones
casos
UP
258
Resumen
258
Capítulo
18
Modelo
Diseño
determinación
visibilidad
Visibilidad
objetos
261
Visibilidad
262
Representación
visibilidad
UML
266
Capítulo
19
Modelo
Diseño
creación
diagramas
clases
diseño
267
crear
DCD
267
Ejemplo
DCD
268
Terminología
DCD
UP
268
Clases
Modelo
Dominio
vs
clases
Modelo
Diseño
26
Creación
DCD
PDV
NuevaEra
26
Notación
detalles
miembros
277
DCD
dibujo
herramientas
CASE
278
DCD
UP
278
Artefactos
UP
280
CONTENIDO
XIIICapítulo
20
Modelo
Implementación
transformación
dise-
ños
código
Programación
proceso
desarrollo
282
Transformación
diseños
código
284
Creación
definiciones
clases
DCDs
284
Creación
métodos
diagramas
interacción
287
Clases
contenedoras
colecciones
código
288
Manejo
excepciones
errores
28
Definición
método
Venta--crearLineaDeVenta
28
Orden
implementación
90
Programar
probando
91
Resumen
transformación
diseños
código
92
Introducción
solución
programa
92
Elaboración
Iteración
Capítulo
21
Iteración
requisitos
99
Énfasis
Iteración
diseño
objetos
patrones
99
Iteración
300
Requisitos
Iteración
301
Refinamiento
artefactos
orientados
análisis
iteración
303
Capítulo
22
GRASP
patrones
asignar
responsabilidades
305
Polimorfismo
306
Fabricación
Pura
308
Indirección
312
Variaciones
Protegidas
313
Capítulo
23
Diseño
realizaciones
casos
pa-
trones
diseño
GoF
Adaptador
GoF
322
Descubrimientos
análisis
diseño
Modelo
Dominio
324
Factoría
GoF
326
Singleton
GoF
328
Conclusiones
problema
servicios
externos
diversas
interfaces
331
Estrategia
GoF
332
Composite
GoF
principios
diseño
337
Fachada
GoF
346
Observador
Publicar-Suscribir
Modelo
Delegación
Eventos
GoF
348
Conclusión
356
Lecturas
adicionales
356
Elaboración
Iteración
Capítulo
24
Iteración
requisitos
Requisitos
Iteración
35
Énfasis
Iteración
35
XIV
CONTENIDOCapítulo
25
Relaciones
casos
relación
inclusión
include
Terminología
casos
concretos
abstractos
base
adicional
364
relación
extensión
extend
365
relación
generalización
generalize
Diagramas
casos
367
Capítulo
26
Modelado
generalización
369
conceptos
Modelo
Dominio
36
Generalización
371
Definición
superclases
subclases
conceptuales
373
definir
clase
conceptual
375
definir
superclase
conceptual
377
Jerarquías
clases
conceptuales
PDV
NuevaEra
377
Clases
conceptuales
abstractas
380
Modelado
cambios
381
Jerarquías
clases
herencia
software
382
Capítulo
27
Refinamiento
modelo
dominio
383
Clases
asociación
383
Agregación
composición
385
Intervalos
tiempo
precios
productos
arreglar
error
Iteración
390
Nombres
roles
asociación
90
Roles
conceptos
vs
roles
asociaciones
91
Elementos
derivados
92
Asociaciones
calificadas
93
Asociaciones
reflexivas
94
Elementos
ordenados
94
Utilización
paquetes
ordenar
Modelo
Dominio
94
Capítulo
28
Añadir
DSSs
contratos
401
diagramas
secuencia
sistema
401
operaciones
sistema
403
contratos
operaciones
sistema
404
Capítulo
29
Modelado
comportamiento
diagramas
407
Eventos
transiciones
407
Diagramas
408
Diagramas
UP
40
Diagramas
casos
40
Diagramas
casos
aplicación
Clases
benefician
diagramas
411
Representación
eventos
externos
internos
412
Notación
adicional
diagramas
413
Lecturas
adicionales
415
CONTENIDO
XVCapítulo
30
Diseño
arquitectura
lógica
patrones
Arquitectura
software
418
Patrón
arquitectura
Capas
Layers
Principio
Separación
Modelo-Vista
440
Lecturas
adicionales
442
Capítulo
31
Organización
paquetes
modelos
diseño
implementación
443
Guías
organización
paquetes
444
Notación
adicional
paquetes
UML
450
Lecturas
adicionales
450
Capítulo
32
Introducción
análisis
arquitectural
SAD
451
Análisis
arquitectural
452
Tipos
vistas
arquitectura
454
ciencia
identificación
análisis
factores
arquitectura
454
Ejemplo
tabla
factores
parcial
arquitectura
PDV
NuevaEra
457
arte
resolución
factores
arquitectura
45
Resumen
temas
análisis
arquitectural
466
Análisis
arquitectural
UP
467
Lecturas
adicionales
471
Capítulo
33
Diseño
realizaciones
casos
obje-
tos
patrones
473
Mantenimiento
servicios
fallos
servicios
locales
rendi-
miento
almacenamiento
local
473
Manejo
fallos
47
Mantenimiento
servicios
fallos
Proxy
GoF
484
Diseño
requisitos
funcionales
calidad
488
Acceso
dispositivos
físicos
externos
adaptadores
comprar
vs
construir
488
Factoría
Abstracta
GoF
familias
objetos
relacionados
90
Gestión
pagos
Polimorfismo
93
Conclusión
98
Capítulo
34
Diseño
framework
persistencia
patrones
501
problema
objetos
persistentes
502
solución
servicio
persistencia
framework
persistencia
502
Frameworks
503
Requisitos
servicio
framework
persistencia
503
Ideas
claves
504
Patrón
Representación
Objetos
Tablas
504
Perfil
Profile
modelado
datos
UML
505
Patrón
Identificador
Objeto
505
Acceso
servicio
persistencia
Fachada
506
Correspondencia
objetos
patrón
Conversor
Mapper
Base
Datos
Intermediario
Broker
Base
Datos
507
XVI
CONTENIDODiseño
framework
patrón
Método
Plantilla
50
Materialización
patrón
Método
Plantilla
510
Configuración
conversores
FactoriaDeConversores
515
Patrón
Gestión
Caché
515
Reunir
ocultar
sentencias
SQL
clase
516
transaccionales
patrón
517
Diseño
transacción
Patrón
Command
520
Materialización
perezosa
Proxy
Virtual
522
representar
relaciones
tablas
524
Superclase
ObjetoPersistente
separación
intereses
525
Cuestiones
resolver
526
Temas
especiales
Capítulo
35
dibujo
diagramas
herramientas
Diseño
especulativo
razonamiento
visual
52
Sugerencias
dibujar
diagramas
UML
proceso
desarrollo
530
Herramientas
características
ejemplo
533
Ejemplo
534
Capítulo
36
Introducción
cuestiones
relacionadas
planifica-
ción
iterativa
proyecto
537
Priorización
requisitos
538
Priorización
riesgos
proyecto
541
Planificación
adaptable
vs
predictiva
541
Planes
Fase
Iteración
543
Plan
Iteración
iteración
543
Traza
requisitos
iteraciones
544
in)validez
primeras
estimaciones
546
Organización
artefactos
proyecto
547
cuestiones
planificación
iteración
equipo
548
entendió
planificación
UP
54
Lecturas
adicionales
550
Capítulo
37
Comentarios
acerca
desarrollo
iterativo
UP
551
prácticas
conceptos
UP
adicionales
551
fases
construcción
transición
553
prácticas
interesantes
554
Motivos
fijar
duración
iteración
555
ciclo
vida
secuencial
cascada
555
Ingeniería
usabilidad
diseño
interfaces
usuario
561
Modelo
Análisis
UP
561
producto
RUP
562
desafíos
mitos
reutilización
563
CONTENIDO
XVIICapítulo
38
notación
UML
Notación
general
565
Diagramas
implementación
566
Clase
plantilla
parametrizada
genérica
567
Diagramas
actividades
567
Bibliografía
571
Glosario
Índice
alfabético
XVIII
CONTENIDOProgramar
divertido
desarrollar
software
calidad
difícil
ideas
es-
pléndidas
requisitos
visión
producto
software
funcionando
programar
análisis
diseño
definen
solucionar
problema
programar
expresión
diseño
forma
fácil
comunicar
revisar
implementar
evolucionar
stituyen
central
ste
libro
aprenderás
Lenguaje
Unificado
Modelado
UML
convertido
lenguaje
acepta-
do
universalmente
planos
diseño
software
UML
lenguaje
visual
utili-
zado
libro
ilustrar
ideas
diseño
poniendo
énfasis
aplican
desarrolladores
realmente
elementos
UML
utilizados
frecuencia
características
oscuras
lenguaje
importancia
patrones
creación
sistemas
complejos
reconocida
tiempo
disciplinas
patrones
diseño
software
permiten
describir
fragmentos
diseño
reutilizar
ideas
diseño
ayudando
bene-
ficiarse
experiencia
patrones
nombre
forma
heurísticas
abs-
tractas
reglas
prácticas
técnicas
orientadas
objetos
ingeniero
ra-
zonable
pizarra
blanco
libro
ofrece
paleta
patrones
diseño
utilizarse
fácilmente
diseño
software
árido
misterioso
presenta
contexto
proceso
ingeniería
software
tema
encantado
edición
Craig
Larman
elegido
adoptar
introducir
Proceso
Unificado
mostrando
aplicarse
relativamente
simple
ce-
remonioso
presentar
caso
estudio
proceso
centrado
arquitec-
tura
dirigido
riesgo
iterativo
consejos
Craig
contexto
realista
ex-
pone
dinámica
ocurre
realidad
desarrollo
software
muestra
fuerzas
externas
entran
juego
actividades
diseño
conectadas
tareas
aparecen
actividades
puramente
cerebrales
transformaciones
sis-
temáticas
intuición
creativa
Craig
convencidos
beneficios
desarrollo
iterativo
verás
ilustrado
detalle
libro
libro
mezcla
correcta
ingredientes
Aprenderás
método
sistemático
abordar
Análisis
Diseño
Orientado
Objetos
DOO
profesor
metodologista
brillante
gurú
OO
enseñado
miles
personas
mundo
Craig
describe
método
contexto
Pro-
PRESENTACIÓNceso
Unificado
Presenta
gradualmente
patrones
diseño
sofisticados
hará
libro
útil
fácil
enfrentes
retos
diseño
mundo
real
utiliza
notación
ampliamente
aceptada
siento
honrado
oportunidad
trabajar
directamente
au-
tor
importante
libro
Disfruté
leyendo
edición
encantó
pidiera
revisara
borrador
edición
encontramos
intercambiamos
correos
electrónicos
aprendido
Craig
so-
bre
nue
stro
proce
so
trabajo
Proce
so
Unificado
ómo
mejorarlo
aplicarlo
contextos
organizacionales
seguro
aprenderás
leer
libro
estás
familiarizado
DOO
volverás
refrescar
memoria
comprender
expli-
caciones
experiencias
Craig
proceso
iterativo
resultado
iteración
mejora
Si-
milarmente
escritura
madura
supongo
tienes
edición
disfru-
tarás
beneficiarás
Feliz
lectura
Philippe
Kruchten
Rational
Fellow
Rational
Software
Canada
Vancouver
BC
XX
PRESENTACIÓN¡Gracias
leer
libro
introducción
práctica
análisis
diseño
orien-
tado
objetos
DOO
aspectos
relacionados
desarrollo
iterativo
agra-
decido
edición
fuese
recibida
mundo
introduc-
ción
sencilla
DOO
traducida
idiomas
sta
edición
refina
construye
contenido
reemplazarla
Quiero
gracias
sinceramente
lectores
edición
tienes
beneficios
proporcionará
libro
tecnología
objetos
proliferado
desarrollo
soft-
ware
dominio
DOO
crítico
crear
sistemas
objetos
robustos
fá-
cil
mantenimiento
ere
DOO
preguntar
ás
compren
siblemente
ómo
avanzar
tema
complejo
libro
presenta
mapa
definido
Pro-
ceso
Unificado
puedas
mover
proceso
paso
paso
requisitos
código
Lenguaje
Unificado
Modelado
UML
emergido
notación
estándar
modelado
resultará
útil
familiarizarte
libro
en-
seña
técnicas
DOO
utilizando
notación
UML
Cuarto
patrones
di
seño
comunican
estilos
soluciones
consideradas
prácticas
expertos
di
seño
orientado
objeto
utilizan
creación
sistemas
libro
aprenderás
aplicar
patrones
diseño
in-
cluyendo
populares
patrones
pandilla
gang-of-four
yl
pa-
trones
GRASP
comunican
principios
fundamentales
asignación
respon-
sabilidades
di
seño
orientado
objeto
s.
Aprender
aplicar
patrone
acelerará
dominio
análisis
diseño
Quinto
estructura
enfoque
libro
basa
años
experiencia
en-
señanza
asesoramiento
miles
personas
arte
DOO
Refleja
sa
expe-
riencia
proporcionando
enfoque
eficiente
probado
refinado
aprender
ma
teria
optimiza
inversión
leer
aprender
Sexto
xamina
exhau
stiva
único
caso
estudio
ilustrar
realista
proceso
DOO
completo
examina
profundidad
detalle
espinosos
problema
ejercicio
realista
Mejorar
diseños
aplicando
patrones
diseño
GRASP
pandilla
Diseñar
sistemas
objetos
robustos
fácil
mantenimiento
Seguir
mapa
requisitos
análisis
diseño
codificación
UML
ilustrar
modelos
análisis
diseño
PRÓLOGO
Aprendizaje
eficiente
siguiendo
presentación
refinada
Aprendizaje
ejercicio
realistaXXII
PRÓLOGO
Séptimo
muestra
obtener
código
Java
artefactos
diseño
objetos
Octavo
explica
diseñar
arquitectura
capa
relaciona
capa
in
terfaz
gráfica
usuario
capas
dominio
servicios
técnicos
muestra
diseñar
framework
orientado
objetos
aplicándolo
creación
almacenamiento
persistente
base
datos
Objetivos
objetivo
global
Ayudar
estudiantes
desarrolladores
crear
diseños
orientados
objetos
me-
diante
aplicación
conjunto
principios
heurísticas
explicables
Estudiando
aplicando
información
técnicas
presentan
adqui-
rirás
experiencia
compren
sión
problema
érminos
proce
sos
conceptos
diseño
solución
utilizando
objetos
dirigido
libro
libro
introducción
DOO
análisis
requisitos
relacionado
de-
sarrollo
iterativo
Proceso
Unificado
ejemplo
proceso
intención
texto
avanzado
destinado
audiencia
Desarrolladores
studiantes
experiencia
lenguaje
programaci
ón
orientado
objetos
relativamente
análi-
sis
diseño
orientado
objetos
•E
tudiantes
informática
cursos
ingeniería
software
estudien
tec-
nología
objetos
familiarizados
DOO
quieran
aprender
notaci
ón
UML
aplicar
patrones
quieran
mejorar
perfeccionar
habilidades
análisis
yd
iseño
Requisitos
asumen
necesitan
conocimientos
previos
aprovechar
libro
Conocimiento
experiencia
lenguaje
programación
orientado
objetos
Java
H11001
H11001o
Smalltalk
Conocimiento
conceptos
generales
tecnología
objetos
clase
instancia
interfaz
polimorfismo
encapsulación
herencia
definen
conceptos
fundamentales
tecnología
objetos
Traducción
código
Diseño
arquitectura
capas
Diseño
frameworkPRÓLOGO
XXIII
Ejemplos
Java
general
libro
pre
senta
ejemplos
código
Java
plantea
implementacione
Java
extendido
ideas
presentadas
aplicables
mayoría
lenguajes
orientados
objetos
Organización
libro
strategia
global
organizaci
ón
ste
libro
introducir
cue
stiones
análisis
diseño
orden
similar
proyecto
desarrollo
software
fase
inicio
término
Proceso
Unificado
seguido
iteraciones
Figura
P.1
capítulos
fase
inicio
introducen
fundamentos
análisis
re-
quisitos
iteraci
ón
introduce
DOO
básico
asignar
responsabilidades
objetos
iteraci
ón
centra
diseño
objetos
especialmente
introducir
al-
gunos
patrones
diseño
utilizados
iteraci
ón
introduce
variedad
temas
análisis
arquitec-
tura
diseño
frameworks
Figura
P.1
libro
organizado
proyecto
desarrollo
Visión
general
Inicio
Iteración
Iteración
Iteración
Análisis
Orientado
Objetos
Diseño
Orientado
Objetos
Traducción
Diseño
Código
Libro
cuestiones
análisis
diseño
orientado
objetos
introducen
incremental
iteraciones
Temas
especiales
Recursos
web
relacionados
favor
consúltese
www.craiglarman.com
artículos
relacionados
tecno-
logía
objetos
patrones
procesos
encontrar
recursos
profesores
www.phptr.com/larman
Mejoras
edición
mantiene
núcleo
central
edición
refinado
aspectos
XXIV
PRÓLOGO
actualizan
casos
seguir
enfoque
Cockburn01
te-
nido
aceptación
utiliza
conocido
Proceso
Unificado
UP
ejemplo
proceso
ite-
rativo
introducir
DOO
artefacto
nombran
terminología
UP
Modelo
Dominio
requisitos
caso
estudio
encaminan
iteración
•T
ratamiento
actualizado
patrones
diseño
Introducción
análisis
arquitectural
Introducción
Variaciones
Protegidas
patrón
GRASP
Balance
50%
diagramas
secuencia
colaboración
Actualizada
notación
UML
reciente
Discusión
aspectos
prácticos
dibujo
utilizando
pizarra
herra
mientas
CASE
UML
Reconocimientos
lugar
agradecimiento
especial
amigos
colegas
Valtech
de-
sarrolladores
objetos
nivel
mundial
expertos
desarrollo
iterativo
contribuyeron
apoyar
revisar
libro
incluyendo
Chris
Tarr
Michel
Ezran
Tim
Snyder
Curtis
Hite
Cel
so
González
Pascal
Roques
Ken
DeLong
Brett
Schuchert
Ashley
Johnson
Chris
Jones
Thomas
Liou
Darryl
Gebert
Frank
Rodorigo
Jean-Yves
Hardy
nombrar
Philippe
Kruchten
escribir
presentación
libro
revisar
ayudarme
mu-
chas
formas
Martin
Fowler
Alistair
Cockburn
discusiones
esclarecedoras
procesos
diseños
comentarios
revisiones
John
Vlissides
Cris
Kobryn
amables
comentarios
Chelsea
Systems
John
Gray
ayudarme
requisitos
inspirados
sistema
PDV
tecnología
Java
ChelseaStore
Pete
Coad
Dave
Astels
TogetherSoft
apoyo
gracias
revisores
incluyendo
Steve
Adolph
Bruce
Anderson
Len
Bass
Gary
K.
Evans
Goerner
Luke
Hohmann
Eric
Lefebvre
David
Nunn
Robert
J.
White
Gracias
Paul
Becker
Prentice-Hall
creer
edición
pro-
yecto
merecía
pena
Paul
Petralia
Patti
Guerrieri
dirigir
agradezco
especialmente
Graham
Glass
abrir
puerta
Semblanza
autor
Craig
Larman
trabaja
Director
Procesos
Valtech
compañía
consulto-
ra
internacional
sucursales
Europa
Asia
América
Norte
especializada
endesarrollo
sistemas
negocio
electrónico
tecnologías
objetos
desarrollo
itera-
tivo
Proceso
Unificado
mediado
ochenta
Craig
ayudado
mile
sarrolladores
aplicar
an
álisis
di
seño
programaci
ón
orientada
objeto
organizacione
adoptar
prácticas
desarrollo
iterativo
carrera
fraca
sada
úsico
callejero
struyó
sistemas
APL
PL
CICS
setenta
comienzos
ochenta
completa
recuperación
comenzó
interesarse
inteligencia
artificial
teniendo
procesamiento
lenguaje
natural
representación
conocimiento
construyó
sistemas
conocimiento
máquinas
Lisp
Prolog
Smalltalk
Toca
guitarra
eléctrica
banda
Requisitos
Cambiantes
llamaba
Requi-
sitos
miembros
banda
cambiaron
dedica
tiempo
libre
licenciado
informática
Universidad
Simon
Fraser
Vancouver
Canadá
Contacto
contactar
Craig
clarman@ieee.org
www.craiglarman.com
án
bienvenidas
preguntas
lectores
profesores
peticiones
conferencias
ase-
soramiento
consultoría
Convenciones
tipográficas
término
frase
nombre
Clase
método
frase
referencia
autor
Bob67
operador
resolución
alcance
in-
dependiente
lenguaje
utiliza
indicar
cla
método
asociado
NombreClase--NombreMetodo
Notas
producción
manuscrito
libro
creó
Adobe
FrameMaker
dibujos
hicie-
ron
Microsoft
Visio
fuente
texto
New
Century
Schoolbook
imágenes
impresas
finales
generaron
ficheros
PDF
utilizando
Adobe
Acrobat
Distilled
PostScript
generado
controlador
AGFA
PRÓLOGO
XXVParte
INTRODUCCIÓNObjetivos
Comparar
contrastar
análisis
diseño
Definir
análisis
diseño
orientado
objetos
DOO
Ilustrar
pequeño
ejemplo
1.1
Aplicación
UML
patrones
DOO
significa
diseño
objetos
libro
herramienta
ayu-
desarrolladores
estudiantes
aprender
habilidades
fundamentales
análisis
diseño
orientado
objetos
DOO
técnicas
esenciales
creación
software
fácil
mantenimiento
robusto
definido
utilizando
tec-
nologías
lenguajes
objetos
Java
H11001
H11001
Smalltalk
proverbio
martillo
arquitecto
especialmente
tecnología
objetos
lenguaje
orientado
objetos
Java
necesario
paso
insuficiente
crear
sistemas
objetos
preciso
pensar
objetos
introducción
DOO
mientra
aplicamos
Lenguaje
Unificado
Modelado
UML
patrones
Proceso
Unificado
entender
texto
avanzado
centra
dominio
fundamentos
signar
res-
ponsabilidades
objetos
notación
UML
utilizada
frecuencia
patrones
Capítulo
ANÁLISIS
DISEÑO
ORIENTADO
OBJETOS
cambio
enfoque
patrones
efecto
profundo
duradero
escribimos
programas
Ward
Cunningham
Ralph
Johnson
introduccióndiseño
comunes
tiempo
principalmente
capítulos
posteriores
mate-
rial
progresa
temas
nivel
intermedio
diseño
frameworks
libro
únicamente
UML
UML
notación
visual
estándar
útil
aprender
notación
cosas
orientadas
objetos
importantes
apren-
der
concretamente
pensar
objetos
diseñar
sistemas
orientados
ob-
jetos
UML
DOO
método
simplemente
notación
útil
aprender
diagrama
UML
sintácticamente
correctos
herramienta
CASE
UML
capaz
crear
diseño
excelente
evaluar
mejorar
existente
habilidad
difícil
valiosa
consecuencia
libro
in-
troducción
diseño
objetos
necesitamos
lenguaje
DOO
planos
software
herramienta
pensar
forma
comunicación
tan-
to
explora
aplicar
UML
servicio
DOO
cubre
notación
UML
utili-
zada
frecuencia
presta
especial
atención
ayudar
gente
aprenda
arte
ciencia
construir
sistemas
objetos
notación
deberíamos
asignar
responsabilidades
as
clases
objetos
de-
berían
interaccionar
objetos
clases
deberían
preguntas
cla-
ves
diseño
sistema
soluciones
contrastadas
problemas
diseño
expresar
expresado
principios
heurísticas
patrones
prácticas
llamados
fórmulas
solución
problemas
codifican
principios
di-
seño
ejemplares
libro
enseñar
aplicar
patrones
favorece
aprendizaje
rápido
experto
estilos
diseño
objetos
fundamentales
introducción
DOO
ilustra
único
caso
estudio
libro
profundizando
an
álisis
di
seño
suficiente
solucionar
horribles
detalles
considerar
solu-
cionar
problema
real
DOO
diseño
software
fuertemente
relacionado
actividad
requi
sito
previo
análisis
requisitos
incluye
scribir
casos
caso
estudio
comienza
introducción
tema
realmente
orientado
objetos
Dadas
posibles
actividades
requisitos
implementaci
ón
debería
proceder
sarrollador
equipo
análisis
requi
sitos
DOO
requieren
presenten
contexto
alg
ún
proceso
desarrollo
caso
utiliza
ejemplo
proceso
desarrollo
iterativo
conocido
Proceso
Unificado
cuyo
marco
presentan
temas
temas
análisis
diseño
cubren
comunes
enfoques
aprenderlos
contexto
Proceso
Unificado
invalida
aplicabilidad
métodos
conclusión
libro
ayuda
estudiantes
desarrolladores
aplicar
principios
patrones
crear
mejores
diseños
objetos
seguir
conjunto
actividades
comunes
análisis
diseño
basado
Proceso
Unificado
ejemplo
crear
diagramas
utilizados
frecuencia
notación
UML
ilustra
contexto
único
caso
estudio
UML
PATRONES
Utilización
UML
Aplicación
patrones
asignación
responsabilidades
caso
estudio
Casos
análisis
requisitos
ejemplo
proceso
iterativo
Proceso
UnificadoMuchas
habilidades
importantes
construcción
software
conlleva
innumerables
habilidades
pasos
allá
aná-
lisis
requisitos
DOO
programación
orientada
objetos
ejemplo
in-
geniería
usabilidad
diseño
interfaces
usuario
claves
éxito
diseño
bases
datos
introducción
centra
DOO
pretende
cubrir
cuestiones
desarrollo
software
dibujo
1.2
Asignación
responsabilidades
po
sibles
actividades
artefacto
introducci
ón
DOO
número
principios
directrices
Suponga
debemos
elegir
única
habili-
dad
práctica
temas
expuestos
habilidad
sla
de-
sierta
habilidad
clave
fundamental
DOO
asignación
cuidadosa
respon-
sabilidades
componentes
software
actividad
efectuarse
dibuja
dia-
grama
UML
programando
influye
fuertemente
robustez
mantenimiento
reutilización
componentes
software
habilidades
necesarias
DOO
introduc-
ción
hincapié
asignación
responsabilidades
suele
habi-
ANÁLISIS
DISEÑO
ORIENTADO
OBJETOS
Figura
1.1
Temas
habilidades
cubren
Temas
habilidades
Notación
UML
Análisis
requisitos
Principios
guías
Patrones
Desarrollo
iterativo
Proceso
Unificado
DOOlidad
requiere
sfuerzo
llegar
dominarla
smo
tiempo
impor
tancia
vital
proyecto
real
desarrollador
oportunidad
abor-
actividad
análisis
diseño
proceso
desarrollo
prisas
codificar
situación
asignación
responsabilidades
ine-
vitable
consecuencia
pasos
diseño
libro
centran
principios
asignación
responsabilidades
presentan
aplican
principios
fundamentales
diseño
objetos
asigna-
ción
responsabilidades
organizan
ayuda
aprendizaje
denominada
pa-
trones
GRASP
1.3
análisis
diseño
Análisis
pone
énfasis
investigación
problema
requisitos
ponerlo
solución
ejemplo
desea
sistema
información
in-
formatizado
biblioteca
utilizará
Análisis
término
amplio
adecuado
calificarlo
análisis
re-
quisitos
estudio
requisitos
análisis
objetos
estudio
objetos
dominio
Diseño
pone
énfasis
solución
conceptual
satisface
requisitos
ponerlo
implementación
ejemplo
descripción
esquema
base
datos
objetos
software
Finalmente
diseños
implementados
análisis
apropiado
calificar
término
diseño
objetos
diseño
bases
datos
análisis
di
seño
re
sumido
fra
correcto
análisis
correcto
diseño
1.4
análisis
diseño
orientados
objetos
análisis
orientado
objetos
presta
especial
atención
encontrar
des-
cribir
objeto
concepto
dominio
problema
ejemplo
caso
sistema
información
biblioteca
conceptos
Libro
Bi-
blioteca
Socio
diseño
orientado
objetos
presta
especial
atención
definición
objetos
software
colaboran
satisfacer
requisitos
ejemplo
sistema
biblioteca
objeto
software
Libro
atributo
titulo
yu
método
obtenerCapitulo
Figura
1.2
implementación
programación
orientada
objetos
ob-
jetos
diseño
implementan
clase
Java
Libro
UML
PATRONES1.5
ejemplo
sumergirnos
detalles
análisis
requisitos
DOO
sección
presenta
superficial
pa
sos
diagrama
claves
utilizando
ejemplo
sencillo
juego
dados
jugador
lanza
dados
to-
gana
caso
pierde
Definición
casos
análisis
requisitos
incluir
descripción
procesos
dominio
re-
lacionados
representarse
casos
ANÁLISIS
DISEÑO
ORIENTADO
OBJETOS
Figura
1.2
orientación
objetos
presta
especial
atención
representación
objetos
Libro
titulo
public
class
Libro
private
String
titulo
public
Capitulo
obtenerCapitulo(int
concepto
dominio
oo
jo
oo
oo
Definición
casos
Definición
modelo
dominio
Definición
diagramas
interacción
Definición
diagramas
clases
diseño
casos
artefactos
orientados
objetos
simplemente
historias
escritas
herramienta
popular
análisis
requisitos
importante
Proceso
Unificado
ejemplo
versión
caso
Jugar
Partida
Dados
Jugar
partida
dados
jugador
recoge
lanza
dados
valor
caras
dados
suman
gana
caso
pierde
Definición
modelo
dominio
finalidad
análisis
orientado
objetos
crear
descripción
dominio
perspectiva
clasificación
objetos
descomposición
dominio
conlleva
identificación
conceptos
atributos
asociaciones
consideran
signifi-
cativas
resultado
expresar
modelo
dominio
ilustra
me-
diante
conjunto
diagramas
muestran
objetos
conceptos
dominio
ejemplo
Figura
1.3
muestra
modelo
dominio
parcial
UML
PATRONES
Definición
casos
Definición
modelo
dominio
Definición
diagramas
interacción
Definición
diagramas
clases
diseño
Figura
1.3
Modelo
dominio
parcial
juego
dados
Jugador
nombre
JuegoDados
valorCara
Lanza
Juega
Incluye
modelo
ilustra
conceptos
importantes
Jugador
JuegoDados
asociaciones
atributos
Nótese
modelo
dominio
descripción
objetos
software
visualización
conceptos
dominio
mundo
real
Definición
diagramas
interacción
finalidad
diseño
orientado
objetos
definir
objetos
software
colabo-
raciones
notación
habitual
ilustrar
colaboraciones
diagrama
in-
teracción
Muestra
flujo
mensajes
objetos
software
invo-
cación
métodos
Definición
casos
Definición
modelo
dominio
Definición
diagramas
interacción
Definición
diagramas
clases
diseño
ejemplo
supongamos
desea
implementación
juego
dados
diagrama
interacción
Figura
1.4
ilustra
pasos
esenciales
juego
enviando
mensajes
clases
JuegoDados
Nótese
mundo
real
jugador
lanza
di
seño
software
objeto
JuegoDados
tira
env
ía
men
sajes
objetos
diseños
objeto
software
programa
in
spiran
dominios
mundo
real
modelos
directos
simulaciones
mundo
real
Definición
diagramas
clases
diseño
vista
dinámica
colaboraciones
objetos
muestra
me-
diante
diagramas
interacción
útil
crear
vista
estática
definiciones
clases
diagrama
clases
diseño
ANÁLISIS
DISEÑO
ORIENTADO
OBJETOS
Definición
casos
Definición
modelo
dominio
Definición
diagramas
interacción
Definición
diagramas
clases
diseño
Figura
1.4
Diagrama
interacción
muestra
mensajes
objetos
software
JuegoDados
jugar
dado1
vc1
obtenerValorCara
dado2
lanzar
lanzar
vc2
obtenerValorCara
ejemplo
juego
dados
estudio
diagrama
interacción
con-
duce
diagrama
clases
diseño
parcial
muestra
Figura
1.5
Puesto
envía
mensaje
jugar
objeto
JuegoDados
JuegoDados
requiere
método
jugar
clase
requiere
métodos
lanzar
obtenerValorCara
diferencia
modelo
dominio
diagrama
muestra
conceptos
mun-
do
real
clases
software
Figura
1.5
Diagrama
clases
diseño
parcial
valorCara
int
obtenerValorCara
int
lanzar
JuegoDados
dado1
dado2
jugar
Resumen
juego
dados
problema
sencillo
presentado
centrar
atención
pasos
artefactos
análisis
diseño
complicar
introducción
explicado
notación
UML
mostrado
siguientes
capítulos
explorará
análisis
diseño
artefactos
detalle.1.6
UML
Citando
textualmente
Lenguaje
Unificado
Modelado
UML
lenguaje
especificar
visualizar
construir
ocumentar
artefactos
sistemas
software
modelado
negocio
sistemas
software
OMG01
UML
convertido
notación
visual
estándar
facto
iure
mo-
delado
orientado
objetos
Comenzó
iniciativa
Grady
Booch
Jim
Rum-
baugh
994
combinar
notaciones
visuales
populares
métodos
étodos
Booch
OM
Object
odeling
Technique
ás
unió
Ivar
Jacobson
creador
método
Objectory
grupo
comenzó
conoci-
do
amigos
contribuyeron
UML
notablemen-
Cris
Kobryn
lidera
proceso
refinamiento
continúa
UML
adoptado
997
stándar
OMG
Object
anagement
Group
organización
promueve
estándares
industria
continúa
re-
finado
versiones
libro
cubre
pequeño
aspecto
UML
notación
grande1
centra
diagramas
utilizan
frecuencia
características
utilizadas
comúnmente
diagramas
nota-
ción
central
probable
cambie
futuras
versiones
UML
veremos
UML
capítulos
simplemente
libro
notación
UML
ás
amplio
aplicación
UML
patrones
proceso
iterativo
contexto
desa-
rrollo
software
UML
aplica
principalmente
DOO
precedido
nor
malmente
análisis
requisitos
capítulos
iniciales
presentan
in-
troducción
cuestiones
importantes
casos
análisis
requisitos
seguidos
capítulos
DOO
detalles
UML
1.7
Lecturas
adicionales
UML
Distilled
Martin
Fowler
libro
éxito
merece
pena
leer
describe
forma
concisa
notación
UML
importante
The
Rational
Unified
Process-An
Introduction
Philippe
Kruchten
intro
ducción
concisa
conocida
Proceso
Unificado
refinamiento
Proceso
Unificado
Rational
10
UML
PATRONES
objetivos
versión
2.0
UML
incluye
simplificación
reducción
notación
li-
bro
presenta
UML
utilizada
probable
mantenga
simplificación
discusión
detallada
notación
UML
versión
1.3
merecen
pena
The
Unified
Modeling
Language
Reference
Manual
The
Unified
Modeling
Lan-
guage
User
Guide
Booch
Jacobson
Rumbaugh
Nótese
intención
textos
enseñar
modelado
objetos
DOO
referencias
notación
diagramas
UML
scripción
sión
actual
UML
necesario
specificación
on-line
OMG
Unified
Modeling
Language
Specification
www.omg.org
trabajos
revisión
UML
versiones
star
disponibles
en-
contrar
www.celigent.com/uml
libros
patrones
software
libro
influido
área
clásico
Design
Patterns
Gamma
Helm
Johnson
Vlissides
lectu-
ra
verdaderamente
obligada
studian
di
seño
objeto
s.
em
bargo
texto
introductorio
lea
fundamentos
diseño
programación
objetos
ANÁLISIS
DISEÑO
ORIENTADO
OBJETOS
11Objetivos
•E
xplicar
motivación
orden
contenido
capítulos
siguientes
Definir
proceso
iterativo
adaptable
Definir
conceptos
fundamentales
Proceso
Unificado
Introducción
desarrollo
iterativo
enfoque
desarrollo
software
requiere
en-
trenamiento
poseer
conocimientos
juega
papel
central
presenta
DOO
libro
Proceso
Unificado
ejemplo
proceso
ite-
rativo
proyectos
utilizan
DOO
forma
presentación
libro
consecuencia
útil
leer
capítulo
clarificar
conceptos
fundamentales
influencia
estructura
libro
capítulo
resume
ideas
claves
lector
dirigir
Capítulo
37
discusión
detallada
UP
prácticas
procesos
iterativos
informal
proceso
sarrollo
software
describe
enfoque
construcción
desarrollo
posiblemente
mantenimiento
software
Proceso
Unificado
JBR99
convertido
proce
so
desarrollo
software
Capítulo
DESARROLLO
ITERATIVO
YE
PROCESO
UNIFICADO
personas
importantes
proceso
personas
proceso
actuarán
personas
procesos
Grady
Boochéxito
construcción
sistemas
orientados
objetos
particular
adopta-
do
ampliamente
Proceso
Unificado
Rational
RUP
Rational
Unified
Process
Kruchten00
refinamiento
detallado
Proceso
Unificado
Proce
so
Unificado
UP
combina
pr
ácticas
com
únmente
aceptada
prácticas
tales
ciclo
vida
iterativo
desarrollo
dirigido
riesgo
descripción
consistente
documentada
utiliza
ste
libro
ejemplo
proceso
introducir
DOO
libro
comienza
introducción
UP
motivos
UP
proceso
iterativo
desarrollo
iterativo
práctica
va-
lor
influye
introduce
DOO
libro
aplicado
prácticas
UP
proporcionan
structura
organizada
ejemplo
discutir
aprender
DOO
texto
proporciona
introducción
UP
aborda
completo
centra
ideas
artefactos
comunes
relacionados
introducción
DOO
análisis
requisitos
interesa
UP
UP
utiliza
ejemplo
proceso
explorar
análisis
requisitos
DOO
puesto
necesario
introducir
tema
contexto
proceso
UP
refinamiento
RUP
relativamente
extendido
Ade-
UP
presenta
actividades
comunes
prácticas
obstante
ideas
cen-
trales
libro
casos
patrones
diseño
independientes
proceso
particular
aplicarse
2.1
idea
importante
UP
desarrollo
iterativo
UP
fomenta
prácticas
destaca
desarro-
llo
iterativo
Ene
ste
enfoque
desarrollo
organiza
serie
mini-proyectos
cortos
duración
fija
ejemplo
semanas
llamados
iteraciones
resulta-
do
sistema
probado
integrado
ejecutado
itera-
ción
incluye
actividades
análisis
requisitos
diseño
implementación
pruebas
ciclo
vida
iterativo
basa
ampliación
refinamiento
sucesivos
sis-
tema
múltiples
iteraciones
retroalimentación
cíclica
adaptación
elementos
principales
dirigen
converger
sistema
adecuado
sistema
crece
incrementalmente
lago
tiempo
iteración
iteración
en-
foque
conoce
desarrollo
iterativo
incremental
Figura
2.1
primeras
ideas
procesos
iterativos
conocieron
desarrollo
espi-
ral
desarrollo
evolutivo
Boehm88
Gilb88
14
UML
PATRONESEjemplo
ejemplo
receta
iteración
semanas
mitad
camino
proyecto
lunes
dedique
distribuir
clarificar
tareas
requisitos
iteración
persona
ingeniería
inversa
pasando
código
últi-
ma
iteración
diagramas
UML
herramienta
CASE
imprime
muestra
diagramas
interesantes
martes
dedica
diseñar
parejas
pizarras
di-
bujando
diagramas
UML
imprecisos
capturan
cámaras
digitales
escribir
pseudocódigo
notas
diseño
restantes
dedica
tiempo
implementar
probar
unidad
aceptación
usabilidad
ampliar
diseño
inte-
grar
cabo
construcciones
diarias
pruebas
sistema
estabilización
sistema
parcial
actividades
comprenden
presentaciones
evaluaciones
personal
in-
volucrado
proyecto
stakeholders1
planificación
iteración
Nótese
ejemplo
prisa
codificar
etapa
diseño
lar-
ga
piensa
debería
pretende
perfeccionar
deta-
lles
diseño
programar
anticipa
diseño
modelado
basado
diagramas
utilizando
dibujos
UML
realizados
rapidez
rasgos
desarrolladores
dedican
entero
trabajar
diseñando
parejas
resultado
iteración
sistema
ejecutable
incompleto
pre-
parado
puesto
producción
sistema
listo
puesta
producción
iteraciones
ejemplo
10
15
salida
iteración
prototipo
experimental
desechable
desa-
rrollo
iterativo
prototipado
salida
subconjunto
calidad
producción
sistema
general
iteración
aborda
requisitos
amplía
sistema
in-
crementalmente
iteración
ocasionalmente
volver
software
mejorarlo
ejemplo
iteraci
ón
podr
ía
centrarse
mejorar
rendi
miento
subsistema
lugar
extenderlo
características
DESARROLLO
ITERATIVO
PROCESO
UNIFICADO
15
Figura
2.1
Desarrollo
iterativo
incremental
Requisitos
Diseño
Implementación
Prueba
Integración
Diseño
Integración
Pruebas
Sistema
semanas
ejemplo
sistema
crece
incremental
retroalimentación
iteración
refinar
adaptar
requisitos
diseño
iteración
N+1
fija
duración
iteraciones
Tiempo
Requisitos
Diseño
Implementación
Prueba
Integración
Diseño
Integración
Pruebas
Sistema
N.
T.
término
refiere
personas
involucradas
pro-
yecto
directivos
usuarios
analistas
programadores
).Aceptando
cambios
retroalimentación
adaptación
subtítulo
libro
desarrollo
iterativo
Aceptar
Cambio
Beck00
frase
evoca
aptitud
clave
desarrollo
iterativo
lugar
luchar
inevitable
cambio
ocurre
desarrollo
software
intentando
normalmente
éxito
especificar
congelar
firmar
completa
correcta
con-
requisitos
fijos
diseñar
implementar
desarrollo
iterativo
basa
aptitud
aceptación
cambio
adaptación
motores
inevitables
he-
cho
esenciales
desarrollo
iterativo
UP
fomenten
proceso
dirigido
adición
características
incontrolada
reactiva
siguientes
ca-
pítulos
explorarán
UP
llega
equilibrio
necesidad
llegar
estabilizar
conjunto
requisitos
re-
alidad
requisitos
cambiantes
personal
involucrado
clarifica
visión
cambia
mercado
iteración
conlleva
elección
pequeño
conjunto
requisitos
rápida-
mente
diseñar
implementar
probar
primeras
iteraciones
elección
re-
quisitos
diseño
exactamente
desea
acto
pequeño
paso
rapidez
capturar
requisitos
diseño
completo
definido
forma
especulativa
rápida
retroalimenta-
ción
usuarios
desarrolladores
pruebas
tales
pruebas
carga
usabi-
lidad
retroalimentación
etapa
temprana
vale
peso
oro
es-
peculaciones
requisitos
diseños
correctos
retroalimentación
construcción
prueba
realista
aporta
conocimiento
práctico
crucial
oportunidad
modificar
adaptar
compren
sión
requisitos
di
seño
usuarios
finales
oportunidad
rápidamente
sistema
pedí
pruebo
realmente
quiero
distinto”2
proceso
signo
fallo
ciclos
estruc-
turados
frecuentes
tempranos
peros
habilidoso
pro-
gresar
scubrir
valor
real
per
sonal
involucrado
mencionado
consentimiento
desarrollo
caótico
reactivo
desarrolladores
cambien
continuamente
dirección
llegar
término
clarificar
requisitos
actividades
prueba
carga
probarán
diseño
implementación
parcial
camino
correcto
ite-
ración
necesita
cambio
arquitectura
básica
resuelvan
prue-
ben
decisiones
diseño
críticas
arriesgadas
desarrollo
iterativo
pro-
porciona
mecanismos
consecuencia
trabajo
desarrolla
serie
ciclos
estructu-
rados
construir-retroalimentar-adaptar
sorprende
desviación
sistema
16
UML
PATRONES
Om
ás
probable
entendió
quería!”“verdadero
camino
términos
requisitos
diseño
finales
primeras
ite-
raciones
tiempo
sistema
converge
camino
ilustra
Figura
2.2
DESARROLLO
ITERATIVO
PROCESO
UNIFICADO
17
Figura
2.2
retroalimentación
iterativa
adaptaci
ón
conducen
sistema
deseado
inestabilidad
requisitos
diseño
disminuyen
tiempo
primeras
iteraciones
lejos
camino
sistema
retroalimentación
adaptación
sistema
converge
requisitos
diseño
apropiados
iteraciones
raro
cambio
significativo
requisitos
ocurrir
cambios
tardíos
proporcionar
organización
ventaja
competencia
iteración
diseño
implementación
integración
prueba
Beneficios
desarrollo
iterativo
beneficios
desarrollo
iterativo
incluyen
Mitigación
riesgos
altos
técnicos
requisitos
objetivos
usabilidad
Progreso
visible
primeras
etapas
temprana
retroalimentaci
ón
compromiso
usuarios
adaptaci
ón
sistema
refinado
ajusta
necesidades
reales
personal
involucrado
Gestión
complejidad
equipo
ve
abrumado
parálisis
análisis
pasos
largos
complejos
•E
conocimiento
adquirido
iteraci
ón
utilizar
metódicamente
mejorar
proceso
desarrollo
iteración
iteración
Longitud
iteración
fijación
duración
UP
sarrolladores
experiencia
aplicar
proce
sos
iterativos
recomiendan
longitud
iteración
semanas
Pasos
pequeños
rápida
re-
troalimentación
adaptación
ideas
fundamentales
desarrollo
iterativo
ite-
raciones
largas
destruyen
motivación
principal
desarrollo
iterativo
incrementan
riesgo
proyecto
semanas
difícil
completar
trabajo
suficien-
obtener
resultados
significativos
retroalimentación
sema-
nas
complejidad
abrumadora
retrasa
retroalimentación
iteraciones
largas
pierde
sentido
desarrollo
iterativo
corto
bueno.18
UML
PATRONES
idea
clave
fija
duración
iteraciones
ejemplo
elige
iteración
dure
semanas
sistema
parcial
debería
inte-
grarse
probarse
estabilizarse
fecha
planificada
retrasos
frustrantes
difícil
cumplir
plazo
fijado
respuesta
recomendada
eliminar
tareas
requisitos
iteración
incluirlos
iteración
posterior
retrasar
fecha
terminación
prevista
Capítulo
37
resume
motivos
fijar
duración
Equipos
ejemplo
vario
cientos
desarrolladores
re-
querir
iteraciones
semanas
compensar
costes
fijos
coordina-
ción
comunicación
recomienda
semanas
ejemplo
exitosa
sustitución
noventa
sistema
control
aéreo
canadiense
desarrolló
siguiendo
ciclo
vida
iterativo
prácticas
UP
Necesitó
150
pro-
gramadores
organizaron
iteraciones
meses3
nótese
caso
iteración
proyecto
global
meses
equipo
encargado
subsistema
formado
10
20
desarrolladores
dividir
trabajo
serie
iteraciones
mes
iteración
meses
excepción
caso
equipos
re-
gla
Reiterando
UP
recomienda
duraci
ón
iteración
semanas
2.2
Conceptos
prácticas
UP
adicionales
idea
fundamental
apreciar
utilizar
UP
desarrollo
iterativo
fijando
ite-
raciones
cortas
adaptable
idea
UP
implícita
importante
tecnologías
ob-
jetos
DOO
programación
orientada
objetos
conceptos
claves
prácticas
UP
Abordar
cuestiones
alto
riesgo
valiosas
primeras
iteraciones
Involucrar
continuamente
usuarios
evaluación
retroalimentación
requisitos
Construir
primeras
iteraciones
arquitectura
constituya
núcleo
central
consistente
Verificar
calidad
continuamente
pruebas
frecuencia
realista
Aplicar
casos
Modelar
software
visualmente
UML
Gestionar
requisitos
cuidado
Manejar
peticiones
cambio
gestión
configuraciones
lector
acudir
Cap
ítulo
37
scripción
detallada
stas
prácticas
Philippe
Kruchten
dirigió
desarrollo
RUP
trabajó
arquitecto
jefe
proyecto.2.3
fases
UP
términos
orientados
planificación
proyecto
UP
organiza
trabajo
iteraciones
fases
fundamentales
Inicio
visión
aproximada
an
álisis
negocio
alcance
stimaciones
impre-
cisas
Elaboración
visión
refinada
implementación
iterativa
núcleo
central
arquitectura
resolución
riesgos
altos
identificación
requisitos
alcance
estimaciones
realistas
Co
nstrucción
implementación
iterativa
resto
requisitos
menor
riesgo
elementos
fáciles
preparación
despliegue
Transición
pruebas
beta
despliegue
fases
definen
completa
capítulos
siguientes
corresponde
antiguo
ciclo
vida
cascada
secuencial
definían
requisitos
realizaba
mayoría
diseño
fase
Inicio
fase
requisitos
especie
fase
viabilidad
cabo
estudio
suficiente
decidir
continuar
fase
Elaboración
fase
requisitos
diseño
fase
implementa
iterativa
arquitectura
constitu-
ye
núcleo
central
mitigan
cuestiones
alto
riesgo
Figura
2.3
ilustra
términos
orientados
planificación
comunes
UP
Nó-
tese
ciclo
sarrollo
termina
lanzamiento
sistema
pro
ducción
compone
iteraciones
DESARROLLO
ITERATIVO
PROCESO
UNIFICADO
19
Figura
2.3
Términos
orientados
planificación
UP
inicio
hito
punto
terminación
iteración
toma
decisión
evaluación
importante
diferencia
delta
versiones
iteraciones
seguidas
punto
sistema
lanza
puesta
producción
subconjunto
estable
ejecutable
producto
iteración
versión
pequeña
versión
incremento
versión
producción
elaboración
construcción
iteración
fase
ciclo
desarrollo
transición2.4
disciplinas
UP
flujos
trabajo
UP
describe
actividades
trabajo
escribir
casos
disciplinas
lla-
madas
originalmente
flujos
trabajo)4
Informalmente
disciplina
conjunto
actividades
artefactos
relacionados
área
determinada
actividades
análisis
requisitos
UP
artefacto
término
general
producto
trabajo
código
gráficos
Web
esquema
base
datos
documentos
texto
diagramas
modelos
etcétera
disciplinas
UP
libro
centra
artefactos
si-
guientes
Modelado
Negocio
desarrolla
única
aplicación
incluye
modelado
objetos
dominio
análisis
nego-
cio
escala
reingeniería
procesos
negocio
incluye
modelado
dinámico
procesos
negocio
empresa
Requisitos
Análisis
requisitos
aplicación
escritura
casos
identificación
requisitos
funcionales
Diseño
aspectos
diseño
incluyendo
arquitectura
global
objetos
bases
datos
red
cosas
parecidas
lista
extensa
disciplinas
UP
muestra
Figura
2.4
UP
Implementación
significa
programar
construir
sistema
despliegue
disciplina
Entorno
refiere
stablecer
herramientas
adaptar
proce
so
proyecto
organizar
herramienta
entorno
proceso
Disciplinas
fases
ilustra
Figura
2.4
iteración
trabajo
desarrolla
ma-
yoría
disciplinas
esfuerzo
relativo
disciplinas
cam-
bia
tiempo
primeras
iteraciones
naturalmente
tienden
aplicar
es-
fuerzo
relativo
requi
sitos
di
seño
po
steriores
di
sminuye
requisitos
diseño
central
estabilizan
proceso
retroa-
limentación
adaptación
Relacionando
fases
UP
inicio
elaboración
Figura
2.5
mues-
tra
esfuerzo
relativo
cambio
fases
favor
nótese
sugerencia
literal
elaboración
ejemplo
iteraciones
tienden
nivel
relativamente
alto
trabajo
requisitos
diseño
duda
implementación
construcción
importancia
ma-
yor
implementación
ligera
análisis
requisitos
20
UML
PATRONES
2001
antiguo
término
UP
flujo
trabajo
sustituyó
término
disciplina
ar-
monizar
esfuerzo
estandarización
internacional
denominado
OMG
SPEM
significado
UP
continúan
utilizando
término
flujo
trabajo
referirse
disciplina
estrictamen-
correcto
término
flujo
trabajo
comenzó
significado
ligeramente
distinto
UP
proyecto
particular
secuencia
particular
actividades
disciplinas
flujo
trabajo—
DESARROLLO
ITERATIVO
PROCESO
UNIFICADO
21
Figura2
.4
Disciplinas
UP5
Iteraciones
Ejemplos
disciplinas
UP
Modelado
Negocio
Requisitos
Diseño
Implementación
Prueba
Despliegue
Gestión
Configuraciones
Cambios
Gestión
Proyecto
Entorno
Interés
libro
Nótese
iteración
incluye
trabajo
mayoría
disciplinas
esfuerzo
relativo
énfasis
cambia
tiempo
ejemplo
sugerencia
literal
iteración
semanas
ejemplo
mini-proyecto
incluye
trabajo
mayoría
disciplinas
dando
lugar
ejecutable
estable
Figura
2.5
Disciplinas
fases
Ejemplos
disciplinas
UP
Modelado
Negocio
Requisitos
Diseño
Implementación
esfuerzo
relativo
disciplinas
cambia
fases
ejemplo
sugerencia
literal
inicio
elaboración
construcción
transi-
ción
Estructura
libro
fases
disciplinas
UP
fases
disciplinas
enfoque
caso
estudio
Respuesta
caso
estudio
presta
atención
especial
fases
inicio
elaboración
centra
artefactos
disciplinas
Modelado
Negocio
Requisitos
Diseño
don-
aplican
fundamentalmente
análisis
requisitos
DOO
patrones
UML
Diagrama
adaptado
producto
RUP.Los
capítulos
presentan
actividades
fase
inicio
capítulos
posteriores
exploran
iteraciones
fase
elaboración
lista
Figura
2.6
describen
organización
fases
UP
capítulos
fase
inicio
introducen
temas
esenciales
análisis
requisitos
iteraci
ón
presenta
fundamentos
DOO
asignar
reponsabi-
lidades
objetos
iteraci
ón
enfocada
diseño
objetos
concreto
introducir
algu-
patrones
diseño
utilizados
iteraci
ón
presenta
variedad
temas
análisis
arquitectura
diseño
frameworks
22
UML
PATRONES
Figura
2.6
organización
libro
relacionada
fases
iteraciones
UP
Visión
general
Inicio
Elaboración
Iteración
Elaboración
Iteración
Elaboración
Iteración
Análisis
Orientado
Objetos
Diseño
Orientado
Objetos
Traducción
Diseño
Código
Libro
Cuestiones
tales
análisis
OO
diseño
OO
introducen
incrementalmente
iteraciones
Temas
especiales
2.5
Adaptación
proceso
Marco
Desarrollo
Artefactos
opcionales
prácticas
principios
UP
seguirse
desarrollo
ite-
rativo
dirigido
riesgo
verificación
continua
calidad
importante
UP
actividades
artefacto
modelos
diagramas
documentos
opcionales
código
conjunto
artefactos
posibles
UP
debería
entenderse
conjunto
me-
dicinas
farmacia
Exactamente
toma
medicina
indiscrimina-
damente
elige
dolencia
proyecto
UP
equipo
debería
se-
leccionar
pequeño
subconjunto
artefactos
sirvan
tratar
problemas
necesidades
particulares
general
centrarse
pequeño
conjunto
artefactos
demuestran
valor
práctico
Marco
Desarrollo
elección
artefactos
UP
proyecto
recogerse
documento
denominado
Marco
Desarrollo
artefacto
di
sciplina
Entorno
Porejemplo
Tabla
2.1
podr
ía
Marco
sarrollo
scribe
artefactos
caso
estudio
Proyecto
NuevaEra
presentado
libro
capítulos
siguientes
describen
creación
artefactos
Modelo
Dominio
Modelo
Casos
Modelo
Diseño
artefactos
ejemplo
presentan
caso
estudio
suficientes
adecuados
proyectos
ejemplo
sistema
control
máquina
encontraría
útil
diagramas
sistema
co-
mercio
electrónico
basado
web
centrar
atención
prototipos
in-
terfaz
usuario
proyecto
desarrollo
campo
ex-
periencia
tendría
necesidades
artefactos
diseño
proyecto
integración
sistemas
DESARROLLO
ITERATIVO
PROCESO
UNIFICADO
23
2.6
UP
ágil
metodologistas
distinguen
procesos
pesados
ligeros
procesos
predictivos
adaptables
proceso
pesado
término
peyorativo
pretende
sugerir
pro-
ceso
siguientes
cualidades
Fowler00
artefactos
creados
ambiente
burocrático
Rigidez
control
Planificación
detallada
larga
elaborada
Predictivo
adaptable
proceso
predictivo
intenta
planificar
predecir
detalle
acti-
vidades
signación
recur
sos
per
sonal
intervalo
relati
vamente
tiempo
totalidad
proyecto
procesos
predictivos
normalmente
si-
Tabla
2.1
Ejemplo
Marco
Desarrollo
artefactos
UP
c-comenzar
r-refinar
Disciplina
Artefacto
Inicio
Elab
Const
Trans
Iteración
/p59I1
E1
C1
Cn
T1
T2
Modelado
Negocio
Modelo
Dominio
Requisitos
Modelo
Casos
Visión
Especificación
Complementaria
Glosario
Diseño
Modelo
Diseño
Documento
Arquitectura
SW
Modelo
Datos
Implementación
Modelo
Implementación
Gestión
Proyecto
Plan
Desarrollo
SW
Pruebas
Modelo
Pruebas
Entorno
Marco
Desarrollo
r24
UML
PATRONES
incorporación
diaria
código
construcción
sistema
com-
pleto
rápida
retroalimentación
cambios
diseño
pruebas
equipo
experiencia
expedir
múltiples
productos
centrarse
construcción
prueba
arquitectura
consistente
factores
prácticas
explícitas
UP
guen
ciclo
vida
cascada
secuencial
definición
re-
quisitos
definición
diseño
detallado
implementación
Frente
ae
sto
proceso
adaptable
acepta
cambio
motor
inevitable
fo-
menta
adaptación
flexible
normalmente
siguen
ciclo
vida
iterativo
proce-
so
ágil
implica
proceso
adaptable
ligero
listo
responder
rápidamente
ne-
cesidades
cambiantes
intención
autores
UP
fuese
pesado
predictivo
amplio
conjunto
actividades
artefactos
opcionales
comprensiblemente
llevado
impresión
intención
adoptara
aplicara
espíritu
proceso
ágil
UP
ágil
ejemplos
pone
práctica
Optar
conjunto
pequeño
actividade
artefactos
UP
proyectos
beneficiarán
general
manténgalo
simple
Puesto
UP
iterativo
completan
requisitos
diseños
implementación
Surgen
adaptable
serie
itera-
ciones
basadas
retroalimentación
plan
detallado
proyecto
plan
alto
nivel
de-
nominado
Plan
Fase
estima
fecha
terminación
proyecto
hitos
importantes
detalla
pasos
grano
fino
hitos
plan
detallado
llamado
Plan
Iteración
planifica
detalle
iteración
adelantado
planificación
detallada
cabo
ma-
nera
adaptable
iteración
iteración
Capítulo
36
encontrar
comentarios
planificación
proyectos
iterativos
justifi-
cación
enfoque
caso
estudio
hincapié
número
relativamente
pequeño
artefactos
ye
ne
ld
esarrollo
iterativo
espíritu
UP
ágil
2.7
ciclo
vida
cascada
secuencial
diferencia
ciclo
vida
iterativo
UP
antigua
alternativa
ciclo
vida
cascada
lineal
secuencial
Royce70
acepción
habitual
definía
pasos
forma
Determinar
regi
strar
acordar
conjunto
requisitos
completo
fijo
Di
señar
sistema
basado
requisitos
Implementar
ba
diseño
estudio
años
presentado
MIT
Sloan
Management
Review
proyectos
software
éxito
identificó
factores
comunes
éxito
lista
desarrollo
iterativo
lugar
proceso
cascada
MacCormack01]6.Una
descripción
problemas
mitigarse
de-
sarrollo
iterativo
presentará
Capítulo
37
2.8
entendió
UP
presentamos
signos
indican
entendido
significa
adoptar
UP
desarrollo
iterativo
idea
agilidad
pretende
UP
piensa
inicio
requisitos
elaboración
diseño
construcción
im-
plementación
imponiendo
ciclo
vida
espiral
UP
pien
sa
objetivo
elaboraci
ón
definir
modelo
completa
cuidadosa
traducen
código
construcción
intenta
definir
mayoría
requisitos
comenzar
diseño
implementación
intenta
definir
mayoría
diseño
comenzar
implementar
intenta
definir
completamente
acordar
arquitectura
programar
probar
iterativamente
dedica
tiempo
trabajo
requisitos
diseño
an-
tes
comenzar
programar
cree
iteración
adecuada
meses
duración
lugar
semanas
excluyendo
proyectos
cientos
desarrolladores
piensa
diagramas
UML
actividades
diseño
consti-
tuyen
momento
definir
diseños
modelos
completa
pre-
cisa
detalle
cree
programar
simple
traducción
me-
cánica
código
piensa
adoptar
UP
significa
actividades
posibles
crear
documentos
piensa
experimenta
UP
proce-
so
formal
exigente
pasos
seguir
intenta
planificar
proyecto
detalle
principio
in-
tenta
predecir
especulativa
iteraciones
deber
ía
ocurrir
quieren
planes
estimaciones
creíbles
proyectos
ter-
mine
fase
elaboración
2.9
Lecturas
adicionales
introducción
UP
refinamiento
RUP
merece
pena
leer
The
Ra-
tional
Unified
Process-An
Introduction
Philippe
Kruchten
arquitecto
líder
RUP
encontrar
descripción
UP
original
The
Unified
Software
Deve-
lopment
Process
Jacobson
Booch
Rumbaugh
Merece
pena
studiarlo
recomienda
introducción
Kruchten
puesto
pequeña
concisa
RUP
actualiza
refina
original
UP
DESARROLLO
ITERATIVO
PROCESO
UNIFICADO
25Rational
Software
vende
producto
ba
sado
web
documentaci
ón
RUP
on-line
permite
detalle
actividades
artefactos
RUP
plantillas
mayoría
artefactos
Capítulo
37
presentará
discusión
organización
abordar
proyecto
UP
utilizando
úni-
camente
mentores
libros
fuentes
aprendizaje
encuentran
do-
cumentación
RUP
ayuda
útil
aprendizaje
proceso
actividades
UP
describen
estricta
serie
libros
editados
Ambler
Constantine
ejemplo
The
Unified
Process
Elabora-
tion
Phase
Ambler00
libros
contienen
art
ículos
publicados
años
revista
Software
Development
clasificados
respectivas
fases
activi-
dades
términos
taxonomía
UP
Nótese
artículos
escribieron
originalmente
UP
lugar
dudas
contienen
consejos
útiles
advierte
pequeño
error
series
scriben
fa
elaboraci
ón
UP
fase
crean
prototipos
desechables
reduce
nece-
sidad
prestar
atención
cuidar
programación
diseño
exacto
du-
rante
elaboración
crean
diseños
código
calidad
producción
par-
cial
Ambler
reconoce
imprecisión
corregirlo
ediciones
siguientes7
obtener
información
métodos
ágiles
recomienda
serie
libros
Extreme
Programming
XP
Beck00
BF00
JAH00
tales
Extreme
Program-
ming
Explained
prácticas
XP
mencionan
capítulos
posteriores
mayoría
prácticas
XP
tales
programar
probando
desarro-
llo
iterativo
compatibles
idénticas
prácticas
UP
recomiendo
adopción
proyecto
UP
Nótese
XP
inventó
pidió
hiciese
de-
sarrollo
iterativo
iteraciones
cortas
duración
fija
adaptable
práctica
UP
métodos
iterativos
año
s.
diferencias
destacables
lista
completa
UP
XP
UP
recomienda
escribir
ma-
nera
incremental
casos
documento
requisitos
funcionales
XP
UP
recomienda
dedicar
ás
tiempo
diagramas
diseño
visual
entero
cerca
comienzo
iteración
pro-
gramación
líderes
XP
recomiendan
30
minutos
Highsmith
justifica
valor
sarrollo
iterativo
Adaptative
Software
Deve-
lopment
Highsmith00
26
UML
PATRONES
Ambler
comunicación
privada
Introducción
capítulo
describe
brevemente
caso
estudio
conoce
dominio
pro-
blema
saltarse
eligió
problema
familiar
sufi-
cientemente
rico
problemas
interesantes
arquitectura
diseño
permite
concentrarnos
cabo
análisis
diseño
lugar
explicar
problema
dominio
3.1
sistema
punto
venta
NuevaEra
caso
estudio
sistema
punto
venta
PDV
NuevaEra
dominio
problema
apariencia
sencillo
veremos
requi
sitos
interesantes
pro-
blemas
di
seño
solucionar
Adem
ás
problema
real
organizacione
realmente
escriben
sistemas
PDV
utilizando
tecnología
objetos
sistema
PDV
aplicación
informática
utilizada
registrar
ven-
tas
pagos
normalmente
utiliza
tiendas
Incluye
componentes
hardware
ordenador
lector
códigos
barras
software
ejecutar
sistema
Interactúa
varia
aplicaciones
servicios
servicio
álculo
im
puestos
control
inventario
partes
sistemas
relati-
vamente
tolerantes
fallos
servicios
remotos
disponi-
bles
temporalmente
sistema
inventario
todav
ía
capace
Capítulo
CASO
ESTUDIO
SISTEMA
PUNTO
VENTA
NUEVAERA
cosas
difíciles
soportar
ejemplo
Mark
Twaincapturar
ventas
gestionar
pagos
efectivo
im-
pida
negocio
funcione
adecuada
sistema
PDV
progresivamente
soportar
múltiples
variados
terminales
interfaces
cliente
terminal
navegador
Web
arqui
tectura
cliente
delgado
thin
client
ordenador
per
sonal
normal
interfaz
gráfica
usuario
hecha
clases
Swing
Java
entrada
dato
pantalla
táctil
PDAs
inalámbricos
etcétera
creando
sistema
PDV
comercial
venderá
clientes
necesidades
dispares
términos
procesamiento
reglas
negocio
cliente
deseará
conjunto
exclusivo
lógica
ejecutar
puntos
pre-
decibles
escenarios
sistema
inicia
venta
añade
línea
necesitaremos
mecanismo
proporcionar
flexibilidad
personalización
Utilizando
estrategia
desarrollo
iterativo
fases
requi-
sitos
análisis
diseño
implementación
orientados
objetos
3.2
Capas
arquitectónicas
énfasis
caso
estudio
sistema
información
orientado
objetos
típico
diseña
función
ca-
pas
arquitectónicas
subsistemas
Figura
3.1
continuación
presentamos
ejemplos
lista
completa
28
UML
PATRONES
Figura
3.1
Capas
objetos
ejemplo
sistema
orientado
objetos
enfoque
caso
estudio
Interfaz
Venta
Pago
Registro
FachadaDePersistencia
capa
lógica
aplicación
objetos
dominio
capa
servicios
técnicos
menor
atención
investigar
conectarse
capas
principal
atención
caso
estudio
investigar
diseñar
objetos
atención
secundaria
investigar
diseñar
objetos
Interfaz
Usuario
interfaz
gráfica
ventanas
Lógica
aplicación
Objetos
Dominio
objetos
software
represen-
conceptos
dominio
ejemplo
clase
software
denominada
Venta
satisfacen
requisitos
aplicación
Servicios
técnicos
objetos
propósito
general
subsistemas
proporcionan
servicios
técnicos
apoyo
conexión
base
datos
registrar
errores
Normalmente
servicios
independientes
aplicación
pue-
den
reutilizar
sistemas
DOO
general
relevante
modelar
lógica
aplicación
capas
servicios
técnicos
caso
estudio
NuevaEra
centra
principalmente
objetos
dominio
problema
asignándoles
responsabilidades
satisfacer
requisitos
aplicación
diseño
orientado
objetos
aplica
crear
subsistema
servicio
téc-
nico
interactuar
base
datos
enfoque
diseño
capa
interfaz
usuario
responsa-
bilidad
delgada
as
ventanas
contienen
código
ejecute
proce-
lógica
aplicación
peticiones
realización
tareas
envían
capas
3.3
Estrategia
libro
aprendizaje
desarrollo
iterativo
libro
organiza
seguir
estrategia
desarrollo
iterativo
DOO
aplica
sistema
PDV
NuevaEra
iteraciones
iteración
de-
terminar
funciones
básicas
iteraciones
posteriores
expanden
funcionali-
dad
sistema
Figura
3.2
sarrollo
iterativo
introduce
incre
mentalmente
iterativa
presentación
cue
stiones
an
álisis
diseño
notación
UML
patrones
iteración
presenta
núcleo
básico
cuestiones
análisis
diseño
notación
iteración
amplía
ideas
notación
UML
patrones
iteración
CASO
ESTUDIO
SISTEMA
PUNTO
VENTA
29
Figura
3.2
camino
aprendizaje
iteraciones
Iteración
Iteración
Iteración
Introduce
únicamente
habilidades
análisis
diseño
relacionadas
iteración
presentan
habilidades
análisis
diseño
adicionales
Igualmente
INICIOObjetivos
Definir
etapa
inicio
Motivar
capítulos
siguientes
sección
Introducción
capítulo
define
fase
inicio
proyecto
ideas
proceso
in-
terés
lector
prefiere
centrar
lugar
aprender
actividad
pr
áctica
principal
fase
modelado
casos
saltarse
capítulo
mayoría
proyectos
requieren
etapa
inicial
estudian
siguientes
tipos
preguntas
visión
análisis
negocio
proyecto
viable
Comprar
construir
•E
timación
aproximada
coste
cuesta
10K-100
millones
euros
Deberíamos
abordarlo
seguir
Capítulo
INICIO
mieux
est
l’ennemi
du
enemigo
oltairePara
definir
visión
obtener
estimación
puedes
fiar
orden
magnitud
necesario
cabo
exploraci
ón
requisitos
em
bargo
objetivo
etapa
inicio
definir
requisitos
generar
estimación
creíble
plan
proyecto
riesgo
simplificar
idea
investigación
justa
formar
opinión
racional
justificable
propósi-
to
global
viabilidad
sistema
potencial
decidir
merece
pena
invertir
estudio
profundo
objetivo
fase
elaboración
fase
inicio
debería
relativamente
corta
mayoría
pro-
yectos
duración
semanas
proyectos
duración
superior
semana
pierde
idea
fundamental
etapa
inicio
decidir
merece
pena
investigación
seria
elaboración
lle-
var
cabo
investigación
fase
inicio
frase
Vislumbrar
alcance
producto
visión
análisis
negocio
principal
problema
resuelto
frase
personal
involucrado
visión
proyecto
merece
pena
invertir
estudio
serio
4.1
Inicio
analogía
negocio
petróleo
considerando
zona
pasos
abordar
Decidir
evidencias
suficientes
análisis
negocio
justifique
per-
foraciones
exploración
cabo
medidas
perforaciones
exploración
Proporcionar
informaci
ón
alcance
estimación
Pa
sos
adicionales
fase
inicio
paso
analogía
paso
predice
petróleo
coste
esfuerzo
extraerlo
prematuro
suficiente
información
estaría
capaz
responder
preguntas
coste
exploración
negocio
petróleo
entiende
realista
términos
UP
paso
exploración
realista
corresponde
fase
ela-
boración
fase
inicio
precede
parecida
estudio
viabilidad
de-
cidir
merece
pena
invertir
perforaciones
exploración
exploración
elaboración
datos
conocimientos
planes
estimaciones
creíbles
sarrollo
iterativo
UP
planes
estimaciones
fase
inicio
siderarse
fiables
Simplemente
proporcionan
percepción
orden
magnitud
grado
esfuerzo
ayudar
decisión
continuar
34
UML
PATRONES4.2
fase
inicio
propósito
fase
inicio
establecer
visión
común
inicial
objetivos
proyecto
determinar
viable
decidir
merece
pena
cabo
in-
vestigaciones
serias
fase
elaboración
decidido
antemano
pro-
yecto
hará
duda
claramente
viable
equipo
de-
sarrollado
proyecto
parecido
entonce
fa
inicio
specialmente
incluir
talleres
requisitos1
planificación
ite-
ración
rápidamente
cambiar
elaboración
4.3
artefactos
crearse
fase
inicio
Tabla
4.1
presenta
listado
artefactos
comunes
fase
inicio
prin-
cipio
elaboraci
ón
indica
cue
stiones
abordar
cap
ítulos
siguientes
estudiarán
detalle
especialmente
Modelo
Ca-
INICIO
35
Tabla
4.1
Ejemplo
artefactos
fase
inicio
Artefacto†
Comentario
Visión
Análisis
Negocio
Describe
objetivos
restricciones
alto
nivel
análisis
negocio
proporciona
informe
toma
decisiones
Modelo
Casos
Describe
requisitos
funcionales
funcionales
relacionados
Especificación
Complementaria
Describe
requisitos
Glosario
Terminología
clave
dominio
Lista
Riesgos
Plan
Describe
riesgos
negocio
técnicos
Gestión
Riesgo
recursos
planificación
ideas
mitigarlos
darles
respuesta
Prototipos
pruebas-de-conceptos
clarificar
visión
validar
ideas
técnicas
Plan
Iteración
Describe
iteración
elaboración
Fase
Plan
Plan
Estimación
precisión
duración
Desarrollo
Software
esfuerzo
fase
elaboración
Herramientas
personas
formación
recursos
Marco
Desarrollo
descripción
pasos
UP
artefactos
adaptados
proyecto
UP
adaptar
proyecto
artefactos
completan
parcialmente
fase
refinarán
iterativa
siguientes
iteraciones
nombre
mayúsculas
indica
artefacto
UP
nombre
oficial
N.
T.
traducido
requirements
workshop
taller
requisitos
indicar
reunión
dis-
cusión
requisitos.sos
idea
clave
desarrollo
iterativo
comprender
artefactos
completan
parcialmente
fase
refinarán
iteraciones
pos-
teriores
deberían
crearse
considere
probable
añadirán
valor
práctico
real
puesto
inicio
investigación
contenido
artefactos
deberían
ligeros
ejemplo
Modelo
Ca
sos
so
scribirá
cap
ítulos
si-
guientes
listar
nombres
mayoría
casos
actores
esperados
describiría
detalle
10%
casos
pro-
pósito
desarrollar
visión
alto
nivel
detalles
alcance
objetivo
riesgos
sistema
Nótese
fase
inicio
tareas
programación
objeto
crear
prototipos
pruebas
conceptos
clarificar
requisitos
generalmente
prototipos
orientados
interfaz
usuario
ha-
cer
experimentos
programación
cuestiones
técnicas
críticas
documentación
recordar
artefactos
deberían
considerar
opcionales
elegir
realmente
añadan
valor
proyecto
desecharlos
prueba
merezcan
pena
importante
artefacto
documento
diagrama
pensamiento
análisis
disposición
activa
registra
evitar
re-inven-
ciones
repetir
cosas
palabra
general
Eisenhower
preparar
batalla
encontrado
planes
útiles
planificar
indispensable
Nixon90
BF00
almacenar
artefactos
digitalmente
on-line
disponibles
sitio
web
proyecto
lugar
papel
Obsérvese
artefactos
UP
proyectos
anteriores
utilizar
posteriores
normal
similitudes
proyectos
artefactos
riesgos
gestión
proyecto
pruebas
entorno
proyectos
UP
organizarán
deberían
organizar
artefactos
nombres
Lista
Riesgos
Marco
sarrollo
etc.
simplifica
búsqueda
artefactos
reutilizables
proyectos
precedentes
aplica-
ciones
UP
4.4
entendió
fase
inicio
duración
semanas
mayoría
proyectos
intenta
definir
mayoría
requisitos
espera
planes
estimaciones
fiables
define
arquitectura
lugar
iterativa
fase
ela-
boración
36
UML
PATRONES•
cree
secuencia
adecuada
trabajo
debería
definición
re-
quisitos
diseño
arquitectura
implementación
artefacto
Análisis
Negocio
Visión
identificaron
mayoría
nombres
casos
actores
escribieron
casos
detalle
casos
escribió
detalle
10-20%
deberían
escribir
detalle
obtener
conocimiento
realista
alcance
pro-
blema
INICIO
37Objetivos
Definir
modelo
FURPS
H11001
Relacionar
tipos
requisitos
artefactos
UP
Introducci
requisitos
crean
capítulo
presenta
clasificación
requi-
sitos
FURPS+
requisitos
capacidades
condiciones
conforme
sistema
ampliamente
proyecto
JBR99
reto
trabajo
requisitos
encontrar
comunicar
recordar
normalmente
significa
registrar
necesita
realmente
significado
cliente
miembros
equipo
desarrollo
UP
fomenta
conjunto
prácticas
gestin
requisitos
referencia
actitud
ciclo
vida
ca
scada
definir
completamente
stabilizar
requisitos
fa
proyecto
contexto
inevitablemente
deseos
personal
involucrado
Capítulo
COMPRENSI
REQUISITOS
mundo
gente
est
dese
ando
atravesar
infierno
conseguirlo
Don
Marquiscambiantes
claros
enfoque
sistemático
encontrar
documentar
orga-
nizar
seguir
pista
requisitos
cambiantes
sistema
RUP
concreto
haciéndolo
destreza
descuidado
Fíjese
palabra
cambiantes
UP
acepta
cambio
requisitos
motor
fundamental
proyecto
ér-
mino
importante
encontrar;e
elicitar
cuidadosamente
técnicas
tales
escritura
casos
talleres
requisitos
indica
Figura
5.1
estudio
costes
proyectos
reales
empresas
reveló
37%
relacionados
requisitos
cuestiones
requisitos
constituyen
principal
causa
problemas
Standish94
consecuencia
importante
adquirir
dominio
gestión
requi-
sitos
respuesta
ciclo
vida
cascada
dato
intentar
ahínco
pu-
lir
estabilizar
fijar
requisitos
diseño
implementación
historia
demuestra
batalla
perdida
respuesta
iterativa
utilizar
pro-
ceso
acepte
cambio
retroalimentaci
ón
motores
centrales
descu-
brimiento
requisitos
40
UML
PATRONES
Figura
5.1
Factores
coste
proyectos
software
reales
50%
Entradas
usuario
erróneas
13%
Requisitos
incompletos
12%
Cambios
requisitos
12%
Habilidades
técnicas
pobres
7%
Mala
dirección
6%
5.1
Tipos
requisitos
UP
requisitos
clasifican
modelo
FURPS+
Grady92
útil
nemotécnico
significa
siguientes
tipos
requisitos1
Funcional
Functional
características
capacidades
seguridad
Facilidad
Usability
factores
humanos
ayuda
documentación
Fiabilidad
Reliability
frecuencia
fallos
capacidad
recuperación
fa-
llo
grado
previsión
sistemas
clasificación
requisitos
atributos
calidad
publicados
libros
organi-
zaciones
estándares
ISO
9126
similar
lista
FURPS+
Instituto
Ingeniería
Software
SEI
Software
Engineering
Institute
cualquiera
utilizar
proyecto
UP.•
Rendimiento
Performance
tiempos
re
spuesta
productividad
preci
sión
disponibilidad
recursos
Soporte
Supportability
adaptabilidad
facilidad
mantenimiento
internacio-
nalización
configurabilidad
/H11001en
FURPS
H11001indica
requisitos
adicionales
tales
Implementacin
limitación
recursos
lenguajes
herramientas
hardwareÉ
Interfaz
restricciones
impuestas
interacción
sistemas
externos
Operaciones
gestión
sistema
puesta
marcha
Empaquetamiento
Legales
licencias
etcétera
Resulta
útil
utilizar
categorías
FURPS
H11001(o
esquema
clasificación
lista
comprobar
cubren
requisitos
reducimos
riesgo
considerar
faceta
importante
sistema
stos
requisitos
denominan
colectivamente
atributos
ca
lidad
requisitos
calidad
ol
-ilities”2
sistema
stos
comprenden
facilidad
usability
fiabilidad
reliability
rendimiento
performance)y
soporte
supportability
normal
dividir
requisitos
funcionales
comportamiento
funcionales
gusta
amplia
generalización
BCK98
uti-
liza
extendida
requisitos
funcionales
estudian
recogen
Modelo
Casos
tema
capítulo
lista
características
sistema
artefacto
Vi-
sión
requisitos
recoger
casos
usos
re-
lacionados
artefacto
Especificación
Complementaria
artefacto
Visión
resume
requi
sitos
alto
nivel
elaboran
stos
documento
s.
Glo
sario
agrupa
clarifica
términos
utilizan
requisitos
Glosario
UP
comprende
concepto
diccionario
datos
reúne
requisitos
rela-
cionados
datos
reglas
validación
valores
aceptables
etcétera
pro-
totipos
mecanismo
clarificar
veremos
estudiemos
análisis
arquitectural
requisitos
calidad
influyen
fuertemente
arquitectura
sistema
ejemplo
requi
sito
alto
rendimiento
alta
fiabilidad
influirá
elección
componentes
software
hard-
ware
configuraciones
necesidad
fácil
adaptación
cambios
fre-
cuentes
requisitos
funcionales
igualmente
dará
forma
diseño
software
5.2
Lecturas
adicionales
capítulos
siguientes
cubrirán
referencias
relacionadas
casos
re-
comiendan
punto
partida
estudio
requisitos
textos
requi-
sitos
orientados
casos
Writing
Effective
Use
Cases
Cockburn01
lugar
textos
generales
normalmente
tradicionales
COMPRENSI
REQUISITOS
41
N.
T.
Terminación
plural
inglés
nombres
tales
requisitos
amplio
debate
requisitos
extensa
variedad
temas
inge-
niería
software
paragua
Cuerpo
Conocimiento
Ingeniería
Software
SWEBOK
Software
ngineering
ody
of
nowledge)d
sponible
www.swebok.org
SEI
www.sei.cmu.edu
propuestas
relacionadas
requisitos
calidad
ISO
9126
IEEE
Std
830
IEEE
Std
1061
estándares
relacionados
requisitos
atributos
calidad
disponibles
web
sitios
advertencias
re
specto
libros
generales
requisitos
proponen
cubrir
casos
desarrollo
iterativo
requisitos
UP
ía
escritos
influencia
ciclo
vida
ca
scada
planteando
definición
precisa
requisitos
adelantado
pa-
sar
diseño
implementación
pretende
invalidar
valor
am-
plio
profundas
útiles
visiones
requisitos
independientes
método
pretende
aclarar
constituyen
visión
fiable
de-
sarrollo
iterativo
experiencia
autores
proviene
principalmente
proyectos
ciclo
vida
cascada
trabajando
refinar
definir
cuidadosamente
precisamente
requisitos
terminar
fase
requisitos
continuar
di
seño
libros
men-
cionan
sarrollo
iterativo
abordan
superficialmente
quiz
ás
aña
diendo
material
iterativo
apelando
tendencias
modernas
li-
bros
art
ículos
requi
sitos
deberían
leerse
cautela
podr
ía
sentirse
seguro
idea
intentar
definir
cuidadosa
requisitos
fase
inicial
consistente
proceso
iterativo
libros
generales
requisitos
incluir
casos
superficialmente
entienden
significado
real
requisitos
dirigidos
casos
deberse
autores
poseen
ex-
periencia
años
étodos
requi
sitos
tradicionales
reciente
mente
intentado
incluir
casos
métodos
anteriores
dar-
idea
principal
casos
concibe
Ivar
Jacobson
UP
casos
elemento
central
enfoque
requisitos
global
sustituyendo
documentos
requi
sitos
ele
mento
central
casos
impregnan
dirigen
trabajo
requisitos
lugar
considerarse
técnica
apoyo
auxiliar
nivel
inferior
añadida
documentos
enfoques
requisitos
tradicionales
resumen
libros
generales
requisitos
ofrecen
consejos
útiles
téc-
nicas
cuestiones
recopilar
requisitos
escritos
personas
expertas
nor-
malmente
presentan
contexto
proceso
cascada
co-
nocimiento
implicaciones
profundas
casos
consejo
proceso
variante
trate
definir
mayoría
requisitos
pase
diseño
implementación
consistente
desarrollo
iterativo
UP
42
UML
PATRONESObjetivos
Identificar
escribir
casos
Relacionar
casos
objetivos
usuarios
procesos
negocio
básicos
Utilizar
formatos
informal
completo
estilo
esencial
Relacionar
trabajo
casos
desarrollo
iterativo
Introducción
Merece
pena
estudiar
capítulo
lectura
libro
ca-
sos
mecanismo
ampliamente
utilizado
scubrir
registrar
re-
quisitos
especialmente
funcionales
influencian
aspectos
proyecto
incluyendo
DOO
Merece
pena
casos
crearlos
escritura
casos
historias
sistema
técnica
ex-
celente
entender
describir
requisitos
capítulo
explora
conceptos
claves
casos
presenta
casos
ejemplo
aplicación
NuevaEra
UP
define
Modelo
Casos
disciplina
Requisitos
Básicamente
conjunto
casos
modelo
funcionalidad
entorno
sistema
Capítulo
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
paso
indispensable
cosas
quieres
vida
decidir
quieres
Ben
Stein6.1
Objetivos
historias
clientes
usuarios
finales
objetivos
conocidos
necesida-
des
quieren
sistemas
informáticos
ayuden
conseguirlos
varían
re-
gistrar
ventas
estimar
flujo
petróleo
futuros
pozos
formas
capturar
objetivos
requisitos
sistema
mejores
simples
familiares
fácil
especialmente
clientes
usuarios
finales
contribuir
definición
evaluación
reduce
riesgo
perder
hilo
casos
mecanismo
ayudar
mantenerlo
simple
entendible
personal
involucrado
informal
historias
sis-
tema
alcanzar
objetivos
continuación
presentamos
ejemplo
caso
formato
Procesar
Venta
cliente
llega
caja
artículos
comprar
caje-
ro
utiliza
sistema
PDV
registrar
artículo
comprado
sistema
pre-
senta
suma
parcial
detalles
línea
venta
cliente
introduce
datos
pago
sistema
valida
registra
sistema
actualiza
inventario
cliente
recibe
recibo
sistema
artículos
ca
sos
so
nece
sitan
elaboraci
ón
esencia
descubrir
registrar
requisitos
funcionales
escritura
his-
torias
sistema
ayudar
cumplir
objetivos
perso-
nas
involucradas
casos
uso1
supone
idea
difícil
difícil
descubrir
decidir
necesario
escribirlo
coherente
nivel
detalle
útil
escrito
acerca
casos
útil
riesgo
en-
tre
personas
inteligentes
creativas
oscurecer
idea
sencilla
niveles
so-
fisticación
Normalmente
distinguir
modelador
casos
novato
anali
sta
serio
Tipo
preocup
ándose
exce
so
cue
stiones
secundarias
diagramas
ca
sos
so
relacione
ca
sos
so
paquete
ca
sos
atributos
opcionales
etcétera
lugar
escribir
historias
palabras
mecanismo
casos
capacidad
aumentar
di
s-
minuir
términos
sofisticación
formalidad
dependiendo
necesidad
6.2
Antecedentes
idea
utilizar
casos
describir
requisitos
funcionales
intro-
ducida
1986
Ivar
Jacobson
Jacobson92
contribuidores
principales
UML
UP
idea
caso
Jacobson
influencia
ampliamente
reconocida
principales
virtudes
simplicidad
utilidad
Aun-
contribuido
campo
sostener
paso
coherente
comprensible
influyente
definición
deberían
ca-
sos
escribirlos
procede
Ali
stair
Cockburn
resumido
popular
texto
Writing
Effective
Use
Cases
Cockburn01
basado
trabajos
es-
critos
publicados
1992
introducción
basa
consis-
tente
trabajo
44
UML
PATRONES
Elt
érmino
original
sueco
traduce
literalmente
caso
costumbre”.6.3
Casos
valor
añadido
lugar
definiciones
informales
actor
comportamien-
to
persona
identificada
rol
sistema
informatizado
organización
ejemplo
cajero
escenario
secuencia
específica
acciones
interacciones
ac-
tores
sistema
objeto
estudio
denomina
instancia
caso
historia
particular
sistema
camino
caso
ejemplo
escenario
éxito
compra
art
ículos
pago
efectivo
sce-
nario
fallo
comprar
rechazo
tran
sacción
pago
tarjeta
crédito
Informalmente
caso
colección
escenarios
éxito
fallo
relacionados
describe
actores
utilizando
sistema
satisfacer
ob-
jetivo
ejemplo
continuación
presentamos
caso
formato
informal
incluye
escenarios
alternativos
Gestionar
Devoluciones
Escenario
principal
éxito
cliente
llega
caja
art
ículos
de-
volver
cajero
utiliza
sistema
PDV
registrar
artículos
devueltos
Escenarios
alternativos
pagó
tarjeta
crédito
rechaza
transacción
reembolso
informar
cliente
pagarle
efectivo
identificador
artículo
sistema
notificar
Cajero
sugerir
entrada
manual
código
identificación
esté
alterado
sistema
detecta
fallos
comunicación
sistema
contabilidad
ex-
terno
RUP
proporciona
definición
alternativa
similar
caso
conjunto
instancias
caso
instancia
secuencia
acciones
sistema
ejecuta
produciendo
resultado
observable
va-
lor
actor
particular
RUP
expresión
resultado
observable
valor
sutil
importante
destaca
comportamiento
sistema
debería
preocuparse
propor-
cionar
valor
usuario
actitud
clave
trabajo
casos
centrarse
pregunta
utilizando
sistema
proporcionar
valor
observable
usuario
cumplir
ob-
jetivos
lugar
simplemente
pensar
requisitos
sistema
términos
lista
lavandería
características
funciones
obvio
destacar
proporcione
valor
observable
usuario
industria
software
plagada
proyectos
fracasados
proporciona-
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
45ron
gente
realmente
necesitaba
enfoque
lista
características
fun-
ciones
capturar
requisitos
contribuir
resultado
negativo
puesto
fomenta
personal
involucrado
considere
requisitos
contexto
amplio
sistema
escenario
alcanzar
resultado
observable
valor
objetivo
contrario
casos
sitúan
características
funciones
contexto
orientado
objetivo
título
capítulo2
idea
clave
Jacob
intentaba
transmitir
concepto
ca
so
trabaja
requisitos
centrándote
ómo
sistema
añadir
valor
cumplir
objetivos
6.4
Casos
requisitos
funcionales
casos
requisitos
requisitos
funcionales
indican
qu
hará
sistema
términos
tipos
requisitos
FURPS
H11001,l
casos
re-
fieren
fundamentalmente
funcional
comportamiento
pue-
den
utilizarse
tipos
especialmente
sos
tipos
estrecha-
mente
relacionados
ca
so
so
UP
étodos
modernos
casos
mecanismo
principal
recomienda
descubrimiento
definición
casos
definen
promesa
contrato
comportará
sistema
claros
casos
requisitos
requisitos
Al-
gunos
piensan
requisitos
listas
características
funciones
forma
sistema
deberá
idea
clave
casos
general
reducir
importancia
listas
características
detalladas
estilo
an-
tiguo
escribir
casos
requisitos
funcionales
Veremos
so-
bre
punto
sección
posterior
casos
documentos
texto
diagramas
modelado
casos
acción
escribir
texto
dibujar
UML
define
diagrama
casos
ilustrar
nombres
casos
actores
re-
laciones
6.5
Tipos
casos
formatos
Casos
caja
negra
responsabilidades
sistema
casos
caja
negra
clase
común
recomendada
describen
funcionamiento
interno
sistema
componentes
diseño
describe
sistema
base
responsabilidades
metáfora
común
unifi-
cadora
pensamiento
orientado
objetos
elementos
software
responsa-
bilidades
colaboran
elementos
responsabilidades
46
UML
PATRONES
Procede
libro
titulado
apropiadamente
Uses
Cases
Requirements
in
Context
GK00
título
ca-
pítulo
adaptó
permiso
autores).A
definición
responsabilidades
sistema
casos
caja
negra
especificar
sistema
requisitos
funcionales
decidir
hará
di
seño
definici
ón
an
álisis
frente
diseño
resume
frente
tema
im-
portante
desarrollo
software
evite
análisis
requisitos
tomar
decisiones
acerca
ómo
specifique
comportamiento
externo
sistema
caja
negra
diseño
cree
solución
satisfaga
es-
pecificación
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
47
Tipos
formalidad
casos
escriben
formatos
dependiendo
necesidad
Ade-
tipo
visibilidad
caja
negra
frente
caja
blanca
casos
escri-
ben
grados
formalidad
resumen
conciso
párrafo
normalmente
escenario
principal
éxito
ejemplo
Procesar
Venta
Informal
formato
párrafo
estilo
informal
Múltiples
párrafos
com-
prenden
scenarios
ejemplo
Gestionar
Devoluciones
informal
Completo
elaborado
escriben
detalle
pasos
variaciones
yh
ysecciones
apoyo
precondiciones
garantías
éxito
ejemplo
caso
formato
completo
caso
estudio
Nue-
vaEra
6.6
Ejemplo
completo
Procesar
Venta
casos
completos
muestran
detalles
estructurados
útiles
entender
profundidad
objetivos
tareas
requisitos
caso
estudio
PDV
NuevaEra
crearían
talleres
requisitos
colaboración
analista
sistema
expertos
materia
estudio
desarrolladores
formato
usecases.org
plantillas
disponibles
casos
completos
formato
ás
ampliamente
extendido
compartido
plantilla
di
sponible
www.usecases.org
ejemplo
muestra
estilo
Estilo
caja
negra
sistema
registra
venta
sistema
escribe
venta
base
datos
sistema
genera
sentencia
SQL
INSERT
venta
lector
darse
principal
ejemplo
caso
detallado
caso
estudio
libro
muestra
elementos
cuestiones
comunes
Caso
UC1
Procesar
Venta
Actor
principal
Cajero
Personal
involucrado
intereses
Cajero
entradas
precisas
rápidas
errores
pago
pérdidas
deducen
salario
Vendedor
comisiones
ventas
estén
actualizadas
Compañía
registrar
transacciones
precisión
satisfacer
intereses
clientes
asegurar
registran
pagos
aceptados
Servicio
Au-
torización
Pagos
tolerancia
fallos
permita
capturar
ventas
in-
cluso
componentes
servidor
ej.
validación
remota
crédito
dispo-
nibles
actualización
automática
rápida
contabilidad
inventario
Agencia
Tributaria
Gobierno
recopilar
impuestos
venta
múltiples
agencias
nacional
provincial
local
Servicio
Autorización
Pagos
recibir
peticiones
autorización
digital
formato
protocolo
correctos
registrar
precisa
cuentas
cobrar
tienda
Precondiciones
cajero
identifica
autentica
Garantías
éxito
Postcondiciones):Se
registra
venta
impuesto
calcula
ma-
nera
correcta
actualizan
contabilidad
inventario
registran
comisiones
genera
recibo
registran
autorizaciones
pago
aprobadas
Escenario
principal
éxito
Flujo
Básico
Cliente
llega
terminal
PDV
mercancías
servicios
comprar
Cajero
comienza
venta
Cajero
introduce
identificador
artículo
Sistema
registra
línea
venta
presenta
descripción
artículo
precio
suma
parcial
precio
calcula
conjunto
reglas
precios
Cajero
repite
pasos
3-4
indique
Sistema
presenta
impuestos
calculados
Cajero
Cliente
pide
pague
Cliente
paga
Sistema
gestiona
pago
Sistema
registra
venta
completa
envía
información
venta
pago
sis-
tema
Contabilidad
externo
contabilidad
comisiones
sistema
In-
ventario
actualizar
inventario
Sistema
presenta
recibo
10
Cliente
recibo
mercancías
caso
Extensiones
Flujos
Alternativos
a.
momento
Sistema
falla
soporte
recuperación
registro
correcto
asegura
eventos
significativos
transacción
puedan
recuperarse
paso
escenario
Cajero
reinicia
Sistema
inicia
sesión
solicita
recuperación
an-
terior
Sistema
reconstruye
2a
Sistema
detecta
anomalías
intentando
recuperación
Sistema
informa
error
Cajero
registra
error
pasa
limpio
Cajero
comienza
venta
48
UML
PATRONES3a
Identificador
válido
Sistema
señala
error
rechaza
entrada
3b
artículos
categoría
única
identidad
artículo
importante
ej.
paquetes
hamburguesas
vegetales
Cajero
introducir
identificador
categoría
artículo
canti-
dad
3-6a
Cliente
pide
Cajero
elimine
artículo
compra
Cajero
introduce
identificador
artículo
eliminarlo
compra
Sistema
muestra
suma
parcial
actualizada
3-6b
Cliente
pide
Cajero
cancele
venta
Cajero
cancela
venta
Sistema
3-6c
Cajero
detiene
venta
sistema
registra
venta
esté
disponible
recuperación
terminal
PDV
4a
Sistema
genera
precio
artículo
deseado
ej.
Cliente
que-
ja
ofrece
precio
Cajero
introduce
precio
alternativo
Sistema
presenta
precio
5a
sistema
fallo
comunicarse
servicio
externo
sistema
cálculo
impuestos
Sistema
reinicia
servicio
nodo
PDV
continúa
1a
Sistema
detecta
servicio
reinicia
Sistema
señala
error
Cajero
calcular
introducir
manualmente
impuesto
cancelar
venta
5b
Cliente
aplicables
descuentos
ej.
empleado
cliente
preferente
Cajero
señala
petición
descuento
Cajero
introduce
identificación
Cliente
Sistema
presenta
descuento
basado
reglas
descuento
5c
Cliente
crédito
aplicar
venta
Cajero
señala
petición
crédito
Cajero
introduce
identificación
Cliente
Sistema
aplica
crédito
precio
reduce
crédito
queda
6a
Cliente
intención
pagar
efectivo
suficiente
1a
Cliente
utiliza
método
pago
alternativo
1b
Cliente
Cajero
cancele
venta
Cajero
cancela
venta
Sistema
7a
Pago
efectivo
Cajero
introduce
cantidad
dinero
efectivo
entregada
Sistema
muestra
cantidad
dinero
devolver
abre
cajón
caja
Cajero
deposita
dinero
entregado
devuelve
cambio
Cliente
Sistema
registra
pago
efectivo
7b
Pago
crédito
Cliente
introduce
información
crédito
Sistema
envía
petición
autorización
pago
Sistema
externo
Servicio
Autorización
Pagos
solicita
aprobación
pago
2a
Sistema
detecta
fallo
colaboración
sistema
externo
Sistema
señala
error
Cajero
Cajero
pide
Cliente
pago
alternativo
Sistema
recibe
aprobación
pago
notifica
Cajero
3a
Sistema
recibe
denegación
pago
Sistema
señala
denegación
Cajero
Cajero
pide
Cliente
pago
alternativo
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
494
Sistema
registra
pago
crédito
incluye
aprobación
pago
Sistema
presenta
mecanismo
entrada
firma
pago
crédito
Cajero
pide
Cliente
firme
pago
crédito
Cliente
introduce
firma
7c
Pago
cheque
7d
Pago
7e
Cliente
presenta
cupones
gestionar
pago
Cajero
recoge
cupón
Sistema
reduce
pago
oportuno
sistema
registra
cupones
utilizados
razones
contabilidad
1a
cupón
introducido
válido
artículos
comprados
Sistema
señala
error
Cajero
9a
rebajas
artículos
Sistema
presenta
formularios
rebaja
recibos
descuento
artículo
rebaja
9b
Cliente
solicita
vale-regalo
precio
visible
Cajero
solicita
vale-regalo
Sistema
proporciona
Requisitos
especiales
Interfaz
Usuario
pantalla
táctil
monitor
pantalla
plana
texto
visible
metro
distancia
Tiempo
respuesta
autorización
crédito
30
segundos
90%
ve-
ces
recuperación
robusta
falla
acceso
servicios
re-
motos
sistema
inventario
Internacionalización
lenguaje
texto
muestra
Reglas
negocio
puedan
añadir
tiempo
ejecución
pasos
Lista
tecnología
variaciones
datos
3a
identificador
artículo
introduce
escáner
láser
código
barras
presente
código
barras
teclado
3b
identificador
artículo
esquema
código
UPC
EAN
JAN
SKU
7a
entrada
información
crédito
cabo
lector
tarjetas
teclado
7b
firma
pagos
crédito
captura
recibo
papel
años
pronosticamos
clientes
querrán
capture
firma
digital
Frecuencia
continuo
Temas
abiertos
variaciones
ley
impuestos
Explorar
cuestiones
recuperación
servicios
remotos
adaptación
negocios
cajero
llevarse
dinero
caja
salga
sistema
utilizar
cliente
directamente
lector
tarjetas
cajero
caso
ilustrativo
exhaustivo
basado
requisitos
sistema
PDV
real
muestra
suficiente
detalle
comple-
jidad
exponer
reali
sta
casos
so
completos
docu
mentar
detalles
requisitos
ejemplo
servirá
modelo
problemas
casos
50
UML
PATRONESLa
variación
dos-columnas
prefieren
formato
columnas
conversacional
destaca
establece
interacción
actores
sistema
propuso
Rebecca
Wirfs-Brock
Wirfs-Brock93
promueven
Cons-
tantine
Lockwood
ayudar
análisis
ingeniería
usabilidad
CL99
con-
tinuación
presentamos
contenido
utilizando
formato
columnas
Caso
UC1
Procesar
Venta
Actor
principal
Escenario
principal
éxito
Acción
actor
intención
Responsabilidad
Sistema
Cliente
llega
terminal
PDV
mercancías
servicios
comprar
Cajero
comienza
venta
Cajero
introduce
identificador
Registra
línea
venta
artículo
presenta
descripción
artículo
suma
parcial
Cajero
repite
pasos
3-4
Sistema
presenta
indique
impuestos
calculados
Cajero
Cliente
pide
pague
Cliente
paga
Sistema
gestiona
pago
Registra
venta
completa
envía
información
venta
pago
sistema
Contabilidad
externo
contabilidad
comisiones
sistema
Inventario
actualizar
inventario
Sistema
presenta
recibo
formato
formato
prefieren
estilo
columna
co-
lumnas
secciones
añadir
quitar
nombres
títulos
cam-
biar
cosas
especialmente
importante
clave
escribir
detalles
escenario
principal
éxito
extensiones
forma
Cockburn1
resume
formatos
utilizables
Práctica
personal
práctica
recomendación
años
utilicé
formato
columnas
clara
separación
visual
conversación
vuelto
estilo
columna
compacto
fácil
formatear
pe-
queño
valor
separación
visual
conversación
supera
benefi-
cios
Encuentro
sencillo
identificar
visualmente
partes
conversación
Cliente
Sistema
respuestas
Sistema
asignan
normalmente
pasos
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
516.7
Explicación
secciones
Elementos
prólogo
posibles
elementos
opcionales
prólogo
Sitúe
principio
ele-
mentos
importantes
lean
escenario
principal
éxito
Mueve
material
encabezamiento
ajeno
casos
Actor
principal
actor
principal
recurre
servicios
sistema
cumplir
objetivo
Importante
Personal
involucrado
lista
intereses
lista
importante
práctica
parecer
vista
Sugiere
delimita
sistema
Citando
Cockburn
sistema
funciona
siguiendo
contrato
personal
involucrado
casos
usos
detallan
comportamiento
contrato
caso
contrato
comportamiento
captura
comportamiento
relacionado
satisfacción
intereses
personal
involucrado
Cockburn01
contesta
pregunta
debería
caso
respuesta
satisfaga
intereses
personal
involucrado
empezando
personal
involucrado
intereses
escribir
resto
caso
recordarnos
deberían
responsabilidades
detalladas
sis-
tema
ejemplo
habría
identificado
responsabilidad
gestionar
comisión
vendedor
hubiese
listado
lugar
persona
involucrada
vendedor
intereses
casos
habría
echado
falta
sesión
análisis
punto
vista
interés
personal
involucrado
pro-
porciona
procedimiento
metódico
completo
descubrimiento
registro
to-
comportamientos
requeridos
Personal
involucrado
intereses
Cajero
entradas
precisas
rápidas
errores
pago
pérdidas
deducen
salario
Vendedor
comisiones
ventas
estén
actualizadas
Precondiciones
garantías
éxito
postcondiciones
precondiciones
establecen
cumplirse
comenzar
es-
cenario
caso
precondiciones
prueban
caso
condiciones
asumen
Normalmente
precondición
impli-
ca
escenario
caso
completado
éxito
inicio
se-
sión
general
cajero
identifica
autentica
Nótese
condiciones
52
UML
PATRONESque
valor
pr
áctico
escriban
sistema
energía
precondiciones
comunican
suposiciones
importantes
escritor
caso
piensa
lectores
deberían
avisados
garantías
éxito
postcondiciones)e
stablecen
cumplirse
caso
completa
éxito
escenario
principal
éxito
camino
al-
ternativo
garantía
debería
satisfacer
necesidades
personal
involucrado
Precondiciones
cajero
identifica
autentica
Garantías
éxito
Postcondiciones):Se
registra
venta
impuesto
calcula
ma-
nera
correcta
actualizan
Contabilidad
Inventario
registran
comisiones
genera
recibo
Escenario
principal
éxito
pasos
Flujo
Básico
recibe
nombre
escenario
camino
feliz
prosaico
Flujo
Bási-
co
Describe
camino
éxito
típico
satisface
intereses
personal
involu-
crado
Nótese
incluye
condición
bifurcación
incorrecto
ilegal
suponer
comprensible
extensible
con-
sistente
postergar
manejo
caminos
condicionales
sección
Extensiones
Sugerencia
Posponga
sentencias
condicionales
bifurcación
sección
Extensiones
escenario
recoge
pasos
tipos
interacci
ón
actores3
validaci
ón
normalmente
cargo
sistema
cambio
stado
sistema
ejemplo
registrando
mo-
dificando
paso
caso
normalmente
incluido
clasificación
indica
evento
desencadena
comienzo
escenario
estilo
habitual
mayúsculas
nombres
actores
facilitar
identificación
observar
estilo
utiliza
indicar
repetición
Escenario
principal
éxito
Flujo
Básico
Cliente
llega
terminal
PDV
mercancías
comprar
Cajero
comienza
venta
Cajero
introduce
identificador
artículo
Cajero
repite
pasos
3-4
indique
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
53
Nótese
sistema
estudiando
debería
considerarse
actor
juega
rol
actor
colaborando
sitemas
Extensiones
Flujos
Alternativos
extensiones
importantes
Indican
escenarios
bifurcaciones
éxito
fraca
so
observar
ejemplo
ca
so
so
completo
sección
Extensiones
considerablemente
larga
compleja
co-
rrespondiente
Escenario
Principal
Éxito
normal
esperar
conocen
Flujos
Alternativos
escritura
casos
completos
combinación
camino
feliz
es-
cenarios
extensión
deberían
satisfacer
intereses
personal
involu-
crado
punto
limitado
puesto
intereses
capturar
requisitos
funcionales
escritos
Especificación
Complementaria
lugar
casos
escenarios
extensión
bifurcaciones
escenario
principal
éxito
etiquetados
ejemplo
Paso
escenario
principal
identificador
artículo
inválido
introdujo
correctamente
sistema
conoce
exten
sión
etiqueta
3a
identifica
condición
respuesta
extensión
alternativa
Paso
etiqueta
3b
sucesivamente
Extensiones
Flujos
Alternativos
3a
Identificador
válido
Sistema
señala
error
rechaza
entrada
3b
artículos
categoría
única
identidad
ar-
tículo
importante
ej.
paquetes
hamburguesas
vegetales
Cajero
introducir
identificador
categoría
artículo
cantidad
extensión
partes
condición
manejo
Guía
Escriba
condición
detectado
sistema
actor
contrastar
5a
Sistema
detecta
fallo
comunicación
servicio
externo
sistema
cálculo
impuestos
5a
sistema
cálculo
impuestos
externo
funciona
prefiere
estilo
sistema
detectar
inferencia
manejo
exten
sión
re
sumir
pa
so
incluir
secuencia
ejemplo
ilustra
notación
utilizada
indicar
con-
dición
lugar
serie
pasos
3-6a
Cliente
pide
Cajero
elimine
artículo
compra
Cajero
introduce
identificador
artículo
eliminarlo
compra
Sistema
muestra
suma
parcial
actualizada
manejo
extensión
defecto
escenario
une
es-
cenario
principal
éxito
extensión
indique
cosa
interrumpir
sistema
54
UML
PATRONESAlgunas
punto
extensión
particular
complejo
ex-
tensión
pago
crédito
motivo
expresar
extensión
caso
aparte
ejemplo
extensión
muestra
notación
expresar
fallos
ex-
tensiones
7b
Pago
crédito
Cliente
introduce
información
crédito
Sistema
envía
petición
autorización
pago
Sistema
externo
Servicio
Autorización
Pagos
solicita
aprobación
pago
2a
Sistema
detecta
fallo
colaboración
sistema
externo
Sistema
señala
error
Cajero
Cajero
pide
Cliente
pago
alternativo
deseable
describir
condición
extensión
cualquiera
mayoría
pasos
utilizar
etiquetas
a.
momento
Sistema
falla
soporte
recuperación
registro
correcto
asegura
eventos
significativos
transacción
puedan
recuperarse
paso
escenario
Cajero
reinicia
Sistema
inicia
sesión
solicita
recuperación
an-
terior
Sistema
reconstruye
Requisitos
especiales
requisito
funcional
atributo
calidad
restricción
relaciona
es-
pecífica
caso
recoge
caso
incluye
cualidades
tales
rendimiento
fiabilidad
facilidad
restricciones
diseño
dispositivos
entrada
salida
obligados
consideran
probables
Requisitos
especiales
Interfaz
usuario
pantalla
táctil
monitor
pantalla
plana
texto
visible
metro
distancia
Tiempo
respuesta
autorización
crédito
30
segundos
90%
ve-
ces
Internacionalización
lenguaje
texto
muestra
Reglas
negocio
puedan
añadir
ejecución
pasos
consejo
clásico
UP
registrar
requisitos
caso
consti-
tuye
lugar
razonable
escribir
caso
exper-
tos
encuentran
útil
reunir
requisitos
funcionales
Especificación
Complementaria
favorecer
gestión
contenido
comprensión
legibilidad
por-
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
55que
normalmente
considerar
requisitos
conjunto
aná-
lisis
arquitectural
Lista
tecnología
variaciones
datos
encontramo
variaciones
técnicas
importante
registrarlo
caso
ejemplo
típico
restricción
técnica
impuesta
personal
involucrado
tecnologías
entrada
salida
dato
s.
ejemplo
interesados
sistema
PDV
soportar
entrada
cr
édito
utilizando
lector
tarjeta
te-
clado
Nótese
ejemplos
decisiones
restricciones
diseño
antici-
padas
general
evitarse
decisiones
diseño
prematuras
obvias
inevitables
especialmente
relación
tecnologías
entrada
sa-
lida
necesario
entender
variaciones
esquemas
datos
utilizar
UPCs
EANs
identificadores
artículos
codificados
código
barras
lista
lugar
situar
tales
variaciones
útil
registrar
varia-
ciones
datos
capturarse
paso
particular
Lista
tecnología
variaciones
datos
3a
identificador
artículo
introduce
escáner
láser
código
barras
presente
código
barras
teclado
3b
identificador
artículo
esquema
código
UPC
EAN
JAN
SKU
7a
entrada
información
crédito
cabo
lector
tarjetas
teclado
7b
firma
pagos
crédito
captura
recibo
papel
años
pronosticamos
clientes
querrán
capture
firma
digital
Sugerencia
sección
debería
contener
múltiples
pasos
representar
variación
com-
portamiento
casos
necesario
dígalo
sección
Extensiones
6.8
Objetivos
alcance
caso
deberían
descubrirse
casos
típico
seguro
caso
válido
práctica
útil
tareas
agrupar
ni-
veles
granularidad
pasos
pequeños
actividades
nivel
empresa
nivel
alcance
deberían
expresarse
casos
56
UML
PATRONESLas
siguientes
secciones
presentan
ideas
sencillas
procesos
objetivos
negocio
elementales
marco
identificación
casos
apli-
cación
Casos
procesos
negocio
elementales
caso
válido
Negociar
Contrato
Proveedor
Gestionar
Devoluciones
Iniciar
Sesión
argumentarse
casos
niveles
depen-
diendo
límites
sistema
actores
objetivos
evaluación
candidatos
presenta
introducción
procesos
negocio
elementales
lugar
preguntar
general
qu
caso
válido
pregunta
relevante
caso
estudio
PDV
nivel
útil
expresar
ca-
sos
análisis
requisitos
aplicación
Guía
caso
EBP
análisis
requisitos
aplicación
informática
céntrese
casos
nivel
procesos
negocio
elementales(EBPs
Elementary
Business
Processes
EBP
término
procede
campo
ingeniería
procesos
negocio4
define
tarea
realizada
persona
lugar
instante
respuesta
evento
negocio
añade
valor
cuantificable
negocio
deja
datos
consistente
ej.
Autorizar
Crédito
Solicitar
Precio
perdió
fuente
original
tomar
dema
siado
literalmente
considerar
caso
EBP
requieren
personas
persona
pasear
Proba-
blemente
impresión
general
definición
correcta
pequeño
pa
so
eliminar
ínea
pedido
imprimir
docu
mento
escenario
principal
éxito
formado
probablemente
pasos
tarda
múltiples
sesiones
negociar
contrato
pro-
veedor
tarea
aborda
única
sesión
Probablemente
dura
minutos
hora
definición
UP
hincapié
añadir
valor
observable
cuantificable
negocio
llega
sistema
da-
tos
encuentran
estable
consistente
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
57
EBP
parecido
término
tarea
usuario
ingeniería
usabilidad
significado
estricto
dominio
error
típico
casos
definir
casos
nivel
paso
simple
subfunción
subtarea
EBP
Violaciones
razonables
guía
EBP
ca
sos
so
ba
aplicaci
ón
deber
ían
satisfacer
gu
ía
EBP
normalmente
útil
crear
sub
casos
separados
representan
subtareas
pa-
sos
ca
so
base
existir
casos
EBP
potencial-
mente
nivel
inferior
guía
utiliza
encontrar
nivel
dominante
casos
análisis
requisitos
aplicación
nivel
centrar
nombrarlos
escribirlos
ejemplo
subtarea
extensión
pago
crédito
repetirse
va-
rios
casos
base
conveniente
separarlo
caso
sa-
tisface
guía
EBP
conectarlo
casos
base
evitar
duplicaciones
texto
Capítulo
25
estudiaremos
cuestiones
acerca
relaciones
casos
Casos
objetivos
actores
objetivos
necesidades
utilizan
aplicaciones
ayudarles
satisfacerlos
consecuencia
caso
nivel
EBP
denomina
caso
nivel
objetivo
usuario
remarcar
sirve
debería
servir
satisfacer
objetivo
usuario
sistema
actor
principal
recomendar
procedimiento
Encontrar
objetivos
usuario
Definir
ca
so
supone
ligero
cambio
énfasis
modelador
casos
lugar
preguntar
casos
comienza
preguntando
objetivos
nombre
caso
objetivo
usuario
debe-
ría
reflejar
objetivo
resaltar
punto
vista
Objetivo
capturar
procesar
venta
caso
Procesar
Venta
Nótese
simetría
guía
EBP
aplicar
igualmente
de-
cidir
objetivo
caso
encuentran
nivel
adecuado
idea
clave
investigación
objetivos
usuario
frente
investigación
casos
Imagine
juntos
taller
requisitos
podríamos
preguntar
pregunta
orientada
caso
objetivos
probable
respuestas
pregunta
reflejen
soluciones
procedi-
mientos
actuales
complicaciones
asociadas
58
UML
PATRONESLas
respuestas
pregunta
especialmente
combinada
investigación
ascender
jerarquía
objetivos
objetivo
objetivo
abren
visión
soluciones
mejoradas
centradas
añadir
valor
negocio
llegar
corazón
personal
involucrado
sistema
estudiando
Ejemplo
aplicación
guía
EBP
analista
sistemas
responsable
scubrimiento
requisitos
sistema
NuevaEra
investigando
objetivos
usuario
conversación
transcurre
forma
taller
requisitos
Analista
sistemas
objetivos
contexto
sistema
PDV
Cajero
iniciar
sesión
rápidamente
capturar
ventas
Analista
sistemas
cree
objetivo
nivel
alto
motiva
inicio
sesión
Cajero
Intento
identificarme
sistema
validar
autorizado
utilizar
sistema
captura
ventas
tareas
Analista
sistemas
alto
Cajero
Evitar
robo
alteraci
ón
dato
mo
strar
informaci
ón
privada
compañía
Obsérvese
estrategia
analista
buscar
ascendente
jerar-
quía
objetivos
encontrar
objetivos
usuario
nivel
superior
toda-
vía
satisfagan
guía
EBP
obtener
objetivo
real
acción
entender
contexto
objetivos
Evitar
robos
nivel
superior
objetivo
usuario
llamarse
ob-
jetivo
empresa
EBP
inspirar
formas
pensar
problema
soluciones
eliminar
sistemas
PDV
cajero
com-
pletamente
dejar
Disminuyendo
nivel
objetivo
identificarme
sistema
validado
acerca
nivel
objetivo
usuario
nivel
EBP
añade
valor
observable
cuantificable
negocio
re
sponsable
comercio
pregunta
Qu
hici
ste
dices
Inicié
sesión
20
impresionaría
consecuencia
objetivo
secundario
disponible
útil
EBP
objetivo
usuario
cambio
capturar
venta
cumple
criterio
EBP
obje-
tivo
usuario
ejemplo
podr
ía
tiendas
proce
so
denominado
abrir
caja
cajero
inserta
bandeja
cajón
caja
terminal
ini-
cia
sesión
indica
sistema
dinero
caja
Abrir
caja
caso
nivel
EBP
nivel
objetivo
usuario
paso
inicio
sesión
lugar
caso
nivel
EBP
objetivo
subfunción
cabo
objetivo
abrir
caja
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
59Objetivos
casos
subfunción
identificarme
validado
iniciar
sesión
eliminado
obje-
tivo
usuario
objetivo
nivel
denominado
objetivo
subfunción
subobjetivos
soporte
objetivo
usuario
deberían
escribirse
ca-
sos
ocasional
objetivos
subfunción
pro-
blema
típico
observan
expertos
pide
evalúen
mejoren
nor-
malmente
simplifiquen
conjunto
casos
ilegal
escribir
casos
objetivos
subfunción
útil
añade
complejidad
modelo
casos
cientos
obje-
tivos
subfunción
casos
subfunción
sistema
punto
importante
número
granularidad
casos
influyen
tiempo
dificultad
entender
mantener
gestionar
requisitos
motivo
válido
común
representar
objetivo
subfunción
caso
subfunción
repite
precondición
casos
nivel
objetivos
usuario
cumple
probablemente
caso
identificarme
validado
precondición
mayoría
casos
nivel
objetivos
usuario
consecuencia
escribirse
caso
Autenticar
Usuario
Objetivos
casos
compuestos
Normalmente
objetivos
compue
stos
sde
nivel
empre
sa
renta
ble
incluyen
objetivos
intermedios
nivel
so
aplicaci
ón
capturan
ventas
incluyen
objetivos
subfunción
apli-
caciones
entrada
válida
análoga
casos
escribir
niveles
sa-
tisfacer
objetivos
compuestos
casos
nivel
inferior
niveles
objetivos
casos
fuente
típica
confusión
identificación
nivel
adecuado
casos
aplicación
guía
EBP
proporciona
orientación
eliminar
casos
nivel
excesivamente
6.9
Descubrimiento
actores
principales
objetivos
casos
casos
definen
satisfacer
objetivos
usuario
actores
principa-
procedimiento
básico
Elegir
límites
sistema
aplicación
software
hardware
aplicación
utiliza
persona
organización
completa
60
UML
PATRONES2
Identificar
actores
principales
objetivos
usuario
satisfacen
servicios
sistema
identificar
objetivos
usuario
Elevarlos
nivel
objeti-
vos
usuario
alto
satisfaga
guía
EBP
Definir
casos
satisfagan
objetivos
usuario
nombrarlos
objetivos
Normalmente
casos
nivel
objetivo
usuario
corresponderán
objetivos
usuario
excepción
verá
Paso
Elegir
límite
sistema
caso
estudio
sistema
PDV
sistema
diseñando
queda
límites
sistema
incluyendo
cajero
servicio
autorización
pagos
etcétera
clara
definición
límites
sistema
diseñando
pue-
aclarar
definiendo
actores
principales
externos
apoyo
identificados
actores
externos
límites
vuelven
claros
ejem-
plo
responsabilidad
autorización
pagos
completa
límites
sistema
actor
servicio
externo
autorización
pagos
Pasos
Identificar
actores
principales
objetivos
artificial
establecer
estricta
identificación
actores
principales
objetivos
usuario
taller
requisitos
gente
pone
común
ideas
lugar
mezcla
objetivos
ponen
ma-
nifiesto
actores
viceversa
Guía
Centrar
discusión
actores
principales
lugar
sta-
blece
marco
investigaciones
posteriores
Preguntas
útiles
encontrar
actores
principales
objetivos
actores
principales
objetivos
usuario
obvios
preguntas
siguien-
tes
ayudan
identificar
arranca
sistema
Qui
én
encarga
administración
sistema
gestiona
usuarios
actor
tiempo
seguridad
sistema
respuesta
evento
tiempo
proceso
control
Qui
én
evalúa
actividad
reinicie
sistema
falla
rendimiento
sistema
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
61¿Cómo
gestionan
Qui
én
evalúa
registros
actualizaciones
software
recuperan
remota
Actualizaciones
automáticas
Actores
principales
apoyo
Recordemos
actores
principales
objetivos
usuario
satisfacen
me-
diante
servicios
sistema
Acuden
sistema
ayude
con-
trario
actores
apoyo
proporcionan
servicios
sistema
dise-
ñando
centraremos
encontrar
actores
principales
apoyo
Recordemos
actores
principales
cosas
sistemas
informáticos
procesos
software
guardianes
watchdog
Sugerencia
Desconfía
actores
principales
corresponde
sistema
informático
externo
lista
actor-objetivo
Recoge
actores
principales
objetivos
usuario
lista
actor-objetivo
términos
artefactos
UP
debería
corresponderse
sección
artefacto
Visión
describirá
capítulo
ejemplo
62
UML
PATRONES
Actor
Objetivo
Actor
Objetivo
Cajero
procesar
ventas
Administrador
añadir
usuarios
procesar
alquileres
Sistema
modificar
usuarios
gestionar
devoluciones
eliminar
usuarios
abrir
caja
gestionar
seguridad
cerrar
caja
gestionar
tablas
sistema
Director
marcha
Sistema
analizar
datos
suspender
operación
Actividad
ventas
rendimiento
Ventas
Sistema
Actividad
Ventas
aplicación
remota
solicitará
frecuencia
datos
ventas
nodo
PDV
red
Dimensión
planificación
proyecto
práctica
lista
columnas
adicionales
prioridad
esfuerzo
riesgo
tratará
brevemente
Capítulo
36.MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
63
complicada
realidad
lista
ordenada
realidad
creación
cosa
necesarias
tormentas
idea
di
scusiones
talleres
re
quisitos
Consideremos
ejemplo
ilustraba
aplicación
regla
EBP
objetivo
iniciar
sesión
taller
crea
lista
cajero
proponer
iniciar
sesión
objetivo
usuario
analista
sistemas
profun-
dizará
subirá
nivel
objetivo
allá
mecanismo
nivel
inicio
sesión
cajero
po
siblemente
staba
pen
sando
utilizar
cuadro
di
álogo
GUI
nivel
identificar
autenticar
usuario
analista
cumple
gu
ía
EBP
descarta
objetivo
usuario
su-
puesto
realidad
puesto
analista
experien-
cia
conjunto
heurísticas
procedentes
experiencias
estudios
ante-
riores
autenticación
usuarios
rara
EBP
probable
elimine
rápidamente
actor
principal
objetivos
usuario
dependen
límite
sistema
cajero
cliente
actor
principal
caso
Procesar
Ven-
ta
aparece
cliente
lista
actor-objetivo
respuesta
depende
límite
sistema
esté
diseñando
ilustra
Figura
6.1
consideramos
empresa
servicio
caja
sistema
agre-
gado
cliente
actor
principal
objetivo
obtener
artículos
servicios
marcharse
punto
vista
únicamente
sistema
PDV
elección
límite
sistema
caso
estudio
atiende
objetivo
cajero
tienda
procesar
venta
cliente
Figura
6.1
Actores
principales
objetivos
límites
sistema
Agencia
Impuestos
Ventas
Objetivo
Obtener
impuestos
ventas
Cliente
Objetivo
Comprar
artículos
Objetivo
Analizar
datos
ventas
rendimiento
Objetivo
Procesar
ventas
Sistema
Actividad
Ventas
Cajero
Elementos
Ventas
Empresa
Servicio
Caja
Sistema
PDV
Actores
objetivos
análisis
eventos
enfoque
ayudar
úsqueda
actores
objetivos
ca
sos
so
identificar
eventos
externos
proceden
grupo
eventos
pertenecen
objetivo
caso
nivel
EBP
ejem-
plo
64
UML
PATRONES
Paso
Definir
casos
general
definimo
ca
so
so
nivel
EBP
objetivo
suario
Nombramos
caso
similar
objetivo
usuario
ejemplo
Ob-
jetivo
procesar
venta
Caso
Procesar
Venta
nombre
casos
comenzando
verbo
excepción
típica
caso
objetivo
agrupar
objetivos
separados
CRUD5
crear
recuperar
actualizar
eliminar
caso
CRUD
llamado
convención
Gestionar
ejemplo
objetivos
editar
usuario
eliminar
usua-
rio
etcétera
satisfacen
caso
Gestionar
Usuarios
Definir
casos
comprende
niveles
esfuerzo
variando
minutos
recoger
simplemente
nombres
semanas
es-
cribir
versiones
formato
completo
sección
proce
so
UP
ste
capítulo
sitúa
trabajo
contexto
desarrollo
iterativo
UP
6.10
Enhorabuena
escrito
casos
perfectos
necesidad
comunicación
participación
equipo
PDV
NuevaEra
escribiendo
casos
múltiples
talleres
re-
quisitos
serie
iteraciones
desarrollo
cortas
añadiendo
incremen-
talmente
conjunto
refinando
adaptando
ba
retroalimentaci
ón
ex-
pertos
materia
estudio
cajeros
programadores
participan
activamente
proceso
escritura
intermediarios
cajeros
usuarios
de-
sarrolladores
establece
comunicación
directa
suficiente
especificaciones
requisitos
escritas
impresión
correctas
casos
requisitos
N.
T.
Acrónimo
Create-Retrieve-Update-Delete
Evento
Externo
Actor
Objetivo
introducir
línea
venta
Cajero
procesar
venta
introducir
pago
Cliente
Cajero
procesar
venta
correctos
garantizado
Carecen
informaci
ón
crítica
contienen
afir
maciones
erróneas
solución
aptitud
proceso
cascada
esforzar-
recopilar
requisitos
perfectos
completos
principio
tiempo
disponible
suficiente
necesita
enfoque
enfoque
desarrollo
ite-
rativo
necesita
comunicación
personal
continua
Comunicación
par-
ticipación
cercana
continua
diaria
desarrolladores
alguien
entien-
dominio
tomar
deci
sione
requi
sito
s.
programadores
acercar
cuestión
segundos
obtener
aclaraciones
cual-
quier
momento
surja
duda
ejemplo
prácticas
XP
Beck00
incluyen
excelente
recomendación
usuarios
dedicación
tiempo
completo
proyecto
permaneciendo
sala
proyecto
6.11
Escritura
casos
estilo
esencial
independiente
interfaz
usuario
mejorado
Razones
favor
utilizar
huellas
dactilares
Investigar
preguntar
acerca
objetivos
lugar
tareas
procedimientos
fo-
menta
centre
atención
esencia
requisitos
intención
ejemplo
taller
requi
sitos
cajero
objetivos
iniciar
sesión
cajero
probablemente
estaría
pensando
GUI
cuadro
diálogo
identificador
usuario
ID
contraseña
password
mecanismo
alcanzar
objetivo
lugar
objetivo
investigación
ascendente
jerarquía
objetivos
objetivo
objeti-
vo
anali
sta
sistema
llega
sta
objetivo
independiente
mecani
smo
identificarse
autenticación
objetivo
nivel
superior
pre-
venir
robos
proceso
descubrimiento
abrir
visión
soluciones
mejora-
das
ejemplo
teclados
ratones
lectores
biométricos
normalmente
huellas
dactilares
habituales
baratos
objetivo
identificación
au-
tenticación
rápido
fácil
utilizando
lector
biométrico
te-
clado
respuesta
adecuada
conlleva
análisis
usabilidad
co-
nocer
perfil
usuarios
típicos
sistema
pasa
dedos
cubiertos
grasa
dedos
Escritura
estilo
esencial
idea
resumido
guías
casos
considere
interfaz
usuario
céntrese
intención
Cockburn01
motivación
notación
es-
tudiado
Larry
Constantine
completa
contexto
creación
in-
terfaces
suario
UI
mejore
ingenier
ía
sabilidad
stantine94
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
65CL99
Constantine
denomina
estilo
escritura
esencial
evita
detalles
UI
centra
intención
real
usuario6
estilo
escritura
esencial
narración
expresa
nivel
intenciones
usuarios
responsabilidades
sistema
lugar
acciones
concretas
independientes
detalles
acerca
tecnología
mecanismos
especialmente
relacionados
UI
Escriba
casos
estilo
esencial
considere
interfaz
usuario
céntrese
intención
actor
ejemplo
ca
sos
so
anteriore
ste
cap
ítulo
Procesar
Venta
escribieron
intención
seguir
estilo
esencial
Nótese
diccionario
define
objetivo
sinónimo
intención
MW89
ilustra
conexión
idea
estilo
esencial
Constantine
punto
vis-
ta
orientado
objetivo
puso
relieve
anteriormente
capítulo
pasos
intenciones
actores
caracterizar
objetivos
subfunción
Ejemplos
contraste
Estilo
esencial
Supongamos
caso
Gestionar
Usuarios
requiere
identificación
autenti-
cación
estilo
esencial
inspirado
Constantine
utiliza
formato
columnas
escribir
columna
Intención
Actor
Responsabilidad
Sistema
Administrador
identifica
Autenticar
identidad
formato
columna
muestra
Administrador
identifica
Sistema
autentica
identidad
solución
diseño
intenciones
responsabilidades
abierta
lectores
biométricos
interfaces
gráficas
usuario
GUIs
etcétera
66
UML
PATRONES
Elt
érmino
procede
modelos
esenciales
Análisis
Sistemas
Esenciales
MP84].Estilo
concreto—evitar
trabajo
requisitos
inicial
contraste
estilo
caso
concreto
estilo
incluyen
tex-
to
caso
decisiones
acerca
interfaz
usuario
texto
mostrar
instantáneas
pantallas
ventanas
discutir
navegación
ven-
tanas
manipulación
elementos
GUI
etcétera
ejemplo
Administrador
introduce
ID
contraseña
cuadro
diálogo
Dibujo
Sistema
autentica
Administrador
Sistema
muestra
ventana
edición
usuarios
Dibujo
casos
concretos
útiles
ayudar
diseño
GUI
detallada
concreta
etapas
posteriores
adecuados
trabajo
análisis
requisitos
inicial
trabajo
requisitos
inicial
considere
in-
terfaz
usuario
céntrese
intención
6.12
Actores
actor
cosa
comportamiento
incluyendo
sistema
estudiando
SuD
System
under
Discussion
solicita
servicios
sis-
temas7.L
actores
principales
apoyo
aparecerán
pasos
acción
texto
caso
actores
roles
juegan
personas
orga-
nizaciones
software
máquinas
tipos
actores
externos
relación
SuD
Actor
principal
objetivos
usuario
satisfacen
servicios
SuD.
ejemplo
cajero
identifica
encontrar
objetivos
usuario
diri-
gen
casos
Actor
apoyo
proporciona
servicio
ejemplo
información
SuD.
servicio
autorización
pago
ejemplo
Normalmente
sis-
tema
informático
organización
persona
identifica
clarificar
interfaces
externas
protocolos
Actor
pasivo
interesado
comportamiento
ca
so
principal
apoyo
ejemplo
agencia
tributaria
gobierno
identifica
asegurar
intereses
necesarios
identificado
satisfecho
intereses
actores
pasivos
sutiles
fácil
tenerlos
actores
identifi-
cados
explícitamente
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
67
refinamiento
mejora
definiciones
actores
alternativas
incluyendo
prime-
ras
versiones
UML
UP
Cockburn97
antiguas
definiciones
excluían
inconsistente
SuD
actor
recurría
servicios
sistemas
entidades
jugar
múltiples
roles
incluyendo
SuD.6.13
Diagramas
casos
UML
proporciona
notación
diagramas
casos
ilustrar
nombres
casos
actores
relaciones
Figura
6.2
68
UML
PATRONES
Figura
6.2
Diagrama
contexto
casos
parcial
NuevaEra
Gestionar
Usuarios
Cajero
Administrador
Sistema
actor
caso
comunicaciónlímite
sistema
Gestionar
Devoluciones
Servicio
Autorización
Pagos
actor
Calculador
Impuestos
notación
alternativa
actor
representa
sistema
informático
Procesar
Alquiler
actor
Sistema
RRHH
Abrir
Caja
Procesar
Venta
actor
Sistema
Actividad
Ventas
Gestionar
Seguridad
Analizar
Actividad
actor
Sistema
Contabilidad
diagramas
caso
relaciones
casos
secundarios
trabajo
casos
casos
documentos
texto
Trabajar
casos
significa
escribir
texto
signo
típico
modelador
casos
novato
estudiante
preo-
cupación
diagramas
casos
relaciones
casos
lu-
gar
escribir
texto
expertos
mundiales
casos
Anderson
Fowler
Cockburn
minimizan
importancia
diagramas
casos
re-
laciones
casos
lugar
centran
escribir
ad-
vertencia
simple
diagrama
casos
proporciona
conciso
diagrama
con-
texto
visual
sistema
muestra
actores
externos
utilizan
sistema
Sugerencia
Dibuje
diagrama
casos
sencillo
lista
actor-objetivo
diagrama
casos
excelente
representación
contexto
siste-
ma
conforma
diagrama
contexto
sto
muestra
límites
sistema
permanece
utiliza
Sirve
herramienta
comunicación
resume
comportamiento
sistema
actores
Figura
6.2
presenta
muestra
diagrama
contexto
casos
parcial
sistema
NuevaEra
Sugerencias
realización
diagramas
Figura
6.3
muestra
consejos
diagramas
Nótese
caja
ac-
tor
contiene
símbolo
actor
símbolo
denomina
estereotipo
UML
mecanismo
clasificar
elemento
nombre
estereotipo
escribe
comillas
francesas
signo
ortográfico
especial
formado
único
carácter
conocido
tipografía
francesa
indicar
cita
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
69
Figura
6.3
Sugerencias
notación
NuevaEra
Procesar
Venta
Cajero
Muestre
actores
representan
sistemas
informáticos
notación
alternativa
actores
humanos
Actores
principales
izquierda
Actores
apoyo
derecha
diagrama
contexto
casos
limite
casos
casos
nivel
objetivos
usuario
actor
Servicio
Autorización
Pagos
clarificar
prefieren
destacar
actores
corresponden
siste-
informáticos
externos
notación
alternativa
ilustra
Figura
6.4
Figura6
.4
Notación
alternativa
actores
NuevaEra
Procesar
Venta
system
Servicio
Autorización
Pagos
actor
Servicio
Autorización
Pagos
alternativas
UML
representar
actores
externos
sistemas
informáticos
estilo
caja
clase
utilizar
actor
informático
humano
Utilizarlo
actores
informáticos
proporciona
distinción
visual
Servicio
Autorización
PagosAdvertencia
exceso
diagramas
Reiteramos
importancia
trabajo
casos
escribir
texto
dia-
gramas
centrarse
relaciones
casos
organización
dedica
horas
trabajando
diagramas
casos
debatiendo
relaciones
casos
lugar
centrarse
escribir
texto
desaprove-
chado
esfuerzo
6.14
Requisitos
contexto
listas
características
nivel
queda
impl
ícito
ítulo
libro
Uses
ases
Req
uirements
in
ontext
GK00
motivación
clave
idea
caso
considerar
organizar
re-
quisitos
contexto
objetivos
escenarios
sistema
mejora
cohesión
comprensión
casos
únicos
artefactos
requisitos
necesarios
requisitos
funcionales
reglas
dominio
contexto
elementos
difíciles
ubicar
capturan
Especificación
Complementaria
describirá
capítulo
idea
casos
sustituir
listas
características
ni-
vel
típicas
métodos
requisitos
tradicionales
casos
excepciones
listas
tendían
normalmente
agrupadas
áreas
funcionales
70
UML
PATRONES
ID
Característica
CARAC1.9
Sistema
aceptará
entradas
identificadores
artículos
CARAC2.4
Sistema
registrará
pagos
crédito
sistema
cuentas
cobrar
tales
listas
detalladas
características
nivel
aprovechar
lista
completa
recoge
media
página
probable
ocu-
pe
docenas
cientos
páginas
conduce
obstáculos
casos
ayudan
abordar
incluyen
Listas
funciones
largas
detalladas
relacionan
requisitos
contexto
cohesivo
funciones
características
aparecen
progresivamente
lista
lavandería
inconexa
elementos
cambio
casos
sitúan
requisitos
contexto
historias
objetivos
sistema
utilizan
casos
listas
características
detalladas
duplicación
trabajo
volumen
escribir
leer
problemas
consistencia
sincronización
Sugerencia
Esfuércese
sustituir
listas
detalladas
características
nivel
casos
aceptables
listas
características
alto
nivel
sistema
típico
útil
resumir
funcionalidad
sistema
lista
características
alto
nivel
denominadas
características
sistema
documento
Visión
di-
ferencia
100
páginas
características
detalladas
nivel
lista
carac-
terísticas
sistema
tiende
incluir
docenas
elementos
lista
pro-
porciona
resumen
conciso
funcionalidad
sistema
independiente
vista
caso
ejemplo
Resumen
características
sistema
capturar
ventas
autorización
pago
crédito
débito
cheque
administración
sistema
usuarios
seguridad
tablas
códigos
cons-
tantes
etcétera
procesamiento
automático
ventas
conexión
fallan
componentes
externos
transacciones
tiempo
real
base
estándares
industriales
sistemas
terceras
partes
incluye
inventario
contabilidad
recursos
humanos
cálculo
impuestos
servicios
autorización
pagos
definición
ejecución
reglas
negocio
adaptadas
añadir
ejecución
puntos
típicos
fijados
escenarios
proceso
estudiará
capítulo
apropiadas
listas
características
detalladas
casos
encajan
realmente
aplicaciones
exigen
punto
vista
dirigido
características
ejemplo
servidores
aplicacio-
nes
productos
bases
datos
sistemas
middleware
back-end
necesitan
considerados
evolucionar
términos
características
Necesitamos
soporte
XML
versión
casos
ajustan
na-
tural
aplicaciones
necesitan
evolucionar
términos
fuer-
zas
mercado
6.15
casos
orientados
objetos
orientado
objetos
casos
realizando
análisis
orientado
objetos
escribe
casos
defecto
aclaración
casos
constituyen
herramienta
an
álisis
requisitos
am-
pliamente
aplicable
utilizar
proyectos
orientados
objetos
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
71incrementa
utilidad
método
requisitos
estudiaremos
casos
entrada
fundamental
actividades
clásicas
DOO
6.16
Casos
UP
casos
vitales
centrales
UP
fomentan
desarrollo
dirigido
casos
implica
requisitos
recogen
principalmente
casos
Modelo
Casos
técnicas
requisitos
listas
funciones
secundarias
utilizan
casos
importante
planificación
iterativa
trabajo
iteración
define
eligiendo
escenarios
caso
casos
completos
casos
entrada
clave
estimaciones
realizaciones
casos
dirigen
diseño
equipo
diseña
objetos
subsistemas
colaboran
ejecutar
casos
casos
influyen
organización
manuales
usuario
UP
diferencia
casos
sistema
negocio
casos
sistema
estudiado
capítulo
Procesar
Venta
crean
disciplina
Requisitos
forman
Modelo
Casos
casos
negocio
escriben
meno
frecuencia
crean
disciplina
Modelado
Negocio
esfuerzo
reingeniería
procesos
negocio
escala
ayudar
entender
contexto
nue-
vo
sistema
negocio
Describen
secuencia
acciones
negocio
cumplir
objetivo
actor
negocio
actor
entorno
ne
gocio
cliente
proveedor
ejemplo
restaurante
caso
negocio
Servir
Comida
Casos
especificación
requisitos
iteraciones
sección
reitera
idea
clave
UP
desarrollo
iterativo
medir
tiempo
ni-
vel
esfuerzo
especificación
requisitos
iteraciones
Tabla
6.1
presenta
muestra
receta
estrategia
UP
desa-
rrollar
requisitos
Nótese
equipo
écnico
comienza
struyendo
fundamentos
pro
ducción
sistema
detallado
10%
requisitos
retra
sa
deliberada
continuaci
ón
trabajo
requi
sitos
concertados
iteración
elaboración
diferencia
clave
proceso
iterativo
proceso
cascada
de-
sarrollo
calidad
producci
ón
fundamentos
sistema
comienza
ápida-
mente
requisitos
Obsérvese
cerca
iteración
elaboración
segun-
do
taller
requisitos
30%
casos
escriben
72
UML
PATRONESdetalle
análisis
requisitos
escalonado
beneficia
retroalimentación
par-
tir
construcción
núcleo
software
retroalimentación
incluye
evaluación
usuario
pruebas
conocimiento
conocemos
mejorado
acto
construir
software
rápidamente
surjan
suposiciones
pre-
guntas
necesitan
aclararse
Momento
creación
artefactos
UP
Tabla
6.2
muestra
artefactos
UP
ejemplo
planificación
momentos
comienzo
refinamiento
Modelo
Casos
comienza
fase
inicio
10%
casos
escritos
detalle
mayoría
escriben
incrementalmente
iteraciones
fase
ela-
boración
elaboración
escrito
cuerpo
casos
detallados
requisitos
Especificación
Complementaria
proporcio-
nando
base
realista
estimación
precisa
proyecto
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
73
Requisitos
Modelo
Casos
Diseño
Modelo
Diseño
Implementación
Modelo
Implementar
Implementación
código
etc.
Gestión
Plan
Proyecto
Desarrollo
SW
taller
requisitos
iden-
tifican
nom-
bre
mayoría
casos
resumen
párrafo
10%
escribe
detalle
Estimación
imprecisa
es-
fuerzo
Cerca
iteración
tie-
ne
lugar
taller
requisitos
obtiene
entendi-
miento
retroali-
mentación
trabajo
im-
plementación
en-
tonces
comple-
ta
30%
casos
detalle
Diseño
pe-
queño
conjunto
requisitos
alto
riesgo
significati-
vos
pun-
to
vista
ar-
quitectura
estimación
co-
mienza
tomar
forma
Cerca
iteración
tie-
ne
lugar
taller
requisitos
obtie-
ne
com-
prensión
retroali-
mentación
trabajo
im-
plementación
en-
tonces
comple-
ta
50%
casos
detalle
Repetir
Repetir
cons-
truye
5%
sis-
tema
Repetir
com-
pleta
70%
to-
casos
detalle
Repetir
Repetir
cons-
truye
10%
sistema
Repetir
in-
tención
clarifi-
car
escribir
detalle
80-
90%
casos
pequeña
construyen
duran-
elaboración
resto
aborda
cons-
trucción
Repetir
Deberían
estabilizarse
aspectos
alto
riesgo
signifi-
cativos
ar-
quitectura
Repetir
cons-
truye
15%
sistema
establecer
racio-
nalmente
dura-
ción
global
pro-
yecto
hitos
importantes
estimación
coste
esfuerzo
Tabla
6.1
Muestra
esfuerzo
requisitos
primeras
iteraciones
receta
Disciplina
Artefacto
Comentarios
nivel
esfuerzo
requisitos
Inicio
Elab
Elab
Elab
Elab
semana
semanas
semanas
semanas
semanasCasos
fase
inicio
discusión
detalla
información
presentada
Tabla
6.1
casos
escriben
formato
completo
fase
inicio
suponga
cabo
taller
requi
sitos
do
co
mienzo
estudio
NuevaEra
dedica
identificar
ob-
jetivos
personal
involucrado
especular
queda
al-
cance
proyecto
escribe
tabla
casos
actor-objetivo
presenta
proyector
ordenador
inicia
diagrama
contexto
casos
horas
identifican
20
objetivos
usuario
casos
nivel
usuario
incluye
Procesar
Venta
Gestionar
Devoluciones
etcétera
mayoría
casos
interesantes
complejos
arriesgados
escriben
for-
mato
scrito
duraci
ón
media
do
minutos
equipo
co
mienza
formarse
esquema
alto
nivel
funcionalidad
sistema
10%
20%
casos
representan
fun-
ciones
complejas
principales
especialmente
arriesgadas
dimensión
scriben
formato
completo
equipo
inve
stiga
ás
profundidad
entender
magnitud
complejidad
demonios
ocultos
proyecto
tra-
vés
pequeña
muestra
casos
interesantes
implicar
casos
Procesar
Venta
Gestionar
Devoluciones
utiliza
herramienta
gestión
requisitos
integrada
procesador
texto
scritura
trabajo
muestra
proyector
mientra
equipo
colabora
análisis
escritura
escriben
listas
Intereses
Personal
Involucrado
casos
descubrir
requisitos
refinados
costosos
funcionales
funcionales
cualidades
sistema
claves
fia-
bilidad
rendimiento
74
UML
PATRONES
Tabla
6.2
Muestra
artefactos
UP
evolución
temporal
comenzar
refinar
Disciplina
Artefacto
Inicio
Elab
Const
Trans
Iteración
/p59I1
E1
C1
Cn
T1
T2
Modelado
Negocio
Modelo
Dominio
Requisitos
Modelo
Casos
cr
Visión
Especificación
Complementaria
cr
Glosario
Diseño
Modelo
Diseño
Documento
Arquitectura
SW
Modelo
Datos
Implementación
Modelo
Implementación
Gestión
Proyecto
Plan
Desarrollo
SW
Pruebas
Modelo
Pruebas
Entorno
Marco
Desarrollo
rEl
objetivo
an
álisis
completar
ca
sos
so
exhau
stiva
dedicar
horas
comprenderlos
promotor
proyecto
nece
sita
decidir
merece
pena
studio
profundo
fase
elaboración
intención
trabajo
inicio
es-
tudio
adquirir
idea
fidelidad
claramente
propensa
errores
acerca
alcance
riesgo
esfuerzo
viabilidad
técnica
análisis
negocio
avan-
zar
comenzar
parar
fase
inicio
proyecto
NuevaEra
duró
combinación
taller
requisitos
análisis
casos
estudios
du-
rante
semana
condujeron
tomar
decisión
continuar
fase
elaboración
sistema
Casos
elaboración
discusión
detalla
información
presentada
Tabla
6.1
fase
múltiples
iteraciones
duración
fija
ejemplo
ite-
raciones
construyen
incrementalmente
partes
sistema
arriesgadas
alto
valor
significativas
punto
vista
arquitectura
identifican
cla-
rifican
mayoría
requisitos
retroalimentación
pasos
concretos
programación
influye
informa
conocimiento
requisitos
equipo
refina
iterativa
adaptable
aborda
taller
requisitos
iteración
talleres
estudian
ca-
sos
taller
priorizan
talleres
centran
subconjunto
casos
importantes
taller
requisitos
momento
adaptar
refinar
vi-
sión
requisitos
principales
inestables
primeras
iteraciones
irán
estabilizando
interacci
ón
iterativa
descubri-
miento
requisitos
construcción
partes
software
taller
requisitos
refinan
objetivos
usuario
lista
casos
escriben
reescriben
mayoría
casos
formato
completo
elaboraci
ón
escriben
detalle
80
90%
casos
sistema
PDV
20
casos
nivel
objetivo
usuario
15
complejos
arriesgados
deberían
investigarse
escribirse
reescribirse
formato
completo
Nótese
elaboración
conlleva
programar
partes
sistema
eta-
pa
equipo
NuevaEra
debería
definición
casos
software
ejecutable
calidad
Casos
construcción
etapa
construcción
compuesta
iteraciones
duración
fija
ejemplo
20
iteraciones
semanas
centra
completar
sistema
principales
cuestiones
arriesgadas
inestables
establecido
elaboración
lugar
escritura
casos
menores
talleres
requisitos
MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
75pero
elaboración
etapa
mayoría
requisitos
funcionales
funcionales
principales
deberían
haberse
estabilizado
ma-
nera
iterativa
adaptable
intención
entender
requisitos
con-
gelan
estudio
termina
grado
cambio
menor
6.17
Caso
estudio
casos
fase
inicio
NuevaEra
descrito
sección
casos
escriben
formato
completo
fase
inicio
Modelo
Casos
fase
caso
estudio
detallarse
76
UML
PATRONES
Completo
Informal
Procesar
Venta
Procesar
Alquiler
Abrir
Caja
Gestionar
Devoluciones
Analizar
Actividad
Ventas
Cerrar
Caja
Gestionar
Seguridad
Gestionar
Usuarios
Marcha
Suspender
Operación
Gestionar
Tablas
Sistema
6.18
Lecturas
adicionales
guía
casos
éxito
traducida
idiomas
Writing
Effective
Use
Cases
Cockburn01]8
razones
convertido
libro
casos
ampliamente
leído
seguido
recomienda
referencia
fun-
damental
capítulo
basa
consistente
contenido
Sugerencia
re-
chace
libro
consecuencia
iconos
niveles
casos
autores
énfasis
niveles
taxonomía
casos
iconos
opcionales
importantes
debate
acer-
ca
niveles
objetivos
parecer
principio
distrae
atención
casos
trabajado
tiempo
estiman
nivel
alcance
casos
cuestiones
prácticas
claves
in-
comprensión
fuente
típica
complicaciones
modelado
casos
Structuring
Use
Cases
with
Goals
Cockburn97
artículo
casos
citado
disponible
on-line
www.usecases.org
Use
Cases
Requirements
in
Context
GK00
texto
útil
Destaca
importante
punto
vista
establece
título
casos
únicamente
Nótese
Cockburn
rima
slow
burn
N.
T.
comunicación
personal
autor
comen-
tado
introdujo
aclaración
petición
A.
Cockburn
señalar
apellido
pronuncia
cock-burn
evitar
chistes
connotación
sexual.)MODELO
CASOS
ESCRITURA
REQUISITOS
CONTEXTO
77
Figura
6.5
Muestra
influencia
artefactos
UP
Visión
Especificación
Complementaria
Doc
Arquitectura
Software
Glosario
Modelo
Dominio
Requisitos
Gestión
Proyecto
Modelado
Negocio
Diseño
Muestra
artefactos
UP
Artefactos
parciales
refinados
iteración
Pruebas
Plan
Pruebas
Plan
Desarrollo
Software
Modelo
Diseño
Modelo
Casos
Entorno
Marco
Desarrollo
requisitos
restriccionesrequisitos
requisitos
eventos
requisitos
prioridades
requisitos
escenarios
claves
términos
atributos
validación
términos
atributos
relaciones
pruebas
aceptación
artefacto
requisitos
constituyen
vehículo
central
dirige
tra-
requisitos
información
lectura
merece
pena
destacar
Applying
Use
Cases
Practical
Guide
SW98
escrita
profe
sor
experto
ca
sos
so
entiende
comunica
aplicar
casos
ciclo
vida
iterativo
6.19
Artefactos
UP
contexto
proceso
ilustra
Figura
6.5
casos
influyen
artefactos
UP.78
UML
PATRONES
Figura
6.6
Proceso
establecimiento
contexto
Enero
Febrero
Caso
Capturar
Venta
Escenario
principal
éxito
fase
inicio
intente
definir
refinar
requisitos
iteraciones
elaboración
taller
requisitos
incluyendo
usuarios
finales
desarrolladores
jugarán
rol
especificadores
requisitos
ayudando
escribir
casos
Liderados
analista
sistema
responsable
definición
requisitos
Herramientas
Software
texto
casos
utilice
herramienta
web
requisitos
integrada
procesador
texto
conocido
diagramas
casos
herramienta
CASE
UML
Establezca
enlaces
casos
preséntelos
sitio
web
proyecto
Desarrollador
Cliente
Arquitecto
SoftwareUsuario
proyecciones
adyacentes
Analista
Sistema
Extensiones
Caso
Gestionar
Devoluciones
Escenario
principal
éxito
Extensiones
Hardware
Utilice
proyectos
acoplados
tarjetas
vídeo
dual
establezca
ancho
pantalla
doble
mejorar
espaciosidad
área
dibujo
mostrar
ventanas
procesadores
texto
adyacentes
UP
trabajo
casos
actividad
disciplina
requisitos
inicializarse
taller
requisitos
Figura
6.6
presenta
consejos
acerca
momento
lugar
cabo
trabajo
Objetivos
•E
cribir
Especificación
Complementaria
Glosario
Visión
Comparar
contrastar
características
sistema
casos
Relacionar
Visión
artefactos
desarrollo
iterativo
Definir
atributos
calidad
Introducción
suficiente
escribir
casos
tipos
requisitos
necesa-
rios
identificar
relacionados
documentaci
ón
empaquetado
soporte
li-
cencia
etcétera
recogen
Especificación
Complementaria
Glosario
almacena
términos
definiciones
jugar
rol
dic-
cionario
datos
Visión
resume
visión
proyecto
Sirve
comunicar
concisa
ideas
acerca
qu
propuso
proyecto
problemas
personas
involucradas
necesitan
apariencia
solución
propuesta
Capítulo
IDENTIFICACIÓN
REQUISITOS
ideas
fallan
palabras
vienen
Johann
Wolfgang
von
GoetheCitando
literalmente
Visión
define
vista
personas
involucradas
producto
desarrollar
especificada
términos
necesidades
características
cla-
ves
dichas
personas
contener
esquema
principales
requisitos
pre-
vistos
proporciona
base
contractual
requisitos
técnicos
detallados
RUP
7.1
Ejemplos
PDV
NuevaEra
objetivo
siguientes
ejemplos
presentar
exhaustiva
Visión
Glosario
Especificación
Complementaria
secciones
útiles
proyecto
relevantes
objetivos
aprendizaje1
finali-
dad
libro
principales
técnicas
diseño
objetos
análisis
requisitos
casos
análisis
orientado
objetos
problemas
PDV
sentencias
Visión
referencia
brevemente
secciones
esta-
blecer
conexiones
trabajo
previo
futuro
destacar
cuestiones
mere-
cen
pena
proporcionar
idea
contenido
avanzar
rápidamente
7.2
Ejemplo
NuevaEra
Especificación
Complementaria
Parcial
Especificación
Complementaria
Historia
revisiones
80
UML
PATRONES
Introducción
documento
repositorio
requisitos
PDV
NuevaEra
cap-
turan
casos
Funcionalidad
Funcionalidad
común
casos
Registro
gestión
errores
Registrar
errores
almacenamiento
persistente
crecimiento
gradual
alcance
problema
requisitos
escritura
re-
quisitos
Versión
Fecha
Descripción
Autor
Borrador
Inicio
10
Enero
2031
borrador
refinarse
prin-
Craig
Larman
cipalmente
elaboración
Reglas
negocio
conectables
puntos
escenarios
casos
pendientes
definidos
so-
portar
capacidad
adaptar
funcionalidad
sistema
conjunto
arbitrario
re-
glas
ejecutan
punto
evento
Seguridad
requiere
autenticación
usuarios
Facilidad
Factores
humanos
cliente
capaz
información
monitor
PDV
texto
fácilmente
distancia
metro
Evitar
colores
asociados
formas
comunes
daltonismo
Velocidad
comodidad
procesamiento
libre
errores
importante
proce-
samiento
ventas
comprador
desea
irse
rápidamente
perciben
experiencia
compra
vendedor
positiva
cajero
mirando
cliente
artículos
pantalla
ordenador
comunicar
señales
avisos
sonidos
lugar
grá-
ficos
Fiabilidad
Capacidad
recuperación
produce
fallo
servicio
externo
autorización
pago
sistema
con-
tabilidad
intentar
solucionarlo
solución
local
ej.
almacenar
remitir
obs-
tante
completar
venta
necesita
análisis
Rendimiento
factores
humanos
compradores
quieren
completar
proceso
ventas
rápido
cuello
botella
potencial
autorización
pagos
externa
objetivo
autorización
minuto
90%
Soporte
Adaptabilidad
clientes
PDV
NuevaEra
necesidades
procesamiento
reglas
negocio
únicas
procesamiento
vena
puntos
definidos
escenario
ejemplo
inicia
venta
añade
línea
venta
habilitarán
reglas
negocio
conectables
Facilidad
cambiar
configuración
Clientes
desean
varíe
configuración
red
sistemas
PDV
clientes
gruesos
versus
delgados
capas
versus
N-capas
etcétera
desean
cambiar
configuraciones
reflejar
cambios
negocio
necesidades
rendimiento
sistema
configurable
reflejar
necesidades
necesita
análisis
área
descubrir
áreas
grado
flexibilidad
esfuerzo
conseguirla
IDENTIFICACIÓN
REQUISITOS
81Restricciones
Implementación
dirección
NuevaEra
insiste
solución
utilizando
tecnologías
Java
previendo
mejorará
plazo
portabilidad
soporte
facilitar
desarrollo
Componentes
adquiridos
sistema
cálculo
impuestos
soportar
sistemas
cálculo
conectables
di-
ferentes
países
Componentes
libre
distribución
general
recomendamos
maximizar
componentes
Java
libre
distribución
proyecto
prematuro
diseñar
elegir
componentes
definitiva
sugerimos
siguientes
candidatos
posibles
Framework
registros
JLog
Interfaces
Interfaces
hardware
destacables
Monitor
pantalla
táctil
detectado
sistema
operativo
monitor
corriente
movimientos
contacto
eventos
ratón
Escáner
láser
código
barras
normalmente
unido
teclado
especial
softwa-
re
entradas
escaneadas
entradas
teclado
Impresora
recibos
Lector
tarjetas
crédito
débito
Lector
firmas
versión
Interfaces
software
mayoría
sistema
colaboración
externos
calculador
impuestos
conta-
bilidad
inventario
necesitamos
capaces
conectar
diversos
sistemas
diversas
interfaces
Reglas
dominio
negocio
82
UML
PATRONES
REGLA1
requiere
firma
continuará
solicitando
firma
política
pagos
crédito
compradores
prácticamente
años
mayoría
clientes
compañías
solicitarán
firma
aparato
autorización
captura
digital
años
crédito
esperamos
demande
firma
digital
única
soporta-
ley
americana
REGLA2
Reglas
Alto
ley
impuestos
ley
impuestos
cambia
anualmente
añadir
impuesto
niveles
gobierno
ID
Regla
Grado
variación
Fuente
continúaCuestiones
legales
Recomendamos
componentes
libre
distribución
restricciones
licencia
resolver
permitir
reventa
artículos
incluyen
software
libre
distribución
reglas
impuestos
aplicar
ley
ventas
Nótese
cambiar
frecuencia
Información
dominios
interés
Fijación
precios
reglas
fijación
precios
describen
sección
reglas
do-
minio
observe
artículos
precio
original
opcionalmente
precio
reba-
jado
precio
artículos
descuentos
adicionales
precio
rebajado
organizaciones
mantienen
precio
original
precio
rebajado
razones
contabilidad
impuestos
IDENTIFICACIÓN
REQUISITOS
83
ID
Regla
Grado
variación
Fuente
ventas
estatutos
gobierno
detalles
actuales
REGLA3
devoluciones
pa-
Política
com-
gos
crédito
pañía
auto-
efectuarse
crédito
rización
crédito
cuentas
crédito
compradores
efectivo
REGLA4
Reglas
descuento
Alto
tienda
utiliza
Política
tienda
comprador
Ejemplo
reglas
Empleado
20%
Clientes
preferentes
10%
Antiguos
15%
REGLA5
Reglas
descuento
Alto
tienda
utiliza
Política
tienda
venta
nivel
transacción)reglas
distintas
aplica
cambiar
diariamente
impuestos
ejemplo
hora
10%
descuento
100
5%
descuento
lunes
10%
descuento
ventas
10
am
pm
50%
descuento
Tofu
am
10
am
REGLA6
Reglas
descuento
Alto
tienda
utiliza
Política
tienda
artículo
nivel
línea
reglas
distintas
venta
Ejemplo
cambiar
diariamente
10%
descuento
hora
tractores
semana
Comprando
hamburguesas
vegetales
llévese
gratis
Gestión
pagos
crédito
débito
servicio
autorización
pagos
aprueba
pago
electrónico
crédito
dé-
bito
responsables
pago
vendedor
comprador
consecuencia
pago
vendedor
necesita
registrar
suma
dinero
cuentas
servicio
autorización
Normalmente
noches
servicio
autorización
llevará
cabo
transferencia
electrónica
fondos
vendedores
suma
dinero
pequeño
cargo
transacción
cobra
servicio
Impuesto
ventas
cálculos
impuestos
ventas
complejos
cambiar
regularmente
respuesta
legislación
niveles
gobierno
aconsejable
delegar
cálculo
software
terceras
partes
disponi-
bles
impuestos
deber
ciudad
gobierno
regional
agencias
naciona-
artículos
exentos
impuestos
requisitos
exentos
depen-
diendo
comprador
receptor
objetivo
ejemplo
granjero
niño
Identificadores
artículos
UPCs
EANs
SKUs
código
barras
lectores
códi-
gos
barras
PDV
NuevaEra
necesita
soporte
esquemas
identificador
artículos
UPCs
Códigos
Producto
Universales
Universal
Product
Codes
EANs
Numeración
Artículos
Europea
European
Article
Numbering
SKUs
Unidades
Mantenimiento
Stock
Stock
Keeping
Units
tipos
comunes
sistemas
identificación
ar-
tículos
venden
Número
Artículo
Japonés
JANs
Japanese
Article
Number)e
tipo
versión
EAN
SKUs
identificadores
completamente
arbitrarios
definidos
vendedor
UPCs
EANs
componente
estándar
normativo
Diríjase
www.adams1.com/pub/russadam/upccode.html
obtener
visión
general
Tam-
bién
www.uc-council.org
www.ean-int.org
7.3
Comentario
Especificación
Complementaria
Especificación
Complementaria
captura
requisitos
información
restriccio-
nes
recogen
fácilmente
casos
Glosario
comprende
atributos
requisitos
calidad
URPS
H11001
sistema
Fíjese
requisitos
específicos
caso
probablemente
escribirse
lu-
gar
caso
sección
Requisitos
Especiales
prefieren
tam-
bién
reunirlos
Especificación
Complementaria
elementos
Especificación
Complementaria
comprender
Requisitos
FURPS
H11001—funcionalidad
facilidad
fiabilidad
rendimiento
soporte
Informes
Restricciones
software
hardware
sistemas
operativos
red
Restricciones
desarrollo
ejemplo
herramientas
proceso
desarrollo
restricciones
diseño
implementación
84
UML
PATRONES•
Cuestiones
internacionalización
unidades
idiomas
Documentación
usuario
instalación
administración
ayuda
Licencia
cuestiones
legales
•E
mpaquetado
•E
tándares
técnico
seguridad
calidad
Cuestiones
entorno
físico
ejemplo
calor
vibración
Cuestiones
operacionales
ejemplo
gestionan
errores
frecuencia
copias
seguridad
Reglas
dominio
negocio
Información
dominios
interés
ejemplo
ciclo
completo
gestión
pagos
crédito
restricciones
comportamientos
tipo
restricciones
diseño
proyecto
requisitos
denominan
comúnmente
restricciones
remarcar
influencia
restrictiva
ejemplo
utilizar
Oracle
contrato
licencia
funcionar
Linux
disminuirá
coste
Sugerencia
decisiones
restricciones
diseño
tempranas
elaboración
prematura
mala
idea
merece
pena
desconfiar
cuestionarlas
especialmen-
fase
inicio
analizado
cuidado
res-
tricciones
imponen
causas
inevitables
restricciones
legales
interfaz
sistema
externo
existente
invocar
Atributos
calidad
requisitos
denominan
atributos
calidad
BCK98
-ilities
sis-
tema
incluyen
facilidad
usability
fiabilidad
reliability
etcétera
Nóte-
refieren
cualidades
sistema
requisitos
necesariamente
calidad
alta
palabra
sobrecargada
inglés
ejemplo
cualidad
so-
porte
supportability
elegirse
deliberadamente
fuese
baja
producto
pretende
sirva
plazo
tipos
Ob
servables
ejecución
funcionalidad
facilidad
fiabilidad
rendi-
miento
etc.
ob
servables
ejecución
soporte
pruebas
etc.
funcionalidad
especifica
casos
atributos
calidad
relacionados
casos
específicos
ejemplo
cualidades
rendimiento
caso
Procesar
Venta
IDENTIFICACIÓN
REQUISITOS
85Otros
atributos
calidad
FURPS+
sistema
describen
Especificación
Complementaria
funcionalidad
atributo
calidad
álido
común
tér-
mino
atributo
calidad
refiere
cualidades
sistema
funcionalidad
libro
término
utiliza
exacta-
mente
requisitos
funcionales
término
amplio
in-
cluye
funcionalidad
ejemplo
empaquetado
licencia
ponemos
gorro
arquitecto
atributos
calidad
sistema
Especificación
Complementaria
recogen
es-
pecialmente
interesantes
veremo
Capítulo
32
análisis
diseño
arquitectura
medida
identificaci
ón
resolu-
ción
atributos
calidad
contexto
requisitos
funcionales
ejem-
plo
suponga
atributos
calidad
sistema
NuevaEra
tolerante
fallos
fallen
servicios
remotos
punto
vista
arquitectura
influencia
global
decisiones
diseño
escala
atributos
calidad
interdependencias
implica
compromi-
sos
ejemplo
sencillo
PDV
fiable
tolerante
fallos
fácil
probar
opuestos
puesto
formas
sutiles
fallar
sistema
distribuido
Reglas
dominio
negocio
reglas
dominio
Ross97
GK00
dictan
operar
do-
minio
negocio
requisitos
aplicaci
ón
re-
quisitos
aplicación
ven
afectados
reglas
dominio
políticas
compañía
leyes
físicas
leyes
gubernamentales
reglas
dominio
típicas
denominan
comúnmente
reglas
negocio
tipo
común
término
limitado
aplicaciones
software
gestión
negocio
simulación
clima
logística
militar
simulación
clima
incluye
reglas
dominio
relacionadas
leyes
relaciones
físicas
afectan
re-
quisitos
aplicación
frecuencia
re
sulta
útil
identificar
regi
strar
reglas
dominio
afectan
requisitos
normalmente
materializados
casos
clarificar
contenido
caso
ambiguo
incompleto
ejemplo
PDV
NuevaEra
alguien
pregunta
caso
Procesar
Venta
debería
escribirse
alternativa
pagos
crédito
necesite
captura
firma
regla
negocio
REGLA1
aclara
permitirá
compañía
auto-
rización
crédito
Advertencia
reglas
requisitos
aplicación
registre
características
sistema
reglas
reglas
describen
restricciones
comportamientos
tra-
bajar
dominio
aplicación
86
UML
PATRONESInformación
dominios
interés
expertos
dominio
estudiando
resulta
útil
escribir
proporcionar
URLs
explicaciones
dominios
relacionados
sistema
software
venta
contabilidad
geof
ísica
flujo
subterráneos
petr
óleo/
agua
gas
presentar
contexto
ayudar
comprensión
equipo
desarrollo
contener
referencias
importantes
expertos
literatura
fórmulas
leyes
referencias
ejemplo
misterios
esquemas
codificaci
ón
UPC
EAN
interpretación
código
barras
entender
me-
dida
equipo
NuevaEra
7.4
Ejemplo
NuevaEra
Visión
Parcial
Visión
Historia
revisiones
IDENTIFICACIÓN
REQUISITOS
87
Borrador
Inicio
10
Enero
2031
borrador
refinarse
Craig
Larman
principalmente
elaboración
Versión
Fecha
Descripción
Autor
Introducción
Prevemos
aplicación
punto
venta
PDV
tolerante
fallos
próxima
generación
PDV
NuevaEra
flexibilidad
soportar
variación
reglas
negocio
cliente
múltiples
mecanismos
terminal
interfaz
usuario
integración
múltiples
sistemas
terceras
partes
Orientación
Oportunidad
negocio
productos
PDV
existentes
adaptables
negocio
cliente
términos
per-
mitir
variar
reglas
negocio
diseños
red
ejemplo
cliente
delgado
ar-
quitectura
capas
permiten
extensión
adecuada
incrementan
terminales
crece
negocio
permite
trabajar
línea
desconectados
adaptándose
dinámicamente
dependiendo
fallos
inte-
gra
fácilmente
sistemas
terceras
partes
admite
tecnologías
PDAs
móviles
mercado
siente
insatisfecho
inflexible
cosas
demandan
PDV
rectifique
situación
Enunciado
problema
sistemas
PDV
tradicionales
inflexibles
intolerantes
fallos
difíciles
integrar
sistemas
terceras
partes
lugar
problemas
oportuno
procesamiento
ventas
establecimiento
procesos
mejorados
concuerdan
software
datos
contabilidad
inventario
precisos
oportunos
soporte
planifi-
cación
medidas
cuestiones
afecta
cajeros
encargados
almacén
administradores
sistema
gestión
empresarial
análisis
ejemplo
ilustrativo
ficticioEnunciado
posición
mercado
producto
Resumen
conciso
dirigido
producto
características
relevantes
diferencia
competencia
Alternativas
competencia
Descripción
personal
involucrado
Demografía
mercado
Resumen
personal
involucrado
usuarios
Resumen
Usuarios
Objetivos
alto
nivel
problemas
claves
personal
involucrado
taller
requisitos
expertos
materia
estudiando
personas
involucradas
encuestas
distribuidores
llevaron
siguientes
ob-
jetivos
problemas
claves
88
UML
PATRONES
Alta
Objetivo
alto
nivel
Prioridad
Problemas
inquietudes
Soluciones
actuales
Procesamiento
ventas
rápido
robusto
integrado
reduce
velocidad
incrementa
carga
Pérdida
capacidad
pro-
cesamiento
ventas
componentes
fallan
Carencia
información
actuali-
zada
precisa
contabilidad
sistemas
integrado
sistemas
contabilidad
inventario
RRHH
lugar
dificultades
medidas
planificación
Imposibilidad
adaptar
re-
glas
negocio
requisitos
negocio
únicos
Dificultad
añadir
tipos
terminales
interfaces
usuario
ejemplo
PDAs
mó-
viles
productos
PDV
existentes
permiten
procesamiento
básico
ventas
abordan
es-
tos
problemas
Entender
participantes
problemas
Reunir
entradas
Lista
Actor-
Objetivos
sección
casos
Intereses
personal
involucrado
Objetivos
nivel
usuario
usuarios
sistemas
externos
necesitan
sistema
satisfacer
objetivos
Cajero
procesar
ventas
gestionar
devoluciones
abrir
cerrar
caja
Administrador
sistema
gestionar
usuarios
gestionar
seguridad
gestionar
ta-
blas
sistema
Director
marcha
suspender
operación
Sistema
actividad
ventas
analizar
datos
ventas
Lista
Actor-
Objetivo
creada
modelado
casos
resumen
concisoEntorno
usuario
Visión
general
producto
Perspectiva
producto
PDV
NuevaEra
residirá
normalmente
tiendas
utilizan
terminales
móviles
en-
contrarán
red
tienda
interior
exterior
Proporcionará
ser-
vicios
usuario
colaborará
sistemas
indica
Figura
Visión-1
IDENTIFICACIÓN
REQUISITOS
89
Figura
Visión-1
Diagrama
contexto
sistema
PDV
NuevaEra
PDV
NuevaEra
Cajero
actor
Sistema
Actividad
Ventas
Administrador
Sistema
Encargado
Tienda
Invocar
servicios
Invocar
servicios
actor
Servicio
Autorización
Pagos
actor
Calculador
Impuestos
actor
Sistema
Contabilidad
actor
Sistema
Recursos
Humanos
actor
Sistema
Inventario
Resumen
beneficios
Característica
soportada
Beneficio
personal
involucrado
Funcionalmente
sistema
proporcionará
servicios
típicos
requiere
organización
ventas
incluyendo
entrada
ventas
autorización
pa-
gos
gestión
devoluciones
etcétera
Detección
fallos
automática
cambiando
procesamiento
local
conexión
servicios
estén
disponibles
Reglas
negocio
conectables
puntos
escenario
procesa-
miento
ventas
Transacciones
tiempo
real
sistemas
terceras
partes
proto-
colos
estándares
industriales
Servicios
punto
venta
rápidos
auto-
máticos
Procesamiento
ventas
continuado
cuan-
do
fallan
componentes
externos
Configuración
flexible
lógica
nego-
cio
Información
ventas
contabilidad
inven-
tario
oportuna
precisa
abordar
mediciones
planificación
Suposiciones
dependencias
Coste
fijación
precio
Licencia
instalación
Resumen
características
sistema
Entrada
ventas
Autorización
pagos
crédito
débito
cheque
Resumido
diagrama
casos
diagramas
aparecen
diversos
detalles
muestran
actores
externos
importantes
sistema
Similar
lista
Actor-Objetivo
tabla
relaciona
objetivos
beneficios
soluciones
nivel
alto
únicamente
relacionado
casos
Resume
valor
características
diferenciadoras
producto
presenta
abajo
características
sistema
constituyen
formato
conciso
resumir
funcionalidad•
Administración
sistema
usuarios
seguridad
código
tablas
constantes
etcétera
Procesamiento
automático
ventas
conexión
fallen
componentes
externos
Transacciones
tiempo
real
basadas
estándares
industriales
sistemas
terce-
ras
partes
incluye
servicios
inventario
contabilidad
recursos
humanos
cálcu-
impuestos
autorización
pagos
Definición
ejecución
reglas
negocio
conectables
puntos
comunes
fijos
escenarios
procesamiento
requisitos
restricciones
Abarca
restricciones
diseño
facilidad
fiabilidad
rendimiento
soporte
empa-
quetado
documentación
etcétera
Diríjase
Especificación
Complementaria
casos
7.5
Comentario
Visión
solucionando
problema
problema
correcto
enunciado
problema
trabajo
requi
sitos
fase
inicio
colaborar
definir
enunciado
problema
conciso
reducirá
posibilidad
personal
involucrado
esté
intentando
solucionar
problemas
ligeramente
normalmente
crea
rá-
pido
trabajo
revela
diferencias
opinión
fundamentales
partes
tratando
alternativa
simple
texto
formato
tabla
propue
sto
plantilla
RUP
enunciado
problema
90
UML
PATRONES
problema
afecta
impacto
solución
éxito
objetivos
alto
nivel
problemas
claves
personal
involucrado
tabla
resume
objetivos
problemas
nivel
alto
casos
nivel
tarea
muestra
importantes
objetivos
funcionales
calidad
pertenecer
caso
abarcar
tales
Necesitamos
procesamiento
ventas
tolerante
fallos
Necesitamos
capacidad
adaptar
reglas
negocio.¿Cuáles
problemas
objetivos
esenciales
típico
personal
involucrado
exprese
objetivos
base
soluciones
ima-
ginan
Necesitamos
programador
tiempo
completo
adapte
reglas
negocio
cambiemos
soluciones
inteligentes
comprenden
dominio
problema
opciones
per-
sonal
involucrado
llega
soluciones
apropiadas
tratan
problema
subyacente
importante
esencial
analista
sistema
necesita
estudiar
cadena
problema
obje-
tivos
presentó
cap
ítulo
objetivos
casos
aprender
problemas
subyacentes
importancia
impacto
relativo
priorizar
solucionar
cuestiones
relevantes
solución
inge-
niosa
Métodos
facilitar
idea
grupo
queda
alcance
discusión
especialmente
actividades
ta-
definición
problemas
alto
nivel
identificación
objetivos
lugar
trabajo
investigación
creativo
grupo
Presentamos
técnicas
útiles
ayu-
grupo
descubrimiento
problemas
objetivos
esenciales
ayudar
generación
ideas
priorización
mapas
mentales
diagramas
causa-efecto
fish-
bone
diagramas
pareto
tormenta
ideas
brainstorming
multivotación
votación
puntos
dot
voting
técnica
grupo
nominal
escribir
ideas
silencio
brainw-
riting
diagrama
afinidad
Estúdielos
web
Prefiero
aplicar
du-
rante
taller
descubrir
problemas
típicos
requisitos
distintos
án-
gulos
Características
sistema—requisitos
funcionales
casos
necesariamente
único
expresar
requisitos
fun-
cionales
siguientes
motivos
detallados
personal
involucrado
resumen
identifique
funciones
destacables
listamos
simplemente
nombres
casos
Procesar
Venta
Ges-
tionar
Devoluciones
resumir
funcionalidad
lista
extensa
nombres
ocultar
funcionalidad
in-
teresante
personal
involucrado
realmente
nivel
granularidad
oscurecer
funciones
importantes
ejemplo
suponga
descripción
funcionalidad
autorización
automática
pago
conte-
nida
caso
Procesar
Venta
lector
lista
nombres
casos
so
sistema
realizará
autorizaciones
pago
s.
desear
agrupar
conjunto
casos
característica
simplicidad
Administración
istema
ara
usuarios
seguridad
código
tablas
constantes
etcétera
IDENTIFICACIÓN
REQUISITOS
91•
funcionalidades
importantes
lógico
expresan
senten-
cias
cortas
corresponden
conveniente
nombres
casos
objetivos
nivel
Procesos
Negocio
Elementales
EBP
Po-
drían
abarcar
ortogonales
casos
ejemplo
taller
requisitos
NuevaEra
sistema
debería
ca-
paz
cabo
transacciones
sistemas
terceras
partes
contabilidad
inventario
cálculo
impuestos
sentencia
funcionalidad
re
presenta
caso
particular
cómoda
concisa
expresar
recoger
comunicar
características
variación
drástica
punto
aplica-
ciones
requieren
scripción
funcionalidad
caracte
rísticas
casos
ajustan
natural
común
ejemplo
productos
middleware
servidores
aplicaciones
casos
motivados
realmente
Suponga
equipo
con-
siderando
pr
óxima
versión
debate
requi
sitos
gente
marketing
dirá
versión
necesita
soportar
bean
en-
tidad
EJB2.0
requisitos
conciben
inicialmente
términos
lista
características
casos
alternativo
complementario
expresar
funciones
sis-
tema
características
om
ás
concretamente
contexto
caracte-
rísticas
sistema
sentencias
concisas
alto
nivel
re
sumen
fun-
ciones
sistema
formalmente
UP
característica
sistema
servicio
ob
servable
externamente
proporcionado
sistema
cumple
directa
mente
necesidad
personal
involucrado
Kruchten00
características
cosas
sistema
Deberían
pasar
test
lin-
güístico
sistema
deberá
característicaX
ejemplo
sistema
deberá
autorización
pago
Recordemos
Visión
utilizarse
contrato
formal
informal
desarrolladores
empresa
características
sistema
constituyen
meca-
nismo
resumir
contrato
sistema
hará
complementario
casos
características
concisas
características
contrastarse
tipos
requisitos
funcio-
nales
restricciones
ejemplo
sistema
ejecutarse
Linux
disponibilidad
24/7
interfaz
pantalla
táctil”
ótese
falla
test
lingüístico
propiedad
servicio
observable
externamente
difícil
resolver
ejemplo
debería
característica
sistema
sistema
hará
transacciones
sistemas
terceras
partes
contabili-
dad
inventario
recursos
humanos
cálculo
impuestos
92
UML
PATRONESSe
tipo
comportamiento
probablemente
interés
personal
involucrado
colaboración
visible
externamente
de-
pendiendo
margen
tiempo
cerca
esté
mire
Téngalo
rara
merece
pena
preocupe
cue
stiones
cla
sificación
granularidad
observar
mayoría
características
sistema
ex-
presarán
detallada
texto
casos
Notación
organización
importantes
descripciones
breves
alto
nivel
debería
capaz
leer
lista
características
sistema
rápidamente
necesario
incluir
frase
canónica
sistema
deberá
frase
va-
riante
normal
continuación
presentamos
ejemplo
características
alto
nivel
pro-
yecto
multi-sistema
amplio
PDV
elemento
características
principales
incluyen
Servicios
PDV
Gestión
inventario
Compras
basadas
web
habitual
organizar
jerarquía
niveles
características
sistema
documento
Visión
niveles
llevaría
detalle
excesivo
sen-
tido
características
sistema
Visión
resumir
funcionalidad
des-
componerla
larga
li
sta
elemento
grano
fino
ejemplo
razonable
detalle
características
principales
incluyen
Servicios
PDV
Capturar
ventas
Autorización
pago
Gestión
inventario
Reordenación
automática
características
nivel
básicamente
equivalentes
nombres
casos
objetivos
nivel
suario
impres-
cindible
características
alternativo
resumir
funcionalidad
obstante
mayoría
características
sistema
expresarán
detallada
texto
casos
características
sistema
debería
contener
Visión
IDENTIFICACIÓN
REQUISITOS
93Sugerencia
deseable
documento
Visión
50
características
con-
sidere
posibilidad
agrupar
abstraer
características
requisitos
Visión
Visión
características
sistema
resumen
brevemente
requisitos
funcionales
expresan
detalle
casos
Visión
resumir
requisitos
ejemplo
fiabilidad
facilidad
detallan
sección
Requisitos
Especiales
casos
Especificación
Complementaria
SS
Supplementary
Specification
peligro
duplicacione
inútiles
ejemplo
producto
RUP
proporciona
plantillas
Visión
SS
contienen
sec-
ciones
idénticas
similares
requisitos
facilidad
fiabilidad
rendi-
miento
etcétera
duplicación
inevitablemente
difícil
mantener
nivel
detalle
secciones
similares
ejemplo
rendimiento
Visión
SS
necesita
parecido
sentido
descripciones
re-
quisitos
detalladas
esenciales
tienden
prácticamente
iguales
Sugerencia
requisitos
evite
duplicación
incluyéndolo
forma
idéntica
idéntica
Visión
Especificación
Complementaria
SS
casos
recójalos
SS
casos
específicos
casos
Visión
dirija
lector
secciones
encontrar
requisitos
Visión
características
casos
uso—¿qué
útil
estricto
orden
artefactos
colaboraci
ón
crear
artefactos
requisitos
produce
sinergia
trabajo
influye
ayuda
clarificar
secuencia
recomendada
Escribir
borrador
Visión
Identificar
objetivos
usuario
casos
apoyo
Escribir
casos
comenzar
Especificación
Complementaria
Refinar
Vi
sión
resumiendo
información
7.6
Ejemplo
NuevaEra
Glosario
Parcial
Glosario
Historia
revisiones
94
UML
PATRONES
Borrador
10
Enero
2031
borrador
refinarse
principal-
Craig
Larman
Inicio
mente
elaboración
Versión
Fecha
Descripción
AutorDefiniciones
IDENTIFICACIÓN
REQUISITOS
95
artículo
artículo
servicio
venta
autorización
Validación
llevada
cabo
servicio
externo
pago
autorización
pago
hará
garantizará
pago
vendedor
solicitud
compuesto
elementos
enviados
electrónicamente
autorización
servicio
autorización
normalmente
array
pago
caracteres
elementos
comprenden
ID
tienda
número
cliente
cantidad
fecha
UPC
Código
12
dígitos
identifica
artículo
Normalmente
Código
representa
código
barras
artículos
Producto
Diríjase
http://www.uc-council.org
detalles
Universal
Término
Definición
Información
Alias
7.7
Comentario
Glosario
Diccionario
Datos
forma
simple
Glosario
lista
términos
relevantes
defi-
niciones
sorprendentemente
habitual
término
frecuentemente
técnico
pro-
pio
dominio
utilice
forma
ligeramente
di
stinta
personas
invo-
lucradas
re
solverse
reducir
problemas
comunicaci
ón
requisitos
ambiguos
Sugerencia
Comience
Glosario
Recuerdo
experiencia
trabajando
expertos
simulación
descubrimos
aparentemente
inocua
importante
palabra
celda
significados
diversos
escurridizos
miembros
grupo
objetivo
recoger
posibles
términos
cla-
ros
ambiguos
requieren
tipo
elaboración
relevante
forma-
to
información
reglas
validación
Glosario
diccionario
datos
UP
Glosario
juega
rol
diccionario
datos
documento
recoge
datos
datos
metadatos
fase
inicio
glo-
sario
documento
sencillo
términos
descripciones
elabora-
ción
ampliarse
diccionario
datos
atributos
términos
contener
Alias
Descripción
•F
ormato
tipo
longitud
unidad
Relaciones
elementos.•
Rango
valores
Reglas
validación
Observe
rango
valores
reglas
validación
Glosario
constituyen
re-
quisitos
implicaciones
comportamiento
sistema
Unidades
subraya
Martin
Fowler
Analysis
Patterns
Fowler96
cuen-
ta
unidades
moneda
medidas
especialmente
aplicaciones
soft-
ware
internacionalizadas
ejemplo
sistema
NuevaEra
suerte
venderá
clientes
países
precio
simple
número
unidad
Dinero
Moneda
permita
variación
monedas
Términos
compuestos
Glosario
destinado
términos
atómicos
precio
art
ículo
incluir
términos
compuestos
venta
incluye
elementos
tales
fecha
ubicación
alias
utilizados
describir
colección
da-
tos
transmiten
actores
casos
ejemplo
ca
so
Procesar
Venta
considere
sentencia
Sistema
envía
solicitud
autorización
pago
Servicio
externo
Autorización
Pago
solicita
aprobación
pago
solicitud
autorización
pago
alias
agregado
dato
explicarse
Glosario
7.8
Especificaciones
fiables
Oxímoron
requisitos
escritos
impresión
entendido
requisitos
rea-
definidos
utilizarse
estimar
planificar
proyecto
fiable
impresión
intensa
desarrolladores
programadores
programadores
conocen
experiencias
dolorosas
fiable
justifica
motivación
cita
Goethe
comienzo
capítulo
realmente
importa
construir
software
pase
pruebas
aceptación
definidas
usuarios
resto
personas
implicadas
proyecto
satis-
faga
verdaderos
objetivos
descubren
evaluando
trabajando
software
96
UML
PATRONES
N.
T.
Figura
adjetivo
califica
nombre
contradice
esencia
nombre
modifica
nieve
ardiente”
importante
escribir
ejercicio
Vi
sión
Especificación
Complementaria
aproximación
motivación
pro-
ducto
repositorio
ideas
artefacto
re-
quisitos
especificación
fiable
escribiendo
código
probándolo
obteniendo
retroalimentación
manteniendo
estrecha
colaboración
usuarios
clien-
tes
adaptando
realmente
blanco
llamada
abandonar
análisis
reflexión
directamente
es-
cribir
código
sugerencia
tratar
requisitos
escritos
lige-
ra
continuamente
involucrar
usuarios
debía
diariamente
7.9
Artefactos
disponibles
sitio
web
proyecto
Puesto
libro
ejemplos
anteriores
casos
as-
pecto
estático
orientado
papel
deberían
artefactos
digitales
recogidos
on-line
sitio
web
proyecto
lugar
documentos
estáticos
planos
contener
hipervínculos
guardarse
herramientas
distintas
procesador
texto
hoja
cálculo
ejemplo
Glosario
almacenarse
tabla
base
datos
7.10
UML
fase
inicio
objetivo
fase
inicio
recopilar
información
suficiente
establecer
visión
común
decidir
viable
avanzar
merece
pena
investigación
se-
ria
proyecto
fase
elaboración
necesarios
diagramas
simples
diagramas
casos
UML
fase
inicio
hincapié
entender
alcance
básico
10%
requisitos
expresados
tex-
tualmente
práctica
presentación
mayoría
diagramas
UML
realizarán
fase
elaboración
7.11
artefactos
requisitos
UP
capítulo
casos
Tabla
7.1
resume
muestra
ar-
tefactos
evolución
temporal
artefactos
requisitos
comienzan
fase
inicio
trabaja
elaboración
Inicio
debería
caso
artefactos
requisitos
terminen
fase
inicio
habrán
empezado
personal
involucrado
necesita
decidir
merece
pena
cabo
investi-
gación
seria
proyecto
investigación
lugar
elaboración
fase
inicio
fase
inicio
Visión
resume
idea
proyecto
mane-
ra
ayude
tomar
decisión
determinar
merece
pena
con-
tinuar
comenzar
IDENTIFICACIÓN
REQUISITOS
9798
UML
PATRONES
Puesto
mayoría
trabajo
requisitos
ocurre
elaboración
Es-
pecificación
Complementaria
debería
desarrollarse
ligeramente
fase
inicio
resaltando
atributos
calidad
relevantes
ejemplo
PDV
NuevaEra
re-
cuperarse
fallen
servicios
externos
muestren
mayores
riesgos
retos
información
entrada
artefactos
generarse
taller
re-
quisitos
fase
inicio
consideración
explícita
cuestiones
indirectamente
análisis
casos
taller
escribirá
borrador
legible
artefactos
elaborará
analista
sistema
Elaboración
iteraciones
elaboración
refina
visión
Visión
base
retroalimentación
strucción
incremental
sistema
adaptación
talleres
requisitos
iteraciones
desarrollo
inve
stigación
requi
sitos
continuada
sarrollo
iterativo
requisitos
llegarán
verse
claros
recogerán
SS
atributos
ca-
lidad
ejemplo
fiabilidad
identificados
SS
claves
forma
nú-
cleo
arquitectura
diseña
programa
elaboración
factores
riesgo
claves
influyen
trabajar
primeras
ite-
raciones
ejemplo
requisito
calidad
PDV
NuevaEra
recuperación
cliente
fallan
componentes
externos
explorará
elaboración
mayoría
términos
descubren
elaboran
Glosario
fase
Llegando
elaboración
viable
contar
casos
Especi-
ficación
Complementaria
documento
Visión
razonable
reflejan
características
estabilizadas
importantes
requisitos
com-
pletar
entregar
producto
Especificación
Complementaria
Tabla
7.1
Muestra
artefactos
UP
evolución
temporal
comenzar
refinar
Disciplina
Artefacto
Inicio
Elab
Const
Trans
Iteración
/p59I1
E1
C1
Cn
T1
T2
Modelado
Negocio
Modelo
Dominio
Requisitos
Modelo
Casos
Visión
cr
Especificación
Complementaria
cr
Glosario
cr
Diseño
Modelo
Diseño
Documento
Arquitectura
SW
Modelo
Datos
Implementación
Modelo
Implementación
Gestión
Proyecto
Plan
Desarrollo
SW
Pruebas
Modelo
Pruebas
Entorno
Marco
Desarrollo
rVisión
congelan
concluidas
especificaciones
fijas
adap-
tación
rigidez
valor
central
desarrollo
iterativo
UP
Aclaremos
comentario
concluido
congelar
perfectamente
razona-
ble
elaboración
llegar
personal
involucrado
hará
queda
proyecto
comprometerse
contractualmen-
considerando
requisitos
planificación
puntos
ela-
boración
UP
nece
sitamos
idea
fiable
sentido
normal
espera
formal
requisitos
ne-
cesario
contar
proceso
control
cambios
mejores
prácticas
ex-
plícitas
UP
forma
aprueban
formalmente
cambios
requisitos
lugar
cambios
caóticos
incontrolados
comentario
concluido
congelar
implica
ideas
•E
desarrollo
iterativo
UP
entiende
importa
atención
me-
recida
presta
especificación
requisitos
cambio
inevitable
debería
aceptar
cambio
podr
ía
mejora
oportuni
sta
incorpora
novedad
importante
sistema
confiere
propietario
ventaja
competitiva
cambio
visión
mejorada
•E
desarrollo
iterativo
valor
central
contar
compromiso
continuo
personal
involucrado
evaluar
proporcionar
retroalimentación
dirigir
proyecto
realmente
quieran
beneficia
personal
involucrado
lavarse
manos
compromi
so
solícito
dando
concluido
requisitos
congelados
esperando
producto
raramente
ob-
realmente
necesitan
Construcción
construcción
requisitos
importantes
funcionales
tipo
de-
berían
estabilizados
terminado
di
spuestos
cambio
menores
probable
SS
Visión
experimenten
cambios
fase
7.12
Lecturas
adicionales
documentos
Visión
Especificaciones
Complementarias
utilizan
proyectos
describen
libros
requisitos
libros
asumen
implícita
actitud
proceso
cascada
objetivo
obtener
requisitos
detallados
correctos
principio
llegar
com-
promiso
pasar
diseño
implementación
sentido
descripción
tradicional
presentan
útil
proporcionan
conse-
jos
posibles
secciones
contenidos
mayoría
libros
arquitectura
software
incluyen
discusión
análisis
requisitos
requisitos
calidad
aplicación
puesto
re-
quisitos
calidad
tienden
influenciar
fuertemente
di
seño
arquitectura
ejemplo
Software
Architecture
in
Practice
BCK98
IDENTIFICACIÓN
REQUISITOS
99Las
regla
negocio
tratan
exhau
stiva
The
usiness
ule
ook
Ross97
libro
presenta
teoría
amplia
profunda
desarrollada
reglas
negocio
método
conecta
adecuada
técnicas
requisitos
modernas
casos
desarrollo
iterativo
7.13
Artefactos
UP
contexto
proceso
Figura
7.1
muestra
influencia
artefactos
destacando
documentos
Visión
Especificación
Complementaria
Glosario
100
UML
PATRONES
Figura
7.1
Muestra
influencia
artefactos
UP
Visión
Especificación
Complementaria
Doc
Arquitectura
Software
Glosario
Modelo
Dominio
Requisitos
Gestión
Proyecto
Modelado
Negocio
Diseño
Muestra
artefactos
UP
Artefactos
parciales
refinados
iteración
Pruebas
Plan
Pruebas
Plan
Des
Software
Modelo
Diseño
Modelo
Casos
Entorno
Marco
Desarrollo
requisitos
restricciones
requisitos
restricciones
requisitos
restricciones
requisitos
prioridades
términos
atributos
validación
reglas
validación
pruebas
funcionales
carga
)IDENTIFICACIÓN
REQUISITOS
101
Figura
7.2
Proceso
establecimiento
contexto
Enero
Febrero
Enunciado
Problema
problema
afecta
impacto
solución
éxito
Características
Visión
sistema
registrará
ventas
sistema
procesará
pagos
fase
inicio
intente
definir
refinar
requisitos
iteraciones
elaboración
inicia
talle
requisitos
normalmente
escriben
Finalmente
escritos
analista
sistemas
responsable
definición
requisitos
arquitecto
software
experiencia
estimación
requisitos
calidad
fiabilidad
rendimiento
Colaboran
requisitos
alto
nivel
usuarios
finales
desarrolladores
ye
cliente
paga
responsable
Minimice
intermediarios
Herramientas
Software
Herramienta
web
gestión
requisitos
integrada
procesador
texto
conocido
Mapas
mentales
diagramas
causa-efecto
etc.
pizarras
generar
aclarar
ideas
Utilice
cámara
digital
capturar
resultados
fácilmente
Hardware
Utilice
proyectores
acoplados
tarjetas
vídeo
dual
establezca
ancho
pantalla
doble
Desarrollador
ClienteAnalista
Sistemas
Usuario
proyecciones
adyacentes
Arquitecto
Software
UP
trabajo
Visión
Especificación
Complementaria
actividad
di
sciplina
requi
sitos
podr
ía
iniciar
taller
requi
sitos
análisis
casos
Figura
7.2
proporciona
consejos
mo-
mento
lugar
cabo
trabajo
Objetivos
Definir
etapa
elaboración
Motivar
siguientes
capítulos
sección
Introducción
elaboración
serie
inicial
iteraciones
•s
descubren
estabilizan
mayoría
requisitos
•s
reducen
eliminan
riesgos
importantes
•s
implementan
prueban
elementos
básicos
arquitectura
Rara
arquitectura
riesgo
ejemplo
construye
sitio
web
equipo
elaborado
éxito
herramientas
mis-
mos
requisitos
cuyo
caso
considerarse
primeras
iteraciones
caso
implementarse
características
casos
críticos
sig-
nificativos
punto
vista
arquitectura
fase
libro
centra
introducci
ón
DOO
aplicando
UML
patrones
arquitectura
Capítulo
INICIO
ELABORACIÓN
duro
rígido
rompe
flexible
prevalece
Tao
Ching8.1
Punto
control
sucedió
inicio
etapa
inicio
proyecto
PDV
NuevaEra
durar
semana
arte-
factos
creados
deberían
breves
incompletos
etapa
rápida
investigación
ligera
fase
requisitos
proyecto
etapa
determinar
via-
bilidad
riesgo
alcance
básicos
decidir
merece
pena
investigación
seria
proyecto
lugar
elaboración
cubierto
actividades
ocurrir
razonable
fase
inicio
estudio
resalta
ar-
tefactos
orientados
requisitos
actividades
artefactos
posibles
fase
inicio
comprenden
taller
requisitos
mayoría
actores
objetivos
casos
usos
nombres
mayoría
casos
escritos
formato
10
20%
ca-
sos
escriben
detalle
formato
completo
mejorar
comprensión
alcance
complejidad
Identificación
mayoría
requisitos
calidad
influyentes
riesgo
•E
critura
versión
Visión
Especificación
Complementaria
Lista
riesgos
ejemplo
director
realidad
demostración
feria
comer-
cial
POSWorld
Hamburgo
18
ses
sfuerzo
desarrollo
demo
siquiera
estimado
rasgos
haga
estudio
profundo
Prototipos
pruebas
conceptos
técnicos
estudios
explorar
via-
bilidad
técnica
requisitos
especiales
Funcionan
Java
Swing
adecuada
pantallas
táctiles
Prototipos
orientados
interfaz
usuario
clarificar
visión
requi-
sitos
funcionales
Recomendaciones
componentes
comprar
construir
reutilizar
re-
finarán
elaboración
ejemplo
recomendaci
ón
compra
paquete
álculo
im-
puestos
Arquitectura
alto
nivel
candidata
componentes
propuestos
descripción
detallada
arquitectura
pretende
correcta
refiere
especulación
utilizar
punto
partida
estudio
elaboración
ejemplo
aplicación
Java
cliente
servidor
aplicaciones
Oracle
base
datos
elaboración
probarse
merece
pena
descubrir
mala
idea
rechazarla
Plan
iteración
Lista
herramientas
candidatas
104
UML
PATRONES8.2
elaboración
elaboración
serie
inicial
iteraciones
equipo
cabo
estudio
serio
implementa
programa
prueba
úcleo
central
arquitectura
aclara
mayoría
requisitos
aborda
cuestiones
alto
riesgo
UP
riesgo
incluye
valor
negocio
trabajo
inicial
podr
ía
incluir
imple-
mentación
escenarios
consideran
importantes
especial-
mente
arriesgados
punto
vista
técnico
elaboración
consta
iteraciones
recomienda
iteración
dure
semanas
tamaño
equipo
fija
duración
iteración
entendiendo
fija
fecha
fi-
nalización
probable
equipo
cumpla
fecha
requisitos
co-
locan
lista
tareas
futuras
iteración
concluir
tiempo
versión
estable
probar
elaboración
corresponde
fase
diseño
fase
de-
sarrollan
completamente
modelo
prepar
ándolos
implementen
etapa
construcción
ejemplo
superposición
ideas
desa-
rrollo
cascada
desarrollo
iterativo
UP
fase
creando
prototipos
desechables
código
diseño
porciones
sistema
calidad
producci
ón
des-
cripciones
UP
término
origen
malentendidos
prototipo
arquitectura
utiliza
describir
sistema
parcial
intención
prototipo
sentido
experimento
desechable
UP
significa
subconjunto
producción
sistema
comúnmente
denomina
arquitectura
ejecuta-
ble
base
arquitectura
elaboración
frase
Construir
núcleo
central
arquitectura
resolver
elementos
alto
riesgo
definir
mayoría
requisitos
estimar
planificación
recursos
globales
ideas
claves
prácticas
pondrán
manifiesto
elaboración
incluyen
cabo
iteraciones
breves
duración
fija
dirigidas
riesgo
Comenzar
programar
Diseñar
implementar
probar
adaptable
partes
básicas
arries-
gadas
arquitectura
Probar
principio
realista
Adaptar
base
retroalimentación
procedente
pruebas
usuarios
de-
sarrolladores
•E
cribir
mayoría
casos
requisitos
detalle
serie
talleres
iteración
elaboración
INICIO
ELABORACIÓN
105¿Qué
significativo
punto
vista
arquitectura
elaboración
iteraciones
iniciales
construyen
prueban
núcleo
central
arquitectura
proyecto
PDV
NuevaEra
mayoría
incluirá
•E
mpleo
diseño
implementación
ancho
superficial
llamado
Grady
Booch
diseño
fronteras
identificación
procesos
capas
paquetes
subsiste-
responsabilidades
interfaces
alto
nivel
Implementarlos
parcial-
mente
objeto
conectarlo
clarificar
interface
s.
ódulos
contendrían
código
stubbed
permite
probar
cone-
xiones
interfaces
Refinamiento
interfaces
locales
remotas
inter-módulos
incluyendo
de-
talles
sutiles
acerca
parámetros
valores
retorno
ejemplo
interfaz
objeto
actuará
intermediario
wrapper
acceso
sistema
contabilidad
terceras
partes
versión
interfaz
rara
perfecta
preocupación
inicial
in
sistir
prueba
provocar
fallo
refinamiento
interfaces
ayuda
trabajo
paralelo
equipos
confiando
interfaces
estables
Integración
componentes
existentes
ejemplo
calculador
impuestos
Implementación
escenarios
simplificados
caminos
éxito
fracaso
im-
pulsan
di
seño
implementaci
ón
pruebas
trav
és
compo-
nentes
importantes
ejemplo
escenario
principal
éxito
Procesar
Venta
utilizando
es-
cenario
extensión
pago
crédito
pruebas
fase
elaboración
importantes
obtener
retroalimenta-
ción
adaptar
probar
úcleo
robusto
prueba
iniciale
proyecto
NuevaEra
incluirán
Pruebas
usabilidad
interfaz
usuario
Procesar
Venta
Pruebas
recuperación
falla
servicio
remoto
autorización
crédito
Pruebas
carga
alta
servicios
remotos
carga
sistema
cálculo
impuestos
remoto
8.3
Planificación
iteración
planificación
gestión
proyecto
importantes
temas
amplios
sección
presentamos
brevemente
ideas
claves
proporcionará
intro
ducción
Capítulo
36
106
UML
PATRONESOrganice
requisitos
iteraciones
riesgo
grado
cobertura
natu-
raleza
crítica
Riesgo
comprende
complejidad
écnica
factores
in
certidumbre
esfuerzo
facilidad
Cobertura
implica
partes
importantes
sistema
tratan
me-
primeras
iteraciones
implementación
amplia
superfi-
cial
componentes
Naturaleza
crítica
refiere
funciones
alto
valor
negocio
criterios
utilizan
priorizar
trabajo
iteraciones
casos
escenarios
casos
clasifican
implementación
pri-
meras
iteraciones
implementan
escenarios
clasificados
rango
alto
al-
gunos
requisitos
enuncian
características
alto
nivel
relacionadas
caso
particular
servicio
registro
clasifican
clasificación
realiza
Iteración
Ite-
ración
etcétera
requisitos
interpretaciones
influyan
or-
den
plan
adaptable
lugar
fijado
speculativo
co-
mienzo
proyecto
Normalmente
surgirá
agrupación
difusa
requisitos
basada
técni-
cas
clasificación
colaboración
grupos
pequeños
ejemplo
INICIO
ELABORACIÓN
107
Requisito
Rango
Caso
Característica
Comentario
Alto
Procesar
Venta
Puntuación
alta
criterios
clasi-
Registro
Logging
ficación
Extendido
Difícil
añadir
Mantener
Usuarios
Afecta
subdominio
seguridad
Basándonos
clasificación
vemos
escenarios
claves
caso
Procesar
Venta
significativos
punto
vi
sta
arquitectura
deber
ían
abordarse
primeras
iteraciones
lista
exhaustiva
abordarán
requisitos
iteración
trabajará
caso
implícito
ex-
plícito
Marcha
satisfacer
necesidades
inicialización
términos
artefactos
UP
comentarios
información
planificación
requi
sitos
elegido
iteraci
ón
li
stan
brevemente
Plan
Iteración
plan
iteraciones
plan
descripción
Plan
Iteración
insuficiente
escribir
detalle
tarea
requisitos
Solicitud
Cambio
yd
ársela
equi-
po
responsable
clasificación
requisitos
recoge
Plan
Desarrollo
Software.8.4
Requisitos
énfasis
iteración
habilidades
DOO
fundamentales
caso
estudio
Iteración
fa
elaboración
hincapié
gama
habilidades
DOO
fundamentales
comunes
utilizadas
construcción
sistemas
objetos
asignación
responsabilidades
objetos
su-
puesto
necesitan
habilidades
etapas
diseño
bases
da-
tos
ingeniería
usabilidad
diseño
interfaces
usuario
construir
software
quedan
alcance
introducción
DOO
UP
Requisitos
iteración
requi
sitos
iteraci
ón
aplicaci
ón
PDV
si-
guientes
Implementación
escenario
clave
básico
caso
Procesar
Venta
n-
trada
artículos
recepción
pago
efectivo
Implementación
caso
Marcha
necesario
soporte
necesidades
inicialización
iteración
maneja
especial
complejo
simple
escenario
acaba
éxito
diseño
implementación
soporte
colaboración
servicios
externos
sistema
cálculo
im-
puestos
base
datos
artículos
aplican
reglas
complejas
fijar
precios
cubre
abordaría
diseño
implementación
inter-
faces
usuario
soporte
siguientes
iteraciones
extenderán
base
Desarrollo
incremental
caso
iteraciones
Nótese
requisitos
caso
Procesar
Venta
tratado
iteración
normal
continuar
trabajo
escenarios
características
caso
iteraciones
gradualmente
ampliar
sistema
tratar
funcionalidad
requerida
Figura
8.1
casos
simples
cortos
completarse
iteración
8.5
artefactos
crearse
elaboración
Tabla
8.1
lista
artefactos
muestra
crearse
elaboración
indica
cuestión
abordan
capítulos
siguientes
presentarán
108
UML
PATRONESdetalle
especial
Modelo
Dominio
Modelo
Diseño
brevedad
ta-
bla
excluye
artefactos
crear
fa
inicio
listaron
Capítulo
pre
senta
artefacto
probable
creen
elabora
ción
Nótese
completarán
iteración
refinarán
serie
iteraciones
INICIO
ELABORACIÓN
109
Figura
8.1
implementación
caso
extenderse
iteraciones
Caso
Procesar
Venta
Caso
Procesar
Venta
Caso
Procesar
Venta
Caso
Procesar
Alquileres
Característica
Registro
frecuencia
caso
característica
complejo
complete
iteración
corta
partes
escenarios
asignar
iteraciones
Tabla
8.1
Muestra
Artefactos
elaboración
excluyendo
crearon
fase
inicio
Artefacto
Comentario
Modelo
Dominio
visualización
conceptos
dominio
similar
modelo
información
estático
entidades
dominio
Modelo
Diseño
conjunto
diagramas
describen
diseño
lógico
Comprende
diagramas
clases
software
diagramas
interacción
diagramas
paquetes
etcétera
Documento
Arquitectura
ayuda
aprendizaje
resume
cuestiones
Software
claves
arquitectura
resuelven
diseño
resumen
ideas
destacadas
diseño
motivación
sistema
Modelo
Datos
Incluye
esquemas
bases
datos
estrate-
gias
transformación
representaciones
objetos
objetuales
Modelo
Pruebas
descripción
probará
Modelo
Implementación
corresponde
implementación
real
código
fuente
ejecutables
base
datos
etcétera
Guiones
Caso
Descripción
interfaz
usuario
caminos
na-
Prototipos
UI
vegación
modelos
facilidad
etcétera
8.6
entendió
elaboración
duración
superior
meses
mayoría
proyectos
comprende
iteración
raras
excepciones
problemas
en-
tendidos
mayoría
requisitos
definieron
elaboración
elementos
arriesgados
núcleo
arquitectura
abordan
•E
resultado
arquitectura
ejecutable
programación
código
producción
fundamentalmente
fase
requisitos
precede
fase
implementación
construcción
intenta
cabo
diseño
completo
cuidadoso
programación
•E
xiste
retroalimentación
adaptación
mínima
usuarios
involucran
continuamente
evaluación
retroalimentación
llevan
cabo
pruebas
realistas
primeras
etapas
arquitectura
termina
forma
especulativa
programación
etapa
programación
pruebas
conceptos
lugar
programar
arquitectura
ejecutable
básica
producción
realizan
talleres
requisitos
breves
adaptan
refinan
requi-
sitos
base
retroalimentación
iteraciones
anteriores
actual
proyecto
presenta
síntomas
entendido
fase
elaboración
110
UML
PATRONESParte
ELABORACIÓN
ITERACIÓN
1Objetivos
Identificar
eventos
sistema
Crear
diagramas
secuencia
sistema
casos
Sigamos
iteración
proyecto
PDV
NuevaEra
entrado
iteración
desarrollo
real
fase
inicio
trabajo
ligero
requisitos
ayudar
decidir
me-
recía
pena
investigación
seria
proyecto
completado
planificación
iteración
decidido
abordar
escenario
sencillo
éxito
caso
Procesar
Venta
únicamente
pago
efectivo
colaboraciones
remo-
tas
objetivo
comenzar
di
seño
implementación
amplio
superficial
incluya
elementos
importantes
sistema
ite-
ración
lugar
tareas
relacionadas
establecimiento
entorno
he-
rramientas
personal
procesos
instalación
consideradas
volvemos
atención
casos
usos
análisis
modelado
dominio
empezar
trabajo
diseño
iteración
resultará
útil
rea-
lizar
estudio
adicional
dominio
problema
estudio
comprende
Capítulo
MODELO
CASOS
REPRESENTACIÓN
DIAGRAMAS
SECUENCIA
SISTEMA
teoría
diferencia
teoría
práctica
práctica
Jan
L.
A.
Snepscheutaclaración
eventos
sistema
entrada
salida
relacionados
sis-
tema
representarse
diagramas
secuencia
UML
Introducción
diagrama
secuencia
sistema
artefacto
creado
rápida
fácil
muestra
eventos
entrada
salida
relacionados
sistema
es-
tudiando
UML
incluye
notación
diagramas
secuencia
representar
eventos
parten
actores
externos
sistema
9.1
Comportamiento
sistema
continuar
di
seño
lógico
funcionará
aplicación
software
conveniente
estudiar
definir
comportamiento
caja
negra
compor-
tamiento
sistema
descripción
sistema
explicar
descripción
diagrama
secuencia
sistema
par-
tes
comprenden
casos
so
contratos
sistema
presentarán
des-
pués
9.2
Diagramas
secuencia
sistema
casos
describen
interactúan
actores
externos
sistema
softwa-
re
interesados
crear
interacción
actor
genera
eventos
so-
bre
sistema
normalmente
solicitando
operación
respuesta
ejemplo
cajero
inserta
ID
artículo
solicitando
sistema
PDV
registre
venta
artículo
evento
solicitud
inicia
operación
sistema
deseable
aislar
ilustrar
operaciones
actor
externo
solicita
sis-
tema
constituyen
importante
comprensión
comportamiento
sistema
UML
incluye
diagramas
secuencia
notación
re-
presentar
interacciones
actores
operaciones
inician
diagrama
secuencia
sistema
DSS
dibujo
muestra
es-
cenario
específico
caso
eventos
generan
actores
externos
or-
den
eventos
sistemas
sistemas
tratan
cajas
negras
diagramas
destacan
eventos
cruzan
límites
sistema
actores
sistemas
Debería
hacerse
DSS
escenario
principal
éxito
caso
esce-
narios
alternativos
complejos
frecuentes
UML
define
denominado
diagrama
secuencia
sistema
sim-
plemente
diagrama
secuencia
calificación
utiliza
subrayar
aplicación
representar
sistemas
cajas
negras
Posteriormente
utilizarán
diagramas
secuencia
contexto
ilu
strar
diseño
interacci
ón
objetos
software
completar
trabajo
114
UML
PATRONES9.3
Ejemplo
DSS
DSS
muestra
curso
eventos
específico
caso
actores
ex-
ternos
interaccionan
directamente
sistema
sistema
caja
negra
yl
eventos
sistema
genera
actor
Figura
9.1
tiempo
avanza
abajo
ordenación
eventos
debería
seguir
orden
caso
eventos
sistema
contener
parámetros
ejemplo
muestra
escenario
principal
éxito
caso
Procesar
Venta
indica
cajero
genera
eventos
sistema
crearNuevaVenta
introducirAr-
ticulo
finalizarVenta
realizarPago
MODELO
CASOS
REPRESENTACIÓN
DIAGRAMAS
SECUENCIA
SISTEMA
115
Figura
9.1
DSS
escenario
Procesar
Venta
introducirArticulo(artID
cantidad
Sistema
Cajero
finalizarVenta
realizarPago(cantidad
caja
encerrar
área
iteración
marcador
cláusula
iteración
indica
caja
iterar
actor
externo
sistema
Escenario
Procesar
Venta
sistema
caja
negra
nombre
PDVNuevaEra
Sistema
mantiene
simple
subrayado
implica
instancia
explica
capítulo
posterior
dedicado
notación
diagrama
secuencia
UML
mensaje
parámetros
abstracción
representa
evento
sistema
entrada
datos
pago
mecanismo
descripcion
valor(es
retorno
asociado(s
mensaje
abstracción
ignora
presentación
línea
retorno
opcional
devuelve
impuestos
cambio
devuelto
recibo
artículos
crearNuevaVenta
9.4
DSS
sistemas
DSS
tambi
én
utilizar
ilu
strar
colaboracione
sistemas
PDV
NuevaEra
sistema
externo
autoriza
pagos
crédito
em-bargo
pospone
iteración
posterior
caso
estudio
puesto
ite-
ración
incluye
colaboraciones
sistemas
remotos
9.5
DSS
casos
DSS
muestra
eventos
sistema
escenario
caso
genera
estudio
caso
Figura
9.2
116
UML
PATRONES
Figura
9.2
DSS
derivan
casos
Cajero
Sistema
Escenario
simple
ProcesarVenta
pago
efectivo
Cliente
llega
terminal
PDV
Cajero
inicia
venta
Cajero
inserta
identificador
artículo
Sistema
registra
línea
venta
presenta
descripción
artículo
precio
suma
parcial
Cajero
repite
pasos
indique
Sistema
muestra
impuestos
calculados
Cajero
Cliente
pide
pague
Cliente
paga
Sistema
gestiona
pago
introducirArticulo(artID
cantidad
finalizarVenta
realizarPago(cantidad
descripcion
impuestos
cambio
devuelto
recibo
artículos
crearNuevaVenta
9.6
Eventos
sistema
límites
sistema
identificar
eventos
sistema
necesario
claros
límites
sistema
presentó
capítulo
casos
toca
desa-
rrollo
software
límite
sistema
normalmente
elige
sis-
tema
software
posiblemente
hardware
contexto
evento
sistema
evento
externo
lanza
estímulo
directamente
software
Figura
9.3
Consideremos
caso
Procesar
Venta
identificar
eventos
sistema
debemos
determinar
actores
interactúan
directamente
sistema
software
cliente
interactúa
cajero
escenario
simple
pago
efectivo
interactúa
directamente
sistema
PDV
cajero
cliente
generador
eventos
sistema
cajero.9.7
Asignación
nombres
eventos
operaciones
eventos
sistema
operaciones
sistema
asociadas
deberían
expresarse
nivel
intenciones
lugar
términos
entrada
físico
nivel
ele-
mentos
interfaz
usuario
mejora
claridad
comenzar
nombre
evento
sistema
verbo
añadir
in
sertar
finalizar
crear
Figura
9.4
pue
sto
resalta
orientación
orden
eventos
introducirArticulo
escanear
escanear
láser
por-
captura
intención
operación
tiempo
permanece
abstracta
compromiso
elecciones
diseño
interfaz
utilizar
capturar
evento
sistema
MODELO
CASOS
REPRESENTACIÓN
DIAGRAMAS
SECUENCIA
SISTEMA
117
Figura
9.3
Definición
límites
sistema
introducirArticulo(artID
cantidad
Cajero
finalizarVenta
realizarPago(cantidad
límites
sistema
Sistema
crearNuevaVenta
Figura9
.4
Elección
nombres
eventos
operaciones
nivel
abstracto
introducirArticulo(artID
cantidad
escanear(artID
cantidad
Cajero
nombre
nombre
Sistema9.8
Mostrar
texto
caso
deseable
mostrar
fragmentos
texto
caso
escena-
rio
aclarar
enriquecer
vistas
Figura
9.5
texto
proporcio-
na
detalles
contexto
diagrama
resume
visualmente
interacción
118
UML
PATRONES
Figura
9.5
DSS
texto
caso
Cajero
Sistema
Escenario
simple
ProcesarVenta
pago
efectivo
Cliente
llega
terminal
PDV
Cajero
inicia
venta
Cajero
inserta
identificador
artículo
Sistema
registra
línea
venta
presenta
descripción
artículo
precio
suma
parcial
Cajero
repite
pasos
indique
Sistema
muestra
impuestos
calculados
Cajero
Cliente
pide
pague
Cliente
paga
Sistema
gestiona
pago
introducirArticulo(artID
cantidad
finalizarVenta
realizarPago(cantidad
descripcion
impuestos
cambio
devuelto
recibo
artículos
crearNuevaVenta
9.9
DSS
Glosario
términos
representados
DSS
operaciones
parámetros
valores
retorno
concisos
necesitar
explicación
adecuada
duran-
trabajo
diseño
esté
entra
sale
casos
utilizarse
Glosario
discutimos
creación
artefactos
distintos
có-
digo
esencial
proyecto
desconfiado
datos
Glosario
de-
bería
hacerse
decisión
realmente
significativa
contrario
trabajo
innecesario
valor
9.10
DSS
UP
DSSs
forman
Modelo
Casos
visualización
interac-
ciones
implicadas
casos
DSSs
mencionaron
explícitamente
ladescripción
original
UP
creadores
UP
conscientes
entendían
uti-
lidad
tales
diagramas
DSS
ejemplo
posibles
artefactos
ac-
tividades
análisis
diseño
utilidad
documentos
UP
RUP
mencionan
Fases
Inicio
DSS
incentivan
normalmente
fase
inicio
Elaboración
mayoría
DSS
crean
elaboración
útil
identificar
detalles
eventos
sistema
operaciones
diseñar
gestione
sistema
escribir
contratos
operaciones
sistema
presentarán
Capítulo
13
posiblemente
so-
porte
stimación
ejemplo
macroe
stimación
punto
funci
ón
ajustados
COCOMO
II
Nótese
necesario
crear
DSS
escenarios
casos
crearán
escenarios
seleccio-
nados
iteración
actual
Finalmente
debería
minutos
media
hora
creación
DSSs
MODELO
CASOS
REPRESENTACIÓN
DIAGRAMAS
SECUENCIA
SISTEMA
119
Tabla
9.1
Muestra
artefactos
UP
evolución
temporal
comenzar
refinar
Disciplina
Artefacto
Inicio
Elab
Const
Trans
Iteración
/p59I1
E1
C1
Cn
T1
T2
Modelado
Negocio
Modelo
Dominio
Requisitos
Modelo
Casos
DSS
cr
Visión
Especificación
Complementaria
Glosario
Diseño
Modelo
Diseño
Documento
Arquitectura
SW
Modelo
Datos
Implementación
Modelo
Implementación
Gestión
Proyecto
Plan
Desarrollo
SW
Pruebas
Modelo
Pruebas
Entorno
Marco
Desarrollo
9.11
Lecturas
adicionales
décadas
utilizado
ampliamente
variaciones
diagramas
ilustran
eventos
entrada
salida
sistema
considerado
caja
negra
ejem-
plo
telecomunicaciones
diagramas
flujo
llamadas
Especialmente
hi-
cieron
populares
métodos
orientados
objetos
método
Fu-
sion
Coleman+94
proporciona
ejemplo
detallado
relación
DSSs
operaciones
sistema
artefactos
análisis
diseño.9.12
Artefactos
UP
Figura
9.6
presenta
ejemplos
relaciones
DSSs
artefactos
120
UML
PATRONES
Figura
9.6
Muestra
influencia
artefactos
UP
Glosario
Doc
Arquitec-
tura
Software
Modelo
Dominio
Requisitos
Gestión
Proyecto
Modelado
Negocio
Diseño
Muestra
artefactos
UP
Artefactos
parciales
refinados
iteración
Pruebas
Plan
Pruebas
Plan
Des
Software
Modelo
Casos
texto
casos
Sistema
foo
contratos
operaciones
sistema
diagramas
secuencia
sistema
eventos
sistema
datos
operaciones
sistema
objetos
diseño
gestionar
eventos
sistema
parámetros
valores
retorno
elaborarse
Glosario
Modelo
Diseño
bar
Entorno
Marco
DesarrolloObjetivos
Identificar
clases
conceptuales
relacionadas
requisitos
iteración
actual
Crear
modelo
dominio
inicial
Distinguir
atributos
correctos
incorrectos
Añadir
clases
conceptuales
especificación
oportuno
Comparar
contrastar
vistas
conceptual
implementación
Introducción
modelo
dominio
utiliza
frecuencia
fuente
inspiración
di-
seño
objetos
software
entrada
necesaria
siguientes
artefactos
presentan
libro
importante
leer
capítulo
lector
familiarizado
tema
modelado
dominio
modelo
dominio
muestra
modeladores
clases
conceptuales
significa-
tivas
dominio
problema
artefacto
importante
crea
análisis
orientado
objetos1
capítulo
estudia
técnicas
introductorias
creación
modelos
dominio
siguientes
capítulos
tratarán
extensamente
téc-
nicas
modelado
dominio
añadiendo
atributos
asociaciones
Capítulo
10
MODELO
DOMINIO
VISUALIZACIÓN
CONCEPTOS
práctica
funcionará
teoría
Máxima
anónima
gestión
casos
importante
artefacto
análisis
requisitos
orientados
objetos
o-
nen
relieve
vista
procesos
dominio
identificación
conjunto
rico
objetos
clases
conceptuales
esencial
análisis
orientado
objetos
merece
pena
sfuerzo
relación
beneficios
trabajo
diseño
implementación
identificación
clases
conceptuales
forma
estudio
dominio
problema
UML
contiene
notación
forma
diagramas
clases
representar
modelos
dominio
Idea
clave
modelo
dominio
representación
clases
conceptuales
mundo
real
componentes
software
conjunto
diagramas
describen
cla-
ses
software
objetos
software
responsabilidades
10.1
Modelos
dominio
etapa
orientada
objetos
esencial
análisis
investigación
descomposición
dominio
interés
clases
conceptuales
individuales
objetos
cosas
conscientes
modelo
dominio
representación
visual
clases
conceptuales
objetos
mundo
real
dominio
interés
MO95
Fowler96
Tam-
bién
denomina
modelos
conceptuales
término
utilizado
edición
libro
modelo
objetos
dominio
modelos
objetos
análisis2
UP
define
Modelo
Dominio
artefacto
podr
ían
crearse
disciplina
Modelado
Negocio
Utilizando
notación
UML
modelo
dominio
representa
conjunto
diagramas
clases
define
operación
mostrar
Objetos
dominio
clases
conceptuales
Asociaciones
clases
conceptuales
Atributos
clases
conceptuales
ejemplo
Figura
10.1
muestra
modelo
dominio
parcial
Ilustra
cla-
ses
conceptuales
Pago
Venta
significativas
dominio
Pago
rela-
cionado
Venta
significativo
notar
Venta
fecha
hora
detalles
notación
importantes
momento
Idea
clave
Modelo
dominio—un
diccionario
visual
abstracciones
favor
reflexione
momento
Figura
10.1
figura
visualiza
relaciona
al-
gunas
palabras
clases
conceptuales
dominio
describe
abstracción
122
UML
PATRONES
relacionados
modelos
conceptuales
entidad-relación
capaces
mostrar
vis-
tas
dominios
puramente
conceptuales
ampliamente
re-interpretados
modelos
da-
tos
diseño
bases
datos
modelos
dominio
modelos
datos
utiliza
Modelo
Dominio
mayúsculas
deseo
resaltar
modelo
oficial
definido
UP
frente
concepto
conocido
modelos
dominio”.las
clases
conceptuales
cosas
comunicar
registros
ventas
etcétera
modelo
muestra
vista
parcial
abstracción
ig-
nora
detalles
interés
modelador
información
presenta
utilizando
notación
UML
alter-
nativa
haberse
expresado
prosa
sentencias
Glosario
sitio
fácil
entender
distintos
elementos
relaciones
len-
guaje
visual
puesto
porcentaje
significativo
cerebro
toma
proce-
samiento
visual
cualidad
humanos
modelo
dominio
considerarse
diccionario
visual
abstracciones
relevantes
vocabulario
dominio
información
dominio
modelos
dominio
modelos
componentes
software
modelo
dominio
muestra
Figura
10.2
representación
cosas
mundo
real
dominio
inter
és
componentes
software
clase
Java
H11001
H11001(ver
Figura
10.3
objetos
software
responsabilidades
tan-
to
siguientes
elementos
adecuados
modelo
dominio
MODELO
DOMINIO
VISUALIZACIÓN
CONCEPTOS
123
Figura
10.1
Modelo
dominio
parcial
diccionario
visual
número
extremo
línea
indica
multiplicidad
describirá
capítulo
posterior
Registro
Articulo
Tienda
direccion
nombre
Venta
fecha
hora
Pago
cantidad
LineaDeVenta
cantidad
Almacenado-en
Alberga
Contenida-en
Registra-venta-de
Pagado-mediante
Capturada-en
concepto
objeto
dominio
asociación
atributos124
UML
PATRONES
Figura
10.2
modelo
dominio
muestra
clases
conceptuales
mundo
real
clases
software
Venta
fecha
hora
visualización
conceptos
mundo
real
dominio
interés
representación
clase
software
Figura
10.3
modelo
dominio
muestra
artefactos
software
clases
BaseDeDatosVentas
artefacto
software
forma
modelo
dominioevite
clase
software
forma
modelo
dominio
Venta
fecha
hora
imprimir
evite
Artefactos
software
ventana
ba
datos
do
minio
esté
modelando
conceptos
software
modelo
in-
terfaces
usuario
gráficas
Responsabilidades
métodos4
Clases
conceptuales
modelo
dominio
muestra
clases
conceptuales
vocabulario
dominio
In-
formalmente
clase
conceptual
idea
cosa
objeto
formalmente
cla-
conceptual
podr
ía
considerarse
érminos
símbolo
intensión
exten
sión
MO95
Figura
10.4
Símbolo
palabras
imágenes
representan
clase
conceptual
Intensión
definición
clase
conceptual
Extensión
conjunto
ejemplos
aplica
clase
conceptual
ejemplo
considere
clase
conceptual
evento
transacción
com-
pra
elegir
nombrarla
símbolo
Venta
intensión
Venta
es-
modelado
objetos
normalmente
hablamos
responsabilidades
relacionadas
componentes
software
métodos
puramente
conceptos
software
modelo
dominio
describe
conceptos
mun-
do
real
componentes
software
importante
considerar
responsabilidades
objetos
trabajo
diseño
forma
ste
modelo
caso
válido
mostrar
responsabili-
dades
modelo
dominio
incluye
roles
trabajadores
humanos
Cajero
modelador
desea
recoger
responsabilidades
trabajadores
humanos
MODELO
DOMINIO
VISUALIZACIÓN
CONCEPTOS
125
Figura
10.4
clase
conceptual
símbolo
intensión
extensión
Venta
fecha
hora
símbolo
concepto
venta
representa
transición
compra
Sucede
hora
intensión
concepto
venta-1
venta-3
venta-2
venta-4
extensión
concepto
tablecer
representa
transacción
compra
fecha
hora
extensión
Venta
forman
ejemplos
ventas
palabras
conjunto
ventas
creamos
modelo
dominio
normalmente
símbolo
vista
inten-
sional
clase
conceptual
interés
práctico
Modelos
descomposición
dominio
problemas
software
complejos
descomposición
divide
ven-
cerás
estrategia
común
tratar
complejidad
división
es-
pacio
problema
unidades
fáciles
comprender
análisis
estructurado
dimensión
scomposición
procesos
funciones
análisis
orientado
objeto
dimensión
scomposición
fundamentalmente
cosas
entidades
dominio
diferencia
esencial
análisis
orientado
objetos
estructurado
división
clases
conceptuales
objetos
lugar
división
funciones
principal
tarea
análisis
identificar
conceptos
do-
minio
problema
documentar
resultado
modelo
dominio.126
UML
PATRONES
Figura
10.5
Modelo
dominio
parcial
dominio
tienda
Tienda
Registro
Venta
Clases
conceptuales
dominio
ventas
ejemplo
dominio
venta
tienda
mundo
real
exi
sten
clases
conceptuales
Tienda
Registro
Venta
modelo
dominio
mos-
trado
Figura
10.5
incluir
Tienda
Registro
Venta
10.2
Identificación
clases
conceptuales
objetivo
crear
modelo
dominio
clases
conceptuales
interesantes
significativas
dominio
interés
ventas
caso
significa
conceptos
re-
lacionados
caso
Procesar
Venta
desarrollo
iterativo
incrementalmente
construye
modelo
dominio
iteraciones
fase
elaboración
modelo
do
minio
limita
escenarios
anteriores
actual
estudio
lugar
modelo
explosión
primeras
etapas
intenta
capturar
posibles
clases
conceptuales
relaciones
ejemplo
iteración
limitada
escenario
pago
efectivo
Procesar
Venta
creará
modelo
dominio
parcial
únicamente
reflejar
tarea
central
identificar
clases
conceptuales
relacionadas
escenario
diseñando
continuación
presentamos
guía
útil
identificaci
ón
clases
con-
ceptuales
especificar
exceso
modelo
dominio
clases
conceptuales
grano
fino
especificar
defecto
piense
modelo
dominio
contiene
clases
conceptuales
suele
justamente
contrario
normal
obviar
clases
conceptuales
etapa
identificación
inicial
des-
cubrirlas
considerar
atributos
asociaciones
trabajo
di-
seño
encuentren
añadir
modelo
dominio
excluya
clase
conceptual
simplemente
requisitos
indican
nin-
guna
necesidad
obvia
registrar
información
criterio
común
mo-
delado
datos
diseño
bases
datos
relacionales
relevante
mo-
delado
dominio
clase
conceptual
atributos
válido
clases
conceptuales
atributos
clases
conceptuales
rol
pu-
ramente
comportamiento
dominio
lugar
rol
información
Estrategias
identificar
clases
conceptuales
siguientes
secciones
presentan
técnicas
Utilizaci
ón
lista
categorías
clases
conceptuales
Identificaci
ón
frases
nominales
excelente
técnica
modelado
dominio
patrones
aná-
lisis
modelos
dominios
parciales
existentes
creados
expertos
utilizando
libros
publicados
Analysis
Patterns
Fowler96
Data
Model
Patterns
Hay96
Utilización
lista
categorías
clases
conceptuales
Comience
creación
modelo
dominio
li
sta
clases
concep-
tuales
candidatas
Tabla
10.1
contiene
categorías
habituales
normal
mente
merece
pena
orden
particular
impor-
tancia
ejemplos
extraído
dominio
tiendas
reservas
vuelos
MODELO
DOMINIO
VISUALIZACIÓN
CONCEPTOS
127
Tabla
10.1
Lista
categorías
clases
conceptuales
Categoría
clase
conceptual
Ejemplos
objetos
tangibles
físicos
Registro
Avion
especificaciones
diseños
descripciones
EspecificacionDelProducto
cosas
DescripcionDelVuelo
lugares
Tienda
transacciones
Venta
Pago
Reserva
líneas
transacción
LineaDeVenta
roles
gente
Cajero
Piloto
contenedores
cosas
Tienda
Lata
Avion
cosas
contenedor
Articulo
Pasajero
sistemas
informáticos
SistemaAutorizacionPagoCredito
electromecánicos
externos
sistema
ControlDeTraficoAereo
conceptos
abstractos
Ansia
Acrofobia
organizaciones
DepartamentoDeVentas
CompañiaAerea
hechos
Venta
Pago
Reunion
Vuelo
Colision
Aterrizaje
continúaDescubrimiento
clases
conceptuales
identificación
frases
nominales
técnica
útil
simplicidad
recomendada
Abbot83
análisis
lin-
güístico
identificar
nombres
frases
nominales
descripciones
textuales
dominio
considerarlos
clases
conceptuales
atributos
candidatos
cuidado
método
correspondencia
mecánica
nombres
clases
palabras
lenguaje
natural
ambiguas
caso
fuente
inspiración
casos
formato
com-
pleto
constituyen
descripción
excelente
extraer
análisis
ejemplo
utilizar
escenario
actual
caso
Procesar
Venta
Escenario
principal
éxito
Flujo
Básico
Cliente
llega
terminal
PDV
mercancías
servicios
comprar
Cajero
comienza
venta
Cajero
introduce
identificador
artículo
Sistema
registra
línea
venta
presenta
descripción
artículo
precio
suma
parcial
precio
calcula
conjunto
reglas
precios
Cajero
repite
pasos
3-4
indique
Sistema
presenta
impuestos
calculados
Cajero
Cliente
solicita
pago
Cliente
paga
Sistema
gestiona
pago
Sistema
registra
venta
completa
envía
información
venta
pago
sistema
Contabilidad
externo
contabilidad
comisiones
sistema
Inventario
actualizar
inventario
Sistema
presenta
recibo
10
Cliente
recibo
mercancías
caso
128
UML
PATRONES
Tabla
10.1
Lista
categorías
clases
conceptuales
Continuación
Categoría
clase
conceptual
Ejemplos
procesos
normalmente
representan
VentaDeUnProducto
conceptos
ocurrir
ReservaUnAsiento
reglas
políticas
PoliticaDeReintegro
PoliticaDeCancelación
catálogos
CatalogoDeProductos
CatalogoDePiezas
registros
finanzas
trabajo
contratos
Recibo
LibroMayor
ContratoEmpleo
cuestiones
legales
RegistroMantenimiento
instrumentos
servicios
financieros
LineaDeCredito
Stock
manuales
documentos
ListaDeCambiosDePreciosDiarios
artículos
referencia
libros
ManualReparacionesExtensiones
Flujos
Alternativos
7a
Pago
efectivo
Cajero
introduce
cantidad
dinero
entregada
efectivo
Sistema
muestra
cantidad
dinero
devolver
abre
cajón
caja
Cajero
deposita
dinero
entregado
devuelve
cambio
Cliente
Sistema
registra
pago
efectivo
modelo
dominio
visualización
conceptos
dominio
voca-
bulario
relevantes
encuentran
términos
casos
tan-
to
constituyen
fuente
rica
explorar
identificaci
ón
fra
ses
nomi-
nales
frases
nominales
clases
conceptuales
candidatas
po-
drían
referencia
cla
ses
conceptuale
ignoran
sta
iteraci
ón
ejemplo
Contabilidad
comisiones
atributos
clases
conceptuales
favor
diríjase
sección
capítulo
atributos
obtener
consejos
permiten
diferenciar
punto
ébil
ste
enfoque
impreci
sión
lenguaje
natural
fra
ses
no-
minales
podr
ían
repre
sentar
sma
cla
conceptual
atributo
ambigüedades
recomienda
combine
técnica
Lis-
ta
Categorías
Clases
Conceptuales
10.3
Clases
conceptuales
candidatas
dominio
ventas
an
álisis
Li
sta
Categorías
Clases
Conceptuales
frases
no-
minales
genera
lista
clases
conceptuales
candidatas
dominio
lista
restringida
requisitos
simplificaciones
estudiando
actualmente
escenario
simplificado
Procesar
Venta
Registro
EspecificacionDelProducto
Articulo
LineaDeVenta
Tienda
Cajero
Venta
Cliente
Pago
Encargado
CatalogoDeProductos5
lista
correcta
colección
arbitraria
abstracciones
vo-
cabulario
dominio
modelador
sidera
relevantes
ca
so
si-
guiendo
estrategia
identificación
modeladores
producirán
listas
similares
MODELO
DOMINIO
VISUALIZACIÓN
CONCEPTOS
129
N.
T.
siguiendo
convenciones
nombrar
clases
utilizaría
preposición
caso
EspecificacionDelProducto
LineaDeVenta
utilizado
mejorar
legibilidad
texto
Objetos
informes
incluir
recibo
modelo
recibo
informe
venta
pago
clase
conceptual
relativamente
destacable
dominio
debería
mostrarse
modelo
continuación
presentamos
factores
recibo
informe
venta
general
útil
mostrar
informe
información
modelo
dominio
pue
sto
información
deriva
fuente
duplica
informaci
ón
s.
razón
excluirlo
recibo
rol
especial
término
reglas
negocio
normalmente
confiere
portador
recibo
derecho
devolver
artículos
comprados
razón
mostrarlo
modelo
Puesto
devolución
artículos
considerada
iteración
Recibo
excluido
iteración
aborda
caso
Gestionar
Devo-
luciones
staría
justificada
inclusión
10.4
Guías
modelado
negocio
modelo
dominio
Aplique
siguientes
pasos
crear
modelo
dominio
Liste
clases
conceptuales
candidatas
utilizando
técnicas
Lista
Cate-
gorías
Clases
Conceptuales
identificación
frases
nominales
relacionadas
requisitos
actuales
estudio
Represéntelos
modelo
dominio
Añada
asociaciones
necesarias
registrar
relaciones
mante-
ner
memoria
discutirá
capítulo
Añada
atributos
necesarios
satisfacer
requisitos
información
dis-
cutirá
capítulo
método
útil
auxiliar
aprender
copiar
patrones
análisis
discutirán
capítulo
posterior
Nombrar
modelar
cosas
cartógrafo
estrategia
cartógrafo
aplica
mapas
modelos
dominio
Haga
modelo
dominio
espíritu
trabajo
cartógrafos
Utilice
nombres
existentes
territorio
Excluya
características
irrelevantes
añada
cosas
130
UML
PATRONESUn
modelo
dominio
tipo
mapa
concepto
co
sas
dominio
espíritu
destaca
rol
analítico
modelo
dominio
sugiere
cartógrafo
utiliza
nombres
territorio
cambia
nombres
ciudades
mapa
modelo
dominio
significa
utilice
vo-
cabulario
dominio
nombrar
nombres
clases
conceptuales
atributos
ejemplo
desarrollando
modelo
biblioteca
nombre
cliente
Prestatario”o
Socio
términos
utilizados
personal
biblioteca
cartógrafo
elimina
cosas
mapa
consideran
relevantes
propósito
mapa
ejemplo
topografía
población
necesario
muestren
Análogamente
modelo
dominio
excluir
clases
concep-
tuales
dominio
problema
pertinentes
requisitos
ejemplo
podríamos
excluir
Bolígrafo
BolsaPapel
modelo
dominio
conjunto
requisitos
actual
puesto
rol
relevante
obvio
cartógrafo
muestra
cosas
estén
montañas
Igualmente
modelo
dominio
debería
excluir
cosas
encuentran
dominio
problema
estudiando
principio
conoce
estrategia
Utilice
Vocabulario
Domi-
nio
Coad95
Error
típico
identificación
clases
conceptuales
error
típico
crear
modelo
dominio
representar
atributo
debería
concepto
regla
empírica
ayudar
pre-
venir
error
consideramos
clase
conceptual
número
texto
mundo
real
probablemente
clase
conceptual
atributo
ejemplo
debería
tienda
atributo
Venta
clase
conceptual
se-
parada
Tienda
MODELO
DOMINIO
VISUALIZACIÓN
CONCEPTOS
131
Venta
Venta
Tienda
tienda
numeroTelefono
mundo
real
tienda
número
texto
término
su-
giere
entidad
legal
organización
ocupa
espacio
Tien-
concepto
Vuelo
Vuelo
Aeropuerto
destino
nombre132
UML
PATRONES
ejemplo
considere
dominio
reservas
vuelos
Debería
desti-
atributo
Vuelo
clase
conceptual
aparte
Aeropuerto
mundo
real
aeropuerto
destino
número
texto
cosa
ocupa
espacio
Aeropuerto
debería
concepto
caso
duda
considérelo
concepto
separado
atributos
deberían
raros
modelo
dominio
10.5
Resolución
clases
conceptuales
similares
Registro
vs
TPDV
TPDV
siglas
terminal
punto
venta
lenguaje
informático
ter-
minal
dispositivo
sistema
PC
cliente
PDA
red
ina
lámbrico
etc
étera
tiempo
TPDVs
tienda
mantenía
registro
libro
apuntaban
ventas
pago
tiempo
automatizó
cajas
registradoras
mecánicas
TPDV
de-
sempeña
rol
registro
Figura
10.6
Figura
10.6
TPDV
Registro
clases
conceptuales
similares
TPDV
Registroo
conceptos
similares
nombres
Venta
Registra
Venta
Registra
registro
cosa
recoge
ventas
pagos
TPDV
término
registro
abstracto
orientado
imple
mentación
TPDV
modelo
dominio
debería
utilizarse
sím-
bolo
Registro
lugar
TPDV
regla
empírica
modelo
dominio
absolutamente
correcto
equivocado
útil
herramienta
comunicación
principio
cartógrafo
TPDV”e
término
familiar
territorio
ma-
nera
símbolo
útil
punto
vista
familiaridad
comunicación
objetivo
creación
modelos
representan
abstracciones
indepen-MODELO
DOMINIO
VISUALIZACIÓN
CONCEPTOS
133
Nótese
tiempos
registro
únicamente
implementación
re-
gistrar
ventas
término
adquirido
significado
generalizado
tiempo
dientes
implementación
Registro
atractivo
útil6
considerar
Registro
justamente
representar
clase
conceptual
sitio
registra
ventas
abstracción
clases
terminales
TPDV
Ambas
elecciones
valor
caso
estudio
elegido
Registro
ar-
bitrariamente
personal
involucrado
habría
entendido
TPDV
10.6
Modelado
mundo
irreal
sistemas
software
dominios
encuentran
analogía
do-
minios
naturales
negocios
software
telecomunicaciones
ejemplo
crear
modelo
dominio
dominios
requiere
alto
grado
abstracción
olvidarse
diseños
familiares
ejemplo
clases
conceptuales
candidatas
relacionadas
mutadores
telecomunicaciones
Mensaje
Conexion
Puerto
Dialogo
Ruta
Pro-
tocolo
10.7
Clases
conceptuales
especificación
descripción
discusión
principio
parecer
relacionada
tema
raro
alta-
mente
especializado
prueba
necesidad
clases
conceptuales
especificación
definirán
habitual
modelos
dominio
tan-
to
destaca
Asuma
instancia
Articulo
representa
objeto
físico
tienda
número
serie
Articulo
scripción
precio
identificador
art
ículo
articu
loID
recogen
sitio
•T
odo
mundo
trabaja
tienda
amnesia
vende
artículo
físico
real
elimina
instancia
Articulo
software
correspondiente
terreno
software
suposiciones
ocurre
escenario
fuerte
demanda
hamburguesas
vegetales
mu-
cho
éxito
ObjetoHamburguesa
tienda
vende
implica
eli-
minen
memoria
ordenador
in
stancias
Articulo
Objeto
Hamburguesa
esencial
problema
alguien
pregunta
cuestan
ObjetosHamburguesa
contestar
precio
encontraba
ins-
tancias
inventariadas
eliminaron
vendieron
Nótese
modelo
actual
implementa
software
des-
cribe
contiene
datos
duplicados
ineficiente
espacio
puesto
des-
cripción
precio
ID
duplican
instancia
Articulo
producto
necesidad
especificación
descripción
clases
conceptuales
problema
ilustra
necesidad
conceptos
objetos
especifica-
ciones
descripciones
cosas
solucionar
problema
Articulo
necesita
clase
conceptual
EspecificacionDelProducto
EspecificacionDelArti-
culo
DescripcionDelProducto
recoge
informaci
ón
artículos
EspecificacionDelProducto
representa
Articulo
descripción
infor-
mación
artículos
Nótese
elementos
inventariados
venden
correspondientes
instancias
software
Articulo
eliminan
permanece
EspecificacionDelProducto
objetos
descripción
especificación
fuertemente
relacionados
cosas
describen
modelo
dominio
típico
establecer
Especifi-
cacionDeX
Describe
Figura
10.7
134
UML
PATRONES
Figura
10.7
Especificaciones
descripciones
cosas
significa
multiplicidad
Indica
EspecificacionDelProducto
describir
Articulos
Articulo
descripcion
precio
numeroSerie
articuloID
EspecificacionDelProducto
descripcion
precio
articuloID
Articulo
numeroSerie
Describe
necesidad
clases
conceptuales
especificación
habitual
dominios
ventas
productos
típica
fabricación
requiere
descrip-
ción
cosa
fabrica
distinto
co
sa
dedicado
tiempo
espacio
motivar
clases
conceptuales
especificación
frecuentes
concepto
modelado
raro.¿Cuándo
requieren
clases
conceptuales
especificación
siguientes
guías
sugieren
utilizar
especificaciones
Añada
clase
conceptual
especificación
descripción
ejemplo
Especifica-
cionDelProducto
necesita
descripción
artículo
servicio
independiente
existencia
actual
ejemplo
artículos
servicios
eliminación
instancias
cosas
describen
ejemplo
Articulo
resultado
pérdida
información
necesita
mantenerse
aso-
ciación
incorrecta
información
cosa
eliminada
Reduce
información
redundante
duplicada
ejemplo
especificación
ejemplo
considere
compañía
aérea
sufre
accidente
catastrófico
avione
s.
suma
cancelan
vuelo
ses
pendiente
complete
investigación
asuma
cance-
lan
vuelos
correspondiente
objeto
software
Vuelo
elimina
memoria
ordenador
spués
coli
sión
eliminan
objetos
software
Vuelo
único
registro
aeropuertos
destino
vuelos
instancias
software
Vuelo
repre
senta
vuelo
specífico
fecha
hora
concreta
registro
rutas
vuelos
compañía
solucionar
problema
necesita
DescripcionDelVuelo
Especifica-
cionDelVuelo
describe
vuelo
ruta
planificado
nin-
gún
vuelo
concreto
Figura
10.8
Descripción
servicios
Nótese
ejemplo
servicio
vuelo
lugar
artículo
hamburguesa
vegetal
habitual
necesiten
descripciones
servi-
cios
planes
servicios
ejemplo
compañ
ía
telefon
ía
móvil
vende
paquete
deno
minaciones
bronce
oro
etc
étera
nece
sario
concepto
s-
cripción
paquete
tipo
plan
servicio
scribe
tarifas
minuto
acceso
Internet
cable
coste
etcétera
separado
concepto
paquete
real
mente
vendido
paquete
oro
vendido
Craig
Larman
enero
2002
55
mes
departamento
Marketing
nece
sita
definir
registrar
plan
servicios
DescripcionDelP
aqueteDeComunicacionesMoviles
venda
MODELO
DOMINIO
VISUALIZACIÓN
CONCEPTOS
13510.8
Notación
UML
modelos
métodos
perspectivas
múltiples
UP
define
denominado
Modelo
Dominio
representa
notación
UML
término
Modelo
Dominio
documentación
oficial
UML
revela
importante
UML
simplemente
describe
tipos
diagramas
diagramas
clases
dia-
gramas
secuencia
superpone
método
perspectiva
modelado
proceso
UP
aplica
notación
especificación
UML
contexto
modelos
definidos
ámbito
metodología
ejemplo
notación
diagramas
clases
UML
utilizar
crear
representaciones
clases
conceptuales
dominio
modelo
dominio
clases
software
tablas
base
datos
relacional
etcétera
debemos
confundir
notación
básica
diagramas
UML
aplicación
visualizar
distintos
tipos
modelos
definidos
metodologistas
Figura
10.9
punto
aplicable
diagramas
clases
UML
mayoría
notación
UML
ejemplo
diagramas
UML
interpretan
modelos
distintos
diagramas
secuencia
UML
utilizar
repre
sentar
paso
mensajes
objetos
software
Modelo
Diseño
UP
interacción
personas
grupos
mundo
real
Modelo
Objetos
Negocio
UP
136
UML
PATRONES
Figura
10.8
Especificaciones
cosas
Vuelo
fecha
hora
DescripcionDelVuelo
numero
Aeropuerto
nombre
Describe-vuelos-a
Descrito-por
Vuelo
fecha
numero
hora
Aeropuerto
nombre
Vuela-a
MODELO
DOMINIO
VISUALIZACIÓN
CONCEPTOS
137
Figura
10.9
notación
especificación
UML
aplicar
perspectivas
modelos
definidos
proceso
método
Pago
cantidad
Venta
fecha
hora
Pago-por
Pago
cantidad
Dinero
getDevolucion
Dinero
Venta
fecha
Fecha
horaInicio
Hora
getTotal
Dinero
Pago-por
Modelo
Dominio
UP
Notación
diagrama
clase
UML
utilizado
modelo
esencial
visualiza
conceptos
mundo
real
Modelo
Diseño
UP
Notación
diagrama
clase
UML
utilizado
modelo
especificación
visualiza
componentes
software
idea
pone
relieve
étodo
orientado
objeto
Syntropy
CD94
Martin
Fowler
reitera
UML
Distilled
FS00
notación
basada
diagramas
utilizar
perspectivas
tipos
modelos
Perspectiva
esencial
conceptual
interpreta
diagramas
describen
cosas
mundo
real
dominio
interés
Perspectiva
specificación
interpreta
diagramas
utilizando
notación
modelos
esenciales
describen
abstracciones
software
componentes
especificaciones
interfaces
comprometidas
nin-
guna
implementación
particular
ejemplo
específicamente
clase
Java
Perspectiva
implementación
interpreta
diagramas
utilizando
notación
modelos
esenciales
describen
implementaciones
soft-
ware
tecnología
lenguaje
particular
Java
Superposición
terminología
UML
vs
métodos
especificación
UML
cajas
rectangulares
mostradas
Figura
10.9
deno-
minan
clases
nótese
UML
término
abarca
variedad
fenómenos
cosas
físicas
cosas
software
eventos
etcétera7
proceso
método
super-
pondrá
terminología
alternativa
UML
ejemplo
UP
cajas
UML
dibujan
Modelo
Dominio
llamarse
conceptos
dominio
clases
conceptuales
Modelo
Dominio
ofrece
perspectiva
conceptual
UP
cajas
UML
dibujan
Modelo
Di
seño
denominan
oficial-
mente
clases
diseño
Modelo
Diseño
ofrece
perspectiva
especificación
implementación
modelador
clase
UML
caso
especial
elemento
modelado
UML
general
clasificador
características
estructurales
comportamiento
incluyendo
clases
actores
interfaces
casos
uso—
Independientemente
definición
cuestión
importante
útil
distinguir
perspectiva
analista
mira
conceptos
mundo
real
ven-
ta
perspectiva
conceptual
diseñadores
software
especifican
compo-
nentes
software
clase
software
Venta
perspectiva
especificación
im-
plementación
UML
utilizar
ilu
strar
ambas
perspectivas
notaci
ón
per
s-
pectiva
similar
importante
perspectiva
tomando
mantener
cosas
claras
libro
utilizará
términos
relacionados
clases
forma
consistente
UML
UP
Clase
conceptual
concepto
cosa
mundo
real
perspectiva
conceptual
esencial
Modelo
Dominio
UP
contiene
clases
conceptuales
Clase
software
clase
representa
perspectiva
especificación
imple-
mentación
componente
software
independientemente
proceso
método
Clase
diseño
miembro
Modelo
Diseño
UP
sinónimo
clase
software
razón
deseo
resaltar
clase
Modelo
Diseño
UP
permite
clase
diseño
perspectiva
especificación
imple-
mentación
desee
modelador
Clase
implementación
clase
implementada
lenguaje
orientado
objetos
Java
Clase
UML
término
general
representa
cosa
mundo
real
clase
conceptual
software
clase
software
10.9
Reducción
salto
representación
favor
mire
atentamente
Figura
10.10
libros
educadores
pre-
sentan
diseño
objetos
común
muestran
clases
software
cuyos
nom-
bres
reflejan
vocabulario
dominio
eligen
nombre
clase
software
Venta
yq
Venta
Simplemente
eligiendo
nombres
reflejan
vocabulario
dominio
Venta
favorece
rápida
comprensión
proporciona
pista
acerca
espera
trozo
código
clase
software
Venta
modelo
mental
dominio
cuestión
ejemplo
tienda
vende
cosas
mundo
real
venta
fecha
consecuencia
creamos
clase
Java
llamada
Venta
yl
damos
responsabilidad
venta
real
fecha
clase
Java
Venta
corresponde
nue
stro
modelo
mental
dominio
real
apela
intuición
dominio
Modelo
Dominio
proporciona
diccionario
visual
vocabulario
conceptos
do-
minio
inspiramos
nombrar
cosas
diseño
software
relaciona
tema
salto
representación
salto
semántico
salto
modelo
mental
dominio
representación
software
138
UML
PATRONESEn
extremo
podríamos
programar
directamente
aplicación
PDV
NuevaE-
ra
código
binario
invocar
conjunto
in
strucciones
procesador
Enten-
demos
salto
representaciones
enorme
existirá
software
cos-
real
dif
ícil
cuantificar
salto
repre
sentación
difícil
entender
relacionar
dominio
problema
Cercano
extremo
espectro
tecnologías
objetos
permiten
código
clases
cuyos
nombres
reflejan
tipo
partición
percibimos
dominio
mundo
real
percibimos
denominada
venta
terreno
software
clase
software
denominada
Venta
estrecha
correspondencia
uno-a-uno
vocabulario
dominio
vocabulario
software
par-
ticiones
reduce
salto
representación
acelera
comprensión
código
exis-
tente
funciona
esperamos
conociendo
dominio
sugiere
formas
naturales
extender
código
corresponden
análogamente
do-
minio
apelan
intuiciones
dominio
Diciéndolo
sencillamente
modelo
software
recuerda
modelo
mental
conceptual
funciona
predecible
modelos
software
proporcionan
ventaja
práctica
reducir
salto
re-
presentación
mayoría
ingenieros
software
difícil
cuantificar
prueba
programa-
dores
Java
forma
deliberada
complican
código
fuente
difícil
in-
geniería
inversa
bytecodes
cambiando
nombres
clases
mé-
Java
ininteligibles
evoquen
visión
dominio
estructuras
control
datos
cambian
MODELO
DOMINIO
VISUALIZACIÓN
CONCEPTOS
139
Figura
10.10
diseño
programación
objetos
normal
crear
clases
software
cuyos
nombres
información
inspira
dominio
mundo
real
Pago
cantidad
Venta
fecha
hora
Pago-por
Pago
cantidad
Dinero
getDevolucion
Dinero
Venta
fecha
Fecha
horaInicio
Hora
getTotal
Dinero
Pago-por
Modelo
Dominio
UP
Vista
personal
involucrado
conceptos
relevantes
dominio
Modelo
Diseño
UP
desarrollador
orientado
objetos
inspirado
dominio
mundo
real
crear
clases
software
salto
representación
personal
involucrado
concibe
dominio
representación
software
reducido
pago
Modelo
Dominio
concepto
Pago
Modelo
Diseño
clase
software
inspiró
nombre
definición
inspira
objetos
nombres
ideas
tecnología
objetos
reduce
salto
representación
tecnología
objetos
valiosa
favorecer
diseño
sistemas
elegantes
débilmente
acoplados
crecer
ampliarse
fá-
cilmente
veremos
queda
libro
reducción
salto
repre-
sentación
útil
sostener
secundario
ventaja
ofrecen
objetos
facilitar
cambios
extensiones
soporte
ofrecen
manejo
ocultación
complejidad
10.10
Ejemplo
Modelo
Dominio
PDV
NuevaEra
lista
clases
conceptuales
generadas
dominio
PDV
NuevaEra
representar
gráficamente
Figura
10.11
mo
strar
comienzo
Modelo
Dominio
140
UML
PATRONES
Figura
10.11
Modelo
Dominio
inicial
TiendaRegistro
VentaArticulo
Pago
Linea
DeVenta
Cajero
Cliente
Encargado
Catalogo
DeProductos
Especificacion
DelProducto
consideraciones
acerca
atributos
asociaciones
Modelo
Dominio
posponen
capítulos
siguientes
10.11
Modelos
Dominio
UP
sugiere
ejemplo
Tabla
10.2
Modelo
Dominio
normalmente
inicia
completa
elaboración
Inicio
modelos
dominio
incentivan
fuertemente
fase
inicio
puesto
propósito
inicio
cabo
estudio
serio
decidir
merece
pena
estudio
profundo
proyecto
fase
elaboración
Elaboración
Modelo
Dominio
crea
iteraciones
elaboraci
ón
necesidad
importante
entender
conceptos
relevantes
trasladar
al-
gunos
clases
software
trabajo
diseño
MODELO
DOMINIO
VISUALIZACIÓN
CONCEPTOS
141
irónicamente
dedicarán
número
significativo
páginas
explicar
modelado
objetos
dominio
manos
experimentadas
desarrollo
mo-
delo
dominio
parcial
desarrollado
incrementalmente
iteración
debería
durar
horas
acorta
patrones
análisis
predefinidos
Modelo
Objetos
Negocio
UP
vs
Modelo
Dominio
Modelo
Dominio
UP
variación
oficial
meno
común
Modelo
Objetos
Negocio
UP
BOM
Business
Object
Model
BOM
UP
con-
fundir
personas
métodos
definir
BOM
término
ampliamente
utilizado
significados
tipo
modelo
empresa
utilizado
describir
negocio
completo
utilizarse
cabo
ingeniería
reingeniería
procesos
negocio
independiente
aplicación
software
PDV
NuevaEra
Citando
textualmente
BOM
UP
sirve
abstracción
trabajadores
entidade
negocio
nece
sitan
relacionar
ómo
nece
sitan
colaborar
cabo
negocio
RUP
BOM
representa
diagramas
clase
actividad
secuencia
muestran
funciona
debería
funcionar
empresa
útil
rea-
liza
ingeniería
procesos
negocio
empre
sa
actividad
común
creación
única
aplicación
software
consecuencia
UP
define
Modelo
Dominio
artefacto
subcon-
especialización
BOM
crea
normalmente
Citando
textualmente
Puedes
elegir
desarrollar
modelo
objetos
negocio
incompleto
enfo-
cado
explicar
cosas
productos
importantes
dominio
referencia
modelo
dominio
RUP
Tabla
10.2
Muestra
artefactos
UP
evolución
temporal
comenzar
refinar
Disciplina
Artefacto
Inicio
Elab
Const
Trans
Iteración
/p59I1
E1
C1
Cn
T1
T2
Modelado
Negocio
Modelo
Dominio
Requisitos
Modelo
Casos
Visión
Especificación
Complementaria
cr
Glosario
Diseño
Modelo
Diseño
Documento
Arquitectura
SW
Modelo
Datos
Implementación
Modelo
Implementación
Gestión
Proyecto
Plan
Desarrollo
SW
Pruebas
Modelo
Pruebas
Entorno
Marco
Desarrollo
r10.12
Lecturas
adicionales
Object-Oriented
Methods
Foundation
Odell
proporciona
sólida
introducción
modelado
dominio
conceptual
resulta
útil
Design
Object
Systems
Cook
and
Daniel
Analysis
Patterns
Fowler
ofrece
importantes
patrones
modelos
dominio
recomienda
duda
libro
describe
patrones
mo-
delos
dominio
Data
Model
Patterns
Conventions
of
Thought
con-
sejos
expertos
modelado
datos
entienden
distinción
mo-
delos
conceptuales
puros
modelos
esquemas
bases
datos
útiles
modelado
objetos
dominio
Java
Modeling
in
Color
with
UML
CDL99
contiene
consejos
relevantes
modelado
dominio
sugiere
título
autor
identifica
patrones
comunes
tipos
relacionados
asociaciones
aspecto
color
realmente
vi
sualización
categorías
típicas
tipos
descripción
azul
roles
ama-
rillo
momento-intervalos
rosa
color
utiliza
ayudar
patrones
trabajo
original
Abbot
análisis
lingüístico
adquirido
técnicas
sofisticadas
análisis
orientado
objetos
generalmente
denominado
modelado
lenguaje
natural
variante
Véase
Moreno97
ejemplo
10.13
Artefactos
UP
influencia
artefactos
destacando
Modelo
Dominio
muestra
Figura
10.12
142
UML
PATRONESMODELO
DOMINIO
VISUALIZACIÓN
CONCEPTOS
143
Figura
10.12
Muestra
influencia
artefactos
UP
Glosario
Doc
Arquitec-
tura
Software
Modelo
Dominio
Requisitos
Gestión
Proyecto
Modelado
Negocio
Diseño
Muestra
artefactos
UP
Artefactos
parciales
refinados
iteración
Pruebas
Plan
Pruebas
Plan
Des
Software
Modelo
Casos
texto
casos
Sistema
foo
contratos
operaciones
sistema
diagramas
secuencia
sistema
diagramas
casos
cambia
objetos
dominio
atributos
asociaciones
términos
conceptos
atributos
asociaciones
elaboración
términos
modelo
dominio
clases
software
capa
dominio
diseño
inspiran
nombres
atributos
asociaciones
modelo
dominio
Modelo
Diseño
bar
Entorno
Marco
DesarrolloObjetivos
Identificar
asociaciones
modelo
dominio
Distinguir
asociaciones
necesito-conocer
sólo-comprensión
Introducción
Resulta
útil
identificar
asociaciones
clases
conceptuales
necesa-
rias
satisfacer
requisitos
información
escenarios
actuales
desarrollando
ayudan
entender
modelo
dominio
capítulo
explora
identificación
asociaciones
adecuadas
añade
asociaciones
modelo
do-
minio
caso
estudio
NuevaEra
11.1
Asociaciones
asociación
relación
tipos
concretamente
instancias
ti-
pos
indica
conexión
significativa
interesante
Figura
11.1
UML
asociaciones
definen
relación
semántica
clasificadores
implica
conexiones
instancias
Capítulo
11
MODELO
DOMINIO
AÑADIR
ASOCIACIONESCriterio
asociaciones
útiles
asociaciones
merece
pena
registrar
normalmente
implican
conocimiento
relación
necesario
conservar
tiempo
milisegundos
años
dependiendo
contexto
palabras
objetos
necesitamos
mantener
memoria
relación
ejemplo
necesitamos
recordar
instancias
LineaDeVenta
asociadas
instancia
Venta
duda
reconstruir
venta
imprimir
recibo
calcular
venta
Considere
inclusión
siguientes
asociaciones
modelo
dominio
Asociaciones
necesario
conservar
conocimiento
relación
tiempo
asociaciones
necesito-conocer
Asociaciones
derivadas
Lista
Asociaciones
Comunes
contrario
necesitamos
recordar
relación
Venta
actual
En-
cargado
requisitos
entender
necesite
relación
tipo
incorrecto
mostrar
relación
Venta
Encargado
convincente
útil
contexto
requisitos
punto
importante
modelo
dominio
clases
dominio
di-
ferentes
existir
n(n-1
asociaciones
clases
conceptuales
nú-
mero
potencialmente
líneas
diagrama
añadirán
ruido
visual
hará
comprensible
cuidadoso
añadir
líneas
asociación
Utilice
criterio
guías
sugieren
capítulo
11.2
Notación
asociaciones
UML
asociación
representa
línea
clases
nombre
asociación
asociación
inherentemente
bidireccional
significa
instancias
cualquiera
clases
recorrido
lógico
recorrido
puramente
abstracto
sentencia
conexiones
entidades
software
extremos
asociación
contener
expresión
multiplicidad
indica
relación
numérica
instancias
clases
146
UML
PATRONES
Figura
11.1
Asociaciones
VentaRegistro
Registra-la-actual
11
asociaciónUna
flecha
direcci
ón
lectura
opcional
indica
direcci
ón
lectura
nombre
asociación
indica
dirección
visibilidad
navegación
presente
convención
leer
asociación
izquierda
derecha
abajo
regla
UML
Figura
11.2
MODELO
DOMINIO
AÑADIR
ASOCIACIONES
147
Figura
11.2
Notación
UML
asociaciones
VentaRegistro
Registra-la-actual
11
nombre
asociación
multiplicidad
flecha
dirección
lectura
significado
indicar
dirección
lectura
etiqueta
asociación
excluye
flecha
dirección
lectura
significado
términos
modelo
ayuda
lector
diagrama
11.3
Localización
asociaciones—lista
asociaciones
comunes
Comience
inclusión
asociaciones
utilizando
lista
Tabla
11.1
Contiene
categorías
comunes
normalmente
merece
pena
ejemplos
extraído
dominios
ventas
reservas
vuelos
Tabla
11.1
Lista
asociaciones
comunes
Categoría
Ejemplos
física
Cajon-Registro
concretamente
TPDV
Ala-Avion
lógica
LineaDeVenta-Venta
EtapaVuelo-RutaVuelo
contenido
físicamente
Registo-Tienda
Articulo-Estanteria
Pasajero-Avion
contenido
lógicamente
DescripcionDelArticulo-Catalogo
Vuelo-PlanificacionVuelo
continúaAsociaciones
prioridad
alta
continuación
presentamos
categorías
asociaciones
prioridad
alta
invariablemente
útiles
incluirlas
modelo
dominio
lógica
física
B.
contenida
física
lógicamente
B.
registra
B.
11.4
Guías
asociaciones
Céntrese
asociaciones
necesita
conservar
conocimiento
relación
tiempo
asociaciones
necesito-conocer
importante
identificar
clases
conceptuales
identificar
asociaciones
148
UML
PATRONES
Tabla
11.1
Lista
asociaciones
comunes
Continuación
Categoría
Ejemplos
descripción
DescripcionDelArticulo-Articulo
DescripcionDelVuelo-Vuelo
línea
transacción
LineaDeVenta-Venta
informe
TrabajoMantenimiento-RegistroDe-
Mantenimiento
conoce
registra
recoge
informa
cap-
Venta-Registro
tura
Reserva-ListaPasajeros
miembro
Cajero-Tienda
Piloto-CompañiaAerea
subunidad
organizativa
Departamento-Tienda
Mantenimiento-CompañiaAerea
utiliza
gestiona
Cajero-Registro
Piloto-Avion
comunica
Cliente-Cajero
AgenteDeReservas-Pasajero
relacionado
transacción
Cliente-Pago
Pasajero-Billete
transacción
relacionada
Pago-Venta
transacción
Reserva-Cancelacion
LineaDeVenta-LineaDeVenta
Ciudad-Ciudad
propiedad
Registro-Tienda
Avion-CompañiaAerea
evento
relacionado
Venta-Cliente
Venta-Tienda
Salida-Vuelo•
Demasiadas
asociaciones
tienden
confundir
modelo
dominio
lugar
acla-
rarlo
descubrimiento
tiempo
beneficio
marginal
Evite
mostrar
asociaciones
redundantes
derivadas
11.5
Roles
extremo
sociación
denomina
rol
roles
opcional
mente
Nombre
•E
xpresión
multiplicidad
Navegabilidad
multiplicidad
presenta
continuación
características
dis-
cutirán
capítulos
posteriores
Multiplicidad
multiplicidad
define
instancias
clase
asociarse
ins-
tancia
clase
Figura
11.3
MODELO
DOMINIO
AÑADIR
ASOCIACIONES
149
Figura
11.3
Multiplicidad
asociación
ArticuloTienda
Almacena
multiplicidad
rol
ejemplo
instancia
individual
Tienda
asociarse
cero
indicado
instancias
Articulo
Figura
11.4
muestran
ejemplos
expresiones
multiplicidad
valor
multiplicidad
indica
instancias
asociar
legalmente
momento
concreto
lugar
periodo
tiempo
ejem-
plo
coche
usado
pudiera
tiempo
vendido
repetida-
mente
comerciantes
coches
usados
momento
concreto
coche
Abastecido-por
comerciante
coche
Abastecido-por
comerciantes
momento
concreto
Análogamente
países
leyes
monógamas
persona
pue-
star
Casado-con
persona
momento
tiempo
puedan
casarse
personas
valor
multiplicidad
depende
intereses
modeladores
de-
sarrolladores
software
pone
manifiesto
restricción
diseño
reflejada
software
Figura
11.5
muestra
ejemplo
explicación.150
UML
PATRONES
Figura
11.4
Valores
multiplicidad
cero
40
exactamente
40
T3
exactamente
Figura
11.5
multiplicidad
dependiente
contexto
ArticuloTienda
Almacena
multiplicidad
debería
respuesta
depende
interés
utilizar
modelo
Típica
prácticamente
multiplicidad
denota
restricción
dominio
preocupamos
capaces
comprobar
software
relación
implementase
reflejase
objetos
software
base
datos
ejemplo
concreto
artículo
llegar
venderse
desecharse
almacenaría
tienda
tiempo
punto
vista
lógico
preocupa
punto
vista
implementa
relación
software
probablemente
querríamos
asegurar
instancia
software
Articulo
relacionara
instancia
concreta
Tienda
indica
error
corrupción
elementos
software
datos
modelo
dominio
parcial
representa
objetos
software
multiplicidades
registran
restricciones
cuyo
valor
práctico
normalmente
relacionado
interés
construcción
software
bases
datos
reflejan
dominio
mundo
real
comprobaciones
validez
punto
vista
valor
deseable
Rumbaugh
proporciona
ejemplo
Persona
Compañia
asociación
Tra-
baja-para
Rumbaugh91
indiquemos
instancia
Persona
trabaja
instancias
Compañia
dependiente
contexto
modelo
partamento
impuestos
interesado
sindicato
probablemente
Normalmente
elección
prácticamente
depende
constru-
yendo
software
multiplicidades
válidas
implementación
11.6
detalladas
asociaciones
asociaciones
importantes
error
típico
crear
modelos
dominio
dedicar
tiempo
estudio
intentando
descubrirlas
fundamental
entender
importante
encontrar
clases
conceptualesque
asociaciones
mayoría
tiempo
dedicado
creación
modelo
dominio
debería
emplearse
identifica-
ción
clases
conceptuales
asociaciones
11.7
Asignación
nombres
asociaciones
Nombre
asociación
base
formato
NombreTipo-FraseVerbal-NombreTipodonde
frase
verbal
crea
secuencia
legible
significado
contexto
modelo
nombres
asociaciones
comenzar
letra
may
úscula
puesto
asociación
representa
clasificador
enlace
instancias
UML
clasificadores
comenzar
letra
may
úscula
formatos
típicos
igual-
mente
válidos
nombre
asociación
compuesta
Pagado-mediante
PagadoMediante
Figura
11.6
dirección
defecto
lectura
nombres
aso-
ciaciones
izquierda
derecha
abajo
corresponde
dirección
defecto
UML
convención
común
MODELO
DOMINIO
AÑADIR
ASOCIACIONES
151
Figura
11.6
Nombres
asociaciones
Tienda
Contiene
Persona
CompañiaAerea
Emplea
VentaRegistro
Captura
PagoPagado-mediante
VueloAsignado-a
Avion
Asignado-a
Supervisa
11
1152
UML
PATRONES
Figura
11.7
Múltiples
asociaciones
Vuelo
Aeropuerto
Vuela-a
Vuela-desde
11.8
Múltiples
asociaciones
tipos
tipos
últiples
asociaciones
extraño
exi
ste
ejemplo
destacado
caso
estudio
PDV
ejemplo
do-
minio
compañía
aérea
relaciones
Vuelo
preci
sa
EtapaVuelo
Aeropuerto
Figura
11.7
sociaciones
vuela-a
vuela-desde
relaciones
claramente
deberían
mostrar
separada
11.9
Asociaciones
implementación
modelado
dominio
sociación
declaración
flujo
datos
variables
instancia
conexiones
objetos
solución
software
manifestación
relaci
ón
significativa
sentido
puramente
ceptual
mundo
real
punto
vista
práctico
rela-
ciones
implementarán
generalmente
software
caminos
navegación
vi-
sibilidad
Modelo
Diseño
Modelo
Datos
sup
esencia
vi
sta
conceptual
sencial
modelo
dominio
requiere
imple-
mentación
crear
modelo
dominio
podríamos
definir
asociaciones
necesa-
rias
implementaci
ón
inver
sa
podr
íamos
descubrir
asociaciones
necesitan
implementarse
obviaron
modelado
dominio
es-
tos
casos
modelo
dominio
actualizarse
reflejar
descubrimientos
Sugerencia
Deberían
actualizarse
anteriores
modelos
estudiados
modelo
dominio
apreciaciones
descubiertas
trabajo
implementación
moleste
práctico
modelo
futuro
únicamente
caso
artefacto
temporal
utiliza
inspirar
etapas
si-
guientes
utilizará
significativa
actualizarlo
Evite
actualizar
modelo
documentación
exista
justi-
ficación
concreta
futura
utilización
Posteriormente
estudiaremos
formas
implementar
asociaciones
lenguaje
programación
orientado
objetos
habitual
utilizar
atributo
refe-
rencia
instancia
clase
asociada
momento
conveniente
pensar
expresiones
puramente
conceptuales
declaraciones
solución
base
datos
software
posponer
consideraciones
diseño
libera
informacione
deci
siones
extrañas
mientra
hacemo
studio
análisis
puro
maximiza
opciones
diseño
adelante.11.10
Asociaciones
Modelo
Dominio
PDV
NuevaEra
añadir
asociaciones
modelo
dominio
PDV
Debe-
ríamos
añadir
asociaciones
requisitos
ejemplo
casos
su-
gieren
implican
necesidad
recordar
recomienda
fuerte-
mente
nue
stra
percepci
ón
dominio
problema
abordamo
problema
categorías
comunes
asociaciones
presentadas
anteriormente
deberían
revisarse
tenerse
puesto
representan
asociaciones
rele-
vantes
normalmente
necesitan
recogerse
Relaciones
evidentes
Tienda
muestra
asociaciones
justificable
términos
necesito-conocer
basa
casos
considerando
actualmente
Registro
Registra
Venta
venta
actual
ge
nerar
imprimir
recibo
Venta
Pagada-mediante
Pago
pagado
venta
relacionar
cantidad
tregada
venta
imprimir
recibo
CatalogoDeProductos
Registra
recuperar
Especific
acion
EspecificacionDelProducto
DelProducto
articu-
loID
Aplicación
lista
comprobación
categorías
asociaciones
Recorreremos
lista
comprobación
basada
tipos
identificados
previamente
considerando
requisitos
caso
actual
MODELO
DOMINIO
AÑADIR
ASOCIACIONES
153
Categoría
Sistema
física
Registro—Caja
lógica
LineaDeVenta—Venta
contenido
físicamente
Registo—Tienda
Articulo—Tienda
contenido
lógicamente
EspecificacionDelProducto—Catalogo-
DeProductos
CatalogoDeProductos—Tienda
descripción
EspecificacionDelProducto-Articulo
continúa11.11
Modelo
Dominio
PDV
NuevaEra
modelo
dominio
Figura
11.8
muestra
conjunto
clases
conceptuales
asociaciones
candidatas
aplicación
PDV
asociaciones
de-
rivaron
lista
comprobación
asociaciones
candidatas
Conservamos
asociaciones
necesito-conocer
conjunto
asociaciones
muestran
modelo
dominio
Figura
11.8
derivaron
forma
mecánica
lista
comprobación
asociaciones
deseable
fuéramos
cuidadosos
aso-
ciaciones
incluimos
modelo
dominio
Vista
herramienta
comunicación
deseable
sobrecargar
modelo
dominio
asociaciones
necesitan
forzosamente
favorecen
comprensión
Demasiadas
aso-
ciaciones
imprescindibles
oscurecen
lugar
aclarar
sugirió
previamente
recomienda
criterio
mo
strar
asociaciones
Céntrese
asociaciones
conocimiento
relación
necesita
conservarse
tiempo
asociaciones
necesito-conocer
Evite
mostrar
asociaciones
redundantes
derivadas
154
UML
PATRONES
Categoría
Sistema
línea
transacción
LineaDeVenta—Venta
informe
conoce
registra
recoge
informa
cap-
completa)Venta—Tienda
tura
actual)Venta—Registro
miembro
Cajero—Tienda
subunidad
organizativa
aplicable
utiliza
gestiona
Cajero—Registro
Encargado—Registro
Encargado—Cajero
probablemente
aplicable
comunica
Cliente—Cajero
relacionado
transacción
Cliente—Pago
Cajero—Pago
transacción
relacionada
Pago—Venta
transacción
LineaDeVenta—LineaDeVenta
propiedad
Registro—Tienda
informe
BEn
base
consejo
asociaciones
acaban
mostrar
im-
prescindibles
Considere
MODELO
DOMINIO
AÑADIR
ASOCIACIONES
155
Figura
11.8
Modelo
dominio
parcial
Registro
ArticuloTienda
Venta
Pago
Linea
DeVenta
CajeroCliente
Encargado
Catalogo
DeProductos
Especificacion
DelProducto
Almacena
Alberga
Usado-por
Contiene
Describe
Capturada-en
Contenido-en
Descrita-por
Registra-venta-de
Iniciado-por
Pagada-mediante
Iniciada-por
Registra-
completas
Registra-ventas-en
11
11
Iniciada-por
Asociación
Comentario
Venta
Insertada-por
Cajero
requisitos
indican
necesito-conocer
registrar
cajero
actual
derivarse
presente
asociación
Registro
Usado-por
Cajero
Registro
Usado-por
Cajero
requisitos
indican
necesito-conocer
registrar
cajero
actual
Registro
Iniciado-por
Encargado
requisitos
indican
necesito-conocer
registrar
encargado
pone
marcha
Registro
Venta
Iniciada-por
Cliente
requisitos
indican
necesito-conocer
registrar
cliente
inicia
venta
Tienda
Almacena
Articulo
requisitos
indican
necesito-conocer
mantener
información
inventario
LineaDeVenta
Registra-venta-de
requisitos
indican
necesito-conocer
Articulo
mantener
información
inventario.156
UML
PATRONES
Nótese
capacidad
justificar
asociación
función
necesito-conocer
depende
requisitos
obviamente
cambio
necesite
mos-
trar
recibo
ID
cajero
cambia
necesidad
recordar
relación
Basado
análisis
justificarse
eliminación
asociaciones
cuestión
Asociaciones
necesito-conocer
vs
comprensión
criterio
necesito-conocer
estricto
mantenimiento
asociaciones
generará
modelo
información
mínimo
necesita
modelar
dominio
problema
limitado
requisitos
actuales
considerando
em-
bargo
enfoque
crear
modelo
transmite
comprensión
completa
dominio
modelo
necesito-conocer
información
cosas
mo-
delo
dominio
herramienta
comunicación
intentando
en-
tender
comunicar
conceptos
importantes
relaciones
pun-
to
vista
eliminando
asociaciones
exigen
estrictamente
base
necesito-conocer
crear
modelo
interés
comunica
ideas
claves
re-
laciones
ejemplo
aplicación
PDV
tomando
base
relaciones
necesito-conocer
estricta
necesario
registrar
Venta
Iniciada-por
Cliente
sua
usencia
deja
aspecto
importante
entender
dominio
cliente
genera
ventas
sociaciones
modelo
sitúa
modelo
necesito-conocer
mínimo
ilustra
relación
concebible
crite-
rio
básico
juzgar
valor
Satisface
requisitos
necesito-conocer
ade-
comunica
claramente
conocimiento
esencial
conceptos
importantes
dominio
problema
Céntrese
asociaciones
necesito-conocer
contemple
asociaciones
sólo-comprensión
enriquecer
conocimiento
básico
dominio
Objetivos
Identificar
atributos
modelo
dominio
Distinguir
atributos
correctos
incorrectos
Introducción
Resulta
útil
identificar
atributos
clases
conceptuales
necesitan
satisfacer
requisitos
información
actuales
escenarios
estudio
ca-
pítulo
explora
identificación
atributos
adecuados
añade
atributos
mo-
delo
dominio
NuevaEra
12.1
Atributos
atributo
valor
datos
lógico
objeto
Incluya
siguientes
atributos
modelo
dominio
re-
quisitos
ejemplo
casos
sugieren
implican
necesidad
registrar
información
Capítulo
12
MODELO
DOMINIO
AÑADIR
ATRIBUTOS
error
tardío
indistinguible
característica
Rich
KulawiecPor
ejemplo
recibo
recoge
informaci
ón
venta
normalmente
in
cluye
fecha
hora
dirección
fechas
horas
ven-
tas
múltiples
motivos
consecuencia
clase
conceptual
Venta
necesita
atri-
butos
fecha
hora
12.2
Notación
atributos
UML
atributos
muestran
compartimento
rectángulo
clase
Figura
12.1
tipos
mostrarse
opcionalmente
158
UML
PATRONES
Figura
12.1
Clases
atributos
Venta
fecha
horaInicio
Hora
atributos
12.3
Tipos
atributos
válidos
cosas
deberían
representarse
atributos
asociacio-
nes
sección
presenta
tipos
válidos
Mantenga
atributos
simples
Intuitivamente
mayoría
atributos
simples
conocen
tipos
datos
primitivos
números
tipo
atributo
normalmente
debería
concepto
dominio
complejo
Venta
Aeropuerto
ejem-
plo
atributo
registroActual
clase
Cajero
Figura
12.2
de-
seable
tipo
intención
Registro
tipo
atributo
simple
Numero
String
útil
expresar
Cajero
utili-
za
Registro
asociación
atributo
Figura
12.2
Relaciones
asociaciones
atributos
Cajero
nombre
registroActual
Cajero
nombre
Registro
numero
Utiliza
atributo
simple
atributos
modelo
dominio
deberían
preferiblemente
atributos
simples
tipos
datos
tipos
datos
atributos
comunes
incluyen
Boolean
Fecha
Numero
String
Texto
Hora
tipos
comunes
comprenden
Direccion
Color
Geometrico
Punto
Rectangulo
Numero
Telefono
Numero
Seguridad
Social
Codigo
Producto
Universal
UPC
Universal
Product
Code
SKU
ZIP
códigos
postales
tipos
enumerados
Repitiendo
ejemplo
previo
error
típico
modelar
concepto
dominio
complejo
atributo
ilustrarlo
aeropuerto
destino
realmente
cadena
texto
cosa
compleja
ocupa
kilómetros
cuadrados
espacio
Vuelo
debería
relacionarse
Aeropuerto
asocia-
ción
atributo
muestra
Figura
12.3
MODELO
DOMINIO
AÑADIR
ATRIBUTOS
159
Figura
12.3
Evite
representación
conceptos
dominio
complejos
atributos
utilice
asociaciones
Vuelo
Vuelo
destino
Vuela-a
Aeropuerto11
destino
concepto
complejo
Relacione
clases
conceptuales
asociación
atributo
Perspectiva
conceptual
vs
implementación
sucede
atributos
código
restricción
tipo
atributos
modelo
dominio
tipo
datos
simple
implica
atributos
H11001
H11001o
Java
miembros
datos
campos
instancia
deban
tipos
datos
primitivos
simples
modelo
dominio
centra
declaraciones
conceptuales
puras
dominio
problema
componentes
software
Posteriormente
trabajo
diseño
implementación
verá
aso-
ciaciones
objetos
representadas
modelo
dominio
imple-
mentarán
atributos
referencian
objetos
software
complejos
em-
bargo
po
sibles
soluciones
di
seño
implementar
asociación
decisión
deba
posponer
modelado
dominio
Tipos
datos
atributos
generalmente
tipos
datos
término
UML
im-
plica
conjunto
valores
significativa
identidad
única
contexto
nue
stro
modelo
sistema
RJB
99
ejemplo
normalmente
significativo
distinguir
instancias
Numero
instancias
String
gato’.•
instancias
NumeroDeTelefono
contiene
número
instancias
Direccion
contiene
dirección
contrario
significativo
distinguir
identidad
instancias
Per-
sona
cuyos
nombres
casos
Luis
García
puesto
instancias
representar
individuos
nombre
software
situaciones
comparar
ía
direc-
ciones
memoria
instancias
Numero
String
NumeroDeTelefono
Direccion
relevantes
comparaciones
basadas
valores
contrario
com-
prensible
comparar
direcciones
memoria
instancias
Persona
yd
stin-
guirlas
valores
atributos
importante
identidad
única
tipos
primitivos
número
string
tipos
datos
UML
tipos
datos
primitivos
ejemplo
NumeroDeTelefono
tipo
dato
primitivo
valores
tipos
datos
conocen
objetos
valor
noción
tipos
datos
sutil
regla
empírica
fiel
prue-
ba
básica
tipos
atributos
simples
hágalo
atributo
natural
número
string
booleano
fecha
hora
etcétera
caso
repre-
séntelo
clase
conceptual
aparte
caso
duda
defina
clase
conceptual
aparte
lugar
atri-
buto
12.4
Clases
tipos
datos
primitivos
tipo
atributo
representarse
clase
primitiva
derecho
pro-
pio
modelo
dominio
ejemplo
sistema
PDV
identificador
artículo
Generalmente
ve
simplemente
número
debería
re-
presentar
clase
primitiva
Aplique
guía
Represente
considerarse
inicialmente
tipo
dato
primitivo
número
string
clase
primitiva
compuesto
secciones
separadas
Número
teléfono
nombre
persona
Habitualmente
operaciones
asociadas
análisis
sintáctico
validación
Número
seguridad
social
atributos
precio
promoción
fecha
efectiva
comienzo
cantidad
unidad
160
UML
PATRONES
cantidad
pago
unidad
monetaria
abstracción
tipos
cualidades
identificador
artículo
dominio
ventas
generalización
tipos
Código
Producto
Universal
UPC
Número
Artículo
Europeo
EAN
Aplicando
guías
atributos
modelo
dominio
PDV
llegamos
si-
guiente
análisis
•E
identificador
artículo
abstracción
esquemas
codificación
comunes
incluyendo
UPC-A
UPC-E
familia
squemas
EAN
es-
quemas
codificación
numéricos
subpartes
identifican
fabricante
producto
país
EAN
dígito
control
validarlo
s.
de-
bería
existir
clase
primitiva
ArticuloID
puesto
satisface
guías
anteriores
atributos
precio
cantidad
deberían
clases
primitivas
Cantidad
Moneda
cantidades
unidad
monetaria
•E
atributo
direccion
clase
primitiva
Direccion
secciones
clases
ArticuloID
Direccion
Cantidad
tipos
datos
significativa
identidad
única
instancias
merece
pena
considerarlas
clases
inde-
pendientes
cualidades
representamos
clases
tipos
datos
Debería
mostrarse
clase
ArticuloID
clase
conceptual
independiente
modelo
dominio
Depende
quiera
re
saltar
diagrama
Pue
sto
ArticuloID
tipo
datos
importante
identidad
única
instancias
mostrar
compartimento
atributos
rectángulo
clase
muestra
Figura
12.4
puesto
clase
primitiva
atributos
asociaciones
interesante
mostrarla
clase
conceptual
rectángulo
respuesta
correcta
depende
esté
utili-
zando
modelo
dominio
herramienta
comunicación
importancia
conceptos
dominio
MODELO
DOMINIO
AÑADIR
ATRIBUTOS
161
Figura
12.4
clase
atributo
tipo
datos
mostrarse
rectángulo
atributo
OK
OK
ArticuloIDEspecificacion
DelProducto
Especificacion
DelProducto
id
ArticuloID
DireccionTienda
Tienda
direccion
Direccion
111Un
modelo
dominio
herramienta
comunicación
elecciones
muestra
hacerse
consideración
mente
12.5
Deslizarse
diseño
atributo
clave
ajena
deberían
utilizar
atributos
relacionar
clases
conceptuales
mo
delo
dominio
violación
típica
principio
añadir
tipo
atribu-
to
clave
ajena
normalmente
di
seño
bases
datos
relacio-
nales
asociar
tipos
ejemplo
Figura
12.5
deseable
atributo
numeroRegistroActual
clases
Cajero
propósito
relacionar
Cajero
objeto
Registro
expresar
Cajero
utiliza
Registro
asociación
atributo
clave
ajena
relacione
ti-
pos
asociación
atributo
162
UML
PATRONES
Figura
12.5
utilice
atributos
claves
ajenas
Cajero
nombre
numeroRegistroActual
Cajero
nombre
Registro
numero
Utiliza
atributo
simple
utiliza
clave
ajena
relacionar
objeto
formas
relacionar
objetos
claves
ajenas
yp
spondremos
implementar
relaci
ón
sta
di
seño
evitar
deslizamiento
diseño
12.6
Modelado
cantidades
unidades
atributos
mayoría
cantidades
numéricas
deberían
representarse
simplemente
números
Considere
precio
velocidad
cantidades
unidades
asociadas
habitual
necesite
unidad
soporte
conversiones
soft-
ware
PDV
NuevaEra
mercado
internacional
necesita
soportar
precios
monedas
caso
general
solución
consiste
representar
Canti-
dad
clase
conceptual
aparte
Unidad
asociada
Fowler96
Puesto
cantidades
consideran
tipos
datos
importante
identidad
única
instancias
aceptable
reco
ger
representación
sección
atributo
rec
tángulo
cla
Figura
12.6
com
ún
mostrar
especializaciones
Cantidad
Dinero
clase
Cantidad
cuyas
unidades
monedas
Peso
cantidad
cuyas
unidades
kilogramos
libras.12.7
Atributos
Modelo
Dominio
NuevaEra
atributos
elegidos
reflejan
requisitos
iteración
escenarios
Pro-
cesar
Venta
iteración
Pago
cantidad
capturar
cantidad
tambi
én
conocida
cantidad
entregada
determinar
proporciona
pago
suficiente
calcular
cambio
Especificacion
descripcion
mostrar
descripción
pantalla
DelProducto
recibo
id
buscar
EspecificacionDelProducto
arti
culoID
introducido
necesario
relacionarlas
id
precio
calcular
venta
mostrar
precio
línea
venta
Venta
fecha
hora
recibo
informe
papel
venta
Normalmente
muestra
fecha
hora
venta
LineaDeVenta
cantidad
registrar
cantidad
introducida
artículo
línea
venta
ejemplo
pa-
quetes
tofu
Tienda
direccion
nombre
recibo
requiere
nombre
dirección
tienda
12.8
Multiplicidad
LineaDeVenta
Articulo
cajero
reciba
grupo
artículos
iguales
ejemplo
paquetes
tofu
introduzca
articuloID
spués
introduzca
cantidad
MODELO
DOMINIO
AÑADIR
ATRIBUTOS
163
Figura
12.6
Modelado
cantidades
Pago
cantidad
Numero
Pago
Cantidad
cantidad
Numero
Unidad
Pago
cantidad
Cantidad
Tiene-cantidad
Está-en
útil
cantidades
valores
datos
simples
adecuado
representarlas
sección
atributos
Pago
cantidad
Dinero
variación
Dinero
especialización
Cantidad
cuya
unidad
monedaejemplo
consecuencia
LineaDeVenta
individual
asociar
instancia
artículo
cantidad
introducida
cajero
podr
ía
registrarse
atributo
Li-
neaDeVenta
Figura
12.8
cantidad
calcular
valor
multiplicidad
actual
relación
pudiera
caracterizarse
atri-
buto
derivado
derivarse
información
UML
atributo
derivado
indica
símbolo
164
UML
PATRONES
Figura
12.7
Modelo
dominio
muestra
atributos
Registro
Articulo
Tienda
direccion
Direccion
nombre
Texto
Venta
fecha
Fecha
hora
Hora
Pago
cantidad
Dinero
LineaDeVenta
cantidad
Dinero
Cajero
Cliente
Encargado
Catalogo
DeProductos
Especificacion
DelProducto
descripcion
Texto
precio
Dinero
id
ArticuloID
Figura
12.8
Registro
cantidad
artículos
vendidos
línea
venta
LineaDeVenta
ArticuloRegistra-Venta-De
10
LineaDeVenta
ArticuloRegistra-Venta-De0
línea
venta
registra
artículo
vendido
distinto
ejemplo
paquete
tofu
línea
venta
registrar
grupo
artículos
clase
ejemplo
paquetes
tofu
LineaDeVenta
/cantidad
ArticuloRegistra-Venta-De0
atributo
derivado
valor
multipilicidad
12.9
Conclusión
Modelo
Dominio
combinación
clases
conceptuales
asociaciones
atributos
descubiertos
estudio
lugar
modelo
presenta
Figura
12.9.Se
creado
modelo
dominio
relativamente
útil
dominio
aplicación
PDV
único
modelo
correcto
modelos
apro-
ximaciones
dominio
intentando
entender
modelo
dominio
captura
abstracciones
informaci
ón
esenciales
necesarias
entender
do
minio
contexto
requisitos
actuales
ayuda
gente
entender
dominio
conceptos
terminología
relaciones
MODELO
DOMINIO
AÑADIR
ATRIBUTOS
165
Figura
12.9
modelo
dominio
parcial
Registro
ArticuloTienda
direccion
nombre
Venta
fecha
hora
Pago
cantidad
Linea
DeVenta
cantidad
CajeroCliente
Encargado
Catalogo
DeProductos
Especificacion
DelProducto
descripcion
precio
articuloID
Abastece
Alberga
Utilizado-por
Contiene
Describe
Capturada-en
Contenida-en
Descrita-por
Registra-venta-de
Iniciado-por
Pagada-mediante
Iniciada-por
Registra-
completas
Registra-ventas-en
11
11
1Objetivos
Crear
contratos
operaciones
sistema
Introducción
contratos
operaciones
ayudar
definir
comportamiento
sistema
describen
resultado
ejecución
operaciones
sistema
función
cambios
objetos
dominio
capítulo
explora
13.1
Contratos
casos
principal
mecanismo
UP
describir
comportamiento
sistema
normalmente
suficiente
necesita
descripción
detallada
comportamiento
sistema
contratos
describen
comportamiento
detallado
sistema
función
cambios
obje-
tos
Modelo
Dominio
ejecución
operación
sistema
Operaciones
sistema
interfaz
sistema
definir
contratos
operaciones
sistema
operaciones
sis-
tema
caja
negra
ofrece
interfaz
pública
manejar
eventos
sistema
entrantes
operaciones
sistema
identificar
descubriendo
es-
tos
eventos
sistema
muestra
Figura
13.1
Capítulo
13
MODELO
CASOS
AÑADIR
DETALLES
CONTRATOS
OPERACIONES
Rápido
barato
elija
cualquiera
Anónimo168
UML
PATRONES
conjunto
completo
operaciones
sistema
casos
define
interfaz
pública
sistema
viendo
sistema
componente
clase
individual
UML
sistema
representar
clase
13.2
Ejemplo
contrato
introducirArticulo
examinar
razones
escritura
contrato
merece
pena
presentar
ejemplo
continuaci
ón
presenta
contrato
operaci
ón
sistema
in-
troducirArticulo
Contrato
CO2
introducirArticulo
Operación
introducirArticulo(articuloID
ArticuloID
cantidad
integer
Referencias
cruzadas
Caso
Procesar
Venta
Precondiciones
venta
curso
Postcondiciones
creó
instancia
LineaDeVenta
ldv
creación
ins-
tancias
ldv
asoció
Venta
actual
formación
asociaciones
ldv.cantidad
pasó
cantidad
modificación
atributos
ldv
asoció
EspecificacionDelProducto
base
coincidencia
articuloID
formación
asociaciones
Figura
13.1
operaciones
sistema
manejan
eventos
entrada
Cajero
Sistema
añadirLineaDeVenta(articuloID
cantidad
finalizarVenta
realizarPago(cantidad
descripcion
impuestos
cambio
devuelto
recibo
articulos
crearNuevaVenta
eventos
entrada
sistema
invocan
operaciones
sistema
evento
sistema
crearNuevaVenta
invoca
operación
sistema
denominada
crearNuevaVenta
sucesivamente
programación
orientada
objetos
decimos
mensaje
foo
invoca
método
operación
manejo
foo13.3
Secciones
contrato
descripción
secciones
contrato
muestra
es-
quema
Operación
Nombre
operación
parámetros
Referencias
cruzadas
opcional
Casos
lugar
operación
Precondiciones
Suposiciones
relevantes
sistema
ob-
jetos
Modelo
Dominio
ejecución
opera-
ción
comprobará
lógica
operación
asu-
suposiciones
triviales
lector
Postcondiciones
objetos
Modelo
Dominio
complete
operación
discute
detalle
si-
guiente
sección
13.4
Postcondiciones
Nótese
postcondiciones
ejemplo
introducirArticulo
incluía
categorización
creación
instancias
formación
asociaciones
punto
clave
postcondición
describe
cambios
objetos
Modelo
Dominio
cambios
Modelo
Dominio
comprenden
creación
instancias
for-
mación
rotura
asociaciones
cambio
atributos
postcondiciones
acciones
ejecutarán
operaci
ón
declaracione
objeto
Modelo
Dominio
operación
terminado
humo
despejado
resumen
postcondiciones
dividen
categorías
Creación
eliminación
instancias
Modificación
atributos
Formación
rotura
asociaciones
precisos
enlaces
UML
ejemplo
postcondición
rompe
asociación
considere
operación
permite
eliminación
líneas
venta
post-condición
rom-
pió
asociación
seleccionada
LineaDeVenta
Venta
dominios
cancela
préstamo
alguien
deja
socio
organiza-
ción
rompen
asociaciones
postcondición
eliminación
instancias
rara
mundo
real
normalmente
preocupa
forzar
explícitamente
destrucción
cosa
ejemplo
países
per
sona
MODELO
CASOS
AÑADIR
DETALLES
CONTRATOS
OPERACIONES
169haya
declarado
bancarrota
hayan
años
destruir
registros
declaración
bancarrota
ley
Nótese
perspecti-
conceptual
implementación
declaraciones
liberar
me-
moria
ordenador
ocupada
objetos
software
cualidad
importante
declarativo
enunciar
estilo
orientado
cam-
bio
lugar
orientado
acción
puesto
postcondiciones
declaraciones
resultados
lugar
descripción
acciones
ejecutar
diseño
solución
postcondiciones
relacionan
Modelo
Dominio
postcondiciones
expresan
contexto
objetos
Modelo
Dominio
instancias
crear
Modelo
Dominio
asociaciones
formar
encuentran
Modelo
Dominio
sucesiva-
mente
ventaja
postcondiciones
detalle
analítico
Expresados
estilo
declarativo
cambio
stado
contratos
herra-
mienta
excelente
an
álisis
requi
sitos
scriben
cambio
stado
requiere
operación
sistema
función
objetos
Modelo
Do-
minio
describir
cabo
palabras
diseño
software
solución
diferir
centrarse
analíticamente
suceder
lugar
postcondiciones
sopor-
detalles
grano
fino
declaración
específica
resultado
operación
expresar
nivel
detalle
casos
normal-
mente
deseable
puesto
pasan
excesivamente
elocuentes
de-
tallados
Considere
postcondición
Postcondiciones
creó
instancia
LineaDeVenta
ldv
creación
instan-
cias
ldv
asoció
Venta
actual
formación
asociaciones
ldv.cantidad
pasó
cantidad
modificación
atributos
ldv
asoció
EspecificacionDelProducto
base
coincidencia
articuloID
formación
asociaciones
ning
ún
comentario
crear
in
stancia
LineaDe-
Venta
oc
ómo
asocia
Venta
declaración
escribir
folios
grapen
utilización
tecnología
Java
crear
objetos
software
conectarlos
inserción
filas
base
datos
relacional
170
UML
PATRONESEl
espíritu
postcondiciones
escenario
telón
Exprese
postcondiciones
pa
sado
re
saltar
declaraciones
cambio
ejemplo
creó
LineaDeVenta
lugar
Cree
LineaDeVenta
Piense
postcondiciones
utilizando
imagen
sistema
objetos
presentan
escenario
teatro
operación
tome
fotografía
escenario
Baje
tel
ón
aplique
operaci
ón
sistema
ruido
metálico
ondo
martillos
campanas
gritos
chirridos
Suba
tel
ón
tome
fotografía
Compare
fotografías
posterior
exprese
postcondiciones
cambio
escenario
creó
LineaDeVenta
utilizan
contratos
completas
postcondiciones
contratos
necesarios
cuestión
discute
poste-
rior
sección
asumiendo
desean
contratos
probable
in-
cluso
necesario
genere
conjunto
completo
detallado
po
stcondiciones
operación
sistema
trabajo
requisitos
Trate
creación
suposición
inicial
entendiendo
contratos
completos
tem-
prana
creación
incompleta
ciertamente
diferir
estudio
trabajo
diseño
desarrolladores
preocuparse
diseño
solución
lugar
investigar
detalles
finos
importantes
descu-
brirán
trabajo
di
seño
necesariamente
cosa
mala
es-
fuerzo
dedicado
análisis
requisitos
rendimiento
decrece
Naturalmente
lugar
descubrimiento
trabajo
diseño
documentar
trabajo
requisitos
iteración
posterior
ventajas
desarrollo
iterativo
descubrimientos
generan
iteración
impulsar
estudio
trabajo
análisis
13.5
Discusión
postcondiciones
introducirArticulo
sección
analiza
motivación
postcondiciones
operación
sis-
tema
introducirArticulo
MODELO
CASOS
AÑADIR
DETALLES
CONTRATOS
OPERACIONES
171Creación
eliminación
instancias
introducir
articuloID
cantidad
artículo
objeto
haberse
creado
LineaDeVenta
creó
instancia
LineaDeVental
dv
creación
instancias
Obsérvese
nombre
in
stancia
nombre
simplificará
referencias
instancia
sentencias
post-condición
Modificación
atributos
cajero
introducido
articuloID
cantidad
qu
atributos
objetos
existentes
deberían
haberse
modificado
cantidad
LineaDeVenta
debería
pa
sado
par
ámetro
cantidad
ldv.cantidad
pasó
cantidad
modificación
atributos
Formación
rotura
asociaciones
cajero
introducido
articuloID
cantidad
asociaciones
objetos
existentes
deberían
haberse
formado
roto
LineaDeVenta
debería
haberse
relacionado
Venta
EspecificacionDelPro-
ducto
ldv
asoció
Venta
actual
formación
asociaciones
ldv
asoció
EspecificacionDelProducto
base
coincidencia
ar-
ticuloID
formación
asociaciones
Nótese
indicación
informal
forma
relación
Especificacion-
DelProducto
particular
cuyo
articuloID
corresponda
parámetro
posibles
lenguajes
sofisticados
formales
utilizar
Lenguaje
Restricciones
Objetos
OCL
Object
Constraint
Language
Recomendación
man-
téngalo
simple
13.6
escritura
contratos
lugar
actualizaciones
Modelo
Dominio
normal
creaci
ón
contrato
scubrir
nece
sidad
regi
strar
clases
conceptuales
atributos
asociaciones
Modelo
Dominio
li-
mite
definición
Modelo
Dominio
enriquézcala
haga
descubrimientos
piensa
contratos
operaciones
172
UML
PATRONES13.7
útiles
contratos
Contratos
vs
casos
casos
principal
repo
sitorio
requisitos
proyecto
Podr
ían
pro-
porcionar
mayoría
detalles
necesarios
diseño
cuyo
caso
contratos
útiles
situaciones
de-
talles
complejidad
cambios
requeridos
difíciles
capturar
casos
ejemplo
considere
sistema
reservas
vuelos
operación
sistema
añadirNuevaReserva
complejidad
alta
considerando
objetos
do-
minio
cambiar
crear
asociar
detalles
grano
fino
es-
cribir
detalle
caso
asociado
operación
dará
lugar
caso
extremadamente
detallado
ejemplo
anotando
atributo
cambiar
objetos
Obsérvese
formato
postcondición
contrato
ofrece
promueve
len-
guaje
preciso
analítico
exigente
soporta
detallada
minuciosidad
únicamente
basándose
casos
continuas
colaboraciones
verbales
experto
materia
estudio
desarrolladores
entender
cómodamente
evite
escritura
contratos
situaciones
complejidad
alta
añade
valor
precisión
detallada
contratos
herramienta
requisitos
contratos
estarán
justificados
equi-
po
creando
contratos
operaciones
sistema
caso
advertencia
casos
deficientes
suficien-
continua
colaboración
acceso
expertos
materia
estudio
equipo
demasiada
documentación
innecesaria
caso
estudio
PDV
NuevaEra
muestra
contratos
probable-
mente
necesarios
cuestiones
pedagógicas
práctica
mayoría
de-
talles
recogen
inferir
obvia
texto
casos
obvio
concepto
escurridizo
13.8
Guías
contratos
Aplique
consejo
crear
contratos
contratos
Identifique
operaciones
sistema
DSSs
Construya
contrato
operaciones
sistema
complejas
sutiles
resultados
claras
caso
describir
postcondiciones
utilice
siguientes
categorías
creación
eliminación
instancias
modificación
atributos
formación
rotura
asociaciones
MODELO
CASOS
AÑADIR
DETALLES
CONTRATOS
OPERACIONES
173Consejos
acerca
escritura
contratos
•E
tablezca
po
stcondiciones
forma
declarativa
sentencia
pa
siva
expresada
destacar
declaración
cambio
lugar
diseño
ejemplo
creó
LineaDeVenta
Cree
LineaDeVenta
Recuerde
establecer
relación
objetos
existentes
creados
re-
cientemente
definición
formación
asociaciones
ejemplo
suficiente
cree
instancia
LineaDeVenta
lugar
operación
introducirArticulo
espués
complete
operación
debería
cumplirse
instancia
creada
asoció
Venta
LineaDeVenta
asoció
Venta
formación
asociaciones
error
habitual
creación
contratos
problema
común
olvidarse
incluir
formación
asociaciones
parti-
cular
crean
instancias
probable
necesiten
establecer
asociaciones
objetos
olvide
13.9
Ejemplo
PDV
NuevaEra
contratos
Operaciones
sistema
Procesar
Venta
Contrato
CO1
crearNuevaVenta
Operación
crearNuevaVenta
Referencias
cruzadas
Caso
Procesar
Venta
Precondiciones
Postcondiciones
creó
instancia
enta
creación
instancias
asoció
Registro
formación
asociaciones
inicializaron
atributos
v.
Obsérvese
descripción
vaga
post-condición
suficiente
proyecto
postcondiciones
particulares
obvias
caso
probablemente
debería
escribir
contrato
crearNuevaVenta
Recuerde
principios
guían
proceso
UP
Manténgalo
li-
gero
evite
artefactos
realmente
añadan
valor
Contrato
CO2
introducirArticulo
Operación
introducirArticulo(articuloID
ArticuloID
cantidad
integer
Referencias
cruzadas
Caso
Procesar
Venta
174
UML
PATRONESPrecondiciones
venta
curso
Postcondiciones
creó
instancia
LineaDeVenta
ldv
creación
ins-
tancias
ldv
asoció
Venta
actual
formación
asociaciones
ldv.cantidad
pasó
cantidad
modificación
atributos
ldv
asoció
EspecificacionDelProducto
base
coincidencia
articuloID
formación
asociaciones
Contrato
CO3
finalizarVenta
Operación
finalizarVenta
Referencias
cruzadas
Caso
Procesar
Venta
Precondiciones
venta
curso
Postcondiciones
Venta.esCompleta
pasó
modificación
atributos
Contrato
CO4
realizarPago
Operación
realizarPago(cantidad
Dinero
Referencias
cruzadas
Caso
Procesar
Venta
Precondiciones
venta
curso
Postcondiciones
creó
instancia
Pago
creación
instancias
p.cantidadEntregada
pasó
cantidad
modificación
atri-
butos
asoció
Venta
actual
formación
asociaciones
Venta
actual
asoció
Tienda
formación
asocia-
ciones
añadirlo
registro
histórico
ventas
com-
pletadas
13.10
Cambios
Modelo
Dominio
dato
sugerido
contratos
representado
mode-
dominio
terminación
entrada
artículo
venta
especificación
finalizarVenta
modifica
probablemente
idea
comprobarlo
du-
rante
trabajo
diseño
operación
realizarPago
rechazar
pagos
complete
venta
repre
sentar
información
atributo
esCompleta
Venta
tipo
dato
booleano
alternativas
especialmente
trabajo
di-
seño
técnica
denomina
patrón
estudiará
Capítulo
34
objetos
sesión
siguen
pista
sesión
rechazan
operaciones
improcedentes
estudiará
Venta
esCompleta
Boolean
fecha
hora
MODELO
CASOS
AÑADIR
DETALLES
CONTRATOS
OPERACIONES
17513.11
Contratos
operaciones
UML
Contratos
UML
especificación
operaciones
UML
define
operaciones
formalmente
Citando
textualmente
operación
especificación
transformación
consulta
invocar
ejecute
objeto
RJB99
ejemplo
elementos
interfaz
operaciones
términos
UML
operación
abstracción
implementación
contrario
método
UML
implementación
operación
operación
UML
signatura
nombre
parámetros
es-
pecificación
operación
describe
efectos
producidos
ejecución
operación
po
stcondición
formato
specificación
operaci
ón
UML
flexible
formato
contrato
muestra
capí-
tulo
documentos
UML
proporcionan
ejemplo
estilo
contratos
pre-
postcondiciones
enfoque
conocido
es-
pecificaciones
formales
operaciones
Resumiendo
UML
define
especificaciones
operaciones
especifi-
car
estilo
contratos
pre-
postcondiciones
Nótese
su-
braya
capítulo
especificación
operación
UML
mostrar
al-
goritmo
solución
únicamente
cambios
efectos
operaciones
utilizar
contratos
especificar
operaciones
públicas
Siste-
ma
completo
operaciones
sistema
contratos
aplicar
operaciones
nivel
granularidad
operaciones
públicas
interfaz
subsiste-
ma
clase
abstracta
etcétera
operaciones
presentadas
capítulo
pertene-
cen
clase
Sistema
UML
operaciones
pertenecen
clases
UML
subsistemas
modelan
clases
simultáneamente
pa-
quetes
UML
sistema
global
subsistema
alto
nivel
modela
clase
denominada
Sistema
realidad
nombre
legal
ope-
raciones
especificaciones
públicas
Contratos
operaciones
expresados
OCL
lenguaje
formal
asociado
UML
denominado
Lenguaje
Restricciones
Objetos
OCL
Object
Constraint
Language
K99
utilizar
ex
presar
restricciones
modelos
OCL
utilizarse
lugar
lenguaje
na-
tural
informal
utiliza
capítulo
UML
permite
formato
especificación
operación
Sugerencia
exista
razón
práctica
apremiante
requiera
gente
aprenda
utilice
OCL
mantenga
cosas
simples
utilice
lenguaje
natural
OCL
define
formato
oficial
especificación
pre-
postcondiciones
operaciones
muestra
fragmento
176
UML
PATRONESSistema::crearNuevaVenta
pre
sentencia
OCL
post
Detalles
adicionales
OCL
alcance
libro
Contratos
Diseño
Contrato
forma
contratos
pre-
postcondiciones
utilizados
especificación
operaciones
UML
impulsando
años
Bertrand
Meyer
formalizado
écnica
di
seño
denominada
Diseño
Co
ntrato
Meyer97
ed
1989
origen
procede
trabajo
años
sesen-
ta
lenguajes
especificación
formal
Diseño
Contrato
escriben
contratos
operaciones
clases
grano
fino
operaciones
públicas
sistemas
subsistemas
Di
seño
Contrato
fomenta
inclu
sión
sección
invariante
habitual
especificaciones
contrato
completas
invariantes
definen
cosas
cambiar
ejecute
operación
invariantes
utilizado
capítulo
simplicidad
Soporte
lenguajes
programación
contratos
lenguajes
Eiffel
incluyen
soporte
nivel
expre
siones
lenguaje
invariantes
pre-
postcondiciones
pre-procesadores
Java
proporcionan
soporte
parecido
13.12
Contratos
operaciones
UP
contrato
pre-
postcondiciones
estilo
conocido
especificar
operación
UML
UML
operaciones
niveles
Siste-
ma
clases
grano
fino
Venta
contratos
especificación
ope-
raciones
nivel
Sistema
forman
Modelo
Casos
pusieron
relieve
documentaci
ón
original
RUP
UP
inclusión
modelo
verificó
autores
RUP1
Fases
Inicio
contratos
justifican
fase
inicio
deta-
llados
Elaboración
utilizan
contratos
escribirán
elaboración
escriben
mayoría
casos
Escriba
contratos
operaciones
sistema
complejas
sutiles
Relaciones
artefactos
Figuras
13.2
13.3
muestran
relaciones
contratos
arte-
factos
niveles
detalle
MODELO
CASOS
AÑADIR
DETALLES
CONTRATOS
OPERACIONES
177
Comunicación
privada.13.13
Lecturas
adicionales
contratos
operaciones
proceden
área
especificaciones
formales
llevan
utilizando
refinando
años
sesenta
Método
Desarrollo
Viena
VDM
Vienna
Development
Method
BJ78
literatura
abundante
VDM
lenguajes
especificación
formal
Bertrand
Meyer
contribuyó
reconocimiento
amplio
especifi-
caciones
formales
contratos
inclusión
pre-
postcondiciones
len-
guaje
Eiffel
Construcción
Software
Orientado
Objetos
proporciona
detalles
creador
Diseño
Contrato
178
UML
PATRONES
Figura
13.2
Muestra
influencia
artefactos
UP
Glosario
Doc
arquitectura
Software
Modelo
dominio
Requisitos
Gestión
proyecto
Modelado
tdel
Negocio
Diseño
Muestra
artefactos
UP
Artefactos
Parciales
refinados
interacción
Pruebas
Plan
Pruebas
Plan
Des
Software
Modelo
Casos
texto
casos
Sistema
foo
contratos
operaciones
sistema
diagramas
secuencia
sistema
objetos
dominio
atributos
asociaciones
sufren
cambios
operaciones
sistema
gestionan
diseñando
software
cumpla
postcondiciones
contratos
bar
diagramas
casos
Modelo
Diseño
operaciones
sistema
Entorno
Marco
desarrolloEn
UML
contratos
operaciones
especificarse
rigurosa
Lenguaje
Restricciones
Objetos
OCL
requie-
re
leer
The
Object
Constraint
Language
Precise
Modeling
with
UML
Warmer
Kleppe
MODELO
CASOS
AÑADIR
DETALLES
CONTRATOS
OPERACIONES
179
Figura
13.3
Relación
contrato
artefactos
Sistema
introducirArticulo
id
cantidad
finalizarVenta
realizarPago
cantidad
Procesar
Venta
Cliente
llega
Cajero
introduce
identificador
artículo
Casos
Diagramas
Secuencia
Sistema
Operación
introducirArticulo
Post-condiciones
creó
instancia
LineaDeVenta
ldv
Operación
crearNuevaVenta
Post-condiciones
Contratos
crearNueva
Venta
Cajero
Venta
fecha
LineaDe
Venta
cantidad
*1
objetos
dominio
eventos
sistema
operaciones
sistema
objetos
dominio
atributos
asociaciones
sufren
cambios
Modelo
Dominio
Modelo
Casos
ideas
inspiraciones
postcondiciones
derivan
casos
Modelo
Diseño
Registro
introducirArticulo
articuloID
cantidad
CatalogoDeProductos
spec
getEspecProducto(articuloID
añadirLineaDeVenta(espec
cantidad
Venta
casos
requisitos
satisfacer
diseño
software
requisitos
satisfacer
diseño
softwareObjetivos
Motivar
transición
actividades
diseño
Contrastar
importancia
técnicas
di
seño
objeto
frente
conoci
miento
notación
UML
Introducción
momento
caso
estudio
hincapié
estudio
requisitos
conceptos
operaciones
relacionadas
sistema
Siguiendo
guías
UP
investigaron
10%
requisitos
fase
inicio
comenzó
estudio
li-
geramente
profundo
iteración
elaboración
capítulos
si-
guientes
cambian
énfasis
diseño
solución
iteración
función
objetos
software
colaboran
14.1
Iterativamente
correcto
correcto
requisitos
análisis
orientado
objetos
centrado
aprender
co-
rrecto;e
entender
objetivos
importantes
PDV
NuevaEra
reglas
restricciones
relacionadas
contrario
trabajo
di
seño
pondrá
relieve
correcto;e
sto
diseñar
destreza
solución
sa-
tisfaga
requisitos
iteración
desarrollo
iterativo
iteración
lugar
transición
en-
foque
centrado
requisitos
enfoque
centrado
diseño
implementación
Capítulo
14
REQUISITOS
DISEÑO
ITERACIÓN
Hardware
n.
partes
ordenador
patadas
Anónimo182
UML
PATRONES
normal
saludable
descubrir
cambiar
requisitos
primeras
iteraciones
trabajo
diseño
implementación
descubrimientos
clari-
ficarán
objetivos
trabajo
diseño
iteración
refinarán
comprensión
requisitos
iteraciones
futuras
primeras
iteraciones
elaboración
descubrimiento
requisitos
estabilizará
elaboración
definan
detalle
fiable
80%
requisitos
14.2
semanas
hacerse
exactamente
capítulos
discusión
detallada
seguramente
parecer
modelado
semanas
esfuerzo
cómodo
técnicas
escritura
casos
modelado
dominio
etcétera
tiempo
nece
sario
cabo
modelado
real
hemo
studiado
sta
momento
realista
significa
hayan
comienzo
proyecto
actividades
programación
pruebas
conceptos
búsqueda
recur
sos
per
sonas
software
planificaci
ón
acondicionamiento
entorno
etcétera
consumir
semanas
preparación
14.3
Pasar
diseño
objetos
diseño
objetos
desarrolla
solución
lógica
basada
paradigma
orientado
objetos
esencial
solución
creación
diagramas
in-
teracción
representan
objetos
colaboran
satisfacer
re-
quisitos
paralelo
elaboración
diagramas
interacción
representar
diagramas
clases
diseño
resumen
definición
clases
software
interfaces
implementar
software
refiere
UP
artefactos
forman
Modelo
Diseño
práctica
creación
diagramas
interacción
clases
lugar
parale-
sinergia
introducen
lineal
caso
es-
tudio
simplicidad
claridad
importancia
técnicas
diseño
objetos
vs
técnicas
notación
UML
capítulos
siguientes
estudian
creación
artefactos
pre-
cisa
técnicas
diseño
objetos
subyacen
creaciones
im-
portante
pensar
diseñar
objetos
capa-cidad
importante
notaci
ón
diagramas
UML
smo
tiempo
lenguaje
visual
estándar
importante
presenta
notación
UML
necesaria
soporte
trabajo
diseño
artefactos
estudiarán
diagramas
interacción
im-
portantes
punto
vista
desarrollo
diseño
requiere
ma-
yor
grado
esfuerzo
creativo
creación
diagramas
interacción
requiere
aplicación
principios
signación
responsabilidades
so
principios
patrones
diseño
énfasis
siguientes
capítulos
pone
principios
patrones
diseño
objetos
técnicas
diseño
objetos
vs
técnicas
notación
UML
representación
diagramas
interacción
UML
reflejo
toma
deci-
siones
diseño
objetos
técnicas
diseño
objetos
realmente
importan
lugar
dibujar
diagramas
UML
diseño
objetos
básico
requiere
conocimiento
principios
asignación
responsabilidades
Patrones
diseño
REQUISITOS
DISEÑO
ITERACIÓN
183Objetivos
Leer
notación
diagramas
interacción
secuencia
colaboración
UML
básicos
Introducción
siguientes
capítulos
estudian
diseño
objetos
lenguaje
utilizado
ilustrar
diseños
principalmente
diagramas
interacción
aconsejable
examinar
superficialmente
ejemplos
capítulo
familiarizarse
notación
avanzar
UML
incluye
diagramas
interacción
ilustrar
ob-
jetos
interaccionan
mensajes
capítulo
introduce
notación
capítulos
siguientes
centran
contexto
aprendizaje
reali-
zación
diseño
objetos
caso
estudio
PDV
NuevaEra
Lea
siguientes
capítulos
guías
diseño
capítulo
introduce
notación
crear
objetos
diseñados
entender
principios
diseño
familiarizares
notación
diagramas
interacción
importante
estudiar
siguientes
capítulos
prin-
cipios
aplicarlos
dibujan
diagramas
interacción
Capítulo
15
NOTACIÓN
DIAGRAMAS
INTERACCIÓN
gatos
listos
perros
puedes
gatos
empujen
trineo
nieve
Jeff
Valdez186
UML
PATRONES
15.1
Diagramas
secuencia
colaboración
término
diagrama
interacción
generalización
tipos
diagramas
UML
especializados
utilizarse
representar
forma
similar
in-
teracciones
mensajes
Diagramas
colaboración
Diagramas
secuencia
libro
utilizarán
tipos
remarcar
flexibilidad
elección
diagramas
colaboración
ilustran
interacciones
objetos
for-
mato
grafo
red
objetos
colocar
lugar
dia-
grama
muestra
Figura
15.1
Figura
15.1
Diagrama
colaboraci
ón
InstanciaClaseA
InstanciaClaseB
mensaje2
mensaje3
mensaje1
diagramas
secuencia
ilustran
interacciones
tipo
formato
aspecto
valla
objeto
añade
derecha
mues-
tra
Figura
15.2
Figura
15.2
Diagrama
secuencia
InstanciaClaseA
InstanciaClaseB
mensaje2
mensaje1
mensaje3
tipo
puntos
fuertes
débiles
dibujan
diagramas
pu-
blicarlos
páginas
estrechas
diagramas
colaboración
ventaja
per-
mitir
expansión
vertical
objetos
objetos
adicionales
grama
secuencia
extenderse
derecha
supone
limitación
ejemplos
diagramas
colaboración
dificultan
vea
fácilmente
secuencia
mensajes
mayoría
prefieren
diagramas
secuencia
utilizan
herramienta
CASE
ingeniería
inversa
código
fuente
diagramas
interacción
pues-
to
muestran
claramente
secuencia
mensajes
NOTACIÓN
DIAGRAMAS
INTERACCIÓN
187
15.2
Ejemplo
diagrama
colaboración
realizarPago
Figura
15.3
Diagrama
colaboración
realizarPago(dineroEntregado
1.1
create(dineroEntregado
Registro
Venta
Pago
realizarPago(dineroEntregado
creación
indicada
mensaje
create
dirección
mensaje
mensaje
instancia
mensaje
interno
línea
enlace
parámetro
diagrama
colaboración
muestra
Figura
15.3
lee
env
ía
mensaje
realizarPago
instancia
Registro
identifica
emisor
in
stancia
Registro
envía
mensaje
realizarPago
instancia
Venta
in
stancia
Venta
crea
instancia
Pago
15.3
Ejemplo
diagrama
secuencia
realizarPago
objetivo
diagrama
secuencia
muestra
Figura
15.4
diagrama
colaboración
Tipo
Puntos
fuertes
Puntos
débiles
secuencia
muestra
claramente
secuencia
fuerza
extender
derecha
ordenación
tiempo
añaden
objetos
mensajes
consume
espacio
horizontal
notación
simple
colaboración
economiza
espacio
flexibilidad
difícil
secuencia
mensajes
añadir
objetos
dimen-
siones
notación
compleja
ilustrar
bifurcaciones
complejas
iteraciones
comporta-
miento
concurrente15.4
diagramas
interacción
importantes
problema
típico
proyectos
tecnología
objetos
aprecian
va-
lor
cabo
diseño
objetos
diagramas
interacción
problema
relacionado
hacerlos
vaga
mo
strando
mensajes
objetos
realmente
necesitan
elaboración
adicional
ejemplo
mos-
trando
mensaje
ejecutarSimulacion
objeto
Simulacion
continuar
di
seño
ás
detallado
pen
sando
virtud
men
saje
uen
nombre
diseño
completa
mágicamente
debería
dedicar
tiempo
esfuerzo
trivial
creación
diagramas
in-
teracción
reflejo
estudiado
cuidadosamente
detalles
diseño
objetos
ejemplo
duración
iteración
semanas
entero
cerca
comienzo
iteración
debería
dedicar
creación
diagramas
interacción
paralelo
diagramas
clases
pasar
programación
diseño
representa
diagramas
imperfecto
ye
speculativo
modificará
programación
proporcionará
punto
partida
serio
consistente
com
ún
sirve
in
spiración
programa
ción
Sugerencia
Cree
diagramas
interacción
parejas
diseño
colaborando
compañeros
aprenderán
rápidamente
Nótese
principalmente
etapa
requiere
aplicación
técnicas
diseño
términos
patrones
estilos
principios
creación
casos
modelos
dominio
artefactos
sencilla
asignación
responsabilidades
creación
diagramas
interacción
diseñados
número
principios
diseño
sutiles
grados
liber-
tad
subyacen
diagrama
interacción
diseñado
mayoría
artefactos
DOO
188
UML
PATRONES
Figura
15.4
Diagrama
secuencia
Registro
Venta
realizarPago(dineroEntregado
realizarPago(dineroEntregado
Pagocreate(dineroEntregado
caja
activación
muestra
foco
controlLa
realización
diagramas
interacción
palabras
decidir
deta-
lles
diseño
objetos
etapa
creativa
DOO
aplicar
patrones
codificados
principios
estilos
mejorar
calidad
diseños
principios
diseño
necesitan
construcción
éxito
dia-
gramas
interacción
codificarse
explicarse
aplicarse
forma
sistemática
enfoque
entender
utilizar
principios
diseño
basa
patrones
guías
principios
estructurados
introducir
sintaxis
diagramas
interacción
volveremos
atención
siguientes
capítulos
patrones
diseño
aplicación
diagramas
interacción
15.5
Notación
general
diagramas
interacción
Representación
clases
instancias
UML
adoptado
enfoque
simple
sistente
repre
sentar
instancias
frente
clasificadores
Figura
15.5
tipo
elemento
UML
clase
actor
instancia
utiliza
símbolo
gráfico
tipo
cadena
texto
designa
subrayada
NOTACIÓN
DIAGRAMAS
INTERACCIÓN
189
Figura
15.5
Clases
instancias
Venta
Venta
clase
v1
Venta
instancia
nombradainstancia
consecuencia
mostrar
instancia
cla
diagrama
inte
racción
utiliza
símbolo
gráfico
clase
rectángulo
nombre
subrayado
utilizar
nombre
identificar
única
instancia
utiliza
obsérvese
preceden
nombre
clase
Sintaxis
expresión
mensaje
básica
UML
sintaxis
básica
expresiones
mensajes
return
mensaje(parametro
tipoParametro
tipoRetorno
excluirse
información
tipo
obvia
importante
ejemplo
espec
getEspecProducto(id
espec
getEspecProducto(id
ArticuloID
espec
getEspecProducto(id
ArticuloID):EspecificacionDelProducto15.6
Notación
básica
diagramas
colaboración
Enlaces
enlace
camino
conexión
objetos
indica
for-
ma
navegaci
ón
vi
sibilidad
objetos
Figura
15.6
ás
formal
enlace
instancia
asociación
ejemplo
enlace
camino
navegación
Registro
Venta
fluir
mensajes
mensaje
realizarPago
190
UML
PATRONES
Figura
15.6
Líneas
enlaces
realizarPago(dineroEntregado
foo
2.1
bar
Registro
Venta
línea
enlace
Obsérvese
enlace
fluir
múltiples
mensajes
mensajes
ambas
direcciones
Mensajes
mensaje
objetos
representa
expresión
mensaje
pequeña
flecha
indica
dirección
mensaje
fluir
mensajes
enlace
Figura
15.7
añade
úmero
secuencia
mostrar
orden
se-
cuencial
mensajes
hilo
control
actual
Figura
15.7
Mensajes
msj2
msj3
msj4
3.1
msj5
Registro
Venta
mensajes
fluyen
enlace
msj1
Mensajes
self
this
enviar
mensaje
objeto
Figura
15.8
representa
enlace
mensajes
fluyen
enlace
Creación
instancias
mensaje
utilizar
crear
instancia
UML
con-
venio
utilizar
mensaje
denominado
create
utiliza
nombre
mensaje
obvio
añadir
mensaje
característica
especial
llamada
estereotipo
UML
create
mensaje
create
incluir
parámetros
indican
paso
valores
iniciales
indica
ejemplo
llamada
constructor
parámetros
Java
añadirse
opcionalmente
propiedad
UML
new
caja
ins-
tancia
resaltar
creación
NOTACIÓN
DIAGRAMAS
INTERACCIÓN
191
Figura
15.8
Mensajes
this
Registro
msj1
limpiar
Figura
15.9
Creación
instancias
create(cajero
Registro
Venta
new
mensaje
creación
parámetros
creación
opcionales
interpretará
normalmente
llamada
constructor
create
hacer(cajero
Registro
Venta
new
utiliza
nombre
mensaje
creación
obvio
mensaje
estereotiparse
claridad
Secuencia
números
mensaje
orden
men
sajes
repre
senta
números
secuencia
muestra
Figura
15.10
esquema
numeración
numera
mensaje
msj1
numera
orden
anidamiento
siguientes
mensajes
muestran
esquema
numeración
válido
mensajes
anidados
número
adjun-
to
anidamiento
denota
anteponiendo
número
mensaje
entrante
nú-
mero
mensaje
saliente.192
UML
PATRONES
Figura
15.11
Secuencia
numeración
compleja
ClaseAmsj1
ClaseB1
msj2
ClaseC
1.1
msj3
2.1
msj5
msj4
ClaseD
2.2
msj6
cuarto
sexto
quinto
Mensajes
condicionales
mensaje
condicional
Figura
15.12
muestra
cláusula
condicional
si-
milar
cl
áusula
iteraci
ón
corchete
continuaci
ón
úmero
se-
cuencia
mensaje
envía
evaluación
cláusula
Figura
15.10
Secuencia
numeración
ClaseAmsj1
ClaseB1
msj2
ClaseC
1.1
msj3
numerado
numeración
válida
Figura
15.11
muestra
caso
complejo
Figura
15.12
Mensaje
condicional
color
rojo
calcular
Foo
Bar
mensaje1
mensaje
condicional
condición
Caminos
condicionales
mutuamente
exclusivos
ejemplo
Figura
15.13
ilustra
números
secuencia
caminos
condicio-
nales
mutuamente
exclusivos
NOTACIÓN
DIAGRAMAS
INTERACCIÓN
193
Figura
15.13
Mensajes
mutuamente
exclusivos
1a
condicion1
msj2
ClaseA
ClaseB
ClaseC
1a.1
msj3
msj1
ClaseD
1b
condicion1
msj4
1b.1
msj5
ClaseE
msj6
incondicional
msj2
msj4
1a
1b
caminos
condicionales
mutuamente
exlusivos
caso
necesario
modificar
expresiones
secuencia
letra
camino
condicional
letra
utiliza
convenio
Figura
15.13
establece
ejecutar
1a
1b
msj1
número
secuencia
puesto
cualquiera
mensaje
interno
Nótese
siguientes
mensajes
anidados
anteponen
con-
sistente
secuencia
mensaje
exterior
1b.1
mensaje
anidado
1b
Iteración
bucle
notación
iteraciones
muestra
Figura
15.14
detalles
cláusula
iteración
importantes
modelador
utilizar
simplemente
Figura
15.14
Iteración
i:=1
num
siguienteEnt
SimuladorejecutarSimulacion
Aleatorio
iteración
indica
cláusula
iteración
opcional
continuación
número
secuenciaIteración
colección
multiobjeto
algoritmo
típico
iterar
miembros
colección
lis-
ta
tabla
enviando
men
saje
s.
utiliza
final-
mente
tipo
objeto
iterador
implementación
java.util
Iterator
oe
iterador
librer
ía
stándar
C++
UML
érmino
multiobjeto
utiliza
denotar
conjunto
in
stancias
colección
diagramas
cola-
boración
indicar
muestra
Figura
15.15
194
UML
PATRONES
Figura
15.15
Iteración
multiobjeto
st:=getSubtotal
Ventat:=getTotal
LineaDeVenta
símbolos
utilizados
conjuntamente
implican
iteración
multiobjeto
envío
mensaje
getSubtotal
miembros
doble
caja
indica
multiobjeto
colección
ejemplo
objeto
Lista
contiene
objetos
LineaDeVenta
marcador
multiplicidad
enlace
utiliza
indicar
enviar
mensaje
elemento
colección
lugar
enviarse
repetidamen-
objeto
colección
Mensaje
objeto
clase
mensajes
enviar
clases
lugar
instancia
in-
vocar
métodos
estáticos
clase
muestra
mensaje
rectángulo
clase
cuyo
nombre
subrayado
indica
mensaje
enviando
clase
lugar
instancia
Figura
15.16
Figura
15.16
Mensaje
objeto
clase
invocación
método
estático
lista
syncronizedList
unaLista
InstanciaDeFoo
java.util
Collections
msj1
subrayada
clase
mensaje
clase
invocación
método
estático
consecuencia
importante
consistente
subrayar
nombre
instancias
desea
instancia
interpretar
inco-
rrectamente
mensajes
clases
instancias.15.7
Notación
básica
diagramas
secuencia
Enlaces
diferencia
diagramas
colaboración
diagramas
secuencia
muestran
enlaces
Mensajes
mensaje
objetos
representa
expresión
mensaje
línea
punta
flecha
objetos
Figura
15.17
orden
tiempo
orga-
niza
abajo
NOTACIÓN
DIAGRAMAS
INTERACCIÓN
195
Figura
15.17
Mensajes
focos
control
cajas
activación
Registro
Venta
msj2
msj3
msj1
msj4
msj5
Focos
control
cajas
activación
ilustra
Figura
15.17
diagramas
secuencia
mostrar
focos
control
sto
llamada
rutina
ordinaria
operaci
ón
en-
cuentra
pila
llamadas
utilizando
caja
activación
caja
opcional
utilizan
habitualmente
modeladores
UML
Representación
retornos
diagrama
secuencia
opcionalmente
mostrar
retorno
mensaje
me-
diante
línea
punteada
punta
flecha
abierta
caja
activa
ción
Figura
15.18
normal
excluya
utilizan
UML
Algu-
anotan
línea
retorno
describir
devolviendo
caso
mensaje
Mensajes
self
this
representar
mensaje
envía
objeto
utilizando
caja
activación
anidada
Figura
15.19
196
UML
PATRONES
Figura
15.18
Representación
retornos
Registro
Venta
msj2
msj3
msj1
msj4
msj5
Figura
15.19
Mensajes
this
Registro
msj1
limpiar
Creación
instancias
notación
creación
instancias
muestra
Figura
15.20
Línea
vida
objeto
destrucción
objetos
Figura
15.20
ilustra
líneas
vida
objetos
líneas
punteadas
verticales
objetos
indican
duraci
ón
vida
objetos
diagrama
circunstancias
deseable
mostrar
destrucción
explícita
objeto
H11001
H11001
recogida
basura
notación
UML
lí-
neas
vida
proporcionan
forma
expresar
destrucción
Figura
15.21).Mensajes
condicionales
Figura
15.22
muestra
mensaje
condicional
NOTACIÓN
DIAGRAMAS
INTERACCIÓN
197
Figura
15.20
Creación
instancias
línea
vida
objetos
Registro
Venta
realizarPago(dineroEntregado
Pagocreate(dineroEntregado
autorizar
obsérvese
objetos
creados
recientemente
sitúan
altura
creación
línea
vida
objeto
muestra
duración
vida
objeto
diagrama
Figura
15.21
Destrucción
objetos
Venta
Pagocreate(dineroEntregado
mensaje
estereotipado
destroy
línea
vida
corta
indica
destrucción
explícita
objeto
destroy
Figura
15.22
mensaje
condicional
Foo
color
rojo
calcular()mensaje1()Mensajes
condicionales
mutuamente
exclusivos
notación
caso
tipo
línea
mensaje
forma
ángulo
nace
punto
ilustra
Figura
15.23
198
UML
PATRONES
Figura
15.23
Mensajes
condicionales
mutuamente
exclusivos
10
calcular()mensaje1
15
calcular
Iteración
único
mensaje
notación
iteración
mensaje
muestra
Figura
15.24
Figura
15.24
Iteración
mensaje
Simulador
Aleatorio
i:=1
num
siguienteEnt
ejecutarSimulacion
Iteración
serie
mensajes
Figura
15.25
muestra
notación
indicar
iteración
serie
mensajes
Iteración
colección
multiobjeto
diagrama
secuencia
iteración
colección
muestra
Figura
15.26
diagramas
colaboraci
ón
UML
especifica
marcador
multi
plicidad
rol
multiobjeto
indicar
env
ío
men
saje
elemento
lugar
repetidamente
colecci
ón
UML
especifica
diagramas
secuencia
Mensajes
objetos
clase
diagramas
colaboración
llamadas
métodos
clase
estáticos
representan
subrayando
nombre
clasificador
significa
clase
lugar
instancia
Figura
15.27
NOTACIÓN
DIAGRAMAS
INTERACCIÓN
199
Figura
15.25
Iteración
secuencia
mensajes
Simulador
Aleatorio
horas
siguienteEnt
ejecutarSimulacion
Programador
trabajar
horas
i:=1
comer
Figura
15.26
Iteración
multiobjeto
Venta
st:=getSubtotal
t:=getTotal
LineaDeVenta
Figura
15.27
Invocación
método
clase
estático
lista
syncronizedList
unaLista
mensaje1
java.util
Collections
subrayada
clase
mensaje
clase
invocación
método
estáticoObjetivos
Definir
patrones
Aprender
aplicar
patrones
GRASP
Introducción
diseño
objetos
describe
variación
identificación
requisitos
creación
modelo
do-
minio
añada
métodos
clases
software
defina
paso
men-
sajes
objetos
satisfacer
requisitos
consejo
conciso
especialmente
útil
profundos
princi-
pios
cuestiones
involucrados
etapas
decisión
métodos
co-
locarlos
deberían
interactuar
objetos
importante
trivial
falta
explicación
cuidadosa
aplicable
realizan
diagramas
pro-
gramación
Ye
sta
etapa
crítica
esencial
entendemos
desarrollar
sistema
orientado
objeto
dibujo
diagrama
modelo
dominio
diagramas
paquetes
etcétera
Capítulo
16
GRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
forma
probable
mundo
destruya
coinciden
mayoría
expertos
accidente
entramos
profesionales
informáticos
provocamos
accidentes
Nathaniel
Borenstein202
UML
PATRONES
GRASP
enfoque
sistemático
aprender
diseño
objetos
básico
comunicar
principios
detallados
razonamiento
requiere
entender
diseño
objetos
básico
aprender
aplicarlos
enfoque
sistemático
elimina
magia
ambigüedad
patrones
GRASP
constituyen
apoyo
enseñanza
ayuda
en-
tender
diseño
objetos
esencial
aplica
razonamiento
diseño
for-
ma
sistemática
racional
explicable
enfoque
comprensión
utilización
principios
diseño
basa
patrones
asignación
responsabilidades
16.1
Responsabilidades
métodos
UML
define
responsabilidad
contrato
obligación
clasificador
OMG01
responsabilidades
relacionadas
obligaciones
objeto
comportamiento
Básicamente
responsabilidades
siguientes
tipos
responsabilidades
objeto
encuentran
crear
objeto
cálculo
Iniciar
acción
objetos
Controlar
coordinar
actividades
objetos
responsabilidades
objeto
encuentran
datos
privados
encapsulados
objetos
relacionados
cosas
derivar
calcular
responsabilidades
asignan
clases
objetos
diseño
ob-
jetos
ejemplo
declarar
Venta
responsable
creación
LineaDeVenta
Venta
responsable
cono-
cer
responsabilidades
relevantes
relacionadas
inferir
modelo
dominio
atributos
asociaciones
des-
cribe
granularidad
responsabilidades
influye
conversión
responsa-
bilidades
clases
métodos
responsabilidad
proporcionar
acceso
bases
datos
relacionales
implicar
docenas
clases
cientos
métodos
empaque-
tados
subsistema
cambio
re
sponsabilidad
crear
Venta
implicar
método
responsabilidad
smo
étodo
métodos
imple-
mentan
lle
var
cabo
re
sponsabilidades
re
sponsabilidades
implementanutilizando
métodos
act
úan
colaboran
métodos
objeto
s.
ejemplo
clase
Venta
definir
métodos
digamos
étodo
denominado
getTotal1
sa
re
sponsabilidad
Venta
colaborar
objetos
ejemplo
enviando
mensaje
getSubtotal
obje-
to
LineaDeVenta
solicitando
subtotal
16.2
Responsabilidades
diagramas
interacción
objetivo
capítulo
ayudar
aplicar
sistemáticamente
principios
funda-
mentales
asignar
responsabilidades
objetos
hará
pro-
gramación
artefactos
UML
contexto
habitual
responsabilidades
implementadas
métodos
creación
diagra-
interacción
forman
Modelo
Diseño
UP
cuya
notación
bá-
sica
examinó
capítulo
GRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
203
Figura
16.1
responsabilidades
métodos
relacionados
Venta
realizarPago(dineroEntregado
Pagocreate(dineroEntregado
implica
objetos
Venta
responsabilidad
crear
Pagos
Figura
16.1
indica
objetos
Venta
otorgado
responsabilidad
crear
Pagos
invoca
men
saje
realizarPago
maneja
corre
s-
pondiente
método
realizarPago
realización
responsabilidad
requie-
re
colaboración
crear
objeto
LineaDeVenta
ei
vocar
constructor
resumen
diagramas
interacción
muestran
elecciones
asignación
responsabilidades
objetos
crean
tomado
decisiones
acerca
asignación
responsabilidades
refleja
mensajes
envían
di-
ferentes
clases
objetos
capítulo
describe
detalle
principios
fundamen-
tales
expresados
patrones
GRASP
guiar
elecciones
asig-
nar
responsabilidades
elecciones
reflejan
diagramas
interacción
N.
T.
nombrar
métodos
clase
retornan
valor
propiedad
denominada
dicha
clase
utilizaremos
habitual
terminología
get
comenta
autor
Capítulo
17.16.3
Patrones
desarrolladores
orientados
objetos
experiencia
desarrolladores
soft-
ware
acumulan
repertorio
principios
generales
soluciones
basadas
aplicar
estilos
guían
creación
software
principios
es-
tilos
codifican
formato
estructurado
describa
problema
solución
sel
nombre
llamarse
patrones
ejemplo
continuación
presen-
tamos
patrón
muestra
Nombre
patrón
Experto
Información
Solución
signar
responsabilidad
clase
información
necesaria
cumplirla
Problema
resuelve
Cu
ál
principio
básico
sig-
naremos
responsabilidades
objetos
tecnología
objetos
patrón
descripción
problema
so-
lución
nombre
aplicar
contextos
idealmen-
proporciona
consejos
aplicarlo
circunstancias
puntos
fuertes
compromisos2
patrones
proporcionan
guías
deberían
asignarse
responsabilidades
objetos
dada
categoría
es-
pecífica
problema
simple
patrón
par
problema
solución
nombre
pue-
aplicar
contextos
consejos
acerca
aplicarlo
situa-
ciones
discusiones
compromisos
patrón
persona
bloque
construcción
primitivo
di-
cho
tecnología
objetos
ilustra
ambigüedad
patrón
GHJV94
tratamiento
patrones
pasará
alto
apropia-
do
etiquetar
patrón
centrará
valor
pragmático
utilizar
estilo
patrones
nombrar
presentar
aprender
recordar
principios
ingeniería
software
útiles
Patrones
repetitivos
patrón
considerarse
oxímoron
describe
idea
tér-
mino
patrón
intención
sugerir
repetitivo
importante
patrones
expresar
ideas
diseño
justamente
contrario
patrones
pretenden
codificar
conocimiento
estilos
principios
existentes
probado
válidos
trillados
extendidos
204
UML
PATRONES
noción
formal
patrone
nació
patrones
arquitectónicos
construcción
Christofer
Ale-
xander
AIS77
patrones
software
originaron
ochenta
Kent
Beck
conscien-
trabajo
patrone
Alexander
arquitectura
entonce
desarrolló
Ward
Cunningham
BC87
Beck94].En
consecuencia
patrones
GRASP
introducirán
establecen
ideas
codificación
principios
básicos
ampliamente
utilizados
experto
objetos
patrones
GRASP
idea
nombre
parecerán
elementales
familiares
importante
patrones
nombres
patrones
idealmente
nombres
sugerentes
asignar
nombre
patrón
técnica
principio
siguientes
ventajas
Apoya
identificación
incorporación
concepto
conocimiento
memoria
•F
acilita
comunicación
Asignar
nombre
idea
compleja
patrón
ejemplo
abstracción
reducción
forma
compleja
simple
eliminando
detalles
patrones
GRASP
nombres
concisos
Experto
Información
Creador
Variaciones
Protegidas
asignación
nombres
patrones
mejora
comunicación
signa
nombre
patr
ón
podemo
di
scutir
principio
complejo
idea
diseño
nombre
sencillo
Considere
conver-
sación
diseñadores
software
utilizan
vocabulario
patrones
común
Creador
Factoría
etcétera
tomar
decisión
diseño
Alfredo
crees
deberíamos
colocar
responsabilidad
crear
Li-
neaDeVenta
Factoría
Teresa
Siguiendo
Creador
Venta
adecuada
Alfredo
Oh
correcto
Identificar
estilos
principios
diseño
nombres
sobreentendidos
común-
mente
facilita
comunicaci
ón
eleva
nivel
inve
stigación
grado
ab
s-
tracción
alto
16.4
GRASP
Patrones
Principios
Generales
Asignar
Responsabilidades
Resumiendo
introducción
asignación
habilidosa
responsabilidades
extremadamente
importante
diseño
objetos
decisión
acerca
signación
responsabilidades
lugar
creación
diagramas
interacción
seguridad
pro-
gramación
GRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
205•
patrones
pares
problema
solución
nombre
codifican
con-
sejos
principios
relacionados
frecuencia
asignación
responsabilidades
Pregunta
patrones
GRASP
Respuesta
Describen
principios
fundamentales
diseño
objetos
asignación
responsabilidades
expresados
patrones
importante
entender
capaces
aplicar
principios
creación
diagramas
interacci
ón
sarrollador
software
expe
riencia
tecnología
objetos
necesita
dominar
principios
rápido
constituyen
base
diseñará
sistema
GRASP
acrónimo
General
Responsibility
Assignment
Software
Patterns
patrones
generales
software
asignar
responsabilidades)3
nombre
eligió
sugerir
importancia
aprehender
grasping
inglés
principios
di-
señar
éxito
software
orientado
objetos
aplicar
patrones
GRASP
secciones
siguientes
presentan
patrones
GRASP
•E
xperto
Información
Creador
Alta
Cohesión
Acoplamiento
Controlador
introducirán
capítulo
posterior
merece
pena
dominar
refieren
cuestiones
básicas
comunes
aspectos
fundamentales
diseño
favor
estudie
siguientes
patrones
observe
utilizan
diagramas
interacción
ejemplo
aplíquelos
creación
diagra-
interacción
Comience
dominando
Experto
Información
Creador
Controla-
dor
Alta
Cohesión
Acoplamiento
espués
aprenda
patrones
restantes
16.5
Notación
diagrama
clases
UML
rectángulo
clase
UML
utiliza
representar
clases
software
nor-
malmente
muestra
compartimentos
repre
senta
métodos
cla
muestra
Figura
16.2
206
UML
PATRONES
Técnicamente
deberíamos
escribir
Patrones
GRAS
lugar
Patrones
GRASP
sue-
na
detalles
notación
estudian
capítulo
dis-
cusión
patrones
utilizará
ocasionalmente
forma
rectángulo
clase
16.6
Experto
Información
Experto
Asignar
responsabilidad
experto
información
clase
informa-
ción
necesaria
responsabilidad
principio
general
asignar
responsabilidades
objetos
Modelo
Diseño
definir
cientos
miles
clases
software
apli-
cación
requerir
realicen
cientos
miles
responsabilidades
diseño
objetos
definen
interacciones
objetos
tomamos
deci-
siones
asignación
responsabilidades
clases
software
sistemas
tienden
fáciles
entender
mantener
ampliar
opor-
tunidades
reutilizar
componentes
futuras
aplicaciones
aplicación
PDV
NuevaEra
clases
necesitan
venta
Comience
asignando
responsabilidades
estableciendo
claramente
responsabilidad
Siguiendo
consejo
pregunta
debería
responsable
venta
Siguiendo
Experto
Información
deberíamos
buscar
clases
objetos
contienen
información
necesaria
determinar
llegamos
pregunta
clave
miramos
Modelo
Dominio
Mo-
delo
Diseño
analizar
clases
información
necesaria
Modelo
Dominio
representa
clases
conceptuales
dominio
mundo
real
Modelo
Diseño
representa
clases
software
Respuesta
cla
ses
relevantes
Modelo
Diseño
mire
mire
Modelo
Dominio
intente
utilizar
ampliar
repre-
sentaciones
inspirar
creación
correspondientes
clases
diseño
ejemplo
asuma
acabamos
comenzar
trabajo
di
seño
Modelo
Diseño
mínimo
miramos
Modelo
Dominio
bus-
cando
expertos
información
Venta
mundo
real
aña-
GRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
207
Figura
16.2
clases
software
muestran
nombres
métodos
NombreDeClase
atributos
métodos
sección
destinada
métodos
Solución
Problema
Ejemplodimos
clase
software
Modelo
Diseño
denominada
igualmente
Venta
otor-
gamos
responsabilidad
representado
método
llamado
get-
enfoque
mantiene
salto
representación
diseño
objetos
software
corresponde
concepción
organiza
mundo
real
examinar
caso
detalle
considere
Modelo
Dominio
parcial
Fi-
gura
16.3
208
UML
PATRONES
Figura
16.3
Asociaciones
Venta
Venta
fecha
hora
LineaDe
Venta
cantidad
Especificacion
DelProducto
descripcion
precio
articuloID
Descrito-por
Contiene
información
necesita
determinar
necesario
instancias
LineaDeVenta
venta
suma
subtotales
instancia
Venta
contiene
guía
Experto
Información
clase
objeto
Venta
adecuada
responsabilidad
experto
información
trabajo
contexto
creación
diagramas
interacción
surgen
cuestiones
responsabilidad
Imagine
comenzando
trabajar
detalle
elaboración
diagramas
interacción
asignar
res-
ponsabilidades
objetos
diagramas
interacción
clases
parciales
Fi-
gura
16.4
ilustran
decisiones
Figura
16.4
Diagramas
interacción
clases
parciales
Venta
fecha
hora
getTotal
Ventat
getTotal
método
terminado
información
necesita
determinar
sub-
ínea
venta
nece
sitan
LineaDeVenta.cantidad
EspecificacionDel-
Producto.precio
LineaDeVenta
conoce
cantidad
EspecificacionDelProducto
asociada
siguiendo
patrón
Experto
LineaDeVenta
debería
determinar
subtotal
experto
información
diagramas
interacción
significa
Venta
necesita
enviar
mensaje
getSubtotal
LineaDeVenta
sumar
resultado
dise-
ño
muestra
Figura
16.5
GRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
209
Figura
16.5
Cálculo
Venta
Venta
fecha
hora
getTotal
LineaDeVenta
cantidad
getSubtotal()Nuevo
método
st
getSubtotal
Ventat
getTotal
SalesLineItem
LineaDeVenta
LineaDeVenta
responsabilidad
proporcionar
sub-
necesita
precio
artículo
EspecificacionDelProducto
experto
información
proporciona
pre-
cio
enviar
mensaje
solicitando
precio
diseño
muestra
Figura
16.6
conclusión
responsabilidad
proporcionar
venta
asignaron
responsabilidades
clases
diseño
objetos
Clase
Diseño
Responsabilidad
Venta
venta
LineaDeVenta
subtotal
línea
venta
EspecificacionDelProducto
precio
artículo
contexto
consideraron
optaron
stas
re
sponsabilidades
elaboración
diagrama
interacción
sección
métodos
dia-
grama
clases
incluir
métodos
principio
asignó
responsabilidad
Experto
Infor-
mación
colocándola
objeto
información
necesaria
realizarla
Experto
Información
utiliza
frecuencia
asignación
responsabi-
lidades
principio
guía
básico
utiliza
continuamente
diseño
ob-
jetos
Experto
pretende
idea
oscura
extravagante
expresa
intuición
común
objetos
cosas
relacionadas
información
Nótese
cumplimiento
re
sponsabilidad
requiere
informaci
ón
dispersa
clases
objetos
implica
expertos
información
parcial
colaborarán
tarea
ejemplo
problema
ventas
requiere
colaboración
clases
objetos
Discusiónque
información
encuentre
esparcida
objetos
necesitarán
interactuar
paso
mensajes
compartir
trabajo
general
Experto
conduce
diseños
objetos
software
rea-
lizan
operaciones
normalmente
objetos
inanimados
mun-
do
real
representan
Peter
Coad
denomina
estrategia
Coad95
ejemplo
mundo
real
ayudas
mecánicas
venta
objeto
inanimado
Alguien
calcula
venta
cam-
po
software
orientado
objetos
objetos
software
vivos
anima-
responsabilidades
cosas
Fundamentalmente
cosas
re-
lacionadas
información
conocen
denomino
principio
animación
diseño
objetos
dibujos
animados
vivo
patrón
Experto
Información
cosas
tecnología
obje-
tos
analogía
mundo
real
Normalmente
otorgamos
responsabilidades
individuos
información
necesaria
cabo
tarea
ejemplo
negocio
debería
responsable
creación
declaración
ga-
nancias
pérdidas
persona
acce
so
informaci
ón
necesaria
crearla
director
financiero
objetos
cola-
boran
información
dispersa
pasa
personas
director
financiero
compañía
solicitar
contables
generen
informes
créditos
débitos
ocasiones
solución
sugiere
Experto
deseable
normalmente
problema
acoplamiento
cohe
sión
stos
principios
di
scutirán
capítulo
ejemplo
debería
responsable
almacenar
Venta
base
datos
Ciertamente
información
almacenar
encuen-
210
UML
PATRONES
Figura
16.6
Cálculo
Venta
Venta
fecha
hora
getTotal
LineaDeVenta
cantidad
getSubtotal
Especificacion
DelProducto
descripcion
precio
articuloID
getPrecio()Nuevo
método
Especificacion
DelProducto
1.1
getPrecio
st
getSubtotal
Ventat
getTotal
SalesLineItem
LineaDeVenta
Contraindica-
cionestra
objeto
Venta
siguiendo
patrón
Experto
argumentar
inclusión
responsabilidad
clase
Venta
extensión
lógica
decisión
clase
contiene
servicios
almacenarse
base
datos
problemas
cohesión
acoplamiento
duplicación
ejemplo
clase
Venta
contener
ógica
relacionada
ge
stión
base
datos
relacionada
SQL
JDBC
Cone
xión
Base
Datos
Java
Java
Database
Connectivity
clase
centrada
únicamente
lógi-
ca
aplicación
venta
simplemente
tipo
re
sponsa-
bilidades
disminuye
cohesión
clase
acoplarse
servicios
técnicos
base
datos
subsistema
servicios
JDBC
lugar
acoplar
únicamente
objetos
capa
dominio
objetos
software
eleva
acoplamiento
probable
dupliquen
lógicas
bases
datos
simi-
lares
clases
persistentes
problemas
indican
violación
principio
arquitectural
básico
di-
señe
separando
principales
aspectos
sistema
Mantenga
lógica
aplicación
sitio
objetos
software
dominio
mantenga
lógica
base
datos
sitio
subsistema
servicios
persistencia
separado
sucesivamente
lugar
entremezclar
spectos
sistema
smo
componente4
Separando
aspectos
importantes
mejora
acoplamiento
cohesión
di-
seño
siguiendo
Experto
justificar
asignación
res-
ponsabilidad
servicio
base
datos
clase
Venta
motivos
nor-
malmente
cohesión
acoplamiento
resulta
diseño
pobre
mantiene
encapsulamiento
información
puesto
objetos
utilizan
información
cabo
tareas
Normalmente
conlleva
acomplamiento
lugar
sistemas
robustos
ás
fáciles
mantener
Acoplamiento
patrón
GRASP
estudiará
secciones
siguientes
distribuye
comportamiento
clases
contienen
información
re-
querida
estimula
definiciones
clases
cohesivas
ligeras
fáciles
entender
mantener
soporta
normalmente
alta
co-
hesión
patrón
estudiará
Acoplamiento
Alta
Cohesión
Colocar
responsabilidades
datos
conoces
hazlo
Colocar
Servicios
Atributos
trabaja
16.7
Creador
Asignar
clase
responsabilidad
crear
in
stancia
clase
cumple
casos
siguientes
GRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
211
Capítulo
32
presentará
discusión
separación
intereses
Beneficios
Patrones
Principios
Relacionados
conocido
Parecido
Solución•
agrega
objetos
A.
contiene
objetos
A.
registra
instancias
objetos
A.
utiliza
estrechamente
objetos
A.
datos
inicialización
pasarán
objeto
creado
Experto
creación
Be
creador
objetos
A.
aplicar
opción
inclínese
clase
agregue
con-
clase
A.
debería
responsable
creación
instancia
clase
creación
in
stancias
actividades
ás
comunes
sistema
orientado
objetos
consecuencia
útil
contar
principio
general
asig-
nación
responsabilidades
creación
asignan
diseño
sopor-
tar
acoplamiento
claridad
encapsulación
reutilización
aplicación
PDV
debería
responsable
creación
ins-
tancia
LineaDeVenta?S
egún
patr
ón
Creador
deber
íamos
buscar
clases
agregan
contienen
etcétera
instancias
LineaDeVenta
Considere
modelo
do-
minio
parcial
Figura
16.7
Puesto
Venta
contiene
agrega
objetos
LineaDeVenta
patrón
Creador
sugiere
Venta
candidato
responsabilidad
creación
instancias
LineaDeVenta
212
UML
PATRONES
Figura
16.7
Modelo
Dominio
Parcial
Venta
fecha
hora
LineaDe
Venta
cantidad
Especificacion
DelProducto
descripcion
precio
articuloID
Descrito-por
Contiene
diseño
interacciones
objetos
muestran
Figura
16.8
asignación
responsabilidades
requiere
defina
clase
Venta
mé-
crearLineaDeVenta
Problema
EjemploGRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
213
Figura
16.8
Creación
LineaDeVenta
Registro
Venta
crearLineaDeVenta(cantidad
LineaDeVentacreate(cantidad
contexto
consideraron
optaron
responsa-
bilidades
elaboraci
ón
diagrama
interacci
ón
sección
métodos
diagrama
clases
mostrar
resultados
asignación
res-
ponsabilidades
materializadas
concretamente
métodos
patrón
Creador
guía
asignación
responsabilidades
relacionadas
crea-
ción
objetos
tarea
com
ún
intención
básica
patrón
Creador
en-
contrar
creador
nece
site
conectarse
objeto
creado
situación
Eli-
giéndolo
creador
favorece
acoplamiento
Agregado
agrega
Partes
Contenedor
contiene
Contenido
Registro
registra
Registros
relaciones
comunes
clases
diagrama
clases
Creador
sugiere
clase
contenedor
registro
candidata
asig-
narle
responsabilidad
crear
contiene
regi
stra
puesto
guía
Nótese
utilizado
concepto
agregación
considerar
patrón
Crea-
dor
agregación
examinará
Capítulo
27
definición
agre-
gación
involucra
cosas
encuentran
relación
Todo-Parte
Ensamblaje-Par-
Cuerpo
agrega
Pierna
Párrafo
agrega
Frase
creador
buscando
clases
datos
inicialización
pasarán
creación
realidad
ejemplo
patrón
Experto
datos
inicialización
pasan
creación
al-
gún
tipo
método
inicialización
constructor
Java
parámetros
ejemplo
asuma
instancia
Pago
necesita
inicializarse
crea
Venta
Puesto
Venta
conoce
Venta
creador
candida-
to
Pago
creación
requiere
complejidad
significativa
utilizar
instan-
cias
reciclada
motivo
rendimiento
crear
condicionalmente
in
stancia
familia
clases
similares
basado
valor
propiedad
externa
etcétera
casos
aconsejable
delegar
creaci
ón
cla
auxiliar
deno-
minada
Factoría
GHJV95
lugar
utilizar
clase
sugiere
Creador
as
fac-
torías
estudiarán
Capítulo
23
Discusión
Contraindica-
ciones•
soporta
acoplamiento
descrito
continuación
implica
de-
pendencias
mantenimiento
mayores
oportunidades
reutilizar
Probable-
mente
incrementa
acoplamiento
clase
creada
presumible
visible
clase
creadora
asociaciones
existentes
moti-
varon
elección
creador
Acoplamiento
•F
actoría
•T
odo-Parte
BMRSS96
describe
patrón
definir
objetos
agregados
fa-
vorece
encapsulación
componentes
16.8
Acoplamiento
Asignar
responsabilidad
acoplamiento
permanezca
soportar
bajas
dependencias
impacto
cambio
incremento
reu-
tilización
acoplamiento
medida
fuerza
elemento
conectado
conocimiento
confía
elementos
elemento
débil
aco-
plamiento
depende
demasiados
elementos
demasiados
depende
contex-
to
estudiará
elementos
clases
subsistemas
sistemas
etcétera
clase
alto
fuerte
acoplamiento
confía
clases
Tales
cla-
ses
deseables
adolecen
siguientes
problemas
cambios
clases
relacionadas
fuerzan
cambios
locales
difíciles
entender
aislada
difíciles
reutilizar
puesto
requiere
presencia
adicional
clases
depende
Considere
diagrama
clases
parcial
caso
estudio
NuevaEra
Pago
Registro
Venta
Asuma
necesidad
crear
instancia
Pago
sociarla
Venta
clase
debería
responsable
Puesto
Registro
registra
Pago
dominio
mundo
real
patrón
Creador
sugiere
Registro
can-
didata
creación
Pago
instancia
Registro
enviar
men-
saje
añadirPago
Venta
asando
Pago
parámetro
Figura
16.9
muestra
diagrama
interacción
refleja
214
UML
PATRONES
Figura
16.9
Registro
crea
Pago
Registro
Pago
Venta
realizarPago
create
añadirPago(p
Beneficios
Patrones
Principios
Relacionados
Solución
Problema
EjemploGRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
215
asignación
responsabilidades
acopla
clase
Registro
conocimiento
clase
Pago
Notación
UML
ótese
instancia
Pago
nombra
explícitamente
referenciar
parámetro
mensaje
Figura
16.10
muestra
solución
alternativa
crear
Pago
sociarlo
Venta
Figura
16.10
Venta
crea
Pago
Registro
Venta
Pago
realizarPago
realizarPago
1.1
create
diseño
basado
signación
responsabilidades
soporta
Acopla-
miento
casos
asumiremos
Venta
finalmente
acoplarse
co-
nocimiento
Pago
Diseño
Registro
crea
Pago
añade
acopla
miento
Registro
Pago
Diseño
Venta
cabo
creación
Pago
incrementa
acoplamiento
punto
vista
pu-
ramente
acoplamiento
preferible
Diseño
mantiene
acoplamiento
glo-
bal
ejemplo
patrones
Acoplamiento
Crea-
dor
sugerir
soluciones
práctica
nivel
acoplamiento
considerar
aislada
principios
Experto
Alta
Cohesión
factor
mejorar
diseño
Elp
rón
Acoplamiento
principio
mente
decisio-
nes
diseño
objetivo
subyacente
continuamente
principio
evaluativo
aplica
diseñador
evalúa
decisiones
diseño
lenguajes
orientados
objetos
H11001
H11001
Java
formas
comunes
acoplamiento
TipoX
TipoY
•E
TipoX
atributo
miembro
datos
variable
instancia
re-
ferencia
instancia
TipoY
TipoY.
objeto
TipoX
invoca
servicios
objeto
TipoY.
•E
TipoX
método
referencia
instancia
TipoY
Ti-
poY
generalmente
comprende
parámetro
variable
local
TipoY
objeto
retorno
mensaje
instancia
TipoY.
•E
TipoX
subclase
directa
indirecta
TipoY.
•E
TipoY
interfaz
TipoX
implementa
interfaz
DiscusiónEl
patrón
Acoplamiento
impulsa
asignación
responsabilidades
mane-
ra
localización
incremente
acoplamiento
nivel
lleve
resultados
negativos
producir
acoplamiento
alto
Acoplamiento
soporta
diseño
clases
independientes
reduce
impacto
cambio
considerar
aislada
patrones
Experto
Alta
Cohesión
necesita
incluirse
di-
ferentes
principios
diseño
influyen
elección
asignar
responsabilidad
subclase
fuertemente
acoplada
superclase
estudiar
cuidado-
samente
decisión
derivar
superclase
forma
fuerte
acoplamiento
ejemplo
suponga
necesitamos
almacenar
objetos
persistente
base
datos
relacional
objetual
caso
diseño
relativa-
mente
común
consiste
crear
superclase
abstracta
denominada
ObjetoPersistente
derivan
clases
inconveniente
creación
subclases
acopla
altamente
objetos
dominio
servicio
nivel
tecnológico
parti-
cular
mezcla
aspectos
arquitectura
ventaja
hereda
automática
comportamiento
persistente
medida
absoluta
acoplamiento
alto
importante
desarrollador
medir
grado
acoplamiento
actual
evaluar
aumentarlo
cau
sará
problemas
general
clases
inherente-
mente
genéricas
naturaleza
probabilidad
reutilización
alta
debería
acoplamiento
especialmente
ca
so
extremo
Acoplamiento
exi
ste
acoplamiento
clases
deseable
metáfora
central
tecnología
objetos
sistema
objetos
conectados
comunican
pa
so
mensajes
Acoplamiento
extremo
producirá
diseño
pobre
dará
lugar
objetos
inconexos
saturados
actividad
compleja
tra-
objetos
pasivos
acoplamiento
actúan
simples
re-
positorios
datos
normal
necesario
grado
moderado
acoplamiento
clases
crear
sistema
orientado
objetos
tareas
llevan
cabo
me-
diante
colaboración
objetos
conectados
suele
problema
acoplamiento
alto
objetos
estables
elementos
ge-
neralizados
ejemplo
aplicación
Java
J2EE
acoplarse
seguridad
librerías
Java
java.util
etc.
estables
extendidas
Escoja
batallas
alto
acoplamiento
problema
alto
acoplamiento
elementos
estables
dimensión
interfaz
implementación
mera
presencia
punto
importante
di
señadores
añadir
flexibilidad
capsular
detalles
implementaciones
general
di
señar
disminuir
acopla-
miento
áreas
sistema
esforzamos
futuras
necesidades
disminuir
acoplamiento
puntos
motivos
realis-
tas
tiempo
empleando
adecuada
216
UML
PATRONES
Contraindica-
cionesLos
diseñadores
escoger
batallas
disminuir
acoplamiento
en-
capsular
información
Centrándose
puntos
realista
pensar
inestabilidad
evolución
alta
ejemplo
proyecto
NuevaEra
ne-
cesitan
conectar
sistema
sistemas
calculadores
impuestos
terceras
par-
tes
interfaces
únicas
práctico
diseñar
disminuir
acoplamien-
to
punto
variación
afectan
cambios
componentes
•F
cil
entender
aislada
Conveniente
reutilizar
acoplamiento
cohesión
descrita
continuación
principios
realmente
fun-
damentales
diseño
desarrolladores
software
deberían
apreciarlos
apli-
carlos
Larry
Constantine
creador
diseño
estructurado
años
setenta
actualmente
propugna
atención
ingeniería
usabilidad
CL99
principal
responsable
sesenta
identificación
comunicación
acoplamiento
cohesión
principios
básicos
Constantine68
CMS74
Variaciones
Protegidas
16.9
Alta
Cohesión
Asignar
responsabilidad
cohesión
permanezca
alta
mantener
complejidad
manejable
diseño
objetos
cohesión
específica
cohesión
funcional
medida
fuerza
relacionan
grado
focaliza-
ción
responsabilidades
elemento
elemento
responsabilidades
alta-
mente
relacionadas
cantidad
trabajo
alta
cohesión
Es-
tos
elementos
clases
subsistemas
etcétera
clase
baja
cohesión
cosas
relacionadas
trabajo
Tales
clases
convenientes
adolecen
siguientes
problemas
Difíciles
entender
Difíciles
reutilizar
Difíciles
mantener
Delicadas
constantemente
afectadas
cambios
clases
baja
cohesión
representan
grano
abstracción
asignado
responsabilidades
deberían
haberse
delegado
objetos
analizar
Alta
Cohesión
ejemplo
utilizó
pa-
trón
Acoplamiento
Asuma
necesitamos
crear
instancia
Pago
efectivo
asociarla
Venta
clase
debería
responsable
Puesto
Registro
registra
Pago
dominio
mundo
real
patrón
Creador
sugiere
Registro
candi-
dato
creaci
ón
Pago
in
stancia
Registro
entonce
enviar
GRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
217
Beneficios
Antecedentes
Patrones
Relacionados
Solución
Problema
Ejemplomensaje
añadirPago
Venta
sando
par
ámetro
Pago
muestra
Figura
16.11
218
UML
PATRONES
Figura
16.11
Registro
crea
Pago
Registro
Venta
añadirPago
Pagocreate
realizarPago
asignación
responsabilidades
sitúa
responsabilidad
pago
Registro
Registro
toma
responsabilidad
cabo
operación
sistema
realizarPago
ejemplo
aislado
aceptable
continuamos
responsa-
ble
clase
Registro
mayoría
trabajo
relacionado
operaciones
sistema
irá
sobrecargando
incrementalmente
tareas
llegará
perder
cohesión
Imagine
hubiera
cincuenta
operaciones
sistema
recibidas
Registro
trabajo
relacionado
convertirá
objeto
saturado
cohesión
simple
tarea
creación
Pago
haga
Registro
cohesivo
cuadro
asignación
responsabilidades
global
sugerir
tendencia
baja
cohesión
Ym
ás
importante
habilidades
desarrollo
diseñadores
ob-
jetos
independientemente
elección
diseño
importante
desarrollador
sepa
impacto
cohesión
cambio
muestra
Figura
16.12
diseño
delega
responsa-
bilidad
creación
pago
Venta
favorece
cohesión
alta
Registro
Figura
16.12
Venta
crea
Pago
Registro
Venta
realizarPago
Pagocreate
realizarPago()GRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
219
deseable
diseño
puesto
soporta
alta
cohesión
aco-
plamiento
práctica
nivel
cohesión
considerar
aislada
res-
ponsabilidades
principios
patrones
Experto
Acoplamiento
Acoplamiento
patrón
Alta
Cohesión
principio
mente
decisiones
diseño
objetivo
subyacente
continuamente
principio
evaluativo
aplica
di
señador
mientra
evalúa
decisiones
diseño
Grady
Booch
establece
alta
cohesión
funcional
elementos
componente
clase
trabajan
juntos
proporcionar
com-
portamiento
delimitado
Booch94
continuación
presentamos
escenarios
ilustran
grados
co-
hesión
funcional
uy
baja
cohesión
única
clase
responsable
cosas
áreas
funcionales
Asuma
clase
denominada
Interfaz-BDR-RPC
comple-
tamente
responsable
interacci
ón
ba
ses
dato
relacionales
gestión
llamadas
remotas
procedimientos
Remote
Procedure
Calls
áreas
funcionales
requiere
código
soporte
responsabilidad
debería
dividirse
familia
cla-
ses
relacionadas
acceso
BDR
familia
relacionada
soporte
RPC
aja
cohesión
única
clase
responsabilidad
tarea
compleja
área
funcional
Asuma
clase
denominada
InterfazBDR
completamente
responsable
interactuar
bases
datos
relacionales
métodos
clase
relacionados
cantidad
código
soporte
cientos
miles
métodos
clase
debería
dividirse
familia
cla
ses
ligeras
comparten
trabajo
pro
porcionar
acceso
BDR
lta
cohesión
clase
re
sponsabilidad
moderada
área
fun-
cional
colabora
clases
cabo
tareas
Asuma
exi
ste
cla
denominada
InterfazBDR
parcial-
mente
responsable
interactuar
bases
dato
relacionales
Inte-
ractúa
docena
clases
relacionadas
acceso
BDR
recuperar
almacenar
objetos
oderada
cohesión
clase
responsabilidades
ligeras
únicas
áreas
lógicamente
relacionadas
concepto
clase
Asuma
cla
denominada
Compañia
completamente
responsable
empleados
información
fi-
Discusiónnanciera
áreas
fuertemente
relacionadas
aun-
amba
stán
ógicamente
relacionada
concepto
compañ
ía
número
métodos
públicos
pequeño
can-
tidad
código
soporte
regla
empírica
clase
alta
cohesión
número
relativamente
pe-
queño
métodos
funcionalidad
altamente
relacionada
realiza
trabajo
Colabora
objetos
compartir
esfuerzo
tarea
extensa
clase
alta
cohesión
ventajosa
relativamente
fácil
mantener
entender
reutilizar
alto
grado
funcionalidad
relacionada
combinada
nú-
mero
pequeño
operacione
simplifica
mantenimiento
mejoras
grano
fino
funcionalidad
altamente
relacionada
tambi
én
aumenta
potencial
reutilización
patrón
Alta
Cohesión
cosas
tecnología
objetos
tie-
ne
analogía
mundo
real
observación
típica
persona
de-
masiadas
responsabilidades
relacionadas
especialmente
deberían
delegarse
adecuada
persona
efectiva
observa
directores
aprendido
delegar
personas
padecen
baja
cohesión
preparados
llegar
personas
despegadas
principio
clásico
diseño
modular
acoplamiento
cohesión
viejos
principios
diseño
software
diseñar
objetos
implica
ignoren
fundamentos
establecidos
prin-
cipios
fuertemente
relacionado
acoplamiento
cohesión
pro-
mover
diseño
modular
Citando
textualmente
modularidad
propiedad
sistema
descompuesto
conjunto
módulos
cohesivos
débilmente
acoplados
Booch94
Fomentamos
diseño
modular
creando
métodos
clases
alta
cohesión
nivel
básico
objetos
modularidad
alcanza
diseñando
método
único
cla-
ro
objetivo
agrupando
conjunto
aspectos
relacionados
clase
Cohesión
acoplamiento
yin
yang
mala
cohesión
causa
normalmente
acoplamiento
viceversa
Llamo
cohesión
acoplamiento
yin
yang
ingeniería
software
in-
fluye
ejemplo
sidere
clase
implementa
elemento
gráfico
GUI
repre
senta
pinta
elemento
gr
áfico
almacena
dato
base
datos
invoca
servicio
objetos
remotos
profundamente
co-
hesiva
acoplada
común
elementos
casos
esté
justificada
aceptación
baja
cohesión
caso
agrupación
responsabilidades
código
clase
componente
simplificar
mantenimiento
persona
queda
advertido
agrupación
empeorar
mantenimiento
ejemplo
suponga
220
UML
PATRONES
Contraindica-
cionesque
aplicaci
ón
contiene
sentencias
SQL
embebida
siguiendo
principios
diseño
deberían
distribuirse
clases
tales
clases
encar-
gadas
conver
sión
objeto
-tupla
ba
dato
normal
expertos
SQL
conozcan
definir
mantener
SQL
docenas
programadores
orientados
objetos
OO
proyec-
to
programadores
OO
dominar
SQL
Suponga
experto
SQL
cómodo
programador
OO
arquitecto
software
decidir
agrupar
sentencias
SQL
clase
OperacionesBDR
fácil
experto
SQL
trabajar
SQL
único
lugar
caso
componentes
baja
cohesión
constituyen
objetos
servidores
dis-
tribuidos
implicaciones
costes
fijos
rendimientos
asociados
obje-
tos
remotos
comunicaciones
remotas
deseable
crear
objetos
servi-
dores
tamaño
cohesivos
proporcionen
interfaz
operaciones
relacionado
patrón
denominado
Interfaz
Remota
Grano
Grueso
operaciones
remotas
grano
grueso
objeto
solicitar
trabajo
llamadas
operaciones
remotas
debi-
do
penalizaciones
rendimiento
llamadas
remotas
red
sim-
ple
ejemplo
objeto
remoto
operaciones
grano
fino
setNombre5
setSalario
setFechaAlquiler
operación
remota
setDatos
recibe
conjunto
datos
lugar
llamadas
remotas
rendimiento
incrementa
claridad
facilita
comprensión
diseño
simplifican
mantenimiento
mejoras
soporta
acoplamiento
•E
grano
fino
funcionalidad
altamente
relacionada
incrementa
reutilizaci
ón
clase
cohesiva
utilizar
propósito
específico
16.10
Controlador
Asignar
responsabilidad
recibir
manejar
mensaje
evento
sistema
clase
representa
siguientes
opciones
Representa
sistema
global
dispositivo
subsistema
controlador
fachada
Representa
escenario
caso
lugar
evento
sistema
denominado
NombreDelCasoDeUso
Manejador
NombreDelCaso-
DeUso
Coordinador
NombreDelCasoDeUso
Sesion
controlador
sesión
caso
Utilice
sma
cla
controlador
eventos
sistema
escenario
caso
Informalmente
sesión
instancia
conversación
actor
sesiones
duración
organizan
función
casos
sesiones
casos
GRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
221
N.
T.
nombrar
métodos
clase
asignan
valor
propiedad
denominada
uti-
lizaremos
habitual
terminología
set
Beneficios
SoluciónCorolario
ótese
clases
ventana
applet
widget
vi
sta
docu
mento
lista
Tales
clases
deberían
abordar
tareas
asociadas
eventos
sistema
normalmente
reciben
eventos
delegan
contro-
lador
responsable
gestionar
evento
entrada
sistema
evento
sistema
entrada
evento
generado
actor
externo
asocian
operaciones
sistema
operaciones
sistema
respuesta
eventos
sistema
relacionan
mensajes
métodos
ejemplo
cajero
utiliza
terminal
PDV
presiona
botón
Finali-
zar
Venta
generando
evento
sistema
indica
venta
terminado
Igualmente
escritor
utiliza
procesador
texto
presiona
botón
com-
probar
ortografía
generando
evento
sistema
indica
ejecute
comprobación
ortografía
Controlador
objeto
pertenece
interfaz
usuario
responsable
recibir
manejar
evento
sistema
Controlador
define
método
ope-
ración
sistema
aplicación
NuevaEra
operaciones
sistema
ilustra
Figura
16.13
muestran
sistema
clase
componente
le-
gal
UML
222
UML
PATRONES
Figura
16.13
Operaciones
sistema
asociadas
eventos
sistema
Sistema
finalizarVenta
introducirArticulo
crearNuevaVenta
realizarPago
Problema
Ejemplo
análisis
operaciones
sistema
asignarse
clase
Sistema
indicar
operaciones
sistema
significa
clase
software
denominada
Sistema
lleve
cabo
diseño
duran-
diseño
asigna
responsabilidad
operaciones
sistema
clase
Con-
trolador
Figura
16.14
debería
controlador
eventos
sistema
introducirArticulo
finalizarVenta
Siguiendo
patrón
Controlador
continuación
presentamos
opciones
representa
sistema
global
Registro
SistemaPDV
dispositivo
subsistema
representa
receptor
manejador
ProcesarVentaManejador
eventos
sistema
ProcesarVentaSesion
escenario
caso
usoGRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
223
Figura
16.14
Controlador
introducirArticulo
clase
objetos
debería
responsable
recibir
mensaje
evento
sistema
denomina
controlador
coordinador
Normalmente
trabajo
delega
objetos
controlador
especie
fachada
capa
dominio
capa
interfaz
actionPerformed(actionEvent
Cajero
JFrameVenta
presiona
botn
introducirArticulo(articuloID
cant
Capa
Interfaz
Capa
Dominio
mensaje
evento
sistema
diagramas
interacción
significa
ejemplos
Fi-
gura
16.15
útil
Figura
16.15
Opciones
Controlador
RegistrointroducirArticulo(id
cantidad
ProcesarVentaManejadorintroducirArticulo(id
cantidad
elección
clases
controlador
apropiado
influyen
factores
estudiarán
sección
diseño
asignan
clases
controlador
operaciones
sis-
tema
identificaron
análisis
comportamiento
sistema
Re-
gistro
muestra
Figura
16.16
sistemas
reciben
evento
entrada
externo
normalmente
trav
és
GUI
manejada
persona
medios
entrada
mensajes
externos
conmutador
telecomunicaciones
procesamiento
llamadas
se-
ñales
sensores
sistemas
control
procesos
DiscusiónEn
casos
utiliza
diseño
objetos
escoger
mane-
jador
eventos
patrón
Controlador
proporciona
guías
acerca
opciones
generalmente
aceptadas
adecuadas
ilustró
Figura
16.14
controlador
especie
fachada
capa
dominio
capa
interfaz
conveniente
utilizar
clase
controlador
eventos
sistema
caso
mantener
información
acerca
caso
controlador
información
útil
ejemplo
identificar
eventos
sistema
apartan
secuencia
establecida
ejemplo
operación
realizarPago
operación
finalizarVenta
utilizar-
controladores
casos
usos
distintos
error
típico
diseño
controladores
otorgarles
demasiada
responsabilidad
Normalmente
controlador
debería
delegar
objetos
trabajo
necesita
coordina
controla
actividad
realiza
trabajo
224
UML
PATRONES
Figura
16.16
Asignación
operaciones
sistema
Registro
finalizarVenta
introducirArticulo
crearNuevaVenta
realizarPago
crearNuevaDevolucion
introducirArticuloDevuelto
Sistema
finalizarVenta
introducirArticulo
crearNuevaVenta
realizarPago
crearNuevaDevolucion
introducirArticuloDevuelto
Operaciones
sistema
descubiertas
análisis
comportamiento
sistema
Asignación
operaciones
sistema
diseño
utilizando
controlador
fachada
ProcesarVenta
Manejador
finalizarVenta
introducirArticulo
crearNuevaVenta
realizarPago
asignación
operaciones
sistema
diseño
utilizando
controladores
casos
GestionarDevoluciones
Manejador
introducirArticuloDevuelto
crearNuevaDevolucion
Sistema
finalizarVenta
introducirArticulo
crearNuevaVenta
realizarPago
crearNuevaDevolucion
introducirArticuloDevuelto
favor
diríjase
sección
Cuestiones
Soluciones
aparece
discusión
elaborada
categoría
controlador
controlador
fachada
repre
senta
sistema
global
dispositivo
subsistema
idea
elegir
nombre
clase
su-
giera
cubierta
fachada
capas
aplicación
proporciona
llamadas
servicios
importantes
capa
UI
capas
ab
stracción
unidad
ísica
Registro6
Conmutador-
DeTelecomunicaciones
Telefono
Robot
clase
represente
sistema
software
completo
SistemaPDV
concepto
diseñador
elija
re-
presente
sistema
subsistema
global
ejemplo
JuegoAjedrez
software
juegos
controladores
fachada
adecuados
demasiados
even-
tos
sistema
interfaz
usuario
UI
redireccione
mensajes
eventos
sistema
controladores
alternativos
sistema
procesamiento
mensajes
elige
controlador
ca
sos
so
controlador
caso
Nótese
objeto
dominio
construcción
ar-
tificial
soporte
sistema
Fabricación
Pura
términos
patrones
GRASP
ejemplo
aplicaci
ón
NuevaEra
contiene
ca
sos
so
tale
Procesar
Venta
Gestionar
Devoluciones
clase
Procesar-
VentaManejador
sucesivamente
debería
escoger
controlador
casos
alternativa
te-
ner
asignación
responsabilidades
controlador
facha-
conduce
diseños
baja
cohesión
alto
acoplamiento
generalmente
controlador
fachada
inflando
excesivas
responsabilidades
con-
trolador
casos
elección
eventos
sistema
repartidos
procesos
controlador
factoriza
gestión
clases
separadas
manejables
proporciona
base
razonar
escenarios
actuales
marcha
UP
método
antiguo
Jacobson
Objectory
Jacobson92
conceptos
opcionales
clases
frontera
boundary
control
entidad
objetos
frontera
abstracciones
interfaces
objetos
entidad
objetos
soft-
ware
dominio
independiente
aplicación
normalmente
persistentes
ob-
jetos
control
manejadores
casos
describen
pa-
trón
Controlador
importante
corolario
patr
ón
Controlador
objeto
interfaz
ejemplo
objetos
ventana
elementos
gráficos
capa
presentación
deberían
responsables
cabo
eventos
sistema
palabras
opera-
ciones
sistema
deberían
manejar
lógica
aplicación
capas
dominio
lugar
capa
interfaz
sistema
Diríjase
sección
Cuestiones
Solu-
ciones
ejemplo
GRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
225
utilizan
términos
unidad
PDV
física
figuran
registro
terminal
punto
venta
TPDV
etcétera
tiempo
registro
llegado
encarnar
noción
unidad
física
abstracción
lógica
registra
ventas
pagos
objeto
Controlador
normalmente
objeto
cliente
smo
proceso
UI
ejemplo
aplicación
GUI
Swing
Java
en-
tonces
exactamente
aplicable
UI
cliente
Web
navegador
software
servidor
involucrado
caso
patro-
nes
comunes
manejar
eventos
sistema
fuertemente
influenciados
marco
tecnológico
escogido
servidor
servlets
Java
obstante
estilo
común
crear
controladores
casos
servidor
servlet
bean
sesión
EJB
Enterprise
JavaBeans
caso
objeto
sesión
servidor
representa
sesión
interacción
actor
externo
UI
cliente
web
ejemplo
GUI
Swing
Windows
aplicación
invoca
servicios
remotos
común
patrón
Controlador
UI
reenvía
solicitud
Controlador
local
cliente
Controlador
reenviar
gestión
petición
servicios
remotos
diseño
dis-
minuye
acoplamiento
UI
servicios
remotos
fácil
ejem-
plo
abastecer
servicios
local
remota
indirecci
ón
Controlador
cliente
Resumiendo
Controlador
recibe
solicitud
servicio
capa
UI
coordina
realización
normalmente
delegando
objetos
Aumenta
otencial
ara
reutilizar
yl
interfaces
onectables
pluggable
Asegura
lógica
aplicación
maneja
capa
interfaz
Técni-
camente
responsabilidades
controlador
manejarse
objeto
interfaz
implicación
diseño
código
programa
lógica
relacionada
realización
lógica
aplicación
estaría
embebida
objetos
ventana
interfaz
diseño
interfaz
controlador
reduce
oportunidad
reutilizar
lógica
futuras
aplicaciones
puesto
ligada
interfaz
particular
ejemplo
objetos
ventana
raramente
aplicable
aplicacione
s.
cambio
delegando
re
sponsabilidad
operaci
ón
sistema
controlador
ayuda
reutilizaci
ón
lógica
futuras
apli-
caciones
puesto
lógica
ligada
capa
interfaz
susti-
tuirse
interfaz
Razonamiento
casos
Av
eces
necesario
asegurar
operaciones
sistema
lugar
secuencia
válida
capaces
razonar
actual
actividad
operaciones
caso
marcha
ejemplo
podr
ía
necesario
garantizar
operaci
ón
realizarPago
ocurrir
lugar
operación
finalizar-
Venta
necesario
capturar
sitio
información
controlador
opción
razonable
especialmente
controlador
uti-
liza
caso
recomienda
Controladores
saturados
cla
controlador
pobremente
di
señada
tendr
baja
cohe
sión
centrada
concreto
gestiona
demasiadas
áreas
responsabilidad
controlador
denomina
controlador
saturado
Signos
controlador
saturado
226
UML
PATRONES
Beneficios
Cuestiones
Soluciones•E
xiste
única
clase
controlador
recibe
eventos
sistema
sistema
ocurre
elige
controlador
fachada
•E
controlador
realiza
tareas
necesarias
cabo
eventos
sistema
delegar
trabajo
Normalmente
conlleva
violación
patrones
Experto
Información
Alta
Cohesión
controlador
atributos
mantiene
información
significativa
sistema
dominio
debería
haberse
distribuido
objetos
duplica
información
sitios
remedios
controlador
saturado
encuentran
Añadir
ás
controladores
sistema
lugar
controlador
fachada
utilice
controladores
casos
ejemplo
considere
aplicación
eventos
sistema
sistema
reservas
vuelos
contener
siguientes
controladores
GRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
227
Controladores
casos
RealizarReservaManejador
GestionarHorariosManejador
GestionarTarifasManejador
Di
señe
controlador
delegue
cumplimiento
responsabilidad
operación
sistema
objetos
capa
interfaz
maneja
eventos
sistema
Reiterando
corolario
importante
patrón
Controlador
objetos
interfaz
ejemplo
objetos
ventana
capa
interfaz
deberían
responsables
manejar
eventos
sistema
ejemplo
considere
diseño
Java
utiliza
JFrame
mostrar
información
Asuma
aplicación
NuevaEra
ventana
muestra
información
venta
captura
operaciones
cajero
Utilizando
patr
ón
Controlador
Figura
16.17
ilustra
relación
aceptable
JFrame
Controlador
objetos
sistema
PDV
simplificado
Nótese
cla
JFrameVenta
perteneciente
capa
interfaz
pa
sa
mensaje
introducirArticulo
objeto
Registro
involucró
procesamiento
operación
decidir
manejarla
ventana
delega
capa
Asignando
responsabilidad
operaciones
sistema
objetos
capa
aplicación
dominio
utilizando
patrón
Controlador
lugar
capa
interfaz
incrementa
potencial
reutilizar
objeto
capa
interfaz
JFrameVenta
maneja
operación
sistema
representa
proceso
negocio
lógica
proceso
negocio
estaría
contenida
un228
UML
PATRONES
Figura
16.17
Acoplamiento
deseable
capa
interfaz
dominio
actionPerformed(actionEvent
Registro
Cajero
JFrameVenta
presiona
botn
introducirArticulo(articuloID
cant
Venta1.1
crearLineaDeVenta(articuloID
cant
Capa
Interfaz
Capa
dominio
mensaje
evento
sistema
controlador
objeto
interfaz
ejemplo
tipo
ventana
oportunidad
reutilizar
baja
acoplamiento
interfaz
particular
aplicación
consecuencia
conveniente
diseño
Figura
16.18
localización
responsabilidad
operaciones
sistema
controla-
dor
objeto
dominio
facilita
reutilización
lógica
programa
permite
soportar
proceso
negocio
asociado
futuras
aplicaciones
faci-
lita
desconexión
capa
interfaz
utilización
framework
tecnología
interfaz
ejecutar
sistema
lotes
conexión
Sistemas
manejo
mensajes
patrón
Command
aplicaciones
sistemas
manejo
mensajes
servidores
reciben
pe-
ticiones
procesos
conmutador
telecomunicaciones
ejemplo
típico
tales
sistemas
diseño
interfaz
controlador
detalles
estudiarán
capítulo
posterior
esencia
solución
típica
utilizar
patrón
Command
GHJV95
patrón
Command
Processor
BMRSS96
pre-
sentarán
Capítulo
34
Command
sistema
manejo
mensajes
mensaje
represen-
tarse
manejarse
objeto
Command
separado
GHJV95
Fachada
controlador
fachada
tipo
Fachada
Facade
GHJV95
Patrones
Relacionados•
Capas
patrón
POSA
BMRSS96
ubicación
lógica
dominio
capa
dominio
lugar
capa
presentación
forma
patrón
Capas
Layers
Fabricación
Pura
patrón
GRASP
Fabricación
Pura
creación
arbitraria
diseñador
clase
software
cuyo
nombre
inspira
Mo-
delo
Dominio
controlador
caso
tipo
Fabricación
Pura
16.11
Diseño
objetos
tarjetas
CRC
formalmente
forma
UML
mecanismo
utiliza
ve-
ces
ayudar
asignar
responsabilidades
indicar
colaboraciones
ob-
jetos
tarjetas
CRC
tarjetas
Clase-Responsabilidad-Colaborador
BC89
Kent
Beck
Ward
Cunningham
promovieron
tarjetas
principale
responsables
stimular
di
señadores
software
pen
sar
abstracta
términos
asignación
responsabilidades
colaboraciones
patrones
GRASP
DISEÑO
OBJETOS
RESPONSABILIDADES
229
Figura
16.18
Acoplamiento
conveniente
capa
interfaz
dominio
Cajero
JFrameVenta
actionPerformed(actionEvent
Venta
crearLineaDeVenta(articuloID
cant
Capa
Interfaz
Capa
dominio
conveniente
objeto
capa
interfaz
ventana
involucre
manejar
procesos
dominio
lógica
negocio
embebida
capa
presentación
útil
JFrameVenta
debería
enviar
mensaje
presiona
botnLas
tarjetas
CRC
fichas
clase
escriben
brevemente
responsabilidades
clase
lista
objetos
colabora
lle-
var
cabo
responsabilidades
desarrollan
normalmente
sesión
trabajo
grupo
pequeño
patrones
GRASP
aplicar
diseño
utilizan
tarjetas
CRC
tarjetas
CRC
técnica
registrar
resultados
asignación
res-
ponsabilidades
asignaciones
información
recopilada
enriquecer
utilizando
diagramas
clases
interacción
importante
tarjetas
diagramas
presente
asignación
responsabilidades
16.12
Lecturas
adicionales
metáfora
objetos
colaboran
responsabilidades
Diseño
Dirigido
Responsabilidades
surgió
especialmente
trabajo
objetos
Small-
talk
Tektronix
Portland
Kent
Beck
Ward
Cunningham
Rebecca
Wirfs-Brock
influencia
libro
texto
sirve
referencia
Designing
Object-Oriented
Software
WWW90
relevante
escrito
textos
recomendados
destacan
principios
fundamentales
dise-
ño
objetos
Object-Oriented
Design
Heuristics
Riel
Object
Models
Coad
230
UML
PATRONESObjetivos
Diseñar
realizaciones
casos
Aplicar
patrones
GRASP
asignar
responsabilidades
clases
Utilizar
notación
diagramas
interacción
UML
ilustrar
diseño
objetos
Introducción
capítulo
presenta
crear
diseño
objetos
colaboran
responsabi-
lidades
presta
especial
atención
aplicación
patrones
GRASP
desa-
rrollar
solución
diseñada
favor
obsérvese
patrones
GRASP
tales
nombre
importante
simplemente
apoyo
aprendizaje
ayudar
discutir
metódica
diseño
objetos
fundamental
capítulo
expone
principios
utilizando
ejemplo
PDV
NuevaEra
diseñador
orientado
objetos
asigna
responsabilidades
establece
interacciones
objetos
técnica
fundamental
desarrollo
orientado
objetos
Nota
asignación
responsabilidades
diseño
colaboraciones
etapas
im-
portantes
creativas
diseño
elaboran
diagramas
programa
Capítulo
17
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
inventar
necesitas
imaginación
montón
trastos
viejos
Thomas
Edison232
UML
PATRONES
material
intencionalmente
detallado
pretende
ilustrar
exhaustiva
decisiones
mágicas
injustificadas
diseño
objetos
asignación
responsabilidades
elección
interacciones
objetos
explicarse
aprenderse
forma
racional
17.1
Realizaciones
casos
Citando
textualmente
realización
caso
describe
realiza
caso
particular
modelo
di
seño
funci
ón
objetos
colaboran
RUP
ás
precisa
diseñador
describir
diseño
ás
escenarios
caso
denomina
realización
caso
realización
caso
término
concepto
UP
utiliza
recordarnos
conexión
requisitos
expresados
casos
diseño
objetos
satisface
requisitos
diagramas
interacción
UML
lenguaje
común
ilustrar
realiza-
ciones
casos
estudió
capítulo
principios
patrones
diseño
objetos
Experto
Información
Acoplamien-
to
aplicar
trabajo
diseño
repaso
Figura
17.20
capítulo
expone
relaciones
en-
tre
artefactos
UP
•E
caso
sugiere
eventos
sistema
muestran
explícitamente
diagramas
secuencia
sistema
Opcionalmente
describirse
detalles
efectos
eventos
sistema
términos
cambios
objetos
dominio
contratos
operaciones
sistema
eventos
sistema
representan
mensajes
inician
diagramas
in-
teracción
representan
objetos
interactúan
lle-
var
cabo
tareas
requeridas
realización
caso
diagramas
interacción
comprenden
interacción
mensajes
objetos
software
cuyos
nombres
inspiran
nombres
clases
conceptuales
Modelo
Dominio
clases
objetos
17.2
Comentarios
artefactos
Diagramas
interacción
realizaciones
casos
iteración
actual
teniendo
escenarios
eventos
siste-
ma
tales
Procesar
Venta
crearNuevaVenta
introducirArticulo
finalizarVenta
realizarPago
utilizan
diagramas
interacción
representar
realizaciones
casos
necesitará
diagrama
colaboración
mostrar
ma-
nejo
mensaje
evento
sistema
ejemplo
Figura
17.1
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
233
Figura
17.1
Diagramas
colaboración
manejo
mensajes
eventos
sistema
RegistrointroducirArticulo
RegistrofinalizarVenta
RegistrorealizarPago
RegistrocrearNuevaVenta
utilizan
diagramas
secuencia
encajar
to-
mensajes
eventos
sistema
diagrama
Figura
17.2
Figura
17.2
diagrama
secuencia
manejo
mensajes
eventos
sistema
Registro
introducirArticulo
articuloID
cantidad
CatalogoDeProductos
añadirLineaDeVenta(espec
cantidad
Venta
crearNuevaVenta
create
finalizarVenta
realizarPago
espec
getEspecProducto(articuloID
ocurre
diagrama
secuencia
complejo
legal
diagramas
interacción
utilizar
diagrama
secuencia
mensaje
evento
sistema
Figura
17.3
Contratos
realizaciones
casos
Reiterando
diseñar
realizaciones
casos
directamen-
texto
casos
operaciones
sistema
escrito
contratos
añaden
detalles
específicos
ejemplo
Contrato
CO2
introducirArticulo
Operación
introducirArticulo(articuloID
ArticuloID
cantidad
integer
Referencias
cruzadas
Caso
Procesar
Venta
Precondiciones
venta
curso
Postcondiciones
creó
instancia
LineaDeVenta
ldv
creación
ins-
tancias
tiempo
texto
casos
con-
trato
trabajamos
cuidadosamente
expresar
cambio
postcondi-
ciones
diseñamos
interacciones
satisfacer
requisitos
ejemplo
dada
operación
parcial
sistema
introducirArticulo
Figura
17.4
muestra
diagra-
ma
interacción
parcial
satisface
cambio
creación
instancia
LineaDeVenta
234
UML
PATRONES
Figura
17.3
Múltiples
diagramas
secuencia
manejo
mensajes
eventos
sistema
Registro
introducirArticulo
artID
cantidad
CatalogoDeProductos
añadirLineaDeVenta(espec
cantidad
Venta
crearNuevaVenta
create
espec
getEspecProducto(artID
Registro
Venta
Figura
17.4
Diagrama
interacción
parcial
RegistrointroducirArticulo(id
cant
1.1
create
Venta1
crearLineaDeVenta
LineaDeVentaAdvertencia
requisitos
perfectos
útil
presente
casos
escrito
previamente
contratos
idea
aproximada
historia
desarro-
llo
software
descubriendo
invariablemente
requisitos
perfectos
cambiado
excusa
tratar
trabajo
re
quisitos
reconocimiento
nece
sita
involucrar
continuamente
clientes
expertos
materia
studio
revisar
proporcionar
retroali
mentación
comportamiento
sistema
desarrollando
ventaja
desarrollo
iterativo
favorece
natural
scubri-
miento
resultados
análisis
diseño
trabajo
diseño
imple-
mentación
espíritu
desarrollo
iterativo
capturar
grado
razonable
in
formación
análisis
requisitos
completando
detalles
diseño
implementación
Modelo
Dominio
realizaciones
casos
objetos
software
interactúan
pa
so
mensajes
diagramas
interacción
inspiran
Modelo
Dominio
clase
concep-
tual
Venta
clase
diseño
Venta
elección
asignación
adecuada
res-
ponsabilidad
utilizando
patrones
GRASP
depende
informaci
ón
Modelo
Dominio
Modelo
Dominio
existente
proba-
ble
perfecto
espera
errores
omisiones
descubrirán
conceptos
olvidaron
previamente
ignorarán
conceptos
identificaron
an-
teriormente
ocurrirá
asociaciones
atributos
Clases
conceptuales
vs
clases
diseño
Recordemos
Modelo
Dominio
UP
representa
clases
software
po-
dría
utilizarse
inspirar
presencia
nombres
clases
software
Modelo
Diseño
elaboración
diagramas
interacción
progra-
mación
desarrolladores
mirar
Modelo
Dominio
signar
nombres
clases
diseño
crea
diseño
salto
re-
presentación
diseño
software
percepción
dominio
mundo
real
software
relacionado
Figura
17.5
limitar
clases
Modelo
Diseño
clases
nombres
inspirados
Modelo
Dominio
absoluto
trabajo
diseño
conve-
niente
descubrir
clases
conceptuales
obviaron
análisis
do-
minio
inicial
crear
clases
software
cuyos
nombres
objetivos
estén
rela-
cionados
absoluto
Modelo
Dominio
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
23517.3
Realizaciones
casos
iteración
NuevaEra
siguientes
secciones
exploran
elecciones
decisiones
tomadas
diseño
realización
caso
objetos
basado
patrones
GRASP
ex-
plicaciones
intencionalmente
detalladas
intento
ilustrar
creación
diagramas
interacción
diseñados
rollo
fundamento
construcción
basa
principios
justificables
notación
diseño
objetos
mensaje
eventos
sis-
tema
representará
diagrama
independiente
centrarse
cuestiones
diseño
haberse
agrupado
juntos
único
diagra-
ma
secuencia
17.4
Diseño
objetos
crearNuevaVenta
operación
sistema
crearNuevaVenta
lugar
cajero
solicita
co-
menzar
venta
llegado
cliente
cosas
comprar
caso
suficiente
decidir
necesario
caso
estudio
escribimos
contratos
eventos
sistema
explicación
completa
236
UML
PATRONES
Figura
17.5
Disminución
salto
representación
nombrando
clases
diseño
clases
conceptuales
Pago
cantidad
Venta
fecha
hora
Pagado-por
Pago
cantidad
Dinero
getDevolucion
Dinero
Venta
fecha
Fecha
horaInicio
Hora
getTotal
Dinero
Pagado-por
Modelo
Dominio
UP
Visión
personas
involucradas
conceptos
relevantes
dominio
Modelo
Diseño
UP
desarrollador
objetos
inspirado
dominio
mundo
real
crear
clases
software
disminuye
salto
representación
personas
involucradas
proyecto
conciben
dominio
representación
software
inspira
objetos
nombres
clases
conceptuales
clases
diseñoContrato
CO1
crearNuevaVenta
Operación
crearNuevaVenta
Referencias
cruzadas
Caso
Procesar
Venta
Precondiciones
Postcondiciones
creó
instancia
Venta
creación
instancias
asoció
Registro
formación
asociaciones
inicializaron
atributos
v.
Elección
clase
controlador
elección
diseño
comprende
elección
controlador
men-
saje
operación
sistema
crearNuevaVenta
patrón
Controlador
opciones
representa
sistema
global
Registro
SistemaPDV
dispositivo
subsistema
representa
receptor
manejador
ProcesarVentaManejador
eventos
sistema
ProcesarVentaSesion
escenario
caso
aceptable
elegir
controlador
fachada
Registro
po-
cas
operaciones
sistema
controlador
stá
asumiendo
demasiadas
responsa-
bilidades
palabras
perder
cohesión
adecuado
elegir
contro-
lador
caso
operaciones
sistema
deseamos
distribuir
responsabilidades
mantener
clase
controlador
ligera
centrada
palabras
cohesiva
caso
Registro
suficiente
puesto
operaciones
sistema
Registro
objeto
software
Modelo
Diseño
registro
físico
real
abstracción
software
cuyo
nombre
eligió
disminuir
salto
re-
presentación
concepción
dominio
software
diagrama
interacción
muestra
Figura
17.6
comienza
en-
viando
mensaje
crearNuevaVenta
objeto
software
Registro
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
237
Figura
17.6
Aplicación
patrón
GRASP
Controlador
Registro
crearNuevaVenta
ControladorCreación
Venta
crear
objeto
software
Venta
patrón
GRASP
Creador
sugiere
asignación
responsabilidad
creación
clase
agrega
contiene
registra
objeto
crear
análisis
Modelo
Dominio
revela
considerar
Registro
registra
Venta
palabra
registro”durante
años
significado
cosa
graba
registra
transacciones
contables
ventas
Registro
candidato
razonable
crear
Venta
consintien-
do
Registro
cree
Venta
asociar
fácilmente
tiempo
futuras
operaciones
sesión
Registro
referen-
cia
instancia
Venta
actual
crea
Venta
crear
colecci
ón
vacía
contenedor
List
Java
guardar
futuras
instancias
Linea-
DeVenta
añadirán
instancia
Venta
contendrá
mantendrá
colección
implica
Creador
Venta
candidata
crearla
Registro
crea
Venta
Venta
crea
colección
vacía
representa-
multiobjeto
diagrama
interacción
diagrama
interacción
Figura
17.7
ilustra
diseño
238
UML
PATRONES
Figura
17.7
Creación
Venta
multiobjeto
Registro
crearNuevaVenta
Ventacreate
Registro
crea
Venta
patrón
Creador
create
Linea
Creador
Venta
crea
multiobjeto
vacío
List
guardará
finalmente
instancias
LineaDeVentaADVERTENCIA
instancia
LineaDeVenta
colección
objetos
List
guardar
objetos
LineaDeVenta
Creador
Controlador
activación
sobreentiende
constructor
instancia
Venta
DeVentaConclusión
diseño
difícil
importante
haberlo
explicado
cuidadosa
términos
Controlador
Creador
ilustrar
decidir
explicar
racional
sistemática
detalles
diseño
base
principios
patrones
GRASP
17.5
Diseño
objetos
introducirArticulo
operación
sistema
introducirArticulo
lugar
cajero
introduce
ar-
ticuloID
opcionalmente
cantidad
artículo
comprar
conti
nuación
presentamos
contrato
completo
Contrato
CO2
introducirArticulo
Operación
introducirArticulo(articuloID
ArticuloID
cantidad
integer
Referencias
cruzadas
Caso
Procesar
Venta
Precondiciones
venta
curso
Postcondiciones
creó
instancia
LineaDeVenta
ldv
creación
ins-
tancias
ldv
asoció
Venta
actual
formación
asociaciones
ldv.cantidad
pasó
cantidad
modificación
atributos
ldv
asoció
EspecificacionDelProducto
base
coincidencia
articuloID
formación
asociaciones
construirá
diagrama
interacción
satisfaga
postcondición
introdu-
cirArticulo
utilizando
patrones
GRASP
ayudar
tomar
decisiones
diseño
Elección
clase
controlador
elecci
ón
manejo
re
sponsabilidad
mensaje
operación
sistema
introducirArticulo
asado
patrón
Controlador
crearNuevaVenta
continuaremos
utilizando
Registro
controlador
Mostrar
pantalla
descripción
precio
artículo
principio
diseño
denominado
Separación
Modelo-Vista
objetos
pertenecen
GUI
Registro
Venta
responsables
involucrarse
tareas
salida
caso
establezca
muestran
pantalla
descripción
precio
operación
diseño
ignorará
momento
requiere
responsabilidades
mostrar
informa-
ción
información
conozca
sucede
caso
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
239Creación
LineaDeVenta
po
stcondición
contrato
introducirArticulo
indica
creaci
ón
inicializaci
ón
asociación
LineaDeVenta
análisis
Modelo
Dominio
revela
Venta
contiene
objetos
LineaDeVenta
nspirándonos
dominio
Venta
software
contener
igualmente
objetos
software
LineaDeVenta
Cre-
ador
Venta
software
candidata
adecuada
crear
LineaDeVenta
Venta
asociarse
LineaDeVenta
recién
creada
almacenando
instancia
colección
líneas
venta
postcondición
indica
Li-
neaDeVenta
crea
necesita
cantidad
Registro
pasar
cantidad
Venta
pasarla
parámetro
mensaje
create
Java
implementaría
llamada
constructor
parámetro
Creador
envía
Venta
mensaje
crearLineaDe-
Venta
cree
LineaDeVenta
Venta
crea
LineaDeVenta
yd
spués
al-
macena
instancia
colección
permanente
parámetros
mensaje
crearLineaDeVenta
incluyen
cantidad
LineaDeVenta
registrarla
EspecificacionDelProducto
corresponde
articuloID
Localización
EspecificacionDelProducto
LineaDeVenta
necesita
asociarse
EspecificacionDelProducto
corres-
ponde
articuloID
entrada
implica
necesario
recuperar
Espe-
cificacionDelProducto
base
coincidencia
articuloID
siderar
úsqueda
conveniente
siderar
responsable
paso
Comience
asignando
responsabilidades
estableciendo
claramente
responsabilidad
olviendo
plantear
problema
responsable
EspecificacionDelProducto
a-
sada
coincidencia
articuloID
problema
creaci
ón
elección
controlador
evento
sistema
aplicación
Experto
Informa-
ción
diseño
casos
patrón
Experto
principal
patrón
aplica
Experto
Información
sugiere
objeto
información
requiere
abor-
responsabilidad
debería
llevarla
cabo
conoce
objetos
Especi-
ficacionDelProducto
an
álisis
Modelo
Dominio
revela
CatalogoDeProductos
lógica-
mente
contiene
instancias
EspecificacionDelProducto
inspirán-
donos
dominio
diseñamos
clases
software
organización
parecida
CatalogoDeProductos
software
contendrá
objetos
software
EspecificacionDelProducto
240
UML
PATRONESCon
decidido
entonce
Experto
Informaci
ón
CatalogoDePro-
ductos
candidato
responsabilidad
búsqueda
puesto
conoce
objetos
EspecificacionDelProducto
implementarse
ejemplo
étodo
denominado
getEspecifi-
cacion1
Visibilidad
CatalogoDeProductos
debería
enviar
mensaje
getEspecificacion
CatalogoDeProductos
soli-
citar
EspecificacionDelProducto
razonable
asumir
crearon
Registro
CatalogoDeProductos
caso
inicial
Marcha
conexión
permanente
ob-
jeto
Registro
objeto
CatalogoDeProductos
podríamos
anotar
lista
tareas
cosas
debemos
asegurar
diseño
vayamos
di-
señar
inicialización
Registro
envíe
mensaje
getEspeci-
ficacion
CatalogoDeProductos
implica
concepto
diseño
objetos
visibilidad
visibilidad
capacidad
objeto
referencia
objeto
objeto
envíe
mensaje
objeto
visible
Puesto
sumiremos
Registro
conexi
ón
permanente
refe
rencia
CatalogoDeProductos
visible
Registro
enviar-
mensaje
getEspecificacion
capítulo
abordará
tema
visibilidad
detenimiento
Recuperación
objetos
EspecificacionDelProducto
base
datos
versión
aplicación
PDV
NuevaEra
improbable
ins-
tancias
EspecificacionDelProducto
encuentren
realmente
memoria
probable
almacenen
base
datos
relacional
objetual
recuperarán
demanda
almacenarse
proceso
cliente
motivos
ren-
dimiento
tolerancia
fallos
cuestiones
relacionadas
recupe-
ración
base
datos
pospondrán
aras
simplicidad
asu-
mirá
objetos
EspecificacionDelProducto
encuentran
memoria
Capítulo
34
presentará
tema
acceso
base
datos
objetos
persis-
tentes
tema
amplio
influye
normalmente
elección
tecnolo-
gía
J2EE
.NET
etcétera
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
241
asignación
nombres
métodos
acceso
cuestión
estilo
len-
guaje
Java
utiliza
forma
objeto.getFoo(),C
/H11001
H11001tiende
utilizar
objeto.foo
utiliza
objeto
Foo
oculta
Eiffel
Ada
llamada
étodo
acce
so
directo
atributo
úblico
ejemplos
utiliza
estilo
Java
diseño
objetos
introducirArticulo
Dada
discusión
diagrama
interacción
Figura
17.8
refleja
de-
cisiones
asignación
responsabilidades
deberían
in-
teractuar
objetos
Obsérvese
considerable
reflexión
llegar
diseño
basada
patrones
GRASP
diseño
interacciones
objetos
asignación
responsabilidades
requiere
deliberación
242
UML
PATRONES
Figura
17.8
diagrama
interacción
introducirArticulo
crearLineaDeVenta(espec
cant)introducirArticulo(id
cant
espec
getEspecificacion(id
2.1
create(espec
cant
1.1
espec:=buscar(id
Registro
Venta
Catalogo
DeProductos
lv
LineaDeVenta
SalesLineItem
LineaDeVenta
Especificacion
DelProducto
2.2
añadir(lv
Experto
Controlador
mensaje
buscar
objeto
Map
multiobjeto
EspecificacionDelProducto
ADVERTENCIA
ADVERTENCIA
colección
multiobjeto
Map
EspecificacionDelProducto
contener
instancias
EspecificacionDelProducto
Creador
añade
instancia
LineaDeVenta
recién
creada
multiobjeto
ej.
List
colección
multiobjeto
List
LineaDeVenta
contener
instancias
LineaDeVenta
Mensajes
multiobjetos
Nótese
interpretación
UML
envío
mensaje
multiobjeto
mensaje
colección
objetos
transmisión
implícita
miembros
especialmente
obvio
operaciones
co-
lección
genéricas
buscar
añadir
ejemplo
diagrama
interacción
introducirArticulo
mensaje
buscar
enviado
multiobjeto
EspecificacionDelProducto
men-
saje
envía
estructura
datos
colección
representada
multiobjeto
Map
Java
mensaje
genérico
independiente
lenguaje
buscar
traducirá
programación
lenguaje
specífico
librer
ía
finalmenteMap.get
Java
haberse
utilizado
mensaje
get
diagramas
utilizó
buscar
entender
diagramas
diseño
requerir
traducción
lenguajes
librerías
•E
mensaje
añadir
enviado
multiobjeto
LineaDeVenta
añadir
ele
mento
structura
dato
colecci
ón
representada
multiobjeto
List
Java
17.6
Diseño
objetos
finalizarVenta
operación
sistema
finalizarVenta
lugar
cajero
presiona
botón
indicando
venta
continuación
presentamos
contrato
Contrato
CO3
finalizarVenta
Operación
finalizarVenta
Referencias
cruzadas
Caso
Procesar
Venta
Precondiciones
venta
curso
Postcondiciones
Venta.esCompleta
pasó
modificación
atributos
Elección
clase
controlador
elección
manejo
responsabilidad
men-
saje
operación
sistema
finalizarVenta
asado
patrón
GRASP
Controlador
introducirArticulo
continuaremos
utilizando
Registro
controlador
Valor
atributo
Venta.esCompleta
postcondición
contrato
establece
Venta.esCompleta
pasó
modificación
atributos
patrón
deber
ía
Experto
problema
creación
controlador
debería
re
sponsable
valor
atributo
esComplet
Venta
Experto
debería
Venta
puesto
conoce
mantiene
atributo
esCompleta
Registro
enviará
men
saje
seHaCompletado
Venta
asignarle
valor
true
Notación
UML
mostrar
restricciones
notas
algoritmos
Figura
17.9
muestra
mensaje
seHaCompletado
pone
manifiesto
ocurre
método
seHaCompletado
caso
reconoce
trivial
UML
deseamos
utilizar
texto
describir
algoritmo
méto-
do
especificar
restricción
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
243244
UML
PATRONES
Figura
17.9
Finalización
entrada
artículo
RegistrofinalizarVenta
Venta1
seHaCompletado
Expertosegún
Controlador
stas
nece
sidades
UML
proporciona
restricciones
notas
restricción
UML
información
semánticamente
significativa
anexa
ele-
mento
modelo
restricciones
UML
texto
encerrado
llaves
ejemplo
20
utilizar
lenguaje
formal
informal
res-
tricciones
UML
incluye
specialmente
OCL
lenguaje
restricciones
objetos
WK99
desea
utilizarlo
nota
UML
comentario
impacto
semántico
fecha
creación
autor
nota
muestra
cuadro
nota
cuadro
texto
s-
quina
doblada
restricción
mostrarse
simple
texto
llaves
adecuado
declaraciones
cortas
restricciones
largas
colo-
carse
cuadro
nota
cuyo
ca
so
presunto
cuadro
nota
realmente
restricción
lugar
nota
texto
cuadro
llaves
indi-
car
restricción
Figura
17.10
utilizan
ambo
stilos
ótese
stilo
re
stricción
simple
llaves
cuadro
muestra
sentencia
significado
clásico
restricción
lógica
restricción
cuadro
nota
muestra
implementación
método
Java
restricción
Am-
bos
estilos
legales
representar
restricción
UML
Figura
17.10
Restricciones
notas
RegistrofinalizarVenta
Venta1
seHaCompletado
public
void
seHaCompletado
esCompleta
true
s.esCompleta
true
implementación
restricción
cuadro
nota
obsérvese
llave
externa
rodea
método
significa
restricción
cuadro
nota
restricción
define
algoritmo
especifica
cumplir
nota
creada
CraigCálculo
Venta
Considere
fragmento
caso
Procesar
Venta
Escenario
principal
éxito
Flujo
Básico
Cliente
llega
Cajero
Sistema
cree
venta
Cajero
introduce
identificador
artículo
Sistema
registra
línea
venta
Cajero
repite
pasos
3-4
indique
Sistema
presenta
impuestos
calculados
paso
presenta
muestra
pantalla
principio
Separación
Modelo-Vista
deberíamos
preocuparnos
diseño
mos-
trará
venta
necesario
asegurar
conoce
Nótese
clase
diseño
actualmente
conoce
venta
necesi-
tamos
crear
diseño
interacciones
objetos
satisfaga
requisito
Experto
Información
debería
patrón
trate
problema
controlador
creación
Probablemente
obvio
Venta
deba
responsable
to-
considere
análisis
proceso
razonamiento
encontrar
Experto
transparente
cristal
ejemplo
sencillo
Establezca
responsabilidad
responsable
venta
Re
úna
información
necesaria
venta
suma
subtotales
líneas
venta
subtotal
línea
venta
cantidad
línea
venta
precio
descripción
producto
Li
ste
información
requerida
abordar
responsabilidad
clases
conocen
información
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
245
Información
requerida
Venta
Experto
Información
EspecificacionDelProducto.precio
EspecificacionDelProducto
LineaDeVenta.cantidad
LineaDeVenta
LineasDeVenta
Venta
actual
Venta
continuación
presentamos
análisis
detallado
deber
responsable
cálculo
Venta?S
gún
Experto
de-
bería
Venta
puesto
conoce
instancias
LineaDeVenta
cu-
yos
subtotales
sumar
calcular
venta
Venta
ten-
drá
responsabilidad
implementada
método
getTotal.•
Venta
calcule
nece
sita
subtotal
LineaDeVenta
responsable
crear
subtotal
LineaDeVenta?S
gún
Ex-
perto
debería
LineaDeVenta
puesto
conoce
cantidad
Es-
pecificacionDelProducto
stá
sociada
LineaDeVenta
responsabilidad
subtotal
implementada
método
getSubtotal
LineaDeVenta
calcule
subtotal
necesita
precio
Especifi-
cacionDelProducto
debería
responsable
proporcionar
precio
EspecificacionDelProducto?S
gún
Experto
debería
Especifica-
cionDelProducto
puesto
encapsula
precio
atributo
EspecificacionDelProducto
re
sponsabilidad
precio
im
plementada
operación
getPrecio
análisis
trivial
caso
atormentador
grado
elaboración
presentado
lugar
diseño
ocupa
estrategia
ra-
zonamiento
encontrar
Experto
aplicarse
situaciones
difíci-
Descubrirá
aprenda
principios
rápidamente
clase
razonamiento
mentalmente
diseño
Venta--getTotal
Dada
discusión
conveniente
construir
diagrama
interacci
ón
ilustre
ocurre
envía
mensaje
getTotal
Venta
men-
saje
diagrama
getTotal
observe
mensaje
getTotal
evento
sistema
observación
diagramas
interacción
comienzan
mensaje
evento
sistema
comenzar
mensaje
diseñador
desee
mostrar
in-
teracciones
diagrama
interacción
muestra
Figura
17.11
envía
men-
saje
getTotal
instancia
Venta
Venta
enviará
mensaje
getSubtotal
instancia
LineaDeVenta
relacionada
LineaDeVenta
enviará
sucesivamente
mensaje
getPrecio
as
instancias
EspecificacionDelProducto
asociadas
Puesto
aritmética
usualmente
ilustra
mensajes
detalles
cálculos
ilustrar
adjuntando
diagrama
algoritmos
restricciones
de-
finan
cálculos
enviará
mensaje
getTotal
Venta
probable
obje-
to
capa
UI
JFrame
Java
Obsérvese
Figura
17.12
notas
algoritmos
restricciones
exponer
detalles
getTotal
getSubtotal
246
UML
PATRONES17.7
Diseño
objetos
realizarPago
operación
sistema
realizarPago
lugar
cajero
introduce
cantidad
dinero
entregada
pago
continuación
presentamos
contrato
completo
Contrato
CO4
realizarPago
Operación
realizarPago(cantidad
Dinero
Referencias
cruzadas
Caso
Procesar
Venta
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
247
Figura
17.11
Diagrama
interacción
Venta--getTotal
Ventatot
getTotal
st
getSubtotal
EspecificacionDelProducto
1.1
pr:=getPrecio
LineaDeVenta
Experto
Experto
recuerde
notación
especial
indicar
iteración
elementos
colección
Figura
17.12
Notas
algoritmos
restricciones
Ventatot
getTotal
st
getSubtotal
EspecificacionDelProducto
1.1
pr:=getPrecio
LineaDeVenta
st
unaLDV.cantidad
unaLDV.especProd.precio
//observe
estilo
pseudocódigo
public
void
getTotal
int
tot
LineaDeVenta
ldv
tot:=
tot
ldv.getSubtotal
return
tot
Obsérvese
estilo
semi-formal
restricción
define
formalmente
unaLDV
mayoría
desarrolladores
entenderán
razonablemente
significa
instancia
LineaDeVenta
ocurre
expresión
unaLDV.especProd.precio
importante
lenguaje
restricción
informal
permitir
escritura
rápida
fácil
desea
Precondiciones
venta
curso
Postcondiciones
creó
instancia
Pago
creación
instancias
p.cantidadEntregada
pasó
cantidad
modificación
atri-
butos
asoció
Venta
actual
formación
asociaciones
Venta
actual
asoció
Tienda
formación
asocia-
ciones
añadirlo
registro
histórico
ventas
com-
pletadas
construirá
diseño
satisfaga
postcondición
realizarPago
Creación
Pago
postcondiciones
contrato
establece
creó
instancia
Pago
creación
instancias
responsabilidad
creación
debería
aplicar
patrón
GRASP
Creador
registra
agrega
utiliza
estrechamente
contiene
Pago
atractivo
establecer
Registro
lógicamente
registra
Pago
dominio
real
registro
recopila
información
contable
candidato
objetivo
reducir
salto
representación
diseño
software
Adicional-
mente
razonable
esperar
Venta
software
utilizará
estrechamente
Pago
candidata
forma
encontrar
creador
utilizar
patr
ón
Experto
funci
ón
Experto
Información
datos
inicialización
can-
tidad
entregada
caso
Registro
controlador
recibe
mensaje
operación
sistema
realizarPago
inicialmente
cantidad
entregada
consecuencia
Registro
candidato
Resumiendo
candidatos
Registro
Venta
idea
diseño
clave
elecciones
diseño
alternativas
mire
detenidamente
implicaciones
cohesión
acoplamiento
alternativas
posiblemente
con-
sidere
futuras
presiones
evolución
alternativas
Elija
alternativa
bue-
na
cohesión
acoplamiento
estabilidad
posibles
cambios
futuros
Considere
implicaciones
elecciones
función
patro-
nes
GRASP
Alta
Cohesión
Acoplamiento
elige
Venta
crear
Pago
ligero
trabajo
responsabilidades
Registro
dando
lugar
defini-
248
UML
PATRONESción
Registro
simple
Registro
necesita
existencia
instancia
Pago
registrar
indirectamente
Venta
produce
disminución
acoplamiento
Registro
diseño
muestra
Figura
17.13
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
249
Figura
17.13
Diagrama
interacción
Registro--realizarPago
realizarPago(dineroEntregado
1.1
create(dineroEntregado
Registro
Venta
Pago
realizarPago(dineroEntregado
Controlador
Creador
Acoplamiento
diagrama
interacción
satisface
postcondición
contrato
creado
Pago
sociado
Venta
asigna
valor
cantidadEntregada
Registro
Venta
completada
requisitos
establecen
venta
debería
colocar
registro
históricos
Experto
Información
debería
patrones
meno
problema
controlador
creación
debería
establecer
responsabilidad
re
sponsable
venta
regi
stradas
apunte
registro
objetivo
salto
repre
sentación
di
seño
software
relación
nue
stros
conceptos
dominio
razonable
Tienda
conozca
ventas
registradas
puesto
fuertemente
relacionadas
asuntos
financieros
alternativas
comprenden
concepto
clásicos
contabilidad
LibroMayorDeVentas
sentido
utilizar
objeto
LibroMayorDeVentas
diseño
crece
tienda
pierde
cohesión
Figura
17.14
Nótese
postcondición
contrato
indica
relacione
Venta
Tienda
ste
ejemplo
postcondiciones
realmente
diseño
pensamos
LibroMayorDeVentas
elegimos
usarlo
lugar
Tienda
caso
idealmente
añadiría
LibroMayorDeVentas
Modelo
Dominio
nombre
concepto
dominio
mundo
real
esperar
tipo
descubrimientos
cambios
trabajo
diseño
caso
mantendremos
fieles
plan
original
utilizar
Tienda
Fi-
gura
17.15).250
UML
PATRONES
Figura
17.14
debería
responsable
venta
completada
Tienda
añadirVenta
Venta
LibroMayorDeVentas
añadirVenta
Venta
tienda
responsable
añadir
ventas
completadas
aceptable
ciclos
desarrollo
Tienda
responsabilidades
LibroMayorDeVentas
responsable
venta
añadir
ventas
completadas
adecuado
diseño
crece
Tienda
pierde
cohesión
Venta
Venta
Registra-completadas
Registra-completadas
11
Figura
17.15
Registro
venta
completada
RegistrorealizarPago(dineroEntregado
realizarPago(dineroEntregado
Pago
1.1
create(dineroEntregado
ventasCompletas
Venta
nótese
instancia
Venta
nombra
referenciar
parámetro
mensajes
2.1
Venta
Tienda
añadirVenta(v
2.1
añadir(v
ExpertoCálculo
devolución
caso
Procesar
Venta
implica
imprima
saldo
deudor
pago
recibo
muestre
pantalla
principio
Separación
Modelo-Vista
deberíamos
preocuparnos
visualizará
imprimirá
dinero
devolver
ne-
cesario
asegurar
conoce
Nótese
clase
conoce
actualmente
devo-
lución
necesitamos
crear
diseño
interacciones
objetos
sa-
tisfaga
requisitos
debería
Experto
Información
problema
controlador
creación
debería
establecer
res-
ponsabilidad
responsable
devolución
calcular
devolución
requiere
venta
dinero
efectivo
en-
tregado
Venta
Pago
Expertos
parciales
solución
problema
Pago
responsable
devolución
necesitará
visi-
bilidad
Venta
pedirle
Puesto
actualmente
Ven-
ta
ste
enfoque
incrementa
acoplamiento
global
diseño
soportaría
patrón
Acoplamiento
cambio
Venta
principalmente
responsable
devolución
ne-
cesita
visibilidad
Pago
solicitarle
dinero
efectivo
entregado
Puesto
Venta
visibilidad
Pago
creador
enfoque
incre-
menta
acoplamiento
global
preferible
diseño
consecuencia
diagrama
interacción
Figura
17.16
proporciona
so-
lución
cantidad
devolver
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
251
Figura
17.16
Diagrama
interacción
Venta--getDevolucion
Venta
pg
Pago1
cant
getCantidad()dev
getDevolucion
getTotal
dev
pg.cantidad
self.total
Obsérvese
self”·en
restricción
lenguaje
formal
OCL
utiliza
variable
especial
self
this
Java
C++
self
restricción
implica
instancia
Venta
utilizando
OCL
oficial
estilo
asemeja
restricción
expresarse
lenguaje
formal
informal.17.8
Diseño
objetos
ponerEnMarcha
crear
diseño
ponerEnMarcha
mayoría
sistemas
ca
so
ponerEnMarcha
operación
sistema
inicial
relacionada
comienzo
aplicación
operación
sistema
ponerEnMarcha
ejecutar
posponga
desarrollo
diagrama
interacción
hayan
operaciones
sistema
asegura
descubierto
infor-
mación
relativa
actividades
inicialización
requieren
soportar
dia-
gramas
interacción
operaciones
sistema
posteriores
Haga
diseño
inicialización
lugar
comienzan
aplicaciones
operación
ponerEnMarcha
representa
abstracta
fase
inicialización
ejecución
lanza
aplicación
entender
diseñar
diagrama
interacción
operación
útil
entender
contexto
ocurrir
inicialización
aplicaci
ón
comienza
inicializa
depende
lenguaje
programación
sistema
operativo
casos
estilo
diseño
común
crear
término
objeto
dominio
inicial
objeto
software
dominio
crea
nota
terminología
verá
aplicaciones
organizan
capas
lógicas
separan
aspectos
importantes
aplicación
comprende
capa
UI
cuestiones
UI
capa
dominio
cuestiones
lógica
dominio
capa
dominio
Modelo
Di
seño
formada
clases
software
cuyos
nombres
inspirados
vocabulario
dominio
contienen
lógica
aplicación
Prácticamente
objetos
diseño
he-
mos
considerado
Venta
Registro
objetos
dominio
capa
domi-
nio
Modelo
Diseño
objeto
dominio
inicial
creado
responsable
creación
objetos
dominio
hijos
ejemplo
elige
Tienda
ob-
jeto
dominio
inicial
responsable
creación
objeto
Registro
lugar
crea
objeto
dominio
inicial
depende
tecnología
ob-
jetos
escogida
ejemplo
aplicación
Java
crearlo
método
main
od
legar
trabajo
objeto
factoría
crea
public
class
Main
public
static
void
main(String
args
//La
Tienda
objeto
dominio
inicial
//La
Tienda
crea
objeto
dominio
252
UML
PATRONESTienda
tienda
new
Tienda
Registro
registro
tienda.getRegistro
JFrameProcesarVenta
frame
new
JFrameProcesarVenta(registro
Interpretación
operación
sistema
ponerEnMarcha
discusión
ilustra
operaci
ón
sistema
ponerEnMarcha
abs-
tracción
independiente
lenguaje
diseño
variaciones
lugar
creación
objeto
inicial
controla
proceso
objeto
dominio
inicial
suele
tomar
control
GUI
ca
so
fre
cuencia
diagramas
operación
operación
ponerEnMarcha
representan
ocurre
crea
objeto
inicial
dominio
problema
opcionalmente
sucede
toma
control
incluyen
actividad
ob-
jetos
capa
GUI
operación
ponerEnMarcha
reinterpretarse
diagrama
interacción
envíe
mensaje
create
crear
objeto
do-
minio
inicial
opcional
objeto
inicial
toma
control
proceso
diagrama
interacción
envíe
mensaje
ejecutar
equivalente
objeto
inicial
operación
PonerEnMarcha
aplicación
PDV
operación
sistema
ponerEnMarcha
lugar
responsable
tien-
enciende
sistema
PDV
carga
software
Asuma
objeto
dominio
inicial
responsable
controlar
proceso
control
permanecerá
capa
UI
JFrame
Java
cree
objeto
dominio
inicial
tan-
to
diagrama
interacción
operación
ponerEnMarcha
reinterpretarse
únicamente
envío
mensaje
create
crear
objeto
inicial
Elección
objeto
dominio
inicial
debería
clase
objeto
dominio
inicial
Elija
objeto
dominio
inicial
clase
raíz
jerarquía
agregación
con-
tención
cercana
controlador
fachada
Registro
objeto
contiene
mayoría
objetos
Tienda
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
253Las
consideraciones
Alta
Cohe
sión
Acoplamiento
podr
ían
influir
elección
alternativas
aplicación
elige
Tienda
objeto
ini-
cial
Objetos
persistentes
EspecificacionDelProducto
instancias
EspecificacionDelProducto
residirán
almacenamien-
to
per
sistente
ba
dato
relacional
objetual
operaci
ón
ponerEnMarcha
objetos
cargar
memoria
principal
ordenador
cargarlos
consu-
miría
demasiada
memoria
tiempo
Alternativamente
probable
cargarán
memoria
demanda
instancias
individuales
requieran
diseño
cargar
dinámicamente
demanda
objetos
base
datos
memoria
sencilla
utiliza
base
datos
objetual
difícil
base
datos
relacional
problema
pospone
asume
instancias
EspecificacionDelProducto
creadas
memoria
má-
gicamente
objeto
CatalogoDeProductos
Capítulo
34
estudia
problema
objetos
presistentes
cargarlos
memoria
Diseño
Tienda--create
tareas
creación
inicialización
derivan
necesidades
trabajo
diseño
diseño
gestión
introducirArticulo
etcétera
Refle-
xionando
diseños
interacciones
previos
identificar
tra-
inicialización
necesita
crear
Tienda
Registro
CatalogoDeProductos
objetos
Especifi-
cacionDelProducto
necesitan
asociar
objetos
EspecificacionDelProducto
CatalogoDe-
Productos
necesita
asociar
Tienda
CatalogoDeProductos
necesita
asociar
Tienda
Registro
necesita
asociar
Registro
CatalogoDeProductos
Figura
17.17
muestra
diseño
escogió
Tienda
crear
CatalogoDe-
Productos
Registro
patrón
Creador
eligió
Catalo-
goDeProductos
crear
objetos
EspecificacionDelProducto
Recuerde
en-
foque
creación
especificaciones
temporal
diseño
materializará
base
datos
necesario
Notación
UML
:O
bsérvese
creaci
ón
instancias
Especifica-
cionDelProducto
inclusión
contenedor
lugar
sección
repe-
tición
indica
continuación
números
secuencia
254
UML
PATRONESUna
desviación
interesante
modelado
mundo
real
diseño
ilustra
objeto
software
Tienda
crea
objeto
Registro
tienda
real
albergar
registros
terminales
PDV
reales
con-
siderando
diseño
software
vida
real
requisitos
actuales
Tienda
software
necesita
crear
única
instancia
Registro
software
multiplicidad
clases
objetos
Modelo
Dominio
Modelo
Dise-
ño
17.9
Conexión
capa
UI
capa
dominio
discutido
brevemente
aplicaciones
organizan
capas
lógicas
se-
paran
spectos
ás
importante
aplicaci
ón
capa
UI
cuestiones
UI
capa
dominio
cuestiones
lógica
do-
minio
diseños
típicos
objetos
capa
dominio
vi-
sibles
objetos
capa
UI
encontramos
siguientes
rutina
inicialización
ejemplo
método
main
Java
crea
objeto
UI
objeto
dominio
pasa
objeto
dominio
UI
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
255
Figura
17.17
Creación
objeto
dominio
inicial
objetos
siguientes
Tienda
Registro
cp
CatalogoDeProductos
create
create(cp
create
1.2
cargarEspecProd
Especificacion
DelProducto
1.1
create
1.2.2*:añadir(ep
1.2.1
create(id
precio
descripcion
ep
EspecificacionDelProducto
número
secuencia
indica
mensaje
ocurre
sección
repetición
pasa
Registro
referencia
CatalogoDeProductos
visibilidad
permanente
Creador
crea
multiobjeto
vacío
ej.
Map
EspecificacionDelProducto•
objeto
UI
recupera
objeto
dominio
fuente
conocida
objeto
factoría
responsable
creación
objetos
do-
minio
muestra
código
presentó
anteriormente
ejemplo
enfo-
public
class
Main
public
static
void
main
String
args
Tienda
tienda
new
Tienda
Registro
registro
tienda.getRegistro
JFrameProcesarVenta
frame
new
JFrameProcesarVenta(registro
objeto
UI
conectado
instancia
Registro
contro-
lador
fachada
ste
diseño
reenviarle
men
sajes
evento
sistema
mensajes
introducirArticulo
finalizarVenta
Figura
17.18
256
UML
PATRONES
Figura
17.18
Conexión
capas
UI
dominio
Registro
Cajero
JFrameProcesar
Venta
actionPerformed
actionEvent
introducirArticulo(id
cant
Capa
UI
Capa
Dominio
presiona
botón
evento
sistema
caso
mensaje
introducirArticulo
ventana
necesita
mostrar
suma
par-
cial
entrada
soluciones
diseño
Añadir
método
getTotal
Registro
UI
envía
mensaje
getTotal
Registro
reenvía
Venta
ventaja
mantiene
aco-
plamiento
UI
modelo
dominio
UI
conoce
objeto
Re-gistro
comienza
expandir
interfaz
objeto
Registro
haciéndolo
me-
cohesivo
UI
solicita
referencia
objeto
Venta
actual
necesita
información
relacionada
venta
envía
mensaje
di-
rectamente
Venta
diseño
incrementa
acoplamiento
UI
mo-
delo
dominio
estudió
discusión
patrón
GRASP
Acoplamiento
acoplamiento
problema
especial
constituye
problema
acoplamiento
co
sas
inestables
Asuma
decidimos
Venta
objeto
estable
integral
diseño
razonable
acoplamiento
Venta
problema
ilustra
Figura
17.19
diseño
enfoque
Nótese
diagramas
ventana
Java
JFrameProcesarVenta
forma
capa
UI
responsable
manejar
lógica
aplicación
ven-
tana
remite
solicitudes
trabajo
operaciones
sistema
capa
dominio
Registro
principio
diseño
MODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
257
Figura
17.19
Conexión
capas
UI
dominio
Registro
Cajero
JFrameProcesar
Venta
actionPerformed
actionEvent
introducirArtículo(id
cant
venta
getVenta
Venta
Capa
UI
Capa
Dominio
Venta
getTotal
presiona
botón
obsérvese
notación
UML
mensajes
condicionales
Responsabilidades
capa
dominio
interfaz
capa
UI
debería
responsabilidad
lógica
dominio
de-
bería
responsable
tareas
interfaz
usuario
actualizar
ele-
mentos
gráficos
capa
UI
debería
remitir
solicitudes
tareas
orientadas
dominio
capa
dominio
responsable
manejarlas.17.10
Realizaciones
casos
UP
realizaciones
casos
forman
Modelo
Diseño
UP
capítulo
resaltado
elaboración
diagramas
interacción
común
recomienda
elaboren
diagrama
cla
ses
paralelo
diagrama
clases
estudiarán
Capítulo
19
258
UML
PATRONES
Tabla
17.1
Muestra
artefactos
UP
evolución
temporal
comenzar
refinar
Disciplina
Artefacto
Inicio
Elab
Const
Trans
Iteración
/p59I1
E1
C1
Cn
T1
T2
Modelado
Negocio
Modelo
Dominio
Requisitos
Modelo
Casos
DSS
cr
Visión
Especificación
complementaria
Glosario
Diseño
Modelo
Diseño
cr
Documento
Arquitectura
SW
Modelo
Datos
Implementación
Modelo
Implementación
Gestión
Proyecto
Plan
Desarrollo
SW
Pruebas
Modelo
Pruebas
Entorno
Marco
Desarrollo
Fases
Inicio
Modelo
Diseño
realizaciones
casos
normalmente
comenzarán
elaboración
comprende
decisiones
diseño
detalladas
prematuras
fase
inicio
Elaboración
fase
crearse
realizaciones
casos
escenarios
significativos
punto
vista
arquitectura
riesgo
diseño
harán
diagramas
UML
escenario
necesariamente
detalle
grano
fino
idea
diagramas
interacción
realizaciones
casos
claves
benefician
al-
gún
estudio
anticipado
exploración
alternativas
centrándose
decisiones
di-
seño
importantes
Construcción
crean
realizaciones
casos
resto
pro-
blemas
diseño
UP
trabajo
realización
casos
actividad
diseño
Figura
17.21
ofrece
sugerencias
momento
lugar
cabo
trabajo
17.11
Resumen
esencial
diseño
objetos
constituyen
diseño
interacciones
ob-
jetos
asignación
responsabilidades
decisiones
tomen
influirMODELO
DISEÑO
REALIZACIÓN
CASOS
PATRONES
GRASP
259
Figura
17.20
Muestra
influencia
artefactos
UP
Sistema
introducirArticulo
id
cantidad
finalizarVenta
realizarPago
cantidad
Procesar
Venta
cliente
llega
Cajero
realiza
venta
Cajero
introduce
identificador
artículo
Casos
Diagramas
Secuencia
Sistema
Operación
introducirArticulo
Post-condiciones
creó
instancia
LineaDeVenta
ldv
Operación
crearNueva
Venta
Post-condiciones
Contratos
crearNueva
Venta
Cajero
Venta
fecha
LineaDe
Venta
cantidad
*1
objetos
dominio
eventos
sistema
operaciones
sistema
objetos
dominio
atributos
asociaciones
experimentan
cambios
Modelo
Dominio
Modelo
Casos
ideas
inspiración
postcondiciones
derivan
casos
Modelo
Diseño
Registro
introducirArticulo
articuloID
cantidad
CatalogoDeProductos
añadirLineaDeVenta
espec
cantidad
Venta
casos
requisitos
satisfacer
diseño
software
realización
caso
clases
conceptuales
dominio
inspiran
nombres
clases
software
diseño
crearNuevaVenta
create
finalizarVenta
Muestra
Relaciones
Artefactos
UP
Realización
Casos
espec
getEspecificacion
articuloID)260
UML
PATRONES
Figura
17.21
Proceso
establecimiento
contexto
Enero
Febrero
principio
iteración
periodo
corto
programación
sala
proyecto
medios
dibujar
dibujos
desarrolladores
realicen
trabajo
diseño
parejas
arquitecto
software
colaborará
orientará
visitará
grupos
diseño
Herramientas
Software
herramienta
CASE
UML
obtener
diagramas
código
ingeniería
inversa
Hardware
Utilice
proyectores
conectados
tarjeta
vídeo
dual
dibujos
pizarra
cámara
digital
imprimir
diagramas
relevantes
equipo
plotter
colgar
pared
dibujos
escala
Desarrollador
DesarrolladorArquitecto
Software
proyecciones
adyacentes
Registro
introducirArtículo
artículoID
cantidad
CatalogoDeProductos
añadirLineaDeVenta(espec
cantidad
Venta
CrearNuevaVenta
create
Registro
introducirArtículo
artículoID
cantidad
CatalogoDeProductos
espec
getEspecificacion(artículoID
añadirLineaDeVenta(espec
cantidad
Venta
crearNuevaVenta
create
EspecificacDelProducto
cantidad
Integer
getSubtotal
CatalogoDeProductos
getEspecificacion
ProductSpecification
description
Text
price
Money
itemID
ItemID
Establecimiento
dirección
Dirección
nombre
Texto
añdirVenta
Pago
cantidad
Dinero
Registro
FinalizarVenta
introducirArtículo
crearNuevaVenta
crearPago
Venta
fecha
Fecha
esCompleta
Boolean
hora
Horat
seHaCompleto
crearLineaDeVenta
crearPago
getTotal
11
11
pizarras
espec
getEspecificacion(artículoID
profundamente
extensibilidad
claridad
mantenimiento
sistema
software
objetos
adem
ás
grado
calidad
componente
reutilizable
s.
principios
seguir
tomar
decisiones
asignación
responsabilidades
patrones
GRASP
resumen
diseñadores
orientados
objetos
utilizan
frecuencia
generalizados
Objetivos
Identificar
tipos
visibilidad
Diseñar
establecer
visibilidad
Ilustrar
tipos
visibilidad
notación
UML
Introducción
visibilidad
capacidad
objeto
referencia
ca-
pítulo
estudia
cuestiones
diseño
relacionadas
visibilidad
18.1
Visibilidad
objetos
diseños
creados
eventos
sistema
introducirArticulo
etcétera
ilustran
mensajes
objetos
objeto
emisor
envíe
mensaje
objeto
receptor
receptor
visible
emisor
tipo
referencia
apun-
tador
objeto
receptor
ejemplo
mensaje
getEspecificacion
enviado
Registro
Catalo-
goDeProductos
implica
in
stancia
CatalogoDeProductos
visible
in
s-
tancia
Registro
muestra
Figura
18.1
creamos
diseño
objetos
interaccionan
necesario
asegurar
presenta
visibilidad
adecuada
soportar
interacción
mensajes
Capítulo
18
MODELO
DISEÑO
DETERMINACIÓN
VISIBILIDAD
matemático
máquina
transforma
café
teoremas
Paul
Erdös262
UML
PATRONES
UML
notación
especial
representar
visibilidad
capítulo
pre-
senta
tipos
visibilidad
descripción
18.2
Visibilidad
habitual
visibilidad
entiende
capacidad
objeto
te-
ner
referencia
objeto
ás
general
relacionado
tema
alcance
recurso
instancia
alcance
formas
comunes
alcanzar
visibilidad
objeto
objeto
Visibilidad
atributo
Be
atributo
A.
Visibilidad
parámetro
Be
parámetro
método
A.
Visibilidad
local
Be
objeto
local
parámetro
método
A.
Visibilidad
global
Be
visible
globalmente
motivo
visibilidad
objeto
envíe
mensaje
objeto
visible
A.
ejemplo
crear
diagrama
interacci
ón
envía
mensaje
in
stancia
Registro
in
stancia
CatalogoDeProductos
Registro
Figura
18.1
requiere
visibilidad
Registro
CatalogoDeProductos1
Registro
CatalogoDeProductos
introducirArticulo
articuloID
cantidad
espec:=getEspecificacion(articuloID
public
void
introducirArticulo(articuloID
cantidad
espec
catalogo.getEspecificacion(articuloID
class
Registro
private
CatalogoDeProductos
catalogo
siguientes
ejemplos
código
hacerse
simplificaciones
lenguaje
aras
bre-
vedad
claridad.debe
visibilidad
CatalogoDeProductos
solución
típica
visibilidad
mantener
referencia
instancia
CatalogoDeProductos
atributo
Registro
Visibilidad
atributo
visibilidad
atributo
atributo
A.
vi-
sibilidad
relativamente
permanente
persiste
existan
B.
forma
visibilidad
común
sistemas
orientados
objetos
ilustrarlo
definición
clase
Java
Registro
instancia
Registro
tendría
visibilidad
atributo
CatalogoDeProducto
puesto
atri-
buto
variable
instancia
Java
Registro
public
class
Registro
private
CatalogoDeProductos
catalogo
requiere
sta
vi
sibilidad
diagrama
introducirArticulo
muestra
Figura
18.2
Registro
necesita
enviar
mensaje
getEspecificacion
au
CatalogoDeProductos
MODELO
DISEÑO
DETERMINACIÓN
VISIBILIDAD
263
Figura
18.2
Visibilidad
atributo
Registro
CatalogoDeProductos
introducirArticulo
articuloID
cantidad
espec:=getEspecificacion(articuloID
public
void
introducirArticulo(articuloID
cantidad
espec
catalogo.getEspecificacion(articuloID
class
Registro
private
CatalogoDeProductos
catalogo
Visibilidad
parámetro
visibilidad
parámetro
pasa
parámetro
método
A.
visibilidad
relativamente
temporal
per
siste
cance
método
visibilidad
atributo
forma
común
visibilidad
sistemas
orientados
objetos
ilustrarlo
envía
men
saje
crearLineaDeVenta
in
stancia
Venta
pasa
parámetro
instancia
EspecificacionDelProducto
al-
cance
método
crearLineaDeVenta
Venta
visibilidad
parámetro
Es-
pecificacionDelProducto
Figura
18.3
264
UML
PATRONES
Figura
18.3
Visibilidad
parámetro
RegistrointroducirArticulo(id
ctd
2.1
create(espec
cant
Venta2
crearLineaDeVenta(espec
cant
lv
LineaDeVenta
crearLineaDeVenta(EspecificacionDelProducto
espec
int
cant
lv
new
LineaDeVenta(espec
cant
espec:=getEspecificacion(id
CatalogoDeProductos
habitual
transformar
vi
sibilidad
par
ámetro
vi
sibilidad
atributo
ejemplo
Venta
crea
LineaDeVenta
pasa
método
inicia-
lización
EspecificacionDelProducto
constructor
Java
C++
mé-
inicialización
asigna
parámetro
atributo
establece
visi-
bilidad
atributo
Figura
18.4
Figura
18.4
visibilidad
parámetro
visibilidad
atributo
RegistrointroducirArticulo(id
cant
2.1
create(espec
cant
Venta2
crearLineaDeVenta(espec
cant
lv
LineaDeVenta
//método
inicialización
ej.
Constructor
Java
LineaDeVenta(EspecificacionDelProducto
espec
int
cant
especProducto
espec;//de
visibilidad
parámetro
atributo
espec:=getEspecificacion(id
CatalogoDeProductosVisibilidad
local
visibilidad
local
declara
objeto
local
método
A.
visibilidad
relativamente
temporal
persiste
cance
método
visibilidad
parámetro
forma
vi
si-
bilidad
común
sistemas
orientados
objetos
medios
comunes
alcanzar
visibilidad
local
Crear
instancia
local
asignarla
variable
local
Asignar
variable
local
objeto
retorno
invocación
método
visibilidad
parámetro
habitual
transformar
visibilidad
decla-
rada
localmente
visibilidad
atributo
ejemplo
variación
asignación
variable
local
objeto
retor-
encontrar
método
introducirArticulo
clase
Registro
Figura
18.5
MODELO
DISEÑO
DETERMINACIÓN
VISIBILIDAD
265
Figura
18.5
Visibilidad
local
introducirArticulo(id
ctd
//visibilidad
local
asignación
objeto
retorno
EspecificacionDelProducto
espec=
catalogo.getEspecificacion(id
Registro
CatalogoDeProductos
introducirArticulo
articuloID
cantidad
espec:=getEspecificacion(articuloID
versión
sutil
variación
método
declara
explícita-
mente
variable
implícitamente
resultado
objeto
retorno
invocación
método
ejemplo
//hay
visibilidad
local
implícita
objeto
foo
//resultado
llamada
getFoo
unObjeto.getFoo().hacerBar
Visibilidad
global
visibilidad
global
global
A.
visibilidad
relati-
vamente
permanente
persiste
existan
B.
forma
común
visibilidad
sistemas
orientados
objetos
visibilidad
global
asignar
instancia
variable
glo-
bal
lenguajes
H11001
H11001
Java
método
prefiere
seguir
visibilidad
global
utilizar
patr
ón
Singleton
GHJV95
presentará
capítulo
posterior
18.3
Representación
visibilidad
UML
UML
incluye
notación
representar
tipo
vi
sibilidad
diagrama
cola
boración
Figura
18.6
adornos
opcionales
normalmente
exigen
útiles
necesita
aclaración
266
UML
PATRONES
Figura
18.6
Implementación
estereotipos
visibilidad
B1
msj
msj
:D
msj
association
parameter
local
msj
global
utiliza
association
visibilidad
atributoObjetivos
Crear
diagramas
clases
diseño
DCD
Identificar
clases
métodos
asociaciones
mostrar
DCD
Introducci—n
terminados
diagramas
interacción
realizaciones
casos
iteración
actual
aplicación
PDV
NuevaEra
identificar
es-
pecificación
clases
software
interfaces
participan
solución
software
añadirles
detalles
diseño
métodos
UML
proporciona
notación
representar
detalles
diseño
diagra-
clase
capítulo
estudiarla
crear
DCD
19.1
Cu
ndo
crear
DCD
presentación
DCD
viene
despu
creación
diagramas
interacción
práctica
normalmente
crean
paralelo
comienzo
diseño
esbozar
clases
nombres
métodos
relaciones
aplicando
patrones
asignar
responsabilidades
elaboración
diagramas
interacción
deseable
elaborar
diagramas
interacción
actualizar
DCD
extender
diagramas
interacción
sucesivamente
diagramas
clases
utilizarse
notaci
ón
gráfica
alter-
nativa
tarjetas
CRC
recoger
responsabilidades
colaboraciones
Capítulo
19
MODELO
DISE
CREACI
DIAGRAMAS
CLASES
DISE
Iterar
humano
recursico
divino
Anónimo268
UML
PATRONES
19.2
Ejemplo
DCD
DCD
Figura
19.1
ilustra
definición
software
parcial
clases
Registro
Venta
Figura
19.1
Ejemplo
diagrama
clases
diseño
Registro
introducirArticulo
Venta
fecha
esCompleta
Boolean
hora
crearLineaDeVenta
Captura
Navegavilidad
rect
ngulo
secciones
definici
clase
par
metros
especifican
informaci
tipo
asociaciones
atributos
básicos
diagrama
amplía
repre-
sentar
ejemplo
métodos
clase
información
tipo
atributos
vi-
sibilidad
atributos
navegación
objetos
19.3
Terminolog
DCD
UP
diagrama
clases
diseo
DCD
representa
especificaciones
clases
interfaces
software
ejemplo
interfaces
Java
aplicación
in-
formación
general
encontramos
Clases
asociaciones
atributos
Interfaces
operaciones
constantes
Métodos
Información
acerca
tipo
atributos
Navegabilidad
Dependencias
diferencia
clases
conceptuales
Modelo
Dominio
clases
dise-
ño
DCD
muestran
definiciones
clases
software
lugar
concep-
tos
mundo
real
UP
define
specífica
artefacto
denominado
diagrama
clases
diseñoÓ.
UP
define
Modelo
Diseño
contiene
tipos
dia-
gramas
incluye
diagramas
interacción
paquetes
clases
dia-
gramas
clases
Modelo
Diseño
UP
contienen
cla
ses
diseñoÓ
términos
UP
común
hablar
diagrama
clases
diseñoÓ
corto
implica
diagrama
clases
Modelo
DiseñoÓ.19.4
Clases
Modelo
Dominio
vs
clases
Modelo
Dise
Seamos
reiterativos
Modelo
Dominio
UP
Venta
representa
de-
finición
software
ab
stracción
concepto
mundo
real
acerca
interesados
declaración
cambio
DCD
ex-
presan
aplicaci
ón
software
definición
clases
componentes
software
stos
diagrama
Venta
representa
cla
software
Figura
19.2
MODELO
DISEÑO
CREACIÓN
DIAGRAMAS
CLASES
DISEÑO
269
Figura
19.2
Clases
Modelo
Dominio
vs
clases
Modelo
Diseño
Registro
finalizarVenta
introducirArticulo
realizarPago
Venta
fecha
esCompleta
Boolean
hora
crearLineaDeVenta
Captura
Registro
Venta
fecha
esCompleta
Boolean
hora
Captura
clase
software
11
11Modelo
Dominio
Modelo
Diseño
Concepto
clases
conceptual
19.5
Creaci
DCD
PDV
NuevaEra
Identificaci—n
representaci—n
clases
software
paso
creación
DCD
modelo
solución
iden-
tificar
clases
participan
solución
software
encontrar
exa-
minando
diagramas
interacción
listando
clases
mencionan
aplicación
PDV
Registro
Venta
CatalogoDeProductos
EspecificacionDelProducto
Tienda
LineaDeVenta
Pago
paso
dibujar
diagrama
clases
clases
incluir
atri-
butos
identificaron
previamente
Modelo
Dominio
utili-
zan
diseño
Figura
19.3).Nótese
conceptos
Modelo
Dominio
Cajero
es-
tán
presentes
diseño
necesario
iteración
actual
representarlos
software
iteraciones
posteriores
aborden
requi-
sitos
ca
sos
so
formar
di
seño
ejemplo
imple-
menten
requisitos
seguridad
inicio
sesión
probable
relevante
clase
software
denominada
Cajero
adir
nombres
métodos
identificar
nombres
métodos
analizando
diagramas
interac-
ción
ejemplo
envía
mensaje
crearLineaDeVenta
instancia
clase
Venta
clase
Venta
definir
método
crearLineaDeVenta
Figura
19.4
270
UML
PATRONES
Figura
19.3
Clases
software
aplicación
Pago
cantidad
cantidad
LineaDeVenta
EspecificacionDelProducto
descripcion
precio
articuloID
fecha
esCompleta
hora
Venta
CatalogoDeProductos
direccion
nombre
Tienda
Registro
Figura
19.4
Nombres
métodos
diagramas
interacción
Registro
Venta2
crearLineaDeVenta(espec
cant
Venta
crearLineaDeVenta
general
conjunto
mensajes
enviados
clase
to-
diagramas
interacción
indican
mayoría
métodos
definir
clase
X.
inspección
diagramas
interacción
aplicación
PDV
lu-
gar
asignación
métodos
muestra
Figura
19.5.Cuestiones
acerca
nombres
métodos
siguientes
cuestiones
especiales
relación
nom-
bres
métodos
Interpretación
mensaje
create
Descripción
métodos
acceso
Interpretación
mensajes
multiobjetos
Sintaxis
dependiente
lenguaje
Nombres
métodos—create
mensaje
create
forma
independiente
lenguaje
UML
indicar
instanciación
inicializaci
ón
traducir
di
seño
lenguaje
programaci
ón
orientado
objetos
expresar
función
estilos
instanciación
ini-
cialización
étodo
create
/H11001
H11001
Ja
Smalltalk
ejemplo
H11001
H11001
implica
asignación
automática
asignación
almacenamiento
li-
bre
operador
new
seguido
llamada
constructor
Java
implica
in-
vocación
operador
new
seguido
llamada
constructor
múltiples
interpretaciones
inicialización
actividad
común
habitual
omitir
DCD
métodos
relacionados
creación
constructores
Nombres
métodos—métodos
acceso
acceso
recuperan
método
obtención
accessor)oe
stablecen
mé-
cambio
mutador
valor
atributos
lenguajes
Java
estilo
común
accessor
mutator
atributo
declarar
MODELO
DISEÑO
CREACIÓN
DIAGRAMAS
CLASES
DISEÑO
271
Figura
19.5
Métodos
aplicación
LineaDeVenta
cantidad
getSubtotal
EspecificacionDelProducto
descripcion
precio
articuloID
Pago
cantidad
Tienda
direccion
nombre
añadirVenta
Registro
finalizarVenta
introducirArticulo
crearNuevaVenta
realizarPago
CatalogoDeProductos
getEspecificacion
Venta
fecha
esCompleta
hora
seHaCompletado
crearLineaDeVenta
realizarPago
getTotal()atributos
privados
imponer
encapsulación
datos
Normalmente
ex-
cluye
descripción
métodos
diagrama
cla
ses
generan
ruido
atributos
2n
métodos
interés
ejemplo
muestra
presente
método
getPrecio
precio
EspecificacionDelProducto
simplemente
método
acceso
Nombres
métodos—multiobjetos
mensaje
multiobjeto
interpreta
mensaje
objeto
contene-
dor
colección
ejemplo
mensaje
multiobjeto
buscar
inter
pretar
mensaje
objeto
contenedor
colección
Map
Java
map
C++
Dictionary
Smalltalk
Figura
19.6
272
UML
PATRONES
Figura
19.6
Mensaje
multiobjeto
espec:=getEspecificacion(id
Catalogo
DeProductos
1.1
espec:=buscar(id
Especificacion
DelProducto
Elmensaje
vadirigidoalobjeto
contenedor
noala
EspecificacionDelProducto
buscar
método
buscar
forma
cla
EspecificacionDelProducto
interfaz
multiobjeto
consecuencia
correcto
añadir
método
bus-
car
clase
EspecificacionDelProducto
Normalmente
interfaces
clases
contenedores
colecciones
interfaz
java.util
Map
elementos
librerías
predefinidas
útil
mostrar
explíci-
tamente
clases
DCD
añaden
ruido
información
Nombres
métodos—sintaxis
dependiente
lenguaje
lenguajes
Smalltalk
sintaxis
formato
UML
básico
nombreMetodo(listaParametros
recomienda
utilice
for-
mato
UML
básico
lenguaje
implementación
planea
utilizar
sintaxis
Idealmente
traducción
debería
lugar
momento
generación
código
lugar
creación
diagramas
clase
em-
bargo
UML
permite
sintaxis
especificación
métodos
adir
informaci
tipos
Opcionalmente
tipos
atributos
parámetros
métodos
valores
retorno
mostrar
cuestión
muestra
información
considerar
contexto
debería
crear
DCD
teniendo
destinatarios
est
creando
herramienta
CASE
generaci
autom
tica
digo
necesarios
detalles
exhaustivo
est
creando
lean
desarrolladores
software
detalles
ex-
haustivos
nivel
afectar
negativamente
nivel
ruido
ejemplo
necesario
mostrar
parámetros
información
tipos
Depende
obvia
información
audiencia
destinada
diagrama
clases
diseño
Figura
19.7
muestra
información
tipos
MODELO
DISEÑO
CREACIÓN
DIAGRAMAS
CLASES
DISEÑO
273
Figura
19.7
Añadir
información
acerca
tipos
LineaDeVenta
cantidad
Integer
getSubtotal
Dinero
CatalogoDeProductos
EspecificacionDelProducto
descripci
Texto
precio
Dinero
articuloID
ArticuloID
Tienda
direccion
Direccion
nombre
Texto
añadirVenta(v
Venta
Pago
cantidad
Dinero
Registro
finalizarVenta
introducirArticulo(id
ArticuloID
cant
Integer
crearNuevaVenta
realizarPago(dineroEntregado
Dinero
Venta
fecha
Fecha
esCompleta
Boolean
hora
Hora
seHaCompletado
crearLineaDeVenta(espec
EspecificacionDelProducto
cant
Integer
realizarPago(dineroEntregado
Dinero
getTotal():Dinero
Tipo
retorno
vac
valor
retorno
getEspecificacion(id
ArticuloID
EspecificacionDel
Producto
adir
asociaciones
navegabilidad
extremo
asociación
denomina
rol
DCD
rol
decorarse
flecha
navegabilidad
navegabilidad
propiedad
rol
indica
navegar
unidireccionalmente
asociación
objetos
clase
origen
clase
destino
navegabilidad
implica
visibilidad
normalmente
vi-
sibilidad
atributo
Figura
19.8)—
interpretación
habitual
asociación
flecha
visibilidad
vi-
sibilidad
atributo
clase
origen
clase
destino
implemen-
tación
lenguaje
orientado
objetos
general
transforma
atributo
clase
origen
referencia
in
stancia
clase
destino
ejemplo
clase
Registro
definirá
atributo
referencia
instancia
Venta
mayoría
asociaciones
DCD
deberían
adornarse
flechas
navegabilidad
necesarias
DCD
eligen
asociaciones
criterio
nece
sito-conocer
orientado
software
estricto
asociaciones
requieren
satisfacer
visibili-
dad
necesidades
memoria
actuales
indican
diagramas
interac-
ción
contrasta
asociaciones
Modelo
Dominio
jus-
tificar
intención
mejorar
comprensión
dominio
problema
vemos
diferencia
objetivos
Modelo
Diseño
Modelo
Dominio
analítico
descripción
componentes
software
visibilidad
asociaciones
requeridas
clases
median-
diagramas
interacción
continuación
presentamos
situaciones
comunes
sugieren
necesidad
definir
asociación
adorno
visibilidad
envía
mensaje
B.
crea
instancia
B.
necesita
mantener
conexión
B.
ejemplo
diagrama
interacción
Figura
19.9
comienza
mensaje
create
Tienda
contexto
amplio
diagramas
274
UML
PATRONES
Figura
19.8
Representación
navegabilidad
visibilidad
atributo
unatributoquereferencia
RE
Amenudose
excluyeelatributo
ventaActual
puestoquese
sobreentiende
deacuerdocon
navegabledesde
LV
Laflechadenavegabilidad
RVRE
RV
LV
LR
PH
RVRE
RV
Laausenciadelaflecha
denavegabilidadindicaque
DD
LV
LV
introducirArticulo
HD
realizarPago
Captura
fecha
esCompleta
hora
VH
RP
HD
HD
realizarPago
getTotal()de
interacción
distinguir
probablemente
Tienda
debería
co-
nexión
permanente
instancias
Registro
CatalogoDeProductos
crea
razonable
CatalogoDeProductos
necesite
conexión
permanente
colección
objetos
EspecificacionDelProducto
crea
me-
nudo
creador
objeto
requiere
conexión
permanente
conexiones
implícitas
presentarán
asociaciones
diagrama
clases
MODELO
DISEÑO
CREACIÓN
DIAGRAMAS
CLASES
DISEÑO
275
Figura
19.9
navegabilidad
identifica
diagramas
interacción
create
Tienda
create
cp
CatalogoDeProductos
1.2
cargarEspcProds
create(cp
LV
1.1
create
Especificacion
DelProducto
1.2.1*:create(id
precio
descripcion
ep
EspecificacionDelProducto
LineaDeVenta
cantidad
Integer
getSubtotal
CatalogoDeProductos
getEspecificacion
EspecificacionDelProducto
descripcion
Texto
precio
Dinero
articuloID
ArticuloID
Tienda
direccion
Direccion
nombre
Texto
añadirVenta
Pago
cantidad
Dinero
Contiene
Contiene
Registro
finalizarVenta
introducirArticulo
crearNuevaVenta
realizarPago
Venta
fecha
Fecha
esCompleta
Boolean
hora
Hora
seHaCompletado
crearLineaDeVenta
realizarPago
getTotal
Captura
Alberga
Utiliza
Busca-en
Pagada-mediante
Describe
11
Registra-completadas
Figura
19.10
Asociaciones
adornos
navegabilidad
Basado
criterio
asociaciones
navegabilidad
análisis
diagramas
interacción
generados
aplicación
PDV
NuevaEra
dará
lugar
diagrama
clases
Figura
19.10
siguientes
asociaciones
ocul-
ta
información
exhaustiva
tipos
claridad
Nótese
exactamente
smo
conjunto
sociaciones
ge-
neró
diagrama
clases
Modelo
Dominio
ejemplo
modelo
dominio
existía
asociación
Busca-en
Registro
CatalogoDeProductos
pen
só
relaci
ón
importante
permanente
momento
creación
diagramas
interacción
decidió
objeto
soft-
ware
Registro
debería
conexi
ón
permanente
CatalogoDeProductos
software
buscar
objetos
EspecificacionDelProducto
adir
relaciones
dependencia
UML
incluye
relacin
dependencia
general
indica
elemento
tipo
clases
casos
etc.
conocimiento
elemento
representa
línea
flecha
punteada
diagramas
clases
relación
dependencia
útil
describir
visibilidad
clases
atributo
palabras
declaración
visibilidad
parámetro
local
global
cambio
vi-
276
UML
PATRONES
Figura
19.11
Relaciones
dependencia
indican
visibilidad
atributo
LineaDeVenta
cantidad
Integer
getSubtotal
CatalogoDeProductos
getEspecificacion
EspecificacionDelProducto
descripci
Texto
precio
Dinero
articuloID
ArticuloID
Tienda
direccion
Direccion
nombre
Texto
añadirVenta
Pago
cantidad
Dinero
Contiene
Contiene
Registro
finalizarVenta
introducirArticulo
crearNuevaVenta
realizarPago
Venta
fecha
Fecha
esCompleta
Boolean
hora
Hora
seHaCompletado
crearLineaDeVenta
realizarPago
getTotal
Captura
Alberga
Utiliza
Busca-en
Pagada-mediante
Describe
11
dependencia
Registro
conoce
EspecificacionDelProducto
recomienda
visibilidad
declarada
par
metro
global
local
Registra-completadas
1sibilidad
atributo
simple
muestra
línea
asociación
ordinaria
flecha
navegabilidad
ejemplo
objeto
software
Registro
recibe
objeto
re-
torno
tipo
EspecificacionDelProducto
men
saje
specificación
envía
CatalogoDeProductos
Registro
visibilidad
corto
plazo
declarada
localmente
EspecificacionDelProducto
Venta
recibe
Espe-
cificacionDelProducto
parámetro
mensaje
crearLineaDeVenta
visibi-
lidad
parámetro
especificación
visibilidades
atributo
representarse
línea
flecha
punteada
indica
relación
dependencia
Figura
19.11
curvatura
líneas
dependencias
significado
acomoda
representación
grá-
fica
19.6
Notaci
detalles
miembros
UML
proporciona
notación
variada
describir
características
miem-
bros
clases
interfaces
visibilidad
valores
iniciales
etcétera
Fi-
gura
19.12
muestra
ejemplo
MODELO
DISEÑO
CREACIÓN
DIAGRAMAS
CLASES
DISEÑO
277
Figura
19.12
Detalles
notación
UML
miembros
diagramas
clases
ClaseEjemplo
atributoDeClase
atributoPublico
atributoPrivado
atributoConVisibilidadSinEspecificar
atributo1
tipo
hamburguesas
Lista
HamburguesasVegetales
atributo2
tipo
valor
inicial
atributoConstanteFinal
int
frozen
/atributoDerivado
metodoDeClase
constructor
ClaseEjemplo(int
metodoConVisibilidadSinEspecificar
metodoDevuelveAlgo
Foo
metodoAbstracto
metodoAbstracto2
abstract
alternativo
metodoPublico
metodoPrivado
metodoProtegido
metodoConVisibilidadDePaquete
metodoFinal
leaf
metodoSinEfectosLaterales
query
metodoSincronizado
guarded
metodo1ConParametros(in
parm1
String
inout
parm2
int
metodo2ConParametros(parm1
String
parm2
float
metodo3ConParametros(parm1
parm2
metodo4ConParametros(String
int
metodoConParametrosYValorRetorno(parm1
String
Foo
metodoConParametrosSinEspecificar
Foo
metodoConParametrosYValorRetornoAmbosSinEspecificar
java.awt
Font
plain
Integer
frozen
bold
Integer
frozen
name
String
style
Integer
getFont(name
String
Font
getName
String
java.awt
Toolkit
java.awt
Toolkit
abstract
atributos
muestran
createButton(target
Button
ButtonPeer
getColorModel
ColorModel
FinalClass
leaf
muestran
interface
Runnable
run
RelojDeAlarma
run
compar-
timento
vac
puntos
significa
duda
ning
miembro
caso
atributos)Visibilidad
defecto
UML
muestra
explícitamente
marcador
visibilidad
atributo
método
valor
defecto
Respuesta
valor
defecto
muestra
UML
significa
especificarÓ.
convención
común
asumir
atributos
privados
métodos
públicos
indique
cosa
iteración
actual
diagrama
clases
diseño
PDV
NuevaEra
Figu-
ra
19.13
detalles
interesantes
miembros
atributos
privados
métodos
públicos
278
UML
PATRONES
Figura
19.13
Detalles
miembros
diagrama
clases
PDV
LineaDeVenta
cantidad
getSubtotal
EspecificacionDelProducto
descripcion
precio
articuloID
Pago
cantidad
Tienda
direccion
nombre
añadirVenta
Registro
finalizarVenta
introducirArticulo
crearNuevaVenta
realizarPago
CatalogoDeProductos
getEspecificacion
Venta
fecha
esCompleta
hora
seHaCompletado
crearLineaDeVenta
realizarPago
getTotal
Notaci—n
cuerpo
métodos
DCD
diagramas
interacci—n
cuerpo
método
representar
ilustra
Figura
19.14
DCD
diagrama
interacción
19.7
DCD
dibujo
herramientas
CASE
herramientas
CASE
ingeniería
inversa
generar
DCD
código
fuente
Capítulo
35
dibujo
herramientas
CASE
presentará
discusión
contexto
proceso
práctica
dibujar
DCD
19.8
DCD
UP
DCD
forman
realización
casos
miembros
Modelo
Diseño
UP
Fases
Inicio
Modelo
Diseño
DCD
normalmente
comenzarán
ela-
boración
comprenden
decisiones
diseño
prematuras
fase
inicio
Elaboracin
fase
DCD
acompañarán
diagramas
interac-
ción
realizaciones
casos
crearse
clases
diseño
significativas
punto
vista
arquitectura
Nótese
herramientas
CASE
ingeniería
inversa
generar
DCD
código
fuente
recomendable
generar
DCD
regular
código
fuente
visualizar
estructura
estática
sistema
MODELO
DISEÑO
CREACIÓN
DIAGRAMAS
CLASES
DISEÑO
279
Figura
19.14
Notación
cuerpo
métodos
Registro
finalizarVenta
introducirArticulo(id
cant
crearNuevaVenta
realizarPago(dineroEntregado
EspecificacionDelProducto
espec
catalogo.getEspecificacion(id
venta.crearLineaDeVenta(espec
cant
public
void
introducirArticulo
id
cant
EspecificacionDelProducto
espec
catalogo.getEspecificacion(id
venta.crearLineaDeVenta(espec
cant
Notación
UML
implementaci
cuerpo
podr
mostrar
cuadro
nota
UML
Deber
colocarse
llaves
significa
influencia
sem
ntica
nicamente
comentario
sintaxis
podr
pseudo-c
digo
lenguaje
normal
excluir
signatura
public
void
legal
incluirla
Tabla
19.1
Muestra
artefactos
UP
evoluci
temporal
c-comenzar
r-refinar
Disciplina
Artefacto
Inicio
Elab
Const
Trans
Iteración
/p59I1
E1
C1
Cn
T1
T2
Modelado
Negocio
Modelo
Dominio
Requisitos
Modelo
Casos
DSS
Visi
Especificaci
Complementaria
cr
Glosario
Dise
Modelo
Diseño
cr
Documento
Arquitectura
SW
Modelo
Datos
Implementaci
Modelo
Implementaci
Gesti
Proyecto
Plan
Desarrollo
SW
Pruebas
Modelo
Pruebas
Entorno
Marco
Desarrollo
r280
UML
PATRONES
Figura
19.15
Muestra
influencia
artefactos
UP
Registro
Venta
fecha
Modelo
Dominio
Modelo
Casos
Modelo
Diseño
Registro
introducirArticulo
articuloID
cantidad
CatalogoDeProductos
espec
getEspecificacion
articuloID
inspira
nombres
atributos
clases
software
diseño
crearNuevaVenta
Muestra
relaciones
artefactos
UP
Diagramas
Clases
Diseño
Registro
crearNuevaVenta
introducirArticulo
CatalogoDeProductos
getEspecificacion
Venta
fecha
realizaciones
casos
RCU
diagramas
clases
diseño
DCDs
clases
diseño
descubiertas
diseño
RCUs
resumen
DCDs
requiere
UCRs
sugiere
conceptos
dominio
Construccin
DCD
continuarán
generando
código
fuente
apoyo
visualización
estructura
estática
sistema
19.9
Artefactos
UP
Figura
19.15
muestra
influencia
artefactos
destacando
DCD.Objetivos
Transformar
artefactos
diseño
código
lenguaje
orientado
objetos
Introducción
completar
diagramas
interacción
DCDs
iteración
actual
aplicación
NuevaEra
disponemos
suficientes
detalles
generar
código
capa
dominio
objetos
artefactos
UML
creados
trabajo
di
seño
diagramas
inte-
racción
DCDs
utilizarán
entradas
proceso
generación
có-
digo
UP
define
Modelo
Implementación
ste
contiene
artefactos
imple-
mentación
ódigo
fuente
definicione
ba
ses
dato
áginas
JSP
XML
HTML
etcétera
código
crear
capítulo
forma
Modelo
Implementación
Elección
lenguaje
utiliza
Java
ejemplos
extendido
familiaridad
intención
entender
recomienda
Java
especial
Visual
Basic
H11001
H11001
Smalltalk
Python
lenguajes
susceptibles
aplicar
prin-
Capítulo
20
MODELO
IMPLEMENTACI
TRANSFORMACI
DISE
DIGO
Est
atento
errores
programa
demostrado
correcto
usado
Donald
Knuth282
UML
PATRONES
cipios
diseño
objetos
transformación
código
presenta
caso
estudio
20.1
Programación
proceso
desarrollo
trabajo
diseño
debería
implicar
exista
prototipado
diseño
du-
rante
programación
herramientas
desarrollo
modernas
proporcionan
entor-
excelente
explorar
rápidamente
enfoques
alternativos
normalmente
merece
pena
elaborar
diseño
programa
desarrolladores
encuentran
útil
anticipar
modelado
visual
programar
especialmente
encuentran
cómodos
razonamiento
visual
lenguajes
basados
diagramas
Sugerencia
iteración
semanas
considere
dedicar
comienzo
iteración
cabo
trabajo
diseño
mode-
visual
pasar
programación
Utilice
herramientas
sencillas
sopor-
ten
realización
rápida
creativa
diagramas
pizarra
cámara
digital
herramienta
ingeniería
software
asistida
ordenador
CASE
computer-aid
software
engineering
UML
igualmente
rápida
sencilla
adecuada
excelente
creación
código
lenguaje
programación
orientado
objetos
Java
forma
DOO
objetivo
artefactos
creados
Modelo
Diseño
UP
proporcionan
información
necesaria
gene-
rar
código
ventaja
DOO
programación
OO
utiliza
UP
proporcionan
guía
principio
requisitos
código
distintos
artefactos
suministran
información
artefactos
posteriores
útil
siguiendo
traza
culminando
finalmente
aplicación
ejecución
su-
giere
camino
fácil
seguir
mecánica
de-
masiadas
variables
contar
guía
proporciona
punto
partida
ex-
perimentar
discutir
Creatividad
cambio
implementación
trabajo
diseño
tomaron
decisiones
llevó
cabo
trabajo
creativo
Veremos
presentación
generaci
ón
código
ejemplo
proceso
traducción
relativamente
mecánico
general
trabajo
programación
etapa
generación
código
trivial
contrario
realidad
resultados
generados
diseño
paso
incompleto
programación
pruebas
realizarán
innumerables
cambios
descubrirán
resolverán
problemas
complicados
artefactos
di
seño
proporcionar
án
úcleo
ástico
extenderse
elegancia
robustez
satisfacer
problemas
encon-trados
programaci
ón
consecuencia
espere
planifique
cambio
desviaciones
diseño
programación
Cambios
código
proceso
iterativo
ventaja
proceso
desarrollo
iterativo
incremental
resultados
iteración
proporcionar
datos
comienzo
itera-
ción
Figura
20.1
resultados
análisis
diseño
actual
refi-
nando
enriqueciendo
continuamente
trabajo
implementación
ejemplo
código
iteración
desvía
diseño
iteración
hará
inevitablemente
diseño
base
implementación
en-
trada
modelos
análisis
diseño
iteración
H110011
MODELO
IMPLEMENTACIÓN
TRANSFORMACIÓN
DISEÑOS
CÓDIGO
283
Figura
20.1
implementación
iteración
influye
diseño
posterior
Ciclos
iterativos
desarrollo
Análisis
Requisitos
Análisis
Requisitos
Análisis
Requisitos
Diseño
Diseño
Diseño
Implementación
Pruebas
Implementación
Pruebas
Implementación
Pruebas
Tiempo
primeras
actividades
iteración
sincronizar
diagramas
di-
seño
diagramas
iteración
corresponderán
código
iteración
necesitan
sincronizarse
extiendan
re-
sultados
diseño
Cambios
código
herramientas
CASE
ingeniería
inversa
deseable
diagramas
generados
di
seño
actualicen
semi-automática
reflejar
cambios
trabajo
codificación
Gene-
ralmente
debería
hacerse
herramienta
CASE
leer
código
fuen-
generar
automáticamente
ejemplo
diagramas
paquetes
clases
secuencia
aspecto
ingeniería
inversa
actividad
generar
diagramas
código
fuente
ejecutable)—.20.2
Transformación
dise
código
implementación
lenguaje
orientado
objeto
requiere
scritura
código
fuente
definiciones
clases
interfaces
definiciones
métodos
secciones
siguientes
presentarán
generación
Java
caso
típico
20.3
Creación
definiciones
clases
DCDs
mínimo
DCDs
describen
nombres
clases
interfaces
super-
clases
signatura
métodos
atributos
simples
clase
suficiente
crear
definición
clase
básica
lenguaje
programación
orientado
ob-
jetos
discusión
posterior
explorará
incorporación
información
acerca
interfaces
ámbito
nombres
paquetes
detalles
Definición
clase
métodos
atributos
simples
DCD
transformación
definiciones
atributos
básicas
campos
instancia
simples
Java
signaturas
métodos
LineaDeVenta
de-
finición
Java
directa
muestra
Figura
20.2
284
UML
PATRONES
Figura
20.2
LineaDeVenta
Java
public
class
LineaDeVenta
private
int
cantidad
public
LineaDeVenta(EspecificationDelProducto
espec
int
cant
public
Dinero
getSubtotal
LineaDeVenta
cantidad
Integer
getSubtotal
Dinero
EspecificacionDelProducto
descripcion
Texto
precio
Dinero
articuloID
ArticuloID
Descrita-por
Obsérvese
incorporado
ódigo
fuente
constructor
Java
LineaDe-
Venta
deriva
envío
mensaje
create(espec
ctd
LineaDeVenta
diagrama
interacci
ón
introducirArticulo
indica
Java
requiere
constructor
soporte
parámetros
excluye
diagramas
cla-
ses
método
create
puesto
común
aparezca
múltiples
interpretacio-
nes
dependiendo
lenguaje
utilizar
adir
atributos
referencia
atributo
referencia
atributo
referencia
objeto
complejo
tipo
primitivo
cadena
texto
número
etcétera
atributos
referencia
clase
deducen
asociaciones
navegabili-
dad
diagrama
clases
ejemplo
LineaDeVenta
sociación
EspecificacionDel-
Producto
navegabilidad
habitual
sto
interprete
atributo
referencia
cla
LineaDeVenta
referencia
in
stancia
EspecificacionDelProducto
Figura
20.3
Java
significa
recomienda
campo
instancia
referencia
instancia
EspecificacionDelProducto
MODELO
IMPLEMENTACIÓN
TRANSFORMACIÓN
DISEÑOS
CÓDIGO
285
Figura
20.3
Inclusión
atributos
referencia
LineaDeVenta
cantidad
Integer
getSubtotal
Dinero
Descrita-por
public
class
LineaDeVenta
private
int
cantidad
private
EspecificacionDelProducto
especProd
public
LineaDeVenta(EspecificacionDelProducto
espec
int
cant
public
Dinero
getSubtotal
Atributo
simple
Atributo
referencia
EspecificacionDelProducto
descripcion
Texto
precio
Dinero
articuloID
ArticuloID
Obsérvese
atributos
referencia
clase
implícitos
lu-
gar
explícitos
DCD
ejemplo
añadido
campo
instancia
definición
Java
LineaDeVenta
apunte
EspecificacionDelProducto
declara
explíci-
tamente
atributo
sección
atributos
rectángulo
clase
visibilidad
atributo
recomendada
indicada
asociación
navegabilidad
define
explícitamente
atributo
fase
generación
código
Atributos
referencia
nombres
roles
iteración
estudiará
concepto
nombres
roles
diagramas
estructura
estáticos
extremo
sociación
denomina
rol
Brevemente
nombre
rol
nombre
identifica
rol
proporciona
con-
texto
semántico
acerca
naturaleza
rol
Transformación
atributos
clase
Venta
ilustra
casos
considerar
transformación
atributos
diseño
código
lenguajes
Figura
20.5
muestra
problema
solución
286
UML
PATRONES
Figura
20.4
nombres
roles
utilizarse
generar
nombres
variables
instancia
LineaDeVenta
cantidad
Integer
getSubtotal
Dinero
EspecificacionDelProducto
descripcion
Texto
precio
Dinero
articuloID
ArticuloID
Descrita-por
public
class
LineaDeVenta
private
int
cantidad
private
EspecificacionDelProducto
especProd
especProd
Nombre
rol
utilizado
nombre
atributo
Figura
20.5
Transformación
fecha
hora
Java
Venta
fecha
Fecha
esCompleta
Boolean
hora
Hora
seHaCompletado
crearLineaDeVenta
realizarPago
getTtotal
public
class
Venta
private
Date
fechaHora
new
Date
Java
clase
java.util
Date
combina
información
hora
atributos
separados
diseño
unir
trasladan
Java
nombre
rol
stá
presente
diagrama
clases
utilícelo
base
nombre
atributo
referencia
generaci
ón
ódigo
muestra
Figura
20.4.20.4
Creación
métodos
diagramas
interacción
diagrama
interacción
muestra
mensajes
envían
respuesta
in-
vocación
método
secuencia
mensajes
traduce
serie
sen-
tencias
definición
método
diagrama
interacción
introducirArticulo
Figura
20.6
ilustra
definición
Java
método
introducirArticulo
MODELO
IMPLEMENTACIÓN
TRANSFORMACIÓN
DISEÑOS
CÓDIGO
287
Figura
20.6
diagrama
interacción
introducirArticulo
crearLineaDeVenta(espec
cant)introducirArticulo(id
cant
espec
getEspecificacion(id
2.1
create(espec
cant
1.1
espec
buscar(id
Registro
Venta
lv
LineaDeVenta
SalesLineItem
LineaDeVenta
Especificacion
DelProducto
2.2
añadir(lv
CatalogoDe
Productos
ejemplo
utilizará
clase
Registro
Figura
20.7
muestra
definición
Java
Figura
20.7
clase
Registro
CatalogoDeProductos
getEspecificacion
Venta
fecha
Fecha
esCompleta
Boolean
hora
Hora
seHaCompletado
crearLineaDeVenta
realizarPago
getTotal
Captura
Busca-en
Registro
finalizarVenta
introducirArticulo(id
ArticuloID
ctd
Integer
crearNuevaVenta
realizarPago(dineroEntregado
Dinero
public
class
Registro
private
CatalogoDeProductos
catalogo
private
Venta
venta
public
Registro(CatalogoDeProductos
cp
public
void
finalizarVenta
public
void
introducirArticulo(ArticuloID
id
int
cant
public
void
crearNuevaVenta
public
void
realizarPago(Dinero
dineroEntregado
11
1El
método
Registro--introducirArticulo
envía
mensaje
introducirArticulo
instancia
Registro
define
método
introducirArticulo
clase
Registro
public
void
introducirArticulo(ArticuloID
articuloID
int
ctd
Mensaje
envía
mensaje
getEspecificacion
CatalogoDeProductos
re-
cuperar
EspecificacionDelProducto
EspecificacionDelProducto
espec
catalogo.getEspecificacion(articuloID
Mensaje
envía
mensaje
crearNuevaVenta
Venta
venta.crearLineaDeVenta(espec
ctd
Resumiendo
men
saje
secuencia
étodo
muestra
grama
interacción
transforma
sentencia
método
Java
Figura
20.8
muestra
método
completo
introducirArticulo
relación
diagrama
interacción
288
UML
PATRONES
Figura
20.8
método
introducirArticulo
introducirArticulo(id
cant
Registro
espec
getEspecificacion(id
Catalogo
DeProductos
crearLineaDeVenta(espec
cant
Venta
EspecificacionDelProducto
espec
catalogo.getEspecificacion(id
venta.crearLineaDeVenta(espec
cant
20.5
Clases
contenedoras
colecciones
código
necesario
objeto
mantenga
vi
sibilidad
grupo
ob-
jetos
normalmente
necesidad
evidente
valor
multiplicidad
diagrama
cla
ses
podr
ía
ejemplo
Venta
mantener
visibilidad
grupo
instancias
LineaDeVenta
muestra
Figura
20.9
lenguajes
programaci
ón
OO
frecuencia
implementan
stas
rela-
ciones
introduciendo
contenedor
colección
intermedia
clase
de-fine
atributo
referencia
apunta
in
stancia
contenedor
colección
contiene
instancias
clase
ejemplo
librerías
Java
contienen
clases
colección
ArrayList
HashMap
implementan
interfaces
List
Map
espectivamente
Utilizando
ArrayList
clase
Venta
definir
atributo
mantenga
lista
ordenada
instancias
LineaDeVenta
requisitos
influyen
elecci
ón
cla
colección
bús-
quedas
claves
requieren
Map
lista
ordenada
creciente
requiere
List
etcétera
20.6
Manejo
excepciones
errores
momento
ignorado
manejo
excepciones
desarrollo
solución
propósito
centrarnos
cuestiones
básicas
asig-
nación
responsabilidades
diseño
objetos
desarrollo
aplicación
aconsejable
manejo
excepciones
tra-
diseño
implementación
Brevemente
UML
excepciones
representan
mensajes
asíncronos
diagramas
interacción
estudiará
Capítulo
33
20.7
Definición
método
Venta--
crearLineaDeVenta
ejemplo
tambi
én
escribir
método
crearLineaDeVenta
clase
Venta
inspeccionando
diagrama
colaboraci
ón
introducirArticulo
Figu-
ra
20.10
mue
stra
sión
abreviada
diagrama
interacci
ón
étodo
Java
acompañante
MODELO
IMPLEMENTACIÓN
TRANSFORMACIÓN
DISEÑOS
CÓDIGO
289
Figura
20.9
Incorporación
colección
public
class
Venta
private
List
lineasDeVenta
new
ArrayList
Venta
fecha
Fecha
esCompleta
Boolean
hora
Hora
seHaCompletado
crearLineaDeVenta
realizarPago
getTotal
Contiene
LineaDeVenta
cantidad
Integer
getSubtotal
necesaria
clase
colección
mantener
visibilidad
atributo
LineasDeVenta.290
UML
PATRONES
Figura
20.10
Método
Venta--crearLineaDeVenta
lineasDeVenta.añadir(new
LineaDeVenta(espec
cant
crearLineaDeVenta(espec
ctd)introducirArticulo(id
cant
2.1
create(espec
ctd
Registro
Venta
lv
LineaDeVentaSalesLineItem
LineaDeVenta
2.2
añadir(lv
Figura
20.11
orden
implementación
prueba
clases
LineaDeVenta
cantidad
Integer
getSubtotal
CatalogoDeProductos
getEspecificacion
EspecificacionDelProducto
descripcion
Texto
precio
Dinero
articuloID
ArticuloID
Tienda
direccion
Direccion
nombre
Texto
añadirVenta
Pago
cantidad
Dinero
Contiene
Contiene
Registro
finalizarVenta
introducirArticulo
crearNuevaVenta
realizarPago
Venta
fecha
Fecha
esCompleta
Boolean
hora
Hora
seHaCompletado
crearLineaDeVenta
realizarPago
getTotal
Captura
Alberga
Utiliza
Busca-en
Pagada-mediante
Describe
11
Registra-completas
23
20.8
Orden
implementación
necesario
implementar
clases
idealmente
pruebas
unidad
comple-
tamente
acoplada
Figura
20.11
ejemplo
posibles
primeras
clases
podríamos
implementar
Pago
EspecificacionDelProducto;a
continuación
clases
dependen
implementación
Catalogo-
DeProductos
LineaDeVenta—.20.9
Programar
probando
práctica
excelente
promovida
método
Programación
Extrema
XP
eXtreme
Programming
Beck00
aplicable
UP
mayoría
prácticas
XP
programar
probando
práctica
escribe
código
pruebas
unidad
código
probar
desarrolladores
escriben
código
pruebas
unidad
código
producción
secuencia
básica
es-
cribir
código
prueba
escribir
código
producción
pase
pruebas
escribir
código
prueba
sucesiva-
mente
ventajas
encontramos
escriben
realmente
pruebas
unidad
naturaleza
humana
programadores
común
evitar
escritura
pruebas
unidad
idea
adicional
Satisfaccin
programadores
sarrollador
scribe
ódigo
producción
depura
informal
ocurrencia
tardía
añade
pruebas
unidad
siente
satisfecho
escriben
pri-
mero
pruebas
entonce
crea
refina
ódigo
producci
ón
pase
pruebas
sentimiento
logro
pasar
prueba
ignorar
specto
psicológico
desarrollo
programación
es-
fuerzo
humano
Aclaracin
interfaces
comportamiento
interfaz
pública
exacta
comportamiento
clase
perfectamente
claros
implementan
Escribiendo
pruebas
unidad
aclara
diseño
clase
Verificacin
demostrable
Obviamente
contar
cientos
miles
pruebas
unidad
proporciona
verificación
significativa
corrección
co
nfianza
ca
mbiar
co
sas
programamo
probando
di
spon-
dremos
cientos
miles
pruebas
unidad
clase
pruebas
unidad
clase
producción
desarrollador
necesita
cambiar
código
existente
escrito
conjunto
pruebas
unidad
ejecutarse
proporcionando
retroalimentación
inmedia-
ta
cambio
causó
error
ejemplo
JUnit
www.junit.org
marco
pruebas
unidad
Java
gratuito
simple
popular
Suponga
utilizando
JUnit
seguimos
estra-
tegia
programar
probando
crear
clase
Venta
programar
clase
Venta
scribimos
étodo
prueba
unidad
cla
PruebaVenta
Crea
venta
añade
líneas
venta
Solicita
comprueba
valor
esperado
ejemplo
MODELO
IMPLEMENTACIÓN
TRANSFORMACIÓN
DISEÑOS
CÓDIGO
291public
class
PruebaVenta
extends
TestCase
public
void
pruebaTotal
//inicializa
prueba
Dinero
new
Dinero(7.5
Dinero
precio
new
Dinero
2.5
ArticuloID
id
new
ArticuloID
EspecificacionDelProducto
espec
espec
new
EspecificacionDelProducto(id
precio
producto
Venta
venta
new
Venta
//a
ade
art
culos
venta.crearLineaDeVenta(espec
venta.crearLineaDeVenta(espec
//Comprobar
7.5
assertEquals(venta.getTotal
crear
clase
PruebaVenta
escribamos
clase
Venta
pase
prueba
necesario
escribir
métodos
prueba
antemano
desarrollador
escribe
método
prueba
código
pro-
ducción
satisface
continuación
método
prueba
sucesivamente
20.10
Resumen
transformación
dise
código
proceso
traducción
DCD
definiciones
clases
diagramas
interacción
métodos
relativamente
directo
trabajo
progra
mación
cabida
tomar
deci
siones
cambios
di
seño
ex-
plorar
ideas
diseño
tuvieron
pro-
gramación
20.11
Introducción
solución
programa
sección
presenta
muestra
solución
programa
capa
objetos
dominio
Java
iteración
generación
código
deriva
com-
pleto
diagramas
clases
diseño
diagramas
interacción
defi-
nieron
trabajo
diseño
basa
principios
transformación
di-
seños
código
estudiado
previamente
importante
listado
mostrar
traducen
artefactos
diseño
base
código
código
define
caso
sencillo
intención
ilustrar
pro-
grama
Java
robusto
totalmente
desarrollado
sincronización
manejo
excepciones
etcétera
292
UML
PATRONESClase
Pago
public
class
Pago
private
Dinero
cantidad
public
Pago(Dinero
dineroEntregado
cantidad
dineroEntregado
public
Dinero
getCantidad
return
cantidad
Clase
CatalogoDeProductos
public
class
CatalogoDeProductos
private
Map
especificacionesDeProductos
new
HashMap
public
CatalogoDeProductos
datos
ejemplo
ArticuloID
id1
new
ArticuloID
100
ArticuloID
id2
new
ArticuloID
200
Dinero
precio
new
Dinero
EspecificacionDelProducto
ep
ep
new
EspecificacionDelProducto
id1
precio
producto
especificacionesDeProductos.put
id1
ep
ep
new
EspecificacionDelProducto
id2
precio
producto
especificacionesDeProductos.put
id2
ep
public
EspecificacionDelProducto
getEspecificacion
ArticuloID
id
return
EspecificacionDelProducto)especificacionesDeProductos.get(id
Clase
Registro
public
class
Registro
private
CatalogoDeProductos
catalogo
private
Venta
venta
public
Registro(CatalogoDeProductos
catalogo
this.catalogo
catalogo
public
void
finalizarVenta
venta.seHaCompletado
public
void
introducirArticulo(ArticuloID
id
int
cantidad
EspecificacionDelProducto
espec
catalogo.getEspecificacion(id
MODELO
IMPLEMENTACIÓN
TRANSFORMACIÓN
DISEÑOS
CÓDIGO
293venta.crearLineaDeVenta
espec
cantidad
public
void
crearNuevaVenta
venta
new
Venta
public
void
realizarPago(Dinero
dineroEntregado
venta.realizarPago(dineroEntregado
Clase
EspecificacionDelProducto
public
class
EspecificacionDelProducto
private
ArticuloID
id
private
Dinero
precio
private
String
descripcion
public
EspecificacionDelProducto
ArticuloID
id
Dinero
precio
String
descripcion
this.id
id
this.precio
precio
this.descripcion
descripcion
public
ArticuloID
getArticuloID
return
id
public
Dinero
getPrecio
return
precio
public
String
getDescripcion
return
descripcion
Clase
Venta
public
class
Venta
private
List
lineasDeVenta
new
ArrayList
private
Date
fecha
new
Date
private
boolean
esCompleta
false
private
Pago
pago
public
Dinero
getDevolucion
return
pago.getCantidad().minus
getTotal
public
void
seHaCompletado
esCompleta
true
public
boolean
esCompleta
return
esCompleta
294
UML
PATRONESpublic
void
crearLineaDeVenta
EspecificacionDelProducto
espec
int
cantidad
lineasDeVenta.add
new
LineaDeVenta(espec
cantidad
public
Dinero
getTotal
Dinero
new
Dinero
Iterator
lineasDeVenta.iterator
while
i.hasNext
LineaDeVenta
ldv
LineaDeVenta)i.next
total.add(ldv.getSubtotal
return
public
void
realizarPago(Dinero
dineroEntregado
pago
new
Pago
dineroEntregado
Clase
LineaDeVenta
public
class
LineaDeVenta
private
int
cantidad
private
EspecificacionDelProducto
especProducto
public
LineaDeVenta
EspecificacionDelProducto
espec
int
cantidad
this.especProducto
espec
this.cantidad
cantidad
public
Dinero
getSubtotal
return
especProducto.getPrecio().times
cantidad
Clase
Tienda
public
class
Tienda
private
CatalogoDeProductos
catalogo
new
CatalogoDeProductos
private
Registro
registro
new
Registro(catalogo
public
Registro
getRegistro
return
registro
MODELO
IMPLEMENTACIÓN
TRANSFORMACIÓN
DISEÑOS
CÓDIGO
295Parte
ELABORACIÓN
ITERACIÓN
221.1
Énfasis
Iteración
diseño
objetos
patrones
capítulos
fase
concepción
Iteración
fase
elaboración
hincapié
conjunto
écnicas
fundamentales
análisis
diseño
objetos
objeto
compartir
informaci
ón
amplia
gama
pa
sos
co-
munes
construcción
sistemas
objetos
iteración
caso
estudio
centrará
•E
diseño
objetos
esencial
•E
patrones
crear
diseño
sólido
aplicación
UML
visualizar
modelos
objetivos
básicos
libro
habilidades
necesarias
discusión
mínima
acerca
an
álisis
requisitos
modelado
do
minio
explicación
diseño
concisa
Iteración
presentado
explicación
detallada
bases
pensar
objetos
iteración
tendrían
lugar
actividades
análisis
di-
seño
implementación
presta
atención
centrarnos
propor-
cionar
información
diseño
objetos
Capítulo
21
ITERACIÓN
REQUISITOS300
UML
PATRONES
21.2
Iteración
termina
Iteración
debería
cumplir
dedicado
ba
stante
esfuerzo
probar
software
unidad
aceptación
carga
facilidad
etcétera
idea
UP
cabo
verificaciones
calidad
corrección
tempranas
realistas
continuas
pronta
re-
troalimentación
guíe
desarrolladores
adaptar
mejorar
sistema
encon-
trando
camino
clientes
involucrado
regularmente
evaluación
sistema
parcial
obtener
retroalimentación
objeto
adaptar
clarificar
requisitos
Yl
clientes
progreso
visible
sistema
•E
sistema
subsistemas
integrado
completamente
es-
tabilizado
versión
base
interna
aras
brevedad
omitido
actividades
Iteración
inicio
Iteración
puesto
presentación
concede
importancia
in-
troducir
DOO
continuaci
ón
presentamos
comentarios
actividades
saltado
comienzo
iteraci
ón
utilice
herramienta
CAS
cabo
ingeniería
inversa
generar
diagramas
UML
código
fuente
iteración
resultados
forman
Modelo
Diseño
UP
És-
tos
imprimir
tamaño
plotter
colgarse
paredes
sala
proyecto
ayudaría
comunicar
representación
punto
partida
diseño
lógico
iteración
comenzado
análisis
ingeniería
usabilidad
UI
téc-
nica
actividad
extraordinariamente
importante
éxito
sistemas
tema
extenso
trivial
queda
alcance
libro
comenzado
modelado
implementación
base
datos
eligen
requisitos
iteración
cerca
iteración
an-
terior
•T
iene
lugar
taller
requisitos
ejemplo
escriben
casos
formato
completo
elaboración
diseñado
implementado
10%
requisitos
riesgo
ac-
tividad
paralela
estudiar
definir
profundidad
80%
casos
sistema
mayoría
requisitos
implementarán
has-
ta
construcción
participantes
incluirán
desarrolladores
arqui-
tecto
software
iteración
taller
investigación
preguntas
documentan
comprensión
con-
fusión
adquirida
construcción
rápida
real
software
construir
software
descubrir
realmente
noconocemos
acerca
requisitos
idea
clave
UP
de-
sarrollo
iterativo
Simplificaciones
caso
estudio
proyecto
UP
requisitos
eligen
primeras
iteracio-
nes
organizan
riesgo
alto
valor
negocio
identifican
resuelven
cuestiones
riesgo
caso
estudio
siguiera
exactamente
estrategia
ayudaría
explicar
ideas
principios
fundamentales
DOO
primeras
iteraciones
to-
mado
licencias
prioridad
requisitos
prefiriendo
aque-
llos
apoyan
objetivos
pedagógicos
lugar
objetivos
riesgo
pro-
yecto
21.3
Requisitos
Iteración
Iteración
aplicación
PDV
NuevaEra
maneja
requisitos
interesantes
Soporte
variaciones
servicios
externos
terceras
partes
ejemplo
conectar
sistema
calculadores
impuestos
interfaz
sistemas
contabilidad
etcé-
tera
ofrecerá
API
protocolo
núcleo
fun-
ciones
comunes
Regla
fijación
precios
complejas
Regla
negocio
conectables
di
seño
actualizar
ventana
GUI
cambia
venta
requisitos
iteración
contexto
es-
cenarios
caso
Procesar
Venta
Nótese
descubierto
requisitos
identificaron
fase
inicio
ejemplo
caso
Procesar
Venta
original
señala
problema
fijación
precios
Escenario
principal
éxito
Cliente
llega
terminal
PDV
mercancías
servicios
comprar
Cajero
sistema
cree
venta
Cajero
introduce
identificador
artículo
Sistema
registra
línea
venta
presenta
descripción
artículo
precio
suma
parcial
precio
calcula
conjunto
reglas
precios
secciones
Especificación
Complementaria
registran
detalles
reglas
dominio
precios
señalan
necesidad
soportar
siste-
externos
ITERACIÓN
REQUISITOS
301Especificación
Complementaria
Interfaces
Interfaces
software
mayoría
sistema
externos
colaboración
calculador
impuestos
conta-
bilidad
inventario
necesitamos
capaces
conectar
diversos
sistemas
diversas
interfaces
Reglas
Dominio
Negocio
ID
Regla
Grado
variación
Fuente
REGLA4
Reglas
descuento
comprador
Alto
tienda
Política
Ejemplos
utiliza
reglas
tienda
Empleado—20%
descuento
Clientes
preferentes—10%
descuento
Antiguos—15%
descuento
Información
dominios
interés
Fijación
precios
reglas
fijación
precios
describen
sección
reglas
dominio
nótese
artículos
precio
original
opcionalmente
precio
re-
bajado
precio
artículos
descuentos
adicionales
precio
reba-
jado
organizaciones
mantienen
precio
original
precio
re-
bajado
razones
contabilidad
impuestos
Desarrollo
incremental
caso
iteraciones
stos
requisitos
Iteraci
ón
stamos
volviendo
ca
so
so
Procesar
Venta
implementando
escenarios
sistema
crece
incrementalmente
habitual
trabajar
escenarios
características
mis-
mo
caso
iteraciones
extender
sistema
gradualmente
finalmente
manejar
funcionalidad
requerida
casos
so
breves
simples
implementarse
completamente
iteraci
ón
Iteración
simplificaciones
problema
solución
fue-
ran
excesivamente
complejas
abordar
razón
con-
sidera
cantidad
relativamente
pequeña
funcionalidad
adicional
proyecto
desarrollo
real
requisitos
escogido
libro
iteración
serían
elección
indiscutible
posibilidad
actualizar
inven-
tario
gestionar
pagos
crédito
caso
completamente
em-
bargo
elección
suficiente
riqueza
oportunidades
aprendizaje
valiosas
302
UML
PATRONES21.4
Refinamiento
artefactos
orientados
análisis
iteración
Modelo
casos
casos
resultado
requisitos
escogidos
iteración
requiere
re-
finamiento
casos
cambiar
re
sultado
per-
cepciones
diseño
objetos
programación
iteración
ten-
drá
lugar
actividad
paralela
taller
requi
sitos
investi-
garán
escribirán
detalle
casos
revisarán
anteriores
casos
formato
completo
ejemplo
Procesar
Venta
probablemente
refinarán
base
conocimiento
adquirido
Iteraci
ón
stas
actualiza-
ciones
casos
iteración
fase
elaboración
pospondrán
construcción
signi-
ficativas
arriesgadas
arquitectura
Modelo
casos
DSS
iteración
abarca
inclusión
soporte
sistemas
externos
terceras
partes
interfaces
calculador
impuestos
sistema
PDV
NuevaEra
comunicará
remota
sistemas
externos
consecuencia
deberían
actualizarse
DSS
reflejar
colaboraciones
inter-sistemas
clarificar
eventos
nivel
sistema
Figura
21.1
ilustra
DSS
escenario
pago
crédito
requiere
colaboración
vario
sistemas
externos
sta
iteración
maneja
pago
crédito
diseñador
dibujado
DSS
basado
probablemente
va-
rios
entender
colaboración
sistemas
soporte
requiere
distintas
interfaces
sistemas
externos
Modelo
Dominio
adquirido
experiencia
modelado
dominio
mo-
delador
estimar
conjunto
requisitos
menor
im-
pacto
Modelo
Dominio
términos
conceptos
asociaciones
atributos
diferencia
iteración
requisitos
abordar
comprenden
conceptos
dominio
estudio
nue-
vos
requi
sitos
sugiere
ReglaDePrecio
concepto
dominio
probablemente
docenas
cosas
situación
razonable
saltarse
refinamiento
Modelo
Do-
minio
pasar
rápidamente
trabajo
di
seño
dejar
lugar
scubri-
miento
conceptos
dominio
diseño
objetos
di-
señadores
considerando
detalladamente
solución
señal
madurez
proceso
UP
entender
creación
artefacto
añadirá
ITERACIÓN
REQUISITOS
303valor
significativo
especie
paso
mecánico
trabajo
sal-
tarlo
flexibilidad
arma
doble
filo
frecuencia
flexibilidad
saltarse
actividades
anteriores
programación
lugar
creencia
excesivamente
optimista
problema
solucionar
simplemente
precipi-
tándose
código
verdaderamente
estupendo
programación
trabajo
realmente
importa
dibujar
modelos
dominio
ma-
yoría
desarrolladores
historias
reflexión
investigación
previsión
programar
habrían
reducido
dolor
sufrimiento
Modelo
caso
contratos
operaciones
sistema
iteración
considerar
operaciones
sistema
necesitan
contratos
caso
contratos
únicamente
opción
precisión
detallada
ofrecen
mejora
descripciones
casos
304
UML
PATRONES
Figura
21.1
escenario
DSS
ilustra
eventos
externos
introducirArt(artID
cantidad
Cajero
finalizarVenta
Procesar
Venta
Escenario
Pago
Crédito
descripción
impuestos
articulos
crearNuevaVenta
RealizarPagoACredito
numCred
fechaCaducidad
SistemaPDV
NueraEra
actor
Calculador
DeImpuestos
actor
ServicioDe
AutorizacionDePagos
actor
Contabilidad
respuesta
solicitarAprobacion(solicitud
ponerAdmisible(admisible
ponerVenta(venta
lineasDeImpuestos
getImpuestos(venta)Objetivos
Aprender
aplicar
resto
patrones
GRASP
Introducción
Anteriormente
estudiamos
aplicación
patrones
GRASP
•E
xperto
Información
Creador
Alta
Cohesión
Acoplamiento
Controlador
patrones
GRASP
Polimorfismo
Indirección
•F
abricación
Pura
Variaciones
Protegidas
hayan
explicado
tendremos
vocabulario
rico
común
discutir
diseños
vocabulario
crecerá
puesto
presentan
capítulos
siguientes
patrones
diseño
pandilla
GoF
Gang-of-Four
Estrategia
Factoría
fra
corta
Sugiero
Estrategia
generada
Factoría
soportar
Variaciones
Protegidas
Acoplamiento
re
specto
revela
informaci
ón
di
seño
puesto
nombre
patrones
transmite
concisa
concepto
diseño
complejo
Capítulo
22
GRASP
PATRONES
ASIGNAR
RESPONSABILIDADES
suerte
residuo
diseño
Branch
Rickey306
UML
PATRONES
capítulo
presenta
resto
patrones
GRASP
ayuda
aprender
principios
fundamentales
asignan
responsabilidades
objetos
diseñan
capítulos
siguientes
introducen
patrones
útiles
aplican
desarrollo
iteración
aplicación
PDV
NuevaEra
22.1
Polimorfismo
alternativas
comportamiento
relacionados
varían
tipo
cla
asigne
responsabilidad
comportamiento
utilizando
operaciones
polimórfi-
cas
tipos
varía
comportamiento1
Corolario
haga
comprobaciones
acerca
tipo
objeto
utilice
ló-
gica
condicional
cabo
alternativas
basadas
tipo
manejar
alternativas
basadas
tipo
crear
componentes
soft-
ware
conectables
pluggable
Alternativas
basadas
tipo
variación
condicional
tema
fundamental
programas
diseña
programa
utilizando
sentencias
lógica
condicional
if-
then-else
case
aparece
variación
requiere
modificación
lógica
casos
enfoque
dificulta
programa
extienda
facilidad
variaciones
tiende
necesitar
cambios
sitios
quiera
exista
lógica
condicional
Componentes
software
conectables
Viendo
componentes
relaciones
clien-
te-servidor
sustituir
componente
servidor
afectar
cliente
aplicación
PDV
NuevaEra
soportar
sistemas
externos
cálculo
impue
stos
partes
Ma
ster-En-Impuestos
Impue
stos-
Pro
sistema
necesita
capaz
integrarse
distintos
calculador
impuestos
interfaz
comportamiento
parecido
varía
adaptarse
stos
interfaces
externos
APIs
pro-
ducto
soportar
simple
protocolo
sockets
TCP
ofrecer
inter-
faz
SOAP
ofrecer
interfaz
RMI
Java
objetos
deberían
responsables
manejar
interfaces
calculadores
impuestos
externos
Puesto
comportamiento
adaptación
calculador
varía
tipo
calculador
Polimorfismo
deberíamos
asignar
responsabilidad
adap-
tación
objetos
calculadores
adaptadores
calculador
implementa-
operación
polimórfica
getImpuestos
Figura
22.1
Solución
Problema
Ejemplo
polimorfismo
significados
relacionados
contexto
significa
asignar
nom-
bre
servicios
objetos
Coad95
servicios
parecidos
relacionados
dife-
rentes
tipos
objetos
normalmente
implementan
interfaz
común
relacionados
jerarquía
im-
plementación
superclase
común
depende
lenguaje
ejemplo
lenguajes
ligadura
dinámica
Smalltalk
requieren
objeto
adaptadore
calculadore
calculadore
externo
objetos
software
locales
representan
calculadores
externos
adaptador
calculador
Enviando
mensaje
objeto
local
finalmente
hará
llamada
calculador
externo
API
método
getImpuestos
toma
objeto
Venta
parámetro
calculador
analizar
venta
implementaci
ón
étodo
getImpuestos
AdaptadorMasterEnImpuestos
adaptará
solicitud
API
Master-
En-Impuestos
sucesivamente
GRASP
PATRONES
ASIGNAR
RESPONSABILIDADES
307
Figura
22.1
Polimorfismo
adaptación
calculadores
impuestos
externos
AdaptadorMasterEnImpuestos
getImpuestos
Venta
List
of
LineaDeImpuesto
AdaptadorImpuestosPro
getImpuestos
Venta
List
of
LineaDeImpuesto
interface
IAdaptadorCalculadorDeImpuestos
getImpuestos
Venta
List
of
LineaDeImpuesto
Polimorfismo
múltiples
adaptadores
calculadores
impuestos
comportamiento
similar
varía
adaptarse
calculadores
impuestos
externos
Adaptador
Notación
UML
Figura
22.1
presenta
notación
especificar
interfaces
descriptor
operaciones
implementación
implementación
interfaces
valores
retorno
tipo
colección
Figura
22.2
explica
de-
talle
utiliza
estereotipo
UML
designar
interfaz
estereotipo
me-
canismo
crear
categor
ía
elementos
nombre
stereotipo
pone
comillas
francesas
interface
comillas
francesas
sig-
ortográfico
único
carácter
conocido
tipografía
fran-
cesa
indicar
cita
citando
Rumbaugh
quiene
tengan
problemas
tipo-
gráficos
utilizar
dobles
corchetes
angulares
RJB99
polimorfismo
principio
fundamental
diseñar
organiza
sistema
gestionar
variaciones
similares
Polimorfismo
diseño
basado
asig-
nación
responsabilidades
extenderse
fácilmente
manejar
variaciones
ejemplo
inclusión
clase
adaptador
calculador
método
polimórfico
getImpuestos
impacto
menor
diseño
existente
DiscusiónAlgunas
desarrolladores
diseñan
sistemas
interfaces
polimorfismo
futuras
necesidades
especulativas
frente
posibles
variaciones
desconocidas
punto
variación
motivado
duda
variabilidad
inmediata
probable
razonable
esfuerzo
añadir
flexibilidad
polimorfismo
conveniente
evaluación
crítica
puesto
raro
dedique
esfuerzo
innecesario
preparar
futuro
di
seño
polimorfismo
puntos
variación
realidad
improbables
aparece-
rán
realmente
realista
probabilidad
variación
invertir
incrementar
flexibilidad
añaden
fácilmente
extensiones
necesarias
variaciones
implementaciones
introducir
afectar
clientes
Variaciones
Protegidas
populares
patrones
diseño
GoF
GHJV95
estudiarán
libro
dependen
polimorfi
smo
encuentran
patrones
Adaptador
Command
Composite
Proxy
Estrategia
Elección
Mensaje
preguntes
clase
22.2
Fabricación
Pura
Asigne
conjunto
responsabilidades
altamente
cohesivo
clase
artificial
conveniencia
representa
concepto
dominio
problema
inventa-
do
soportar
alta
cohesión
acoplamiento
reutilización
308
UML
PATRONES
Figura
22.2
Notación
UML
interfaces
tipos
retorno
AdaptadorImpuestosPro
getImpuestos
Venta
List
of
LineaDeImpuesto
interface
IAdaptadorCalculadorDeImpuestos
getImpuestos
Venta
List
of
LineaDeImpuesto
NOTACIÓN
INTERFAZ
NOTACIÓN
INTERFAZ
implementación
interfaz
ilustra
línea
punteada
flecha
vacía
apuntando
interfaz
clase
implementa
elemento
interface
comillas
francesas
recibe
nombre
estereotipo
UML
tipos
retorno
parámetros
representan
colección
especificar
sintaxis
estilo
UML
común
aceptado
general
Contraindica-
ciones
Beneficios
Patrones
Relacionados
conocido
parecido
SoluciónTal
clase
fabricación
imaginación
Idealmente
responsabilidades
asig-
nadas
fabricación
soportan
alta
cohesión
acoplamiento
di-
seño
fabricación
limpio
puro
fabricación
pura
Finalmente
fabricación
pura
implica
construir
es-
tamos
desesperados
objetos
deberían
responsabilidad
violar
objetivos
Alta
Cohesión
Acoplamiento
soluciones
ofrece
Ex-
perto
ejemplo
adecuadas
di
seños
orientado
objeto
caracterizan
implementar
clases
software
representaciones
conceptos
dominio
mundo
real
reducir
salto
representación
ejemplo
clase
Venta
Cliente
em-
bargo
situaciones
asignación
responsabilidades
clases
software
capa
dominio
lugar
problemas
cohesión
acoplamiento
pobres
potencial
reutilizar
ejemplo
suponga
necesita
soporte
almacenar
instancias
Ven-
ta
base
datos
relacional
Experto
Información
justificar
asignación
responsabilidad
clase
Venta
puesto
venta
datos
necesitan
almacenar
considere
siguientes
implicaciones
tarea
requiere
número
relativamente
amplio
operaciones
orientadas
so-
porte
base
datos
relacionada
concepto
ventas
clase
Venta
deja
cohesión
clase
Venta
acoplar
interfaz
ba
dato
relacional
JDBC
tecnologías
Java
acoplamiento
aumenta
acoplamiento
produce
objeto
dominio
tipo
parti
cular
interfaz
base
datos
Almacenar
objetos
base
datos
relacional
tarea
general
clases
necesitan
soportar
colocación
responsabilidad
clase
Venta
entender
reutilización
pobre
mu-
cha
duplicación
clases
hagan
Venta
candidata
ógica
virtud
Experto
Infor-
mación
almacenarse
base
datos
diseño
baja
cohesión
alto
acoplamiento
potencial
reutilizar
exactamente
tipo
si-
tuación
desesperada
pide
cree
solución
razonable
crear
clase
responsable
únicamente
almacenar
objetos
tipo
almacenamiento
persistente
base
datos
relacional
llamémosla
AlmacenamientoPersistente2
clase
Fa-
bricación
Pura
invención
imaginación
Obsérvese
nombre
AlmacenamientoPersistente
concepto
entiende
nombre
concepto
almacenamiento
persistente
encon-
GRASP
PATRONES
ASIGNAR
RESPONSABILIDADES
309
Problema
Ejemplo
framework
persistencia
real
necesita
finalmente
única
clase
fabricación
pura
crear
di
seño
razonable
objeto
fachada
front-end
úmero
objeto
ayuda
back-end.traría
Modelo
Dominio
diseñador
pregunta
persona
nego-
cio
tienda
Trabaja
objetos
almacenamiento
persistente
enten-
dería
entienden
conceptos
venta
pago
AlmacenamientoPersisten-
concepto
dominio
creado
fabricado
facilitar
cosas
desarrollador
software
Fabricación
Pura
soluciona
siguientes
problemas
diseño
Venta
permanece
diseñada
alta
cohesión
acoplamiento
clase
AlmacenamientoPersistente
relativamente
cohesiva
teniendo
úni-
co
objetivo
almacenamiento
inserción
objetos
almace-
namiento
persistente
clase
AlmacenamientoPersistente
objeto
genérico
reutilizable
creación
fabricación
pura
ejemplo
exactamente
situación
requieresu
sustituir
diseño
basado
Experto
cohesión
aco-
plamiento
pobres
diseño
potencial
reutilizar
Observe
patrones
GRASP
concede
importancia
lu-
gar
debería
colocar
responsabilidad
ejemplo
responsabilidades
cambian
clase
Venta
motivada
Experto
Fabricación
Pura
diseño
objetos
dividir
general
grupos
escogidos
descomposición
representación
escogidos
descomposición
comportamiento
ejemplo
crean
clases
software
Venta
descom-
posición
representación
clase
software
relacionada
representa
cosa
dominio
descomposición
representación
estrategia
común
di-
seño
objetos
favorece
objetivo
salto
repre
sentación
reducido
gunas
deseamos
asignar
responsabilidades
agrupando
comportamientos
algo-
ritmos
interese
crear
clase
nombre
objetivo
esté
relacionado
concepto
dominio
mundo
real
ejemplo
objeto
algoritmo
GeneradorDeTablaDeConteni-
cuyo
objetivo
sorpresa
generar
tabla
contenido
creó
desarro-
llador
clase
ayuda
conveniencia
preocuparse
elegir
nombre
vocabulario
dominio
libro
documento
s.
cla
conveniencia
concebida
desarrollador
agrupar
comportamiento
métodos
relacio-
nados
motivada
descomposición
comportamiento
cambio
cla
software
denominada
TablaDeContenidos
inspirada
si-
guiendo
descomposición
representación
debería
contener
información
con-
sistente
concepción
dominio
real
nombres
capítulos
310
UML
PATRONES
AlmacenamientoPersistente
insertar
Object
actualizar
Object
Fabricación
Pura
DiscusiónNo
crítico
identificar
clase
Fabricación
Pura
objetivo
educativo
transmitir
idea
general
clases
software
inspiran
representaciones
dominio
simplemente
crean
conveniencia
di-
señador
objetos
clases
conveniencia
normalmente
crean
agrupar
al-
gún
comportamiento
com
ún
in
spiran
scomposición
comportamiento
lugar
descomposición
representación
Fabricación
Pura
normalmente
organiza
base
fun-
cionalidad
relacionada
ste
objeto
centrado
funci
ón
com-
portamiento
patrones
diseño
orientados
objetos
existentes
ejemplo
Fa-
bricación
Pura
Adaptador
Estrategia
Command
etcétera
GHJV95
comentario
merece
pena
reiterar
solución
ofre-
ce
Experto
Información
conveniente
objeto
candidato
por-
información
relacionada
responsabilidad
aspectos
elección
diseño
pobre
normalmente
problemas
cohesión
acoplamiento
soporta
Alta
Cohesión
puesto
responsabilidades
factorizan
clase
grano
fino
centra
conjunto
específico
tareas
re-
lacionadas
•E
potencial
reutilizar
aumentar
presencia
clases
Fa-
bricación
Pura
grano
fino
cuya
responsabilidades
aplicación
aplicaciones
inexpertos
di
seño
objeto
conocen
s-
composición
organizaci
ón
software
ba
funciones
abusan
s-
composición
comportamiento
objetos
Fabricación
Pura
Exagerando
sucede
funciones
convierten
objetos
inherentemente
incorrecto
creación
objetos
función
algoritmo
necesita
equilibrarse
capa-
cidad
diseñar
descomposición
representación
capacidad
aplicar
Experto
Información
clase
representación
Venta
responsabilidades
Experto
Información
enuncia
objetivo
co-
locar
responsabilidades
objetos
conocen
información
necesaria
responsabilidades
tiende
favorecer
disminución
acoplamiento
abusa
Fabricación
Pura
lugar
demasiados
objetos
comportamiento
responsabilidades
colocaron
información
necesaria
realización
afectar
negativamente
acoplamiento
síntoma
habitual
ma-
yoría
datos
contenidos
objetos
pasan
objetos
trabajar
Acoplamiento
Alta
Cohesión
Usualmente
Fabricación
Pura
asume
responsabilidades
clases
do-
minio
asignaría
responsabilidades
base
patrón
Experto
•T
odos
patrone
di
seño
Go
GHJV
95
Adaptador
Command
Estrategia
etcétera
Fabricaciones
Puras
Prácticamente
resto
patrones
diseño
Fabricaciones
Puras
GRASP
PATRONES
ASIGNAR
RESPONSABILIDADES
311
Beneficios
Contraindica-
ciones
Patrones
Principios
Relacionados22.3
Indirección
Asigne
responsabilidad
objeto
intermedio
medie
componentes
servicios
acoplen
directamente
intermediario
crea
indirección
componentes
asignar
responsabilidad
evitar
acoplamiento
directo
cosas
desacoplar
objetos
soporte
acopla
miento
potencial
reutilizar
permanezca
alto
AdaptadorCalculadorDeImpuestos
objetos
actúan
intermediarios
calculadores
impuestos
externos
polimorfismo
proporcionan
interfaz
consistente
objetos
inter-
ocultan
variaciones
APIs
externas
Añadiendo
nivel
indirección
polimorfismo
objetos
adaptador
protegen
diseño
interno
frente
variaciones
interfaces
externas
Figura
22.3
312
UML
PATRONES
Solución
Problema
Figura
22.3
Indirección
adaptador
Venta
AdaptadorMasterEnImpuestos
impuestos
getImpuestos
getTotal
adaptador
actúa
nivel
indirección
sistema
externo
system
MasterEnImpuestos
comunicación
vía
socket
TCP
xxx
Ejemplos
AlmacenamientoPersistente
ejemplo
Fabricación
Pura
desacoplar
Venta
servicios
base
datos
relacional
incorporaci
ón
cla
AlmacenamientoPersistente
tam
bién
ejemplo
asignación
responsabilidades
soportar
Indirección
AlmacenamientoPersistente
actúa
intermediario
Venta
base
datos
mayoría
problemas
informática
resolver
nivel
indirección
viejo
particular
relevancia
diseños
orientados
objetos3
Discusión
viejo
informática
olvidado
fuente
Parnas
Nótese
contrario
mayoría
problemas
ejecución
resolver
eliminando
capa
indirección!”
patrones
diseño
existentes
especializa-
ciones
Fabricación
Pura
especializaciones
Indirección
Al-
gunos
ejemplos
Adaptador
Fachada
Observador
Fabricaciones
Puras
generan
Indirección
motivo
Indirección
normalmente
Acoplamiento
añade
intermediario
desacoplar
componentes
servicios
Disminuir
acoplamiento
componentes
Variaciones
Protegidas
Acoplamiento
patrones
GoF
Adaptador
Puente
Fachada
Observador
Mediador
GHJV95
intermediarios
Indirección
Fabricaciones
Puras
22.4
Variaciones
Protegidas
Identifique
puntos
variaciones
previstas
inestabilidad
asigne
responsabili-
dades
crear
interfaz
estable
Nota
término
interfaz
utiliza
sentido
general
vista
ac-
ceso
significa
literalmente
interfaz
Java
COM
diseñar
objetos
subsistemas
sistemas
variaciones
ines-
tabilidades
elementos
tengan
impacto
deseable
elementos
ejemplo
problema
calculador
impuestos
externo
solución
Polimorfismo
ilustra
Variaciones
Protegidas
Figura
22.1
punto
ines-
tabilidad
variación
forman
interfaces
APIs
calculadores
impuestos
externos
sistema
PDV
necesita
capaz
integrarse
sis-
temas
cálculo
impuestos
existentes
futuros
calculadores
terceras
partes
Añadiendo
nivel
indirección
interfaz
utilizando
polimorfismo
va-
rias
implementaciones
IAdaptadorCalculadorDeImpuestos
proteger
sistema
variaciones
APIs
externas
objetos
internos
colaboran
interfaz
estable
distintas
implementaciones
adaptador
ocultan
variaciones
sistemas
externos
Cockburn
publicó
Variaciones
Protegidas
VP
patrón
VCK96
principio
diseño
fundamental
dé-
cadas
distintos
términos
Mecanismos
motivados
VP
VP
principio
fundamental
motiva
mayoría
mecanismos
patrones
programación
diseño
destinados
proporcionar
flexibilidad
protección
frente
variaciones
GRASP
PATRONES
ASIGNAR
RESPONSABILIDADES
313
Beneficios
Patrones
Principios
Relacionados
Solución
Problema
Ejemplo
DiscusiónA
nivel
madurez
desarrollador
arquitecto
conoci-
miento
creciente
mecani
smos
amplia
aplicaci
ón
seguir
VP
elegir
batallas
VP
apropiada
merecen
pena
pelear
capacidad
escoger
so-
lución
VP
adecuada
primeras
etapas
aprende
acerca
encapsulación
datos
interfaces
polimorfi
smo
mecanismos
básicos
alcanzar
VP
aprende
técnicas
lenguajes
basados
reglas
intérpre-
tes
regla
diseños
basados
reflexi
ón
metadato
máquinas
virtuales
etcétera
aplicar
proteger
variación
ejemplo
Mecanismos
básicos
Variaciones
Protegidas
VP
motiva
encapsulación
datos
interfaces
polimorfismo
indirección
estándares
Nótese
componentes
gestores
brokers)ym
áquinas
virtuales
ejemplos
complejos
indirección
VP
Diseños
dirigidos
datos
diseños
dirigidos
datos
cubren
amplia
familia
técnicas
encuentran
lectura
códigos
valores
rutas
ficheros
clase
nombres
cla-
etcétera
procedentes
fuente
externa
cambiar
comportamiento
pa-
rametrizar
sistema
tiempo
ejecución
variantes
hojas
estilo
metadatos
correspondencia
objeto-relacional
ficheros
pro-
piedades
lectura
distribución
elementos
ventana
pro-
tege
sistema
impacto
variaciones
datos
metadatos
declarativas
regis-
trando
externamente
variante
leyéndola
razonando
Búsqueda
servicios
búsqueda
servicios
incluye
técnicas
utilización
servicios
nombres
ejemplo
JNDI
Java
intermediario
traders
obtener
servicio
ejemplo
Jini
Java
UDDI
servicios
Web
protegen
clientes
variaciones
ubicación
servicios
utilizando
interfaz
estable
búsque-
servicio
caso
especial
diseño
dirigido
datos
Diseños
dirigidos
intérprete
diseños
dirigidos
intérprete
comprenden
intérpretes
reglas
ejecu-
reglas
leídas
fuente
externa
int
érpretes
script
lenguajes
leen
ejecutan
programas
máquinas
virtuales
motores
redes
neuronales
ejecutan
redes
motores
lógicos
restricciones
leen
razonan
conjuntos
restricciones
et-
cétera
enfoque
permite
cambiar
parametrizar
comportamiento
sistema
expresiones
lógicas
externas
protege
sistema
impacto
va-
riaciones
lógicas
registrando
externamente
ógica
leyéndola
utilizando
int
ér-
prete
314
UML
PATRONESDiseños
reflexivos
meta-nivel
ejemplo
enfoque
utilizar
java.beans
Introspector
obtener
obje-
to
BeanInfo
solicitar
objeto
Method
método
acceso
getter
pro
piedad
bean
invocar
Method.invoke
protege
sistema
impacto
ló-
gica
variacione
externa
ódigo
algoritmo
reflexivo
utilizan
introspección
servicios
metalenguage
considerarse
caso
especial
di-
seño
dirigido
datos
Acceso
uniforme
lenguajes
Ada
Eiffel
soportan
constructor
sintáctico
expresan
acceso
método
campo
ejemplo
unCirculo.radio
invocar
método
radio():float
referirse
directamente
cam-
po
público
dependiendo
definición
clase
cambiar
campos
pú-
blicos
métodos
acceso
cambiar
código
cliente
Principio
Sustitución
Liskov
PSL
PSL
Liskov88
formaliza
principio
protecci
ón
variacione
im
plementacione
interfaz
subclase
extiende
super-
clase
Citando
textualmente
propiedad
sustitución
objeto
o1
tipo
objeto
o2
tipo
to
programa
definidos
érminos
comportamiento
varía
sustituye
o1
o2
subtipo
Liskov88
Informalmente
software
métodos
clases
referencia
tipo
al-
guna
interfaz
superclase
abstracta
debería
trabajar
correctamente
espera
implementación
subclase
sustituya
llamémosla
ejemplo
public
void
añadirImpuestos
IAdaptadorCalculadorDeImpuestos
calculador
Venta
venta
List
lineasDeImpuestos
calculador.getImpuestos
venta
método
añadirImpuestos
importa
implementaci
ón
IAdaptador-
CalculadorDeImpuestos
pase
argumento
real
método
debería
continuar
funcionando
espera
PSL
idea
simple
intuitiva
mayoría
desarrolladores
software
formaliza
intuición
GRASP
PATRONES
ASIGNAR
RESPONSABILIDADES
315Diseños
ocultación
estructura
edici
ón
libro
enunció
importante
principio
di
seño
objetos
denominado
Hable
Extraños
Ley
Demeter
Lieberherr88
patrones
GRASP
Brevemente
significa
evitar
crear
di
seños
recorren
largos
caminos
estructura
objetos
envía
mensajes
objetos
distantes
indirectos
extraños
Tales
diseños
frágiles
cambios
estructuras
objeto
punto
frecuente
ine
stabilidad
edición
principio
general
VP
sustituye
Hable
Ex-
traños
ca
so
especial
mecani
smo
lograr
proteger
cambios
estructura
aplicar
reglas
Hable
Extraños
Hable
Extraños
restringe
objetos
deberías
enviar
mensajes
método
Establece
método
deberían
enviarse
mensajes
siguientes
objetos
objeto
this
self
parámetro
método
atributo
this
elemento
colección
atributo
this
objeto
creado
étodo
intención
evitar
acoplamiento
cliente
conocimiento
objetos
in-
directos
conexiones
objetos
objetos
directos
conocidos
cliente
objetos
indirectos
extra-
ños
cliente
debería
hablar
conocidos
evitar
hablar
extraños
continuación
presentamos
ejemplo
viola
ligeramente
principio
Ha-
bles
Extraños
comentarios
explican
violación
class
Registro
private
Venta
venta
public
void
metodoAlgoFragil
//venta.getPago
envía
mensaje
conocido
//pero
venta.getPago().getCantidadEntregada
//el
mensaje
getCantidadEntregada
aplica
Pago
extraño
Dinero
cantidad
venta.getPago().getCantidadEntregada
316
UML
PATRONESEste
código
recorre
conexiones
estructurales
objeto
conocido
Ven-
ta
objeto
extraño
Pago
envía
mensaje
ligeramente
frágil
depende
objetos
Venta
conecten
objetos
Pago
realidad
probable
problema
considere
fragmento
llega
lejos
camino
estructura
public
void
metodoMasFragil
TitularCuenta
titular
venta.getPago().getCuenta().getTitularCuenta
ejemplo
artificial
ilustrar
patrón
llegar
lejos
camino
conexiones
objetos
enviar
mensaje
objeto
distante
indirec-
to
hablando
extraño
alejado
diseño
acoplado
estructura
par-
ticular
conectados
objetos
lejos
camino
recorre
programa
frágil
Karl
Lieberherr
colegas
inve
stigado
principio
di
se-
ño
objeto
marco
proyecto
Demeter
Ley
Demeter
Hable
Extraños
identificó
vieron
frecuencia
producían
cam-
bios
inestabilidad
structura
objetos
re
sultado
frecuente
ro-
turas
código
acoplado
conocimiento
conexiones
objetos
examinaremos
sección
VP
especulativo
escoja
ba-
tallas
necesario
proteger
depende
inestabilidad
es-
tructura
objetos
librerías
estándar
librerías
Java
cone-
xiones
structurale
cla
ses
objeto
relativamente
stables
sistemas
maduro
structura
ás
estable
sistemas
iteraciones
estable
general
lejos
recorre
camino
frágil
útil
conforme
principio
Hable
Extraños
obedecemos
estrictamente
ley
protección
variaciones
estructu-
rales
necesario
añadan
operaciones
públicas
conocidos
objeto
operaciones
proporcionan
término
informaci
ón
deseada
ocultan
obtuvo
ejemplo
soportar
Hable
Extraños
casos
anteriores
//caso
Dinero
cantidad
venta.getCantidadEntregadaEnPago
//caso
TitularCuenta
titular
venta.getTitularCuentaDelPago
GRASP
PATRONES
ASIGNAR
RESPONSABILIDADES
317Advertencia
VP
especulativo
escoja
batallas
lugar
merece
pena
definir
puntos
cambio
Punto
variación
variaciones
sistema
actual
existente
requisitos
múltiples
interfaces
calculadores
impuestos
so-
portar
Puntos
evolución
puntos
especulativos
variación
aparecer
futuro
presentes
requisitos
actuales4
VP
aplica
puntos
variación
evolución
advertencia
coste
futuras
necesidades
especulativas
puntos
evolución
pesa
coste
incurre
diseño
simple
frágil
revisa
necesario
respuesta
verdaderas
presiones
cambio
coste
diseñar
protección
puntos
evolución
alto
rehacer
diseño
simple
ejemplo
recuerdo
sistema
manejo
mensajes
busca
ar-
quitecto
incluyó
lenguaje
script
intérprete
soporte
flexibilidad
variaciones
protegidas
punto
evolución
revisión
versión
incremental
eliminó
complejo
ineficiente
script
simplemente
necesario
empecé
programación
orientada
objetos
principio
ochenta
padecí
enfermedad
generalizitis
solía
pasar
horas
creando
superclases
clases
realmente
necesitaba
escribir
haría
general
flexible
protegido
variaciones
situaciones
futuras
realmente
beneficioso
sucedía
pobre
juez
merecía
pena
esfuerzo
idea
abogar
diseños
frágiles
rehacer
necesidad
fle-
xibilidad
protección
cambios
realista
motivada
aplicación
VP
futuras
necesidades
supuesta
reutilización
probabilidades
in-
requiere
cosas
restringido
crítico
desarrolladores
experiencia
tienden
diseños
frágiles
desarro-
lladores
nivel
intermedio
tienden
diseños
excesivamente
flexibles
genera-
lizados
formas
utilizan
diseñadores
expertos
eligen
pers-
picacia
diseño
simple
frágil
equilibrio
coste
cambio
probabilidad
añaden
fácilmente
extensiones
necesitan
variaciones
introducir
implementaciones
afectar
clientes
reduce
acoplamiento
disminuirse
impacto
coste
cambios
318
UML
PATRONES
Contraindica-
ciones
UP
puntos
evolución
documentar
formalmente
Casos
Cambio
des-
cribe
aspectos
relevantes
punto
evolución
beneficio
futuro
arquitecto
Beneficios•
mayoría
patrones
principios
diseño
mecanismos
variacio-
nes
protegidas
encuentran
polimorfismo
interfaces
indi-
rección
encapsulación
datos
mayoría
patrones
diseño
GoF
etcé-
tera
•E
Pree95
puntos
variación
evolución
reciben
nombre
puntos
ca-
lientes
VP
esencialmente
principios
ocultación
información
abierto-cerrado
términos
antiguos
patrón
oficial
comu-
nidad
patrones
Cockburn
VCK96
denominó
Variaciones
Pro-
tegidas
1996
Ocultación
Información
famoso
artículo
David
Parnas
On
the
Criteria
To
Be
Used
in
Decomposing
Systems
Into
Modules
Criterios
Utilizar
scomponer
Sistemas
Módulos
r-
nas72
ejemplo
clásicos
citan
rara
leen
Parnas
introduce
concepto
ocultación
información
término
suena
idea
encapsulación
datos
interpretado
libros
definen
erróneamente
conceptos
sinónimos
Parnas
quiso
ocultación
información
ocultar
información
di-
seños
módulos
puntos
cambio
dif
íciles
probables
Citando
literal-
mente
explicaci
ón
ocultaci
ón
informaci
ón
principio
di
seño
conductor
Proponemos
lugar
comience
lista
decisiones
diseño
difíciles
decisiones
diseño
probable
cambien
mó-
dulo
diseña
ocultar
decisión
principio
Parna
ocultaci
ón
informaci
ón
smo
enuncia
VP
simplemente
encapsulación
datos
técnicas
ocultar
información
acerca
diseño
tér-
mino
ampliamente
reinterpretado
sinónimo
encapsulación
datos
utilizarlo
sentido
original
malentendidos
Principio
Abierto-Cerrado
Principio
Abierto-Cerrado
PAC
descrito
Bertrand
Meyer
Meyer88
esencialmente
equivalente
patrón
VP
ocultación
información
definición
PAC
módulos
deberían
abiertos
extenderse
adaptables
cerrados
módulo
cerrado
modificaciones
afecten
clien-
tes
PAC
VP
esencialmente
expresiones
principio
resal-
puntos
protección
puntos
variación
evolución
PAC
módulos
comprenden
elementos
software
discretos
métodos
clases
subsistemas
aplicaciones
etcétera
GRASP
PATRONES
ASIGNAR
RESPONSABILIDADES
319
Patrones
Principios
Relacionados
conocido
Parecido
aEn
contexto
PAC
frase
cerrado
significa
clientes
ven
afectados
cambia
ejemplo
clase
cerrada
definiciones
campos
instancia
mecanismo
encapsulación
datos
campo
privados
étodos
acce
so
úblicos
smo
tiempo
stán
abiertas
modificación
definiciones
datos
privados
clientes
externos
acoplados
directamente
datos
privados
ejemplo
adaptadores
calculadores
impuestos
ce-
rrados
interfaz
pública
implementación
interfaz
es-
table
IAdaptadorCalculadorDeImpuestos
adaptadores
abiertos
extensión
modificados
privada
re
spuesta
cambios
APIs
calculadores
impuestos
externos
afectan
clientes
320
UML
PATRONESObjetivos
Aplicar
patrones
dise
GRASP
Go
dise
ca
so
estudio
NuevaEra
Introducci
capítulo
estudia
dise
objeto
realizaciones
casos
usos
iteración
caso
estudio
NuevaEra
aborda
soporte
acce-
so
servicios
externos
terceras
partes
cuyas
interfaces
variar
reglas
complejas
stablecer
precio
productos
regla
negocio
co
nectables
contexto
problemas
dise
discutir
tambi
introducir
notación
UML
utilizada
importante
mostrar
aplicar
patrones
GoF
GRASP
sicos
pretende
ilustrar
dise
objetos
asignación
responsabilidades
pue-
explicar
aprender
ba
aplicaci
ón
patrone
vocabulario
principios
estilos
combinar
dise
ar
objetosÑ.
Capítulo
23
DISE
REALIZACIONES
CASOS
PATRONES
DISE
GOF
cosa
uedas
hacerla
meta
Daniel
Dennett322
UML
PATRONES
patrones
pandilla
Gang-of-Four
patrones
adicionales
presentan
capítulo
proceden
Design
Patterns
GHJV95
libro
sico
popular
presenta
23
patrones
tile
du-
rante
dise
objeto
s.
Puesto
libro
scrito
autores
pa-
trones
conocen
patrones
pandilla
patrone
Go
capítulo
proporciona
introducción
patrones
GoF
uti-
lizados
capítulos
posteriores
presentar
s2
recomienda
studio
completo
cuidadoso
libro
Design
Patterns
iniciarse
dise
ador
objetos
libro
asume
lector
dise
ador
experiencia
libro
ofrece
introducción
vocabulario
compartido
Adem
vocabulario
visual
notación
UML
capítulo
tendremos
vocabulario
dise
compartido
rico
rminos
nombres
patrones
po
sible
comunicar
progresivamente
ideas
dise
software
diagramas
UML
notas
conectadas
indican
patrones
In-
dirección
Estrategia
aplicar
23.1
Adaptador
GoF
problema
presentó
capítulo
motivar
patrón
Polimorfismo
solución
concretamente
ejemplo
patrón
GoF
Adaptador
Adaptador
Adapter
Contexto
Problema
resolver
interfaces
incompatibles
proporcionar
interfaz
estable
com-
ponentes
parecidos
interfaces
Solución
Convierta
interfaz
original
componente
interfaz
objeto
adaptador
intermedio
Recordemos
sistema
PDV
NuevaEra
necesita
soportar
tipos
servicios
externos
terceras
partes
encuentran
calculadores
im-
puestos
servicios
autorización
pagos
sistemas
inventario
sistemas
con-
tabilidad
API
cambiada
solución
adir
nivel
indirecci
ón
objetos
adapten
distintas
interfaces
externas
interfaz
consistente
utiliza
aplicación
solución
ilustra
Figura
23.1
referencia
tangencial
política
China
pr
ctica
quiz
15
23
patrones
utilizan
frecuencia
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
323
Figura
23.1
patrón
Adaptador
anotarCuentaPorCobrar
PagoACredito
anotarVenta
Venta
AdaptadorMasterEnImpuestos
AdaptadorImpuestosPro
interface
IAdaptadorCalculadorDeImpuestos
getImpuestos(Venta
List
of
LineaDeImpuesto
adaptadores
utilizan
interfaces
polimorfismo
añadir
nivel
indirección
API
componentes
AdaptadorContabilidadSAP
anotarCuentaPorCobrar
PagoACredito
anotarVenta
Venta
AdaptadorContabilidadGranBoreal
anotarCuentaPorCobrar
PagoACredito
anotarVenta
Venta
interface
IAdaptadorInventario
solicitarAprobacion(PagoACredito
TerminalID
ComercianteID
getImpuestos(Venta
List
of
LineaDeImpuesto
getImpuestos(Venta
List
of
LineaDeImpuesto
interface
IAdaptadorContabilidad
interface
IAdaptadorServicioDeAutorizacionDeCredito
Arquitectura
Conexión
J2EE
adaptadores
servicios
externos
denominan
mane-
ra
específica
adaptadores
recursos
ilustra
Figura
23.2
instancia
adaptador
particular
ins-
tanciar
servicio
externo
elegido3
SAP
contabilidad
adaptar
so-
licitud
anotarVenta
interfaz
externa
interfaz
SOAP
XML
HTTPS
servicio
Web
intranet
ofrecido
SAP
Notaci—n
UML
Obs
rvese
Figura
23.2
piruli
interfaz
in
dicar
instancia
AdaptadorContabilidadSAP
implementa
interfaz
relevante
Polimorfismo
Indirecci
Variaciones
Protegidas
GRASP
aplicación
patrón
Adaptador
especialización
componentes
sicos
GRASP
Ofrece
Variaciones
Protegidas
cambios
interfaces
externas
paquetes
terceras
partes
objeto
Indirección
aplica
in-
terfaces
Polimorfismo
Nótese
analizar
patrones
complejos
especializados
fun-
ción
familia
GRASP
bsica
cientos
patrones
dise
publicados
aun-
til
studiarlos
acelerar
aprendizaje
entender
conceptos
sicos
subya-
centes
Variaciones
Protegidas
Acoplamiento
Polimorfismo
IndirecciónÉ
ayudan
abrirno
camino
trav
innumerable
detalle
alfabeto
esencial
cnica
dise
aplicar
Convenci
nombres
incluimos
nombre
patr
nombre
tipo
Nótese
nombres
tipos
incluyen
nombre
patrón
Adaptador
ste
estilo
relativamente
com
ventaja
comunicar
cilmente
leen
código
diagramas
patrón
dise
utilizar
23.2
Descubrimientos
an
lisis
dise
Modelo
Dominio
Observe
dise
Adaptador
Figura
23.1
operación
getImpuestos
de-
vuelve
lista
LineaDeImpuesto
reflexionar
investigar
profundidad
gestionar
impuestos
funcionan
calculadores
impuestos
dise
ador
asocia
lista
líneas
impuestos
venta
impue
sto
gobierno
central
impue
sto
gobierno
regional
etc
tera
exista
oportunidad
gobiernos
inventar
impuestos
324
UML
PATRONES
Figura
23.2
Utilización
adaptador
Registro
AdaptadorContabilidadSAP
anotarVenta
venta
realizarPago
Adaptador
adapta
interfaces
componentes
system
SAP
SOAP
HTTP
xxx
IAdaptadorContabilidad
Notación
UML
indicar
implementa
interfaz
particularAdem
clase
software
reci
creada
Modelo
Dise
concepto
dominio
normal
com
scubrir
concepto
dominio
rele
vantes
refinar
conocimiento
requisitos
dise
programaci
ón
desarrollo
iterativo
apoya
clase
descubrimiento
incrementalÑ
Debería
reflejarse
descubrimiento
Modelo
Dominio
Glosario
Modelo
Dominio
utilizar
futuro
fuente
in
spiración
tra-
dise
po
sterior
ayuda
visual
comunicar
conceptos
claves
dominio
til
adirlo
Figura
23.3
presenta
Modelo
Do-
minio
actualizado
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
325
Figura
23.3
Modelo
Dominio
parcial
actualizado
Venta
fecha
hora
Linea
DeVenta
cantidad
Contiene
LineaDe
Impuesto
descripcion
porcentaje
cantidad
Contiene
Mantenemos
Modelo
Dominio
Puntualizando
comentario
actualización
Modelo
Dominio
ob-
rvese
arquitectura
Modelo
Dise
normalmente
organizar
capa
discutir
detalle
capítulo
posterior
capas
cla-
ses
diseo
denominar
capa
dominio;e
sta
capa
contendr
clases
software
cuyos
nombres
estructuras
inspiraron
vocabulario
conceptos
dominio
Venta
LineaDeImpuesto
etc
tera
Sugerencia
iteraciones
Modelo
Dominio
fuente
inspi-
ración
clases
diseño
capa
dominio
Modelo
Diseño
dejar
utilidad
actualización
Modelo
Dominio
reflejar
cambios
Modelo
Diseño
deja
valor
práctico
piense
eliminarlo
únicamente
lleve
cabo
trabajo
ingeniería
inversa
herramienta
CASE
UML
generar
diagrama
clases
capa
dominio
clases
diseño
Modelo
Diseño
clases
software
lugar
clases
conceptuales
dominio
puras
reflejan
vocabulario
dominio
relevante
surgido
diseño
software
diagrama
clases
UML
clases
diseño
capa
dominio
Modelo
Diseño
aproximación
útil
Modelo
Dominio
favor
interprete
sugerimos
elimine
definitivamente
Modelo
Dominio
considere
merece
pena
mantenerlo
simplemente
documentación
generar
trabajo
conozca
alternativas
útiles
adaptador
recursos
oculta
sistema
externo
tambi
consi-
derado
objeto
Fachada
patrón
GoF
expondr
capítulo
puesto
envuelve
acceso
subsistema
sistema
nico
objeto
esencia
Fachada
nombre
adaptador
est
motivado
especialmente
objeto
envuelve
facilita
adaptación
diversas
interfaces
externas
23.3
Factor
GoF
adaptador
lugar
problema
di
solución
patr
ón
Adaptador
servicios
externos
diversas
interfaces
qui
crea
adap
tador
ómo
determinar
qu
cla
adaptador
crear
AdaptadorMasterE-
nImpuestos
AdaptadorImpuestosPro
crea
alg
objeto
dominio
responsabilidades
objetos
dominio
exceden
lógica
pura
aplicación
lculo
venta
entran
cuestiones
relacionadas
conexión
componentes
software
externos
punto
subraya
principio
dise
fundamental
normalmente
considerado
principio
dise
arquitectura
di
mantener
separacin
inte-
reses
separation
of
concerns
divida
módulos
separe
intereses
distintos
rea
propósito
cohesivo
ejemplo
capa
dominio
objetos
software
destaca
responsabilidades
centradas
re-
lativamente
lógica
aplicación
grupo
objetos
responsable
cuestiones
conectividad
sistemas
externos
elecci
ón
objeto
dominio
Registro
crear
adaptadores
est
objetivo
separación
intereses
disminuye
cohesión
Notaci—n
UML
Observe
estilo
diagrama
UML
Figura
23.4
incluye
nota
mue
stra
seudocódigo
detallado
getAdaptadorCalculadorDeIm-
puestos
estilo
permite
incluir
detalles
din
mico
algoritmos
dia-
gramas
clases
est
tico
disminuir
necesidad
utilizar
dia-
gramas
interacción
alternativa
típica
caso
aplicar
patr
ón
Factor
Factor
Con-
creta
define
objeto
Fabricación
Pura
factor
ía
crear
objetos
objetos
factoría
ventajas
Separan
responsabilidad
creación
compleja
objetos
apoyo
helper
cohesivos
Ocultan
lógica
creación
potencialmente
compleja
Permiten
introducir
estrategias
mejorar
rendimiento
gestión
me-
moria
objetos
cach
reciclaje
326
UML
PATRONES
Patrones
RelacionadosFactoría
Concreta
Factory
Contexto
Problema
responsable
creación
objetos
considera-
ciones
especiales
lógica
creación
compleja
deseo
separar
res-
ponsabilidades
creación
mejorar
cohesión
etcétera
Solución
Crear
objeto
Fabricación
Pura
denominado
Factoría
maneje
creación
solución
Factoría
ilustra
Figura
23.4
Nótese
FactoriaDeServicios
lógica
decidir
qu
clase
crea
re-
suelve
leyendo
nombre
clase
fuente
externa
ejemplo
propiedad
sistema
utiliza
Java
despu
carga
clase
din
mica
mente
ste
ejemplo
diseo
irigido
datos
parcial
dise
Variaciones
Protegidas
cambios
cla
implementación
adaptador
cambiar
código
fuente
clase
factoría
crear
instancias
clases
adaptador
cambiando
valor
propiedad
asegurando
clase
visible
ruta
clases
Java
cargarse
accede
factorías
patrón
Singleton4
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
327
Figura
23.4
patrón
Factoría
FactoriaDeServicios
adaptadorContabilidad
IAdaptadorContabilidad
adaptadorInventario
IAdaptadorInventario
adaptadorCalculadorDeImpuesto
IAdaptadorCalculadorDeImpuestos
getAdaptadorContabilidad
IAdaptadorContabilidad
getAdaptadorInventario
IAdaptadorInventario
getAdaptadorCalculadorDeImpuestos
IAdaptadorCalculadorDeImpuestos
observe
factoría
devuelven
objetos
tipo
interfaz
lugar
clase
factoría
devolver
implementación
interfaz
if
adaptadorCalculadorDeImpuestos
null
//un
enfoque
basado
reflexión
dirigido
datos
encontrar
clase
//correcta
leerla
propiedad
externa
String
nombreClase
System.getProperty("calculadorimpuestos.class.name
adaptadorCalculadorDeImpuestos
IAdaptadorCalculadorDeImpuestos
Class.forName(nombreClase).newInstance
return
adaptadorCalculadorDeImpuestos
N.
T.
patrones
traducido
nombre
patrón
diferencia
Factoría
Adaptador
normalmente
utiliza
nombre
original
ingl
expresión
oral
escrita
castellano
Patrones
Relacionados23.4
Singleton
GoF
FactoriaDeServicios
surge
problema
dise
qui
crea
factoría
accede
lugar
observe
necesita
instancia
factoría
pro-
ceso
pida
reflexión
sugiere
factoría
ne-
cesitar
invoquen
sitios
código
puesto
lugares
necesita
acceder
adaptadores
solicitar
servicios
externos
exis-
problema
visibilidad
ómo
visibilidad
nica
in
stancia
FactoriaDeServicios
solución
pasar
instancia
FactoriaDeServicios
par
metro
quiera
descubra
necesita
visible
inicializar
objetos
ne-
cesitan
factoría
visible
referencia
permanente
conveniente
alternativa
patrón
Singleton
Ocasionalmente
conveniente
mantener
visibilidad
global
nico
punto
ac
ceso
nica
in
stancia
clase
lugar
forma
visibilidad
cumple
instancia
FactoriaDeServicios
Singleton
Contexto
Problema
admite
exactamente
instancia
clase
singleton
objetos
ne-
cesitan
único
punto
acceso
global
Solución
Defina
método
estático
clase
devuelva
singleton
ejemplo
Figura
23.5
muestra
implementación
patrón
Singleton
idea
clave
clase
defina
est
tico
getInstancia
proporciona
nica
in
stancia
X.
enfoque
desarrollador
visibilidad
global
instancia
nica
st
tico
cla
getInstancia
vemos
ejemplo
public
class
Registro
public
void
inicializar
alg
trabajo
//acceso
Factor
Singleton
llamada
getInstancia
adaptadorContabilidad
FactoriaDeServicios.getInstancia().getAdaptadorContabilidad
328
UML
PATRONES
alg
trabajo
Puesto
visibilidad
clases
blica
alcance
global
mayoría
lenguajes
punto
código
clase
escribir
ClaseSingleton.getInstancia
obtener
visibilidad
instan-
cia
singleton
entonce
enviarle
men
saje
ClaseSingleton.getInstan-
cia().hacerFoo
difícil
superar
emoción
capaces
hacerFoo
globalmente
Abreviatura
UML
acceso
Singleton
diagramas
interacci
notación
UML
implica
muestra
explícitamenteÑ
mensaje
getIns-
tancia
diagrama
interacción
adir
stereotipo
singleton
in
stancia
Figura
23.6
enfoque
evita
mostrar
explícitamente
mensa-
je
inter
getInstancia
clase
enviar
mensaje
instancia
singleton
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
329
Figura
23.5
patrón
Singleton
clase
FactoriaDeServicios
FactoriaDeServicios
instancia
FactoriaDeServicios
adaptadorContabilidad
IAdaptadorContabilidad
adaptadorInventario
IAdaptadorInventario
adaptadorCalculadorDeImpuestos
IAdaptadorCalculadorDeImpuestos
getInstancia
FactoriaDeServicios
getAdaptadorContabilidad
IAdaptadorContabilidad
getAdaptadorInventario
IAdaptadorInventario
getAdaptadorCalculadorDeImpuestos
IAdaptadorCalculadorDeImpuestos
atributo
estático
singleton
metodo
estático
singleton
//m
estático
public
static
synchronized
FactoriaDeServicios
getInstancia
if
instancia
null
instancia
new
FactoriaDeServicios
return
instancia
Notación
UML
rectángulo
clase
atributo
subrayado
indica
miembro
estático
nivel
clase
lugar
miembro
instancia
Notación
UML
utilizar
opcionalmente
indicar
creará
instancia
singleton)Cuestiones
dise
implementaci
invoca
frecuencia
getInstancia
Singleton
aplica-
ciones
hilos
ejecución
etapa
creación
lógica
inicializacin
perezosa
lazy)e
sección
crítica
requiere
control
concurrencia
hilo
asumiendo
instancia
inicializa
perezosa
habitual
en-
volver
control
concurrencia
Java
ejemplo
public
static
synchronized
FactoriaDeServicios
getInstancia
if
instancia
null
//secci
cr
tica
aplicaci
hilos
instancia
new
FactoriaDeServicios
return
instancia
propósito
inicialización
perezosa
preferible
inicializacin
im-
paciente
eager
ejemplo
public
class
FactoriaDeServicios
//inicializaci
impaciente
private
static
FactoriaDeServicios
instancia
new
FactoriaDeServicios
public
static
FactoriaDeServicios
getInstancia
return
instancia
//otros
preferible
enfoque
inicializaci
ón
perezosa
meno
ra-
zones
evita
trabajo
creación
quiz
retener
recursos
caro
ac-
cede
instancia
inicialización
perezosa
getInstancia
contiene
lógica
crea-
ción
compleja
condicional
pregunta
típica
implementación
Singleton
qu
to
servicios
est
icos
clase
lugar
utilizar
objeto
instancia
instancia
ejemplo
qu
pasa
adimo
est
ico
denominado
getAdaptadorContabilidad
FactoriaDeServicios
normalmente
preferible
utilizar
instancia
instancia
es-
tos
motivos
330
UML
PATRONESLos
instancia
permiten
definan
subclases
refinan
clase
singleton
est
tico
polimórficos
virtual
mayoría
lenguajes
Smalltalk
redefinir
subclases
mayoría
mecanismos
comunicación
remota
orientada
objetos
ejemplo
RMI
Java
soportan
activación
remota
ins-
tancia
est
tico
s.
activar
remota
in
s-
tancia
singleton
raramente
clase
singleton
contextos
aplicación
aplicación
singleton
multi
-tonelada
aplicación
Tambi
habitual
comenzar
dise
pen
sando
sin-
gleton
descubrir
necesitan
ltiple
instancias
proce-
so
solución
basada
instancia
flexible
patrón
Singleton
utiliza
objetos
Factoría
Fachada
patrón
GoF
presentar
23.5
Conclusiones
problema
servicios
externos
diversas
interfaces
utilizado
combinación
patrones
Adaptador
Factoría
Singleton
proporcionar
Variaciones
Protegidas
diversas
interfaces
calculadores
impuestos
externos
sistemas
contabilidad
etc
tera
Figura
23.7
ilustra
contexto
amplio
utilización
patrones
realización
caso
dise
podr
ía
ideal
mejorar
objeti-
vos
intenta
caso
estudio
demostrar
construir
dise
conjunto
principio
patrones
compo
nentes
sicos
enfoque
metódico
cabo
explicar
di-
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
331
Registro
singleton
FactoriaDeServicios
ac:=getAdaptadorContabilidad
inicializar
estereotipo
UML
indicar
consiguió
visibilidad
instancia
patrón
Singleton
Patrones
Relacionados
Figura
23.6
Mensaje
implícito
patrón
Singleton
getInstancia
indica
UML
estereotipo.se
o.
Espero
sinceramente
surge
dise
Figura
23.7
ra-
zonando
base
Controlador
Creador
Variaciones
Protegidas
Acoplamiento
Alta
Cohesión
Indirección
Polimorfismo
Adaptador
Factoría
Singleton
Nótese
conci
so
di
ador
conver
sación
docu
mentación
conocimiento
com
patrones
re
solver
problema
diversas
interfaces
servicios
externos
uti-
lizar
Adaptadores
generados
Factoría
Singleton
realidad
dise
adore
objetos
conversaciones
tipo
utilizando
patrones
nombres
patrones
eleva
nivel
abstracción
comunicación
diseo
23.6
Estrategia
GoF
problema
di
re
solver
proporcionar
ógica
compleja
fijar
precios
scuentos
ía
tienda
s-
cuentos
personas
mayores
etc
tera
estrategia
fijación
precios
llamarse
tambi
regla
política
al-
goritmo
venta
variar
periodo
10%
descuento
ventas
despu
descuento
10
venta
su-
perior
200
variaciones
ómo
dise
amo
diversos
algoritmos
fijación
precios
332
UML
PATRONES
Figura
23.7
Patrones
Adaptador
Factoría
Singleton
aplicados
diseo
Registro
adaptadorContabilidad
AdaptadorContabilidadSAP
anotarVenta
venta
realizarPago
system
SAP
SOAP
HTTP
xxx
IAdaptadorContabilidad
create(dineroEntregado
Pago
Tienda
singleton
FactoriaDeServicios
adaptadorContabilidad:=
getAdaptadorContabilidad
create
Adaptador
ContabilidadSAP
IAdaptadorContabilidad
create
Registro
instancia
null
create()Estrategia
Strategy
Contexto
Problema
diseñar
diversos
algoritmos
políticas
relacionadas
diseñar
algoritmos
políticas
puedan
cambiar
Solución
Defina
algoritmo
política
estrategia
clase
independiente
interfaz
común
Puesto
comportamiento
fijación
precios
varía
seg
strategia
al-
goritmo
creamos
ltiple
clases
EstrategiaFijarPreciosVenta
polimórfico
getTotal
Figura
23.8
getTotal
pasa
pa-
metro
objeto
Venta
objeto
estrategia
fijación
precios
encontrar
precio
descuento
Venta
aplicar
despu
regla
descuento
implementaci
ón
getTotal
EstrategiaFijar-
PreciosPorcentajeDescuento
aplicar
descuento
porcentaje
su-
cesivamente
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
333
Figura
23.8
Clases
Estrategia
fijación
precios
EstrategiaFijarPrecios
PorcentajeDescuento
porcentaje
float
EstrategiaFijarPrecios
DescuentoAbsoluto
SobreUmbral
descuento
Dinero
umbral
Dinero
interface
IEstrategiaFijarPreciosVenta
getTotal(Venta
Dinero
return
v.getTotalAntesDto
porcentaje
EstrategiaFijarPrecios
tad:=v.getTotalAntesDto
if
tad
umbral
return
tad
else
return
tad
descuento
getTotal(v
Venta
Dinero
getTotal(v
Venta
Dinero
objeto
estrategia
conecta
objeto
contexto
objeto
aplica
algoritmoÑ
ejemplo
objeto
contexto
Venta
envía
mensaje
getTotal
Venta
delega
trabajo
objeto
estrategia
ilus-
tra
Figura
23.9
necesario
mensaje
envía
objeto
contexto334
UML
PATRONES
Figura
23.9
Estrategia
colaboración
EstrategiaFijarPrecios
PorcentajeDescuento
IEstrategiaFijarPreciosVenta
Venta
st
getSubtotal
t:=
getTotal
SalesLineItem
LineaDeVenta
getTotal
tad
getTotalAntesDto
tad
porcentaje
Observe
pasa
Venta
Estrategia
visibilidad
parámetro
futuras
colaboraciones
objeto
estrategia
tengan
nombre
ejemplo
ejemplo
get-
getTotal
normal
habitual
normal
mente
necesarioÑ
objeto
contexto
pase
referencia
smo
this
ob-
jeto
estrategia
strategia
vi
sibilidad
par
metro
objeto
contexto
futuras
colaboraciones
Obs
rvese
objeto
contexto
Venta
necesita
visibilidad
atributo
estrategia
refleja
DCD
Figura
23.10
Figura
23.10
objetos
contexto
necesitan
visibilidad
atributo
estrategia
EstrategiaFijarPrecios
PorcentajeDescuento
porcentaje
float
getTotal
Venta
Dinero
EstrategiaFijarPrecios
DescuentoAbsoluto
SobreUmbral
descuento
Dinero
umbral
Dinero
getTotal
Venta
Dinero
interface
IEstrategiaFijarPreciosVenta
getTotal
Venta
Dinero
Venta
fecha
getTotal
Venta
necesita
visibilidad
atributo
Estrategia
estrategiaFijarPrecios
getTotal
return
estrategiaFijarPrecios.getTotal
this
Creaci
Estrategia
Factor
algoritmo
strategias
fijaci
ón
precio
cambian
tiempo
Qui
deber
ía
crear
estrategia
enfoque
directo
aplicar
pa-
trón
Factoría
FactoriaDeEstrategiasFijarPrecios
responsable
crear
strategias
algoritmo
pol
íticas
conectable
cambiante
necesitan
aplicaci
ón
FactoriaDeServicios
leer
nombre
clase
implementación
estrategia
fijación
precios
propiedad
sistema
fuente
datos
externa
despu
crear
instancia
dise
dirigido
datos
parcial
dise
reflexivo
cambiar
di-
micamente
momento
mientra
est
ejecutando
aplicaci
ón
PDV
NuevaEraÑ
política
fijación
precios
especificando
creación
cla-
Estrategia
Obs
rvese
utiliza
factoría
estrategias
FactoriaDeServicios
ajusta
objetivo
Alta
Cohesión
factoría
est
cen-
trada
cohesiva
creación
familia
objetos
relacionadosÑ.
Notaci—n
UML
:O
bserve
Figura
23.10
referencia
asociación
directa
interfaz
IEstrategiaFijarPreciosVenta
clase
concreta
indica
atributo
referencia
Venta
declarar
rminos
interfaz
cla-
atributo
ligar
implementación
interfaz
Nótese
pol
ítica
fijaci
ón
precio
cambia
frecuencia
hora
conveniente
almacenar
instancia
estrategia
creada
campo
FactoriaDeEstrategiasFijarPrecios
crear
leyendo
propiedad
externa
obtener
nombre
clase
instanciando
estrate-
gia
mayoría
factorías
FactoriaDeEstrategiasFijarPrecios
singleton
instancia
acceder
patrón
Singleton
Figura
23.11
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
335
Figura
23.11
Factoría
estrategias
FactoriaDeEstrategiasFijarPrecios
instancia
FactoriaDeEstrategiasFijarPrecios
getInstancia
FactoriaDeEstrategiasFijarPrecios
getEstrategiaFijarPreciosVenta
IEstrategiaFijarPreciosVenta
getEstrategiaFijarPreciosMayores
IEstrategiaFijarPreciosVenta
String
nombreClase
System.getProperty("estrategiafijarpreciosventa.class.name
estrategia
IEstrategiaFijarPreciosVenta
Class.forName(nombreClase).newInstance
return
estrategia
crea
instancia
Venta
pedir
factoría
estrategia
fi-
jación
precios
muestra
Figura
23.12
336
UML
PATRONES
Figura
23.12
Creación
estrategia
Venta
singleton
FactoriaDeEstrategiasFijarPrecios
ep
getEstrategiaFijarPreciosVenta
Registro
create
create(porcentaje
ep
EstrategiaFijarPrecios
PorcentajeDescuento
IEstrategiaFijarPreciosVenta
crearNuevaVenta
Lectura
inicializaci
valor
porcentaje
Finalmente
problema
dise
ignorado
encontrar
valores
porcentajes
descuentos
absolutos
ejemplo
valor
porcentaje
EstrategiaFijarPreciosPorcentajeDescuento
10%
lune
20%
martes
Nótese
tambi
porcentaje
scuento
relacionado
tipo
comprador
persona
lugar
periodo
tiempo
mero
almacenar
alg
almac
dato
externo
base
datos
relacional
cambiar
cilmente
qu
objeto
leer
segurar
asignan
estrategia
opción
razonable
Factoria-
DeEstrategias
puesto
crea
estrategia
fijar
precios
cu
porcentaje
leer
almac
datos
scuento
actual
almac
descuento
personas
mayores
etc
tera
diseo
lectura
mero
procedentes
almacenamientos
datos
externos
varían
simples
complejos
simple
lla-
mada
SQL
JDBC
ejemplo
utilizan
tecnologías
Java
colaboración
objetos
aden
niveles
indirección
ocultar
localización
concreta
lenguaje
consulta
datos
tipo
almac
datos
an
li
sis
puntos
varia-
ción
evolución
almac
datos
revelar
necesario
proteja
variaciones
ejemplo
podríamos
preguntar
cómodos
compromiso
plazo
utilizar
base
datos
relacional
entienda
SQL
suficiente
simple
llamada
JDBC
FactoriaDeEstrategias
Resumen
patrones
Estrategia
Factoría
conseguido
Variaciones
Protegidas
res-
pecto
políticas
fijar
precios
varían
din
micamente
Estrategia
fun-
damenta
Polimorfismo
interfaces
permitir
algoritmos
conectables
dise
objeto
s.
patrón
Estrategia
basa
Polimorfismo
proporciona
Variaciones
Protegi-
das
algoritmos
cambian
Estrategias
normalmente
crean
Factoría
23.7
Composite
GoF
principios
dise
surge
interesante
problema
requisitos
dise
ómo
gestiona-
mos
caso
políticas
contradictorias
fijación
precios
ejemplo
su-
ponga
tienda
lunes
vigor
siguientes
políticas
Política
descuento
20%
personas
mayores
Descuento
15%
compras
superiores
400
clientes
preferentes
lunes
50%
descuento
compras
superiores
500
Comprando
caja
Darjeeling
obtiene
15%
scuento
Suponga
persona
tambi
cliente
preferente
compra
caja
Darjeeling
600
hamburguesas
vegetales
claramente
vegetariano
entu-
siasta
encanta
chai
Qu
pol
ítica
fijación
precios
debería
aplicar
Explic
ndolo
claramente
estrategias
fijación
precios
co-
nectan
venta
dependen
factores
Periodo
tiempo
lunes
Tipo
cliente
persona
producto
concreto
Darjeeling
punto
aclarar
políticas
ejemplo
reali-
dad
simplemente
estrategias
porcentaje
scuento
simplifica
perspectiva
problema
respuesta
problema
requiere
defina
estrategia
reso-
lucin
co
nflictos
tienda
Normalmente
tienda
aplica
cliente
precio
estrategia
resolución
conflictos
obli-
gatorio
cambiar
ejemplo
periodo
dificultades
financieras
tienda
verse
obligada
utilizar
estrategia
resolución
conflictos
pre
cio
alto
punto
exi
stir
ltiple
estrategias
coe-
xistiendo
tiempo
venta
asociadas
estrategias
fijar
precio
punto
stacar
strategia
fijación
precios
relacionada
tipo
cliente
ejemplo
per
sona
afecta
dise
creaci
ón
FactoriaDeEstrategias
tipo
clien-
momento
creación
estrategia
fijación
precios
cliente
An
logamente
strategia
fijación
precios
relacionada
tipo
producto
compra
ejemplo
Darjeeling
tie-
ne
implicaciones
dise
creaci
ón
FactoriaDeEstrategias
EspecificacionDelProducto
momento
creación
estrategia
fijación
precios
influenciada
producto
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
337
N.
T.
traducido
motivo
caso
patrón
Singleton
Patrones
Relacionados338
UML
PATRONES
Figura
23.13
patrón
Composite
EstrategiaFijarPrecios
ProcentajeDescuento
porcentaje
float
getTotal
Venta
Dinero
EstrategiaFijarPrecios
DescuentoAbsoluto
SobreUmbral
descuento
Dinero
umbral
Dinero
getTotal
Venta
Dinero
interface
IEstrategiaFijarPreciosVenta
getTotal
Venta
Dinero
return
venta.getTotalAntesDto
porcentaje
Estrategia
CompuestaFijarPrecios
añadir(IEstrategiaFijarPreciosVenta
getTotal
Venta
Dinero
menorTotal
INTEGER.MAX
for
each
IEstrategiaFijarPreciosVenta
estrat
in
estrategiasFijarPrecio
estrat.getTotal(venta
menorTotal
min
menorTotal
return
menorTotal
EstrategiaCompuestaFijar
PreciosLoMejorParaElCliente
getTotal
Venta
Dinero
estrategiasFijarPrecios
objetos
compuestos
mantienen
lista
estrategias
contienen
define
superclase
común
EstrategiaCom-
puestaFijarPrecios
defina
lista
denominada
estrategiasFijarPrecios
Venta
fecha
getTotal
estrategiaFijarPrecios
return
estrategiaFijarPrecios.getTotal(this
getTotal
Venta
Dinero
EstrategiaCompuestaFijar
PreciosLoMejorParaLaTienda
forma
cambiar
dise
objeto
Venta
conozca
est
tratando
estrategias
ofrecer
tambi
dise
resolución
conflictos
patrón
Composite
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
339
Composite
Contexto
Problema
tratar
grupo
estructura
compuesta
polimórficamente
objeto
compuesto
atómico
Solución
Defina
clases
objetos
compuestos
atómicos
implementen
interfaz
ejemplo
clase
denominada
EstrategiaCompuestaFijarPreciosLoMe-
jorParaElCliente
descriptivo
implementar
IEstrate-
giaFijarPreciosVenta
contiene
objetos
IEstrategiaFijarPreciosVenta
Figura
23.13
explica
detalle
idea
diseo
Observe
ste
dise
cla
compuesta
EstrategiaCompuesta-Fijar-
PreciosLoMejorParaElCliente
hereda
atributo
estrategiasFijarPrecios
contiene
lista
objetos
IEstrategiaFijarPreciosVenta
sta
característica
distintiva
objeto
compuesto
objeto
compuesto
externo
contiene
lista
objetos
in-
ternos
objetos
externos
internos
implementan
interfaz
clase
compuesta
implementa
interfazIEstrategiaFijarPreciosVenta
conectar
objeto
Venta
objeto
EstrategiaCompues-
taFijarPreciosLoMejorParaElCliente
contiene
estrategias
objeto
atómico
EstrategiaFijarPreciosPorcentajeDescuento
Venta
conoce
preocupa
estrategia
fijación
precios
atómica
compuesta
parecen
iguales
objeto
VentaÑ.
simplemente
objeto
implementa
interfaz
IEstrategiaFijarPreciosVenta
entiende
mensaje
getTotal
Figura
23.14
EstategiaCompuestaFijarPrecios
LoMejorParaElCliente
IEstrategiaFijarPreciosVenta
Venta
st
getSubtotal
getTotal
SalesLineItem
LineaDeVenta
getTotal
objeto
Venta
Estrategia
Compuesta
contiene
estrategias
exactamente
IEstrategiaFijarPreciosVenta
getTotal
SalesLineItem
Object
notación
UML
sta
forma
marcar
objetos
implementan
interfaz
declarar
clase
concreta
implementa
min(set
of
all
IEstrategiaFijarPreciosVenta
Figura
23.14
Colaboración
Composite
Notaci—n
UML
Figura
23.14
nótese
favor
indicar
objetos
implementan
interfaz
preocupa
especificar
clase
imple-
mentación
exacta
Simplemente
especificando
clase
implementación
Object
comentarios
acerca
clase
específica
sta
necesidad
habitual
elaboración
diagramas
continuación
definimos
EstrategiaCompuestaFijarPrecios
sub-
clases
aclarar
explicación
muestra
código
Java
//superclase
subclases
heredan
List
estrategias
public
abstract
class
EstrategiaCompuestaFijarPrecios
implements
IEstrategiaFijarPreciosVenta
protected
List
estrategiasFijarPrecios
new
ArrayList
public
adir(IEstrategiaFijarPreciosVenta
estrategiasFijarPrecios.add(e
public
abstract
Dinero
getTotal
Venta
//final
clase
//Una
Estrategia
Compuesta
devuelve
peque
//de
instancias
EstrategiaFijarPreciosVenta
internas
public
class
EstrategiaCompuestaFijarPreciosLoMejorParaElCliente
extends
EstrategiaCompuestaFijarPrecios
public
Dinero
getTotal(Venta
venta
Dinero
menorTotal
new
Dinero
Integer
MAX_VALUE
//iteramos
estrategias
internas
for
Iterator
estrategiasFijarPrecios.iterator
i.hasNext
IEstrategiaFijarPreciosVenta
estrategia
IEstrategiaFijarPreciosVenta)i.next
Dinero
estrategia.getTotal(venta
menorTotal
total.min(menorTotal
return
menorTotal
//final
clase
340
UML
PATRONESNotaci—n
UML
Figura
23.13
introduce
notación
UML
representar
jerarquías
clases
herencia
explica
Figura
23.15
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
341
Figura
23.15
Superclases
abstractas
abstractos
herencia
UML
EstrategiaCompuesta
FijarPrecios
añadir(IEstrategiaFijarPreciosVenta
getTotal(Venta):Dinero
EstrategiaCompuestaFijar
PreciosLoMejorParaElCliente
getTotal(Venta
Dinero
EstrategiaCompuestaFijar
PreciosLoMejorParaLaTienda
Notación
UML
clase
abstracta
representa
nombre
cursiva
abstractos
tambi
muestran
cursiva
Notación
UML
subclases
herencia
representan
línea
sólida
punta
flecha
apunta
superclase
subclase
getTotal(Venta
Dinero
Creaci
ltiples
instancias
EstrategiaFijarPreciosVenta
patrón
Composite
creado
grupo
contradictorias
es-
trategias
fijación
precios
Venta
aparecen
nica
strategia
objeto
compuesto
contiene
grupo
tambi
implementa
interfaz
IEstrategia-
FijarPreciosVenta
desafiante
interesante
problema
diseo
cu
ndo
creamo
estrategias
diseo
eseable
comenzar
creando
Composite
contenga
políticas
descuento
tienda
momento
actual
0%
descuento
activa
EstrategiaFijarPreciosPorcentajeDescuento
pa
so
po
sterior
scenario
scubre
aplicar
strategia
fijar
precios
descuento
personas
mayores
adir
cilmente
objeto
compue
sto
utilizando
heredado
EstrategiaCompuestaFijarPrecios
aa
dir
puntos
escenario
agregar
objeto
compuesto
estrategias
fijación
precios
scuento
actual
nivel
tienda
ade
crea
venta
scuento
tipo
cliente
ade
informa
PDV
tipo
cliente
scuento
seg
tipo
producto
compra
Darjeeling
obtendr
descuento
15%
venta
ade
introduce
producto
venta
dise
ca
so
muestra
Figura
23.16
dise
original
discutió
anteriormente
nombre
clase
estrategia
instanciar
leer
propiedad
sistema
valor
porcentaje
leer
des-
almacenamiento
datos
externo
342
UML
PATRONES
Figura
23.16
Creación
estrategia
compuesta
Venta
Registro
añadir
IEstrategiaFijarPreciosVenta
create(porcentaje
crearNueva
Venta
ep
EstrategiaCompuestaFijar
PreciosLoMejorParaElCliente
ep
getEstrategia
FijarPreciosVenta
create
singleton
FactoriaDeEstrategiasFijarPrecios
create
EstrategiaFijarPrecios
PorcentajeDescuento
caso
descuento
seg
tipo
cliente
lugar
recorde-
mos
extensión
caso
identificó
anteriormente
requisito
Caso
UC1
Procesar
Venta
Extensiones
Flujos
Alternativos
5b
Cliente
aplicables
descuentos
ej.
empleado
cliente
preferente
Cajero
señala
petición
descuento
Cajero
introduce
identificación
Cliente
Sistema
presenta
descuento
basado
reglas
descuento
indica
operaci
ón
sistema
sistema
PDV
adem
crearNuevaVenta
introducirArticulo
inalizarVenta
realizarPago
Llamaremos
quinta
operación
sistema
introducirClienteParaDescuento
opcionalmente
po-
dría
lugar
despu
operación
finalizarVenta
implica
deber
in
troducir
alg
tipo
identificaci
ón
cliente
trav
interfaz
suario
clienteID
Quiz
capturarse
lector
tarjetas
trav
teclado
dise
ste
caso
muestra
Figuras
23.17
23.18
sor-
prende
objeto
factoría
responsable
creación
estrategia
fijación
precios
adicional
crear
EstrategiaFijarPreciosPorcentajeDescuento
represente
ejemplo
descuento
personas
mayores
di-DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
343
Figura
23.17
Creación
estrategia
fijación
precios
descuento
clientes
Controlador
Experto
IDs
Objetos
Experto
Registro
introducirClienteParaDescuento(clieID
Tienda
getCliente(clieID
introducirClienteParaDescuento(c
Cliente
Venta
continúa
diagrama
Experto
Experto
patrones
Factoría
Alta
Cohesión
Venta
introducirCliente
ParaDescuento(c
Cliente
procede
diagrama
singleton
FactoriaDeEstrategias
FijarPrecios
añadirEstrategia
FijarPreciosCliente(v
getCliente
ep
getEstrategia
FijarPrecios
IEstrategiaFijarPreciosVenta
IEstrategiaFijarPreciosVenta
ep
EstrategiaCompuestaFijar
PreciosLoMejorParaElCliente
Paso
Objeto
Agregado
Parámetro
pct
getPorcentaje
Cliente(c
Alta
Cohesión
create(pct
añadir(e
Factoría
Composite
EstrategiaFijarPrecios
PorcentajeDescuento
Figura
23.18
Creación
estrategia
fijación
precios
descuento
clientes
2.se
creaci
ón
original
elección
clase
leer
propiedad
sis-
tema
porcentaje
específico
tipo
cliente
proporcionar
Va-
riaciones
Protegidas
cambios
clases
valores
Nótese
virtud
patrón
Composite
Venta
conectadas
estrategias
con-
tradictorias
fijación
precios
pareciendo
nica
strategia
ob-
jeto
Venta
Notaci—n
UML
Figuras
23.17
23.18
muestran
importante
idea
UML
diagramas
interacción
división
diagrama
legible
Consideraci
patrones
GRASP
principios
dise
Revisemos
razonamiento
función
patrones
GRASP
sicos
caso
qu
env
ía
Registro
mensaje
FactoriaDeEstrate-
giasFijarPrecios
crear
estrategia
fijación
precios
pas
rsela
en-
tonces
Venta
motivos
mantener
Acoplamiento
Venta
est
acoplada
factoría
Registro
tambi
colabore
incre-
mentaríamos
acoplamiento
dise
o.
Adem
Venta
Experto
Informa-
ción
conoce
estrategia
actual
fijación
precios
modificar
lue-
go
seg
Experto
est
stificado
delegue
Venta
Obs
rvese
dise
clienteID
transforma
objeto
Cliente
pregun-
tando
Registro
Tienda
Cliente
ID
lugar
jus-
tificar
otorgue
Tienda
responsabilidad
getCliente
Ex-
perto
Informaci
ón
objetivo
salto
repre
sentación
reducido
Tienda
Clientes
Registro
pregunta
Tienda
Re-
gistro
visibilidad
atributo
Tienda
trabajo
dise
previo
Venta
tuviera
preguntar
Tienda
Venta
necesitaría
referencia
Tien-
incrementaría
acoplamiento
all
niveles
actuales
mantendría
Acoplamiento
Transformaci
IDs
objetos
qu
tran
sformar
clienteID
ID
quiz
meroÑ
objeto
Cliente
sta
pr
ctica
habitual
di
objeto
tran
sformar
claves
identificadores
IDs
cosas
verdaderos
objetosÑ
transforma-
ción
lugar
spu
introduzca
ID
clave
capa
do
minio
Modelo
Dise
sde
capa
UI
nombre
patrón
po-
dría
candidato
puesto
estilo
habitual
dise
adore
objetos
experiencia
quiz
IDs
ObjetosÑ
qu
preocupar
aut
ntico
objeto
Cliente
encapsula
conjunto
informaci
ón
cliente
comportamiento
relacionado
Experto
Información
ejem-
plo
frecuencia
vuelve
beneficioso
flexible
crece
dise
inclu
so
dise
ador
crey
necesario
objeto
pensó
cambio
simple
mero
suficiente
Nótese
dise
inicial
transformación
ar-
ticuloID
objeto
EspecificacionDelProducto
ejemplo
patrón
IDs
Objetos
344
UML
PATRONESPaso
objetos
agregados
par
metros
Finalmente
ob
serve
men
saje
aa
dirEstrategiaFijarPrecioCliente(v
Venta
pasamos
Venta
factoría
factoría
vuelve
pregunta
Venta
Cliente
EstrategiaFijarPrecios
qu
extraer
exactamente
objetos
Venta
lugar
ante-
rior
pasar
factoría
Cliente
EstrategiaFijarPrecios
respuesta
estilo
dise
objeto
típico
evitar
extraer
objetos
hijos
objeto
padre
agregado
pasar
objetos
hijos
pase
objeto
agregado
contiene
hijos
principio
incrementa
flexibilidad
factoría
pue-
colaborar
Venta
completa
maneras
habíamos
anticipado
fueran
necesarias
previamente
normal
corolario
reduce
necesidad
anticipar
necesita
objeto
factoría
dise
ador
pasa
exactamente
Venta
com-
pleta
objetos
específicos
necesitar
factoría
estilo
nombre
est
relacionado
Acoplamiento
Variaciones
Prote-
gidas
Quiz
llamarse
patrón
Paso
Objetos
Agregados
Par
metr
o.
Resumen
problema
diseo
extraído
consejos
dise
objeto
s.
dise
ador
objetos
experto
incorporado
memoria
patrones
es-
tudiando
explicaciones
publicado
similado
principios
funda-
mentales
describen
familia
GRASP
favor
obs
rvese
explicación
Composite
familia
Estrategias
patrón
Composite
aplicar
tipos
objetos
estrategias
ejemplo
habitual
creen
macro
command
com-
mands
contienen
command
sÑ
so
Compo
site
patr
ón
Command
describir
cap
ítulo
posterior
Ejercicios
Propuestos
Ejercicio
compra
producto
específico
lugar
descuento
venta
completa
ejemplo
compró
té
Darjeeling
15%
descuento
venta
Ejercicio
políticas
fijación
precios
considerado
momento
aplican
venta
denominan
descuentos
nivel
tran-
sacción
reto
diseño
interesante
gestionar
descuentos
líneas
venta
ejemplo
Comprando
trajes
obtenga
gratis
Comprando
ordenadores
obtenga
descuento
50%
impresora
Y.
forma
elegante
diseñar
objetos
Estrategia
patr
ón
Compo
site
utiliza
normalmente
patrone
Estrategia
Command
Composite
basa
Polimorfismo
proporciona
Variaciones
Prote-
gidas
clientes
afecta
objeto
relacionan
atómico
compuesto
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
345
Patrones
Relacionados23.8
Fachada
GoF
requisito
elegido
iteración
soporte
reglas
negocio
co-
nectables
puntos
predecibles
escenarios
lugar
crearNuevaVenta
introducirArticulo
caso
Procesar
Venta
ca-
jero
comienza
vender
distintos
clientes
deseen
comprar
PDV
NuevaEra
gustaría
adaptar
ligeramente
comportamiento
precisos
asuma
desea
reglas
puedan
invalidar
acción
ejemplo
Suponga
crea
venta
identificar
pagar
vale-regalo
habitual
tienda
regla
permitir
compre
nico
art
ículo
utiliza
vale-regalo
consecuencia
deberían
invalidarse
operaciones
introducirAr-
ticulo
sigan
paga
venta
vale-regalo
invalidan
tipos
devo-
luciones
dinero
cliente
vale-regalo
ejemplo
cajero
so-
licita
cambio
dinero
efectivo
cr
dito
cliente
tienda
invalidar
peticiones
Suponga
crea
venta
identificar
do-
nación
ben
fica
tienda
ONG
tienda
podr
ía
regla
permitiera
entrada
artículos
valor
menor
250
tambi
adir
artículos
venta
cajero
inici
sesión
encargado
an
li
sis
requisitos
identificar
puntos
concretos
es-
cenario
ca
sos
so
introducirArticulo
legirCa
mbioEnEfectivo
estudio
considerar
punto
introducirArticulo
aplicar
solución
puntos
Suponga
arquitecto
software
dise
afecte
compo-
nentes
software
dise
ar
separando
intereses
factori-
zar
regla
inter
separado
suponga
arquitecto
est
seguro
cu
implementación
gestionar
regla
conectable
querer
ex-
perimentar
soluciones
repre
sentar
cargar
evaluar
reglas
ejemplo
reglas
implementar
siguiendo
patrón
Estrategia
int
rpre-
tes
reglas
libre
distribución
leen
interpretan
conjunto
reglas
IF-THEN
int
rpretes
reglas
comerciales
comprar
soluciones
solucionar
problema
dise
utilizar
patrón
Fachada
Fachada
Facade
Contexto
Problema
requiere
interfaz
común
unificada
conjunto
implementaciones
interfa-
ces
dispares
subsistema
conveniente
acoplarla
cosas
subsistema
implementación
subsistema
cambiar
Solución
Defina
único
punto
conexión
subsistema
objeto
fachada
envuelve
subsistema
objeto
fachada
presenta
única
interfaz
unificada
responsable
colaborar
componentes
subsistema
346
UML
PATRONESUna
Fachada
objeto
front
-end
nico
punto
entrada
ser-
vicios
subsistema6
implementación
componentes
subsistema
privados
verlos
componentes
externos
Fachada
proporciona
Varia-
ciones
Protegidas
frente
cambios
implementaciones
subsistema
ejemplo
definiremos
subsistema
motor
regla
cuya
implementación
es-
pecífica
conoce
re
sponsable
evaluar
conjunto
reglas
operación
implementación
oculta
indicar
reglas
invalida
operación
objeto
fachada
subsistema
llamar
FachadaMotorReglasPDV
dise-
ador
decide
colocar
llamadas
fachada
cerca
comienzo
definido
puntos
reglas
conectables
ejemplo
public
class
Venta
public
void
crearLineaDeVenta
EspecificacionDelProducto
espec
int
cantidad
LineaDeVenta
ldv
new
LineaDeVenta(espec
cantidad
//llamada
fachada
if
FachadaMotorReglasPDV.getInstancia().esInvalido
ldv
this
return
lineasDeVenta.add(ldv
//final
clase
patrón
Singleton
Normalmente
accede
Fachada
Singleton
dise
complejidad
implementaci
ón
repre-
sentar
evaluar
reglas
oculta
subsistema
motor
regla
accede
fachada
FachadaMotorReglasPDV.O
bs
rvese
subsistema
oculta
objeto
fachada
contener
docenas
cientos
clases
objetos
in-
cluso
solución
orientada
objeto
nicamente
cliente
subsistema
vemos
nico
punto
acce
so
blico
conseguido
separación
intereses
medida
delegado
subsistema
cuestiones
manejo
reglasÑ.
Resumen
patrón
Fachada
sencillo
utiliza
ampliamente
Oculta
subsistema
detr
objeto
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
347
rmino
subsistema
est
utilizando
sentido
informal
designar
grupo
componentes
relacionados
exactamente
define
UML.Ejercicios
Propuestos
Ejercicio
Diseñe
gestión
reglas
patrón
Estrategia
cuyos
nombres
clase
ob-
dinámicamente
leyendo
fuente
externa
Ejercicio
implementa
Java
diseñe
gestión
reglas
Jess
intérprete
reglas
libre
distribución
fines
académicos
disponible
http://herzberg.ca
sandia.gov/jess/
Normalmente
accede
fachadas
patrón
Singleton
pro-
porcionan
Variaciones
Protegidas
implementación
subsistema
adiendo
objeto
Indirección
ayuda
mantener
Acoplamiento
objetos
externos
acoplan
punto
subsistema
objeto
fachada
scribe
patr
ón
Adaptador
objeto
adaptador
utilizar
envolver
acceso
sistemas
externos
interfaces
clase
fachada
nfa
sis
est
proporcionar
adaptación
interfaces
llama
específicamente
adaptador
Notaci—n
UML
UML
proporciona
notaci
ón
agrupacione
prop
ósito
general
denominadas
paquetes
cuyo
icono
tipo
carpeta
etiquetada
pa-
quetes
utilizar
mo
strar
agrupaciones
lógicas
objeto
co-
rresponder
paquetes
Java
namespaces
H11001
H11001
componentes
agregados
subsistemas
lógicamente
distintos
Nótese
Figura
23.19
FachadaMotorReglasPDV
blica
re
specto
paquete
notación
UML
compleja
representar
subsistemas
notación
Figura
23.19
suficiente
dise
paquetes
estudiar
detalle
iteración
23.9
Observador
Publicar-Suscribir
Modelo
Delegaci
Eventos
GoF
requisito
iteraci
ón
adir
capacidad
ventana
GUI
actuali
ce
informaci
ón
mue
stra
venta
ste
cambia
Fi-
gura
23.20
idea
solucionar
problema
caso
particular
despu
ite-
raciones
po
steriores
extender
solución
actualizar
informaci
ón
GUI
tambi
cambios
datos
qu
solución
Venta
cambia
objeto
Venta
envía
mensaje
ventana
pidi
ndole
actualice
información
muestra
Recordemos
principio
Separación
Modelo-Vista
disuade
tales
solucio-
nes
Establece
objetos
modelo
objeto
pertenecen
UI
Venta
deberían
objetos
vista
presentación
tales
venta-
na
principio
fomenta
Acoplamiento
objetos
capas
capa
presentación
UI
348
UML
PATRONES
Patrones
RelacionadosDISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
349
Figura
23.19
Notación
paquetes
UML
Dominio
Venta
Registro
MotorReglasPDV
interface
IRegla
Regla1
Regla2
mostrar
nombre
paquete
etiqueta
visibilidad
elemento
paquete
paquete
representa
colocando
símbolo
visibilidad
nombre
paquete
FachadaMotorReglasPDV
instancia
FachadaMotorReglas
getInstancia
FachadaMotorReglas
esInvalido(LineaDeVenta
Venta
esInvalido(Pago
Venta
Figura
23.20
Actualización
interfaz
cambia
venta
Objetivo
cambia
venta
actualizar
información
pantalla
valor
Venta
setTotal(nuevoTotal
consecuencia
mantener
acoplamiento
permite
reemplazar
vista
capa
presentación
ventana
concreta
afectar
objetos
pertenecen
UI
objetos
modelo
conocen
objetos
Swing
Java
ejemplo
entonce
po
sible
sconectar
interfaz
Swing
desconectar
ventana
concreta
conectar
s.
Separación
Modelo-Vista
mantiene
Variaciones
Protegidas
respec-
to
cambios
interfaz
usuario
solucionar
problema
diseo
utilizar
patrón
Observador
Observador
Publicar-Suscribir
Observer
Contexto
Problema
tipos
objetos
suscriptores
interesados
cambio
eventos
objeto
emisor
quieren
reaccionar
emi-
sor
genere
evento
emisor
mantener
acoplamiento
sus-
criptores
Solución
Defina
interfaz
suscriptor
oyente
listener
suscriptores
implementan
in-
terfaz
emisor
dinámicamente
registrar
suscriptores
interesados
evento
notificarles
ocurre
evento
solución
ejemplo
describe
detalle
Figura
23.21
350
UML
PATRONES
Figura
23.21
patrón
Observador
interface
PropertyListener
onPropertyEvent
fuente
nombre
valor
VentaFrame1
onPropertyEvent(fuente
nombre
valor
inicializar(Venta
venta
javax.swing
JFrame
setTitle
setVisible
if
nombre.equals("venta.total
ventaTextField.setText(valor.toString
Venta
addPropertyListener(PropertyListener
lis
publishPropertyEvent
nombre
valor
setTotal(Dinero
nuevoTotal
propertyListeners
nuevoTotal
publishPropertyEvent("venta.total
propertyListeners.add(lis
for
each
PropertyListener
pl
in
propertyListeners
pl.onPropertyEvent(this
nombre
valor
venta.addPropertyListener(this
ideas
pasos
fundamentales
ejemplo
define
interfaz
ste
caso
PropertyListener7
operación
onPro-
pertyEvent
define
ventana
implementa
interfaz
VentaFrame1
implementar
onPropertyEvent
inicializa
ventana
VentaFrame1
pasa
instancia
Venta
est
strando
ventana
VentaFrame1
registra
suscribe
instancia
Venta
notifique
acerca
evento
propiedad
men
saje
addPropertyListener
propiedad
cambia
ventana
notifique
Ob
serve
Venta
conoce
objetos
VentaFrame1;m
cono-
ce
objetos
implementan
interfaz
PropertyListener
disminuye
acoplamiento
Venta
ventana
acopla
interfaz
clase
GUIÑ
in
stancia
Venta
emisor
evento
propiedad
cambia
iterasobre
objetos
PropertyListener
estn
suscritos
notifica
Notaci—n
UML
Obs
rvese
Figura
23.21
interesantes
aden
nota
comentario
mue
stran
implementaci
ón
notas
aden
in
formación
comportamiento
din
mico
diagrama
tipo
est
tico
s.
al-
gunos
casos
diagrama
clases
notas
sustituir
necesidad
dia-
gramas
interacci
ón
adicionales
significa
stemos
aconsejando
eviten
diagramas
interacción
indica
enfoques
notación
alternativos
objeto
VentaFrame1
observador
suscriptor
oyente
Figura
23.22
sus-
cribe
inter
eventos
propiedades
Venta
emisor
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
351
N.
T.
traducido
nombres
ejemplos
sección
corre
s-
ponden
implementación
Java
patrón
Figura
23.22
observador
VentaFrame1
suscribe
emisor
Venta
Ventavf
VentaFrame1
inicializar(v
Venta
addPropertyListener(vf
PropertyListener
propertyListeners
Object
add(vf
PropertyListener
Notación
UML
Recordemos
instancia
interfaz
generalizar
imprecisos
indicar
simplemente
instancias
tipo
Object
asume
superclase
clases
enfoque
utilizar
lenguaje
C++
define
literalmente
superclase
Object
raíz.eventos
propiedad
Venta
ade
objeto
lista
suscriptores
tipo
PropertyListener
ótese
Venta
conoce
VentaFrame1
objeto
Ven-
taFrame1
objeto
PropertyListener;e
sto
disminuye
acoplamiento
capa
modelo
vista
ilustra
Figura
23.23
cambia
Venta
itera
to-
suscriptores
registrado
publica
evento
enviando
mensaje
onPropertyEvent
352
UML
PATRONES
Figura
23.23
Venta
publica
evento
propiedad
suscriptores
Venta
setTotal(total
onPropertyEvent(v
venta.total
Notación
UML
puesto
tipo
miembros
colección
PropertyListener
legal
mostrar
implementación
respuesta
mensajes
adicionales
puesto
respuesta
variar
dependiendo
clase
implementa
interfaz
detenga
paso
mensajes
punto
muestre
implementaciones
diagramas
publishPropertyEvent
venta.total
propertyListeners
Object
PropertyListener
Figura
23.24
suscriptor
VentaFrame1
recibe
notificación
evento
publicado
VentaFrame1
onPropertyEvent(fuente
nombre
valor
PropertyListener
ventaTextField
JTextField
setText(valor.toString
Puesto
operación
polimórfica
implementada
clase
muestra
diagrama
interacción
comienza
versión
polimórfica
Notacion
UML
Observe
pequeña
expresión
parámetro
legal
concisa
Notaci—n
UML
:O
bserve
enfoque
gestionar
mensajes
polimórficos
diagrama
interacción
Figura
23.23
VentaFrame1
implementa
interfaz
PropertyListener
implementa
onPropertyEvent
VentaFrame1
recibe
mensaje
envía
mensaje
objeto
JTextField
elemento
gr
fico
GUI
actualizar
to-
venta
Figura
23.24
patrón
acoplamiento
objeto
modelo
Venta
objeto
vista
VentaFrame1
acoplamiento
bil
conuna
interfaz
independiente
capa
presentación
interfaz
PropertyListener
dise
realmente
nece
sita
registre
ning
objeto
suscriptor
emisor
ning
objeto
escuchando
lista
objetos
PropertyListener
registran
Venta
vacía
Resumiendo
acoplamiento
in-
terfaz
gen
rica
objetos
necesita
presente
adir
eliminar
elementos
din
micamente
mantiene
acoplamiento
con-
seguido
Variaciones
Protegidas
cambios
interfaz
usuario
me-
diante
interfaz
polimorfismo
qu
denomina
Observador
Publicar-
Suscribir
Modelo
Delegaci
Eventos
Originalmente
estilo
llamó
publicar-suscribir
conoce
ampliamente
nombre
objeto
publica
eventos
Venta
publica
evento
propiedad
cambia
pasar
ning
objeto
estuviera
interesado
evento
cuyo
caso
Venta
tendría
ning
suscriptor
registrado
objetos
est
interesados
suscriben
registran
inter
evento
pidi
ndole
emisor
notifique
mensaje
Venta--addPropertyListener
lu-
gar
evento
notifica
suscriptores
est
registrados
mensaje
llamado
Observador
oyente
suscriptor
est
servando
even-
to
rmino
popular
Smalltalk
principio
ochenta
Tambi
denominado
Modelo
Delegación
Eventos
Java
emisor
delega
gestión
eventos
oyente
suscriptores
Figura
23.25
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
353
Figura
23.25
Qui
observador
oyente
suscriptor
emisor
interface
PropertyListener
onPropertyEvent(fuente
nombre
valor
VentaJFrame1
onPropertyEvent(fuente
nombre
valor
inicializa(Venta
javax.swing
JFrame
setTitle
setVisible
Venta
addPropertyListener(PropertyListener
lis
publishPropertyEvent(nombre
valor
setTotal(Dinero
nuevoTotal
propertyListeners
publica
eventos
observadores
oyentes/
suscriptores
registra
solicitan
suscribirse
escucha
eventos
observa
eventos
suscribe
notifiquen
eventosEl
Observador
conectar
UIs
objetos
modelo
ejemplo
ilustraba
conexión
Observador
objetos
per-
tenecen
UI
objetos
UI
usos
habituales
com
patrón
manejo
eventos
elemen-
tos
gr
fico
GUI
tecnología
Java
AWT
Swing
.NET
Microsoft
elemento
gr
fico
emisor
eventos
relacionados
GUI
objetos
suscribir
inter
ejemplo
JButton
Swing
publica
vento
acción
presiona
objeto
registrar
botón
presione
envía
mensaje
objeto
algu-
na
acción
ejemplo
muestra
Figura
23.26
ilustra
RelojAlarma
emisor
eventos
alarma
suscriptores
ejemplo
ilustrativo
pone
relieve
interfaz
AlarmaListener
implementada
cla-
ses
registrar
simult
neamente
objetos
oyentes
reac-
cionar
evento
alarma
emisor
suscriptores
evento
desprende
Figura
23.26
instancia
emisor
suscriptores
registrados
ejemplo
instancia
RelojAlarma
registrados
objetos
VentanaDeAlarma
objetos
Busca
GuardianDeFia-
bilidad
ocurre
evento
alarma
notifica
objetos
Alarma-
Listener
evento
onAlarmaEvent
Implementaci
Eventos
implementaciones
Observador
Java
.NET
comunica
evento
men
saje
ordinario
onPropertyEvent
Adem
casos
evento
define
formalmente
clase
rellena
datos
evento
apropiados
evento
pasa
par
metro
men
saje
evento
ejemplo
class
PropertyEvent
extends
Event
private
Object
fuenteDelEvento
private
String
nombrePropiedad
private
Object
valorAntiguo
private
Object
valorNuevo
354
UML
PATRONESclass
Venta
private
void
publishPropertyEvent
String
nombre
Object
antiguo
Object
PropertyEvent
evt
new
PropertyEvent
this
venta.total
antiguo
for
each
AlarmaListener
in
alarmaListeners
al.onPropertyEvent(evt
Java
lanzó
JDK
1.0
enero
996
contenía
implementaci
ón
simple
publicar-suscribir
ba
sada
cla
interfaz
denominada
Observable
DISEÑO
REALIZACIONES
CASOS
PATRONES
DISEÑO
GoF
355
Figura
23.26
Observador
aplicado
eventos
alarma
suscriptores
for
each
AlarmaListener
in
alarmaListeners
al.onAlarmaEvent(this
hora
alarmaListeners.add(lis
RelojAlarma
addAlarmaListener(AlarmaListener
lis
publishAlarmaEvent(hora
setHora(nuevaHora
hora
nuevaHora
if
hora
horaAlarma
publishAlarmaEvent(hora
javax.swing
JFrame
setTitle
setVisible
alarmaListeners
interface
AlarmaListener
onAlarmaEvent(fuente
tiempo
onAlarmaEvent(fuente
tiempo
onAlarmaEvent(fuente
tiempo
onAlarmaEvent(fuente
tiempo
VentanaDeAlarma
mostrar
cuadro
diálogo
notificación
Busca
GuardianDeFiabilidad
emitirPip
comprueba
procesos
solicitados
ejecutando
correctamente
Observer
espectivamente
copió
sicamente
mejora
enfoque
ochenta
implementación
publicar-suscribir
Smalltalk
finales
1996
versión
JDK
1.1
sustituyó
diseo
b-
servable-Observer
Modelo
Delegación
Eventos
Java
DEM
Delegation
Event
Model
versión
robusta
publicar-suscribir
mantuvo
di-
original
compatibilidad
versiones
anteriore
general
evitarse
diseo
descritos
capítulo
consistentes
DEM
sim-
plificado
ligeramente
resaltar
ideas
fundamentales
Resumen
Observador
proporciona
acoplar
bilmente
objetos
rminos
comunicación
emisores
conocen
suscriptores
trav
interfaz
suscriptores
registrarse
darse
baja
emisores
din
micamente
Observador
basa
Polimorfismo
proporciona
Variaciones
Protegidas
protege
emisor
conocimiento
clase
específica
objetos
mero
objetos
comunica
genera
evento
23.10
Conclusi
lección
principal
extraer
exposición
dise
ar
objetos
asignar
responsabilidades
ayuda
patrones
proporciona
conjunto
explicable
estilos
construir
sistemas
orien-
tados
objetos
dise
ado
s.
23.11
Lecturas
adicionales
libro
texto
sico
Design
Patterns
Gamma
Helm
Johnson
Vlissides
fundamental
lean
dise
adore
objetos
celebra
congre
so
Pattern
Language
of
Program
PLOP
Len-
guajes
Patrones
Programas
publica
recopilaci
ón
pa-
trones
serie
Pattern
Languages
of
Program
Design
volumen
etc
tera
re-
comienda
serie
Pattern-Oriented
Software
Architecture
volumen
promueve
discusión
patrones
cuestiones
arquitectura
escala
volumen
presenta
ta-
xonomía
patrones
publicado
ciento
patrone
s.
Ri
sing
re
sume
porcentaje
re
spetable
The
Pattern
Almanac
356
UML
PATRONES
Patrones
RelacionadosPARTE
ELABORACIÓN
ITERACIÓN
324.1
Requisitos
Iteración
acceder
servicios
remotos
proporcionar
manteni
miento
servicios
fallos
servicios
locales
ejemplo
acceder
producto
remoto
base
datos
utilice
versión
lo-
cal
datos
almacenados
caché
Proporcionar
soporte
manejo
dispositivos
PDV
cajón
caja
dispensador
monedas
Manejar
autorizaciones
pago
crédito
Soporte
objetos
persistentes
24.2
Énfasis
Iteración
fase
incio
Iteración
exploraron
variedad
cuestiones
fun-
damentales
análisis
requisitos
DOO
Iteración
ocupó
detalle
diseño
objetos
iteración
perspectiva
am-
plia
explorando
extensa
variedad
temas
relacionados
análisis
diseño
en-
tre
encuentran
Relaciones
casos
Generalización
especialización
Modelado
Arquitecturas
capas
•E
diseño
paquetes
Análisis
arquitectural
patrones
diseño
GoF.
•E
ld
iseño
frameworks
particular
framework
persistencia
Capítulo
24
ITERACIÓN
REQUISITOSObjetivos
Relacionar
casos
asociaciones
include
extend
Introducción
casos
relacionar
ejemplo
caso
sub-
función
Gestionar
Pagos
Crédito
formar
casos
or-
dinarios
Procesar
Venta
Procesar
Alquiler
organización
casos
relaciones
influye
comportamiento
requisitos
sistema
simplemente
forma
organizar
idealmente
mejorar
comunicación
comprensión
casos
reducir
duplicación
texto
mejorar
gestión
documentos
casos
advertencia
organizaciones
trabajan
casos
dedica
tiempo
im-
productivo
debatir
relacionar
casos
diagramas
casos
lugar
dedicarlo
trabajo
importante
casos
escribir
texto
consecuencia
capítulo
presenta
relaciones
casos
tema
dedicación
merece
deberían
ponerse
perspectiva
valor
trabajo
importante
escribir
texto
casos
especificación
re-
quisitos
escribiendo
organizando
casos
paso
opcional
posiblemente
ayudar
comprenderlo
reducir
duplicacione
s.
equipo
co
Capítulo
25
RELACIONES
CASOS
programadores
confunden
Halloween
navidades
OCT(31)/H11005DEC(25).362
UML
PATRONES
mienza
modelado
casos
dedicando
horas
discutiendo
diagrama
caso
relaciones
casos
debería
relación
include
extend
Deberíamos
especializar
caso
so
lug
ar
centrarse
escribir
rápidamente
texto
clave
caso
es-
fuerzo
significativo
sitio
equivocado
organización
casos
utilizando
relaciones
evolu-
cionar
iterativamente
pequeñas
etapas
fase
elaboración
útil
intentar
aplicar
esfuerzo
estilo
modelo
cascada
define
refina
totalmente
diagrama
completo
caso
conjunto
relaciones
eta-
pa
comienzo
proyecto
25.1
relación
inclusión
include
relación
común
importante
habitual
comportamiento
parcial
com
ún
casos
ejemplo
descripción
pago
crédito
lugar
casos
encuentran
Procesar
Venta
Procesar
Alquiler
Contribuir
Plan
Ahorro
et-
cétera
lugar
duplicar
texto
conveniente
separarlo
caso
subfunción
indicar
inclusión
sencillamente
factorizar
enlazar
texto
evitar
duplicaciones
ejemplo
UC1
Procesar
Venta
Escenario
principal
éxito
Cliente
llega
terminal
PDV
mercancías
servicios
comprar
Cliente
paga
Sistema
gestiona
pago
Extensiones
7b
Pago
crédito
Incluye
Gestionar
Pago
Crédito
7c
Pago
cheque
Incluye
Gestionar
Pago
Cheque
UC7
Procesar
Alquiler
Extensiones
6b
Pago
crédito
Incluye
Gestionar
Pago
Crédito
Sirve
ayuda
enlaces
implementen
hipervínculos
navegables
UC12
Gestionar
Pago
Crédito
Nivel
Subfunción
Escenario
principal
éxito
Cliente
introduce
información
acerca
crédito
Sistema
envía
solicitud
autorización
pago
Sistema
Servicio
Autorización
Pago
solicita
aprobación
pago
Sistema
recibe
aprobación
pago
notifica
Cajero
Extensiones
2a
sistema
detecta
fallo
colaborar
sistema
externo
Sistema
informa
error
Cajero
Cajero
pide
Cliente
pago
alternativo
relación
inclusión
include
notación
prefiera
indicar
caso
incluye
simplemente
subrayarlo
destacarlo
ejemplo
UC1
Procesar
Venta
Extensiones
7b
Pago
crédito
Gestionar
Pago
Crédito
7c
Pago
cheque
Gestionar
Pago
Cheque
Nótese
ca
so
subfunción
Gestionar
Pago
Crédito
encontraba
originalmente
sección
Extensiones
caso
Procesar
Venta
fac-
torizó
aparte
evitar
duplicaciones
observe
caso
sub-
función
utilizan
estructuras
Escenario
principal
éxito
Extensiones
casos
procesos
negocio
ordinarios
Procesar
Venta
Fowler
ofrece
gu
ía
sencilla
pr
áctica
utilizar
relaci
ón
in
clusión
FS00
Utilice
include
repitiendo
casos
usos
separados
evitar
repeticiones
motivo
simplemente
descomponer
caso
abrumadoramente
subunidades
mejorar
comprensión
Utilización
include
manejo
eventos
asíncronos
relación
inclusión
utiliza
describir
manejo
evento
asín-
crono
suario
capaz
seleccionar
bifurcar
mo
mento
ventana
función
página
web
específica
rango
pasos
RELACIONES
CASOS
363De
notación
casos
representar
bifurcación
asíncrona
estudió
introducción
casos
Capítulo
momen-
to
presentó
incorporación
invocación
subcaso
incluye
notación
básica
utilizar
etiquetas
siguiendo
estilo
sección
Extensiones
Recordemos
implica
extensión
evento
ocurrir
momento
variación
menor
utilizar
etiqueta
rango
3-
evento
asíncrono
ocurrir
rango
relativamente
amplio
pa-
sos
caso
UC1
Procesar
Escenario
principal
éxito
Extensiones
momento
Cliente
selecciona
edición
información
personal
Edi
tar
Información
Personal
momento
Cliente
selecciona
imprimir
ayuda
Presentar
Ayuda
Im-
presa
2-11
Cliente
cancela
Cancelar
Confirmación
Transacción
Resumen
relación
inclusión
utilizar
mayoría
problemas
relaciones
casos
resumen
Factorice
casos
subfunción
separados
utilice
relación
include
duplicados
casos
caso
complejo
separarlos
subunidades
facilita
com-
prensión
explicaremo
exi
sten
relacione
exten
sión
generalizaci
ón
Cockburn
modelador
ca
sos
experto
aconseja
escoger
relación
in-
clusión
relaciones
extensión
generalización
regla
emp
írica
utilice
relaci
ón
include
casos
gente
regla
declara
malen-
tendidos
lectore
scriben
gente
mezcla
include
extend
generalizes
Cockburn01
25.2
Terminología
casos
concretos
abstractos
base
adicional
caso
concreto
iniciado
actor
cabo
comportamiento
desea
actor
RUP
stos
casos
procesos
negocio
ele-
364
UML
PATRONESmentales
ejemplo
Procesar
Venta
caso
concreto
cambio
caso
abstracto
instancia
caso
subfunción
for-
ma
caso
Gestionar
Pago
Crédito
abstracto
mantiene
in-
dependiente
forma
historia
Procesar
Venta
caso
incluye
caso
extendido
especializado
caso
denomina
caso
base
Procesar
Venta
caso
base
caso
subfunción
Gestionar
Pago
Crédito
incluye
caso
inclusión
extensión
especialización
denomina
caso
adicional
Gestionar
Pago
Crédito
caso
adicional
rela-
ción
inclusión
Procesar
Venta
casos
adicionales
normalmente
abs-
tractos
casos
base
generalmente
concretos
25.3
relación
extensión
extend
Suponga
texto
caso
debiera
modificarse
significativa
razón
modificar
continuamente
caso
in-
numerables
extensiones
pasos
condicionales
dolor
cabeza
mante-
nimiento
establecido
caso
artefacto
estable
to-
car
añadir
caso
modificar
texto
original
relación
extensión
extend
proporciona
respuesta
idea
crear
caso
extiende
añade
describe
condiciones
ex-
tiende
comportamiento
caso
base
ejemplo
UC1
Procesar
Venta
caso
base
Puntos
Extensión
Cliente
VIP
paso
Pago
paso
Escenario
principal
éxito
Cliente
llega
terminal
PDV
mercancías
servicios
comprar
Cliente
paga
Sistema
gestiona
pago
UC15
Gestionar
Pago
Vale-Regalo
caso
extiende
Activa
Cliente
pagar
vale-regalo
Puntos
Extensión
Pago
Procesar
Venta
Nivel
Subfunción
Escenario
Principal
Éxito
Cliente
vale-regalo
Cajero
Cajero
introduce
identificador
vale-regalo
RELACIONES
CASOS
365Éste
ejemplo
relación
extensión
bserve
punto
ex-
tensión
caso
extiende
activa
condición
puntos
extensión
etiquetas
caso
base
extiende
referencia
puntos
extensión
números
pasos
caso
base
cambiar
afectar
caso
extiende
indirección
punto
extensión
simplemente
punto
caso
especialmente
habitual
sistemas
eventos
asíncronos
procesador
texto
corrección
ortográfica
búsqueda
tesauro
sistemas
control
reactivo
Observe
describe
sección
relación
inclusión
utilizar
relación
inclusión
describir
manejo
eventos
asíncronos
alternativa
ex-
tend
opción
caso
base
cerrado
modificaciones
Observe
señal
calidad
relación
extensión
caso
base
Procesar
Venta
referencia
caso
extiende
Gestionar
Pago
Vale-Regalo
define
controla
condiciones
activan
extensiones
caso
Procesar
Venta
completo
forma
mis-
mo
casos
extiende
Fíjese
caso
adicional
Gestionar
Pago
Vale-Regalo
al-
ternativa
referenciado
Procesar
Venta
relación
in-
clusión
Gestionar
Pago
Crédito
frecuencia
adecuado
ste
ejemplo
motivado
restricción
caso
Procesar
Venta
iba
modificar
situación
utiliza
extensión
lugar
inclusión
nótese
escenario
vale-regalo
registrado
sim-
plemente
añadiéndolo
exten
sión
sección
Extensiones
Procesar
Venta
enfoque
evita
relación
inclusión
extensión
crea-
ción
caso
subfunción
separado
normalmente
preferible
actualizar
simplemente
sección
Extensiones
lugar
crear
complejas
relaciones
casos
guías
casos
recomiendan
utilización
casos
ex-
tienden
relaci
ón
extensión
modelar
comportamiento
condicional
op
cional
caso
base
incorrecto
comprende
compor
tamiento
condicional
opcional
regi
strar
simplemente
texto
sección
Extensiones
caso
base
dificultad
utilizar
relación
ex-
tensión
casos
motivada
comportamiento
opcional
motiva
sencialmente
so
écnica
exten
sión
conveniente
razón
modificar
caso
base
25.4
relación
generalización
generalize
discusión
acerca
relación
generalización
queda
alcance
li-
bro
observe
expertos
casos
realizando
éxito
trabajo
casos
relación
opcional
añade
nivel
complejidad
casos
utilizan
366
UML
PATRONESsobre
guía
prácticas
sacar
provecho
idea
consulto-
res
casos
observan
habitualmente
lugar
complicaciones
dedica
tiempo
improductivo
inclusión
relaciones
casos
25.5
Diagramas
casos
Figura
25.1
ilustra
notación
UML
relación
inclusión
única
utilizar
caso
estudio
siguiendo
consejo
expertos
casos
mantener
cosas
sencillas
preferir
relación
inclusión
RELACIONES
CASOS
367
Figura
25.1
Relación
inclusión
casos
Modelo
Casos
PDV
NuevaEra
Cajero
Cliente
Gestionar
Pago
Efectivo
Procesar
Alquiler
Procesar
Venta
Gestionar
Pago
Cheque
Gestionar
Devoluciones
include
include
include
include
include
include
actor
Sistema
Contabilidad
actor
Servicio
Autorización
Crédito
Gestionar
Usuarios
Notación
UML
caso
base
apunta
caso
incluye
Gestionar
Pago
Crédito
notación
relación
extensión
ilustra
Figura
25.2
Figura
25.2
relación
extensión
Procesar
Venta
Puntos
Extensión
Pago
Clientes
VIP
extend
Pago
Cliente
presenta
vale-regalo
Notación
UML
caso
extensión
apunta
caso
base
condición
punto
extensión
representar
línea
Gestionar
Pago
Vale-RegaloObjetivos
Crear
jerarquías
generalización-especialización
Identificar
cu
ndo
merece
pena
mo
strar
subclase
Aplicar
pruebas
100%
Es-unÓ
validar
subclases
Introducción
generalización
especialización
conceptos
fundamentales
modelado
dominio
favorece
economía
palabras
jerarquías
clases
con-
ceptuales
stituyen
fuente
in
spiración
jerarquías
cla
ses
software
aprovechan
herencia
reducen
duplicación
código
26.1
conceptos
Modelo
Dominio
iteración
Modelo
Dominio
UP
podr
ía
desarrollarse
incremen-
talmente
considerando
conceptos
requisitos
iteración
servir
ayuda
técnicas
Lista
Categor
as
Conceptos
identificación
frases
no-
minales
enfoque
efectivo
desarrollar
modelo
dominio
robusto
rico
es-
tudiar
trabajo
autores
tema
Fowler96
cues-
tiones
sutiles
modelado
exploran
quedan
alcance
libro
Capítulo
26
MODELADO
GENERALIZACI
clasificaciones
simplonas
generalizaciones
falsas
maldiciones
vida
organizada
generalización
H.
G.
WellsLista
Categor
as
Conceptos
Tabla
26.1
muestra
conceptos
relevantes
iteración
370
UML
PATRONES
Tabla
26.1
Lista
Categorías
Conceptos
Categoría
Ejemplos
objetos
físicos
tangibles
TarjetaDeCredito
Cheque
especificaciones
diseños
descripciones
cosas
lugares
transacciones
PagoEnEfectivo
PagoACredito
PagoConCheque
líneas
transacción
roles
gente
contenedores
cosas
cosas
contenedor
sistemas
informáticos
electro-mecá-
ServicioAutorizacionCredito
nicos
externos
sistema
ServicioAutorizacionCheque
conceptos
abstractos
organizaciones
ServicioAutorizacionCredito
ServicioAutorizacionCheque
eventos
reglas
políticas
catálogos
registros
cuentas
trabajo
contratos
CuentasPorCobrar
cuestiones
legales
instrumentos
financieros
servicios
manuales
libros
Identificación
frases
nominales
Recordemos
identificaci
ón
fra
ses
nominales
aplicar
mec
nica
mente
identificar
conceptos
relevantes
incluir
modelo
do-
minio
aplicar
sentido
com
sarrollar
ab
stracciones
adecuada
puesto
lenguaje
natural
ambiguo
conceptos
relevantes
en-
cuentran
explícita
clara
texto
existente
técnica
pr
ctica
modelado
dominio
pue
sto
directa
iteración
maneja
escenarios
caso
Procesar
Venta
pagos
crédito
cheque
continuaci
ón
mue
stran
fra
ses
nominale
identificadas
extensiones
Caso
UC1
Procesar
Venta
Extensiones
7b
Pago
crédito
Cliente
introduce
información
cr
dito
Sistema
envía
petición
autorización
pago
Sistema
Servicio
Autorización
Pago
externo
solicita
aprobación
pago
2a
Sistema
detecta
fallo
colaboración
sistema
externo
Sistema
señala
error
Cajero
Cajero
pide
Cliente
pago
alternativo
Sistema
recibe
aprobación
pago
notifica
Cajero
3a
Sistema
recibe
denegación
pago
Sistema
señala
denegación
Cajero
Cajero
pide
Cliente
pago
alternativo
Sistema
registra
pago
cr
dito
incluye
aprobación
pago
Sistema
presenta
mecanismo
entrada
firma
pago
crédito
Cajero
pide
Cliente
firme
pago
crédito
Cliente
introduce
firma
7c
Pago
cheque
Cliente
escribe
cheque
carnet
conduciral
Cajero
Cajero
escribe
número
carnet
conducir
cheque
introduce
solicita
autorización
pago
cheque
Genera
solicitud
pago
cheque
envía
Servicio
Autori-
zación
Cheques
Recibe
aprobación
pago
cheque
notifica
aprobación
Cajero
sistema
registra
pago
cheque
incluye
aprobación
pago
Transacciones
servicio
autorización
identificación
frases
nominales
revela
conceptos
SolicitudPagoACredito
RespuestaAprobacionCredito
stos
realidad
verse
transacciones
servicios
externos
general
resulta
til
identificar
tale
transacciones
ac-
tividades
procesos
tienden
girar
transacciones
representar
registros
inform
ticos
bits
viajan
ínea
Repre
sentan
ab
stracción
tran
sacción
independientemente
ejecute
ejemplo
solicitud
pago
crédito
ejecu-
tarse
llamada
telef
ónica
envío
registros
mensajes
or-
denadores
etcétera
26.2
Generalización
conceptos
PagoEnEfectivo
PagoACredito
PagoConCheque
pa-
recidos
situación
til
organizarlos
Figura
26.1
jerarqu
clases
generalizacin
especializacin
simplemente
jerarqu
MODELADO
GENERALIZACI
371
capítulo
estudiaremos
motivos
definir
jerarquías
clases.372
UML
PATRONES
Figura
26.1
Jerarquía
generalización-especialización
Pago
EnEfectivo
Pago
ACredito
Pago
ConCheque
Pago
superclase
concepto
general
subclase
concepto
especializado
clases
conceptuales
clases
software
clases
superclase
Pago
representa
concepto
general
sub-
clases
conceptos
especializados
Nótese
presentación
clases
capítulo
refiere
clases
con-
ceptuales
clases
software
generalizacin
actividad
identificar
elemento
comunes
con-
ceptos
definir
relaciones
superclase
concepto
general
subclase
concepto
es-
pecializado
forma
construir
clasificaciones
taxonómicas
conceptos
representan
jerarquías
clases
identificación
superclase
subclases
til
modelo
dominio
presencia
permite
entender
conceptos
términos
generales
re-
finados
ab
stractos
econom
ía
expre
sión
mejorar
com
prensión
reducir
información
repetida
centrando
Modelo
Dominio
UP
Modelo
Di
software
diseo
implementación
posterior
superclase
subclases
clases
software
utilizan
herencia
producir
software
Identifique
superclases
subclases
dominio
relevantes
estudio
actual
re-
preséntelas
Modelo
Dominio
Notacin
UML
Revisemos
notación
generalización
introdujo
capítulo
UML
relación
generalización
elementos
representa
línea
tri
ngulo
hueco
extremo
apunta
clase
ge-
neral
especializadas
Figura
26.2
utilizar
estilo
líneas
separadas
unidas
Figura
26.2
Jerarquía
clases
notaciones
líneas
separadas
unidas
Pago
EnEfectivo
Pago
ACredito
Pago
ConCheque
Pago
Pago
EnEfectivo
Pago
ACredito
Pago
ConCheque
Pago26.3
Definición
superclases
subclases
conceptuales
Puesto
til
identificar
super-
subclases
conceptuales
conveniente
enten-
der
claridad
precisión
generalización
superclases
subclases
términos
definición
clase
conjuntos
clases
ocupan
siguientes
secciones
Generalización
definición
clase
conceptual
Cu
relación
superclase
conceptual
subclase
definición
superclase
conceptual
general
abarca
definición
subclase
ejemplo
considere
superclase
Pago
subclases
PagoEnEfectivo
etcéte-
ra
Asuma
definición
Pago
representa
transacción
transferir
dinero
necesariamente
efectivo
compra
pa-
gos
cantidad
dinero
tran
sfieren
modelo
corres-
ponde
definición
muestra
Figura
26.3
MODELADO
GENERALIZACI
373
Figura
26.3
Jerarquía
clases
pago
Pago
EnEfectivo
Pago
ACredito
Pago
ConCheque
Pago
cantidad
Dinero
PagoACredito
transferencia
dinero
institución
cré-
dito
necesita
autorice
definición
Pago
abarca
general
definición
PagoACredito
Generalización
conjuntos
clases
superclases
subclases
conceptuales
est
relacionada
términos
perte-
nencia
conjunto
miembros
conjunto
subclase
conceptual
miembros
conjunto
superclase
intensión
extensión
clase
discusión
est
spirada
MO95].Por
ejemplo
érminos
pertenencia
conjunto
instancias
conjunto
PagoACredito
miembros
conjunto
Pago
diagrama
Venn
representa
Figura
26.4
374
UML
PATRONES
Figura
26.4
Diagrama
Venn
relaciones
conjuntos
Pago
PagoEnEfectivo
PagoACredito
PagoConCheque
Figura
26.5
Conformidad
subclases
Pago
EnEfectivo
Pago
ACredito
Pago
ConCheque
Pago
cantidad
Dinero
VentaPago-por
11
Conformidad
definición
subclase
conceptual
crea
jerarquía
clases
declaraciones
superclases
aplican
subclases
ejemplo
Figura
26.5
establece
Pagos
tie-
nen
cantidad
asocian
Venta
subclases
Pago
ajustarse
cantidad
pago
Venta
general
regla
conformidad
definici
ón
superclase
Regla
100%
Regla
100%
100%
definición
superclase
conceptual
aplicar
subclase
subclase
ajustarse
100%
Atributos
Asociaciones
superclase
Conformidad
conjunto
subclase
conceptual
subclase
conceptual
debería
miembro
conjunto
superclase
tan-
to
PagoACredito
debería
miembro
conjunto
Pagos
Informalmente
expresa
noción
subclase
conceptual
tipo
su-
perclase
PagoACredito
tipo
Pago
concisa
es-un-tipo-de
denomina
es-un
tipo
conformidad
Regla
Es-un
Regla
Es-un
miembros
conjunto
subclase
miembros
conjunto
superclase
lenguaje
natural
comprobarse
informalmente
formando
sentencia
Sub-
clase
Superclase
ejemplo
sentencia
PagoACredito
Pago
sentido
transmite
no-
ción
conformidad
pertenencia
conjunto
Qu
subclase
conceptual
correcta
exposición
aplique
siguientes
pruebas
definir
sub-
clase
correcta
construya
modelo
dominio
subclase
potencial
debería
Regla
100%
conformidad
definición
Regla
Es-un
conformidad
pertenencia
conjunto
26.4
Cu
ndo
definir
clase
conceptual
presentado
reglas
aseguran
subclase
correcta
reglas
100%
Es-un
cun
do
deberíamos
preocuparnos
definir
subcla-
lugar
definición
particin
clases
conceptuales
divi-
sión
clases
conceptuales
subclases
disjuntas
tipos
seg
terminolog
ía
Odell
MO95
pregunta
volver
enunciarse
útil
representar
partición
clases
conceptuales
ejemplo
dominio
PDV
Cliente
particionarse
correctamente
dividirse
subclases
ClienteHombre
ClienteMujer
relevante
til
mostrar
modelo
Figura
26.6
partición
til
nue
stro
dominio
sección
explica
MODELADO
GENERALIZACI
375
elegido
nombres
clases
ayuda
nemotécnica
lugar
precisión
Razones
particionar
clase
conceptual
subclases
continuación
presentamos
razones
peso
particionar
clase
subclases
Cree
subclase
conceptual
superclase
subclase
atributos
adicionales
interés
subclase
asociaciones
adicionales
interés
concepto
subclase
funciona
maneja
reacciona
manipula
mane-
ra
superclase
subclases
interesante
concepto
subclase
representa
cosa
animada
ejemplo
animal
ro-
bot
comporta
superclase
subclases
al-
guna
interesante
base
criterio
partición
Cliente
subclases
ClienteHombre
ClienteMujer
est
stificada
atributos
adicionales
asociaciones
opera
comportan
interés
Tabla
26.2
muestra
ejemplos
particiones
clases
dominio
pagos
rea
utilizando
criterio
376
UML
PATRONES
Figura
26.6
Partición
clases
conceptuales
legales
til
nue
stro
dominio
Cliente
Hombre
Cliente
Mujer
Cliente
Subclases
correctas
útiles
hombres
mujeres
bito
hora
comprar
rele-
vantes
requisitos
caso
actual
criterio
delimita
nue
stro
estudio
Tabla
26.2
Ejemplo
particiones
subclases
Motivación
subclase
conceptual
Ejemplos
subclase
atributos
adicionales
Pagos
aplicable
interés
Biblioteca
Libro
subclase
RecursoPrestable
atributo
ISBN
subclase
asociaciones
adicionales
Pagos
PagoACredito
subclase
Pago
interés
asociada
TarjetaDeCredito
Biblioteca
Vídeo
subclase
RecursoPrestable
asociada
Encargado
continúa26.5
Cu
ndo
definir
superclase
conceptual
Normalmente
aconseja
generalizar
superclase
com
identifican
elementos
comunes
subclases
potenciales
continuación
presentamos
moti-
vos
generalizar
definir
superclase
Cree
superclase
conceptual
relación
generalización
subclases
subclases
potenciales
representan
variaciones
concepto
similar
subclases
ajustarán
reglas
100%
Es-un
subclases
atributo
factorizar
expresar
superclase
subclases
asociación
factorizar
relacionar
superclase
siguientes
secciones
ilustran
puntos
26.6
Jerarqu
as
clases
conceptuales
PDV
NuevaEra
Clases
Pago
basamos
criterio
particionar
clase
Pago
til
crear
je
rarquía
clases
tipos
pagos
justificación
clases
subclases
muestra
Figura
26.7
MODELADO
GENERALIZACI
377
Tabla
26.2
Ejemplo
particiones
subclases
Continuación
Motivación
subclase
conceptual
Ejemplos
concepto
subclase
funciona
Pagos
PagoACredito
subclase
Pago
gestiona
reacciona
manipula
gestiona
superclase
tipos
pagos
autorizarlo
subclases
interesante
Biblioteca
Software
subclase
RecursoPrestable
requiere
depósito
prestarse
concepto
subclase
representa
Pagos
aplicable
cosa
animada
ejemplo
animal
robot
comporta
dife-
Biblioteca
aplicable
rente
superclase
subcla-
ses
intere-
sante
Investigación
Mercado
Hombre
subclase
Persona
comporta
Mujer
hábitos
compras
Clases
Servicio
Autorización
servicios
autorización
crédito
cheques
variaciones
concepto
si-
milar
atributos
comunes
interés
jerarquía
clases
Figura
26.8
378
UML
PATRONES
Figura
26.7
Justificación
subclases
Pago
Pago
cantidad
Dinero
Pago
EnEfectivo
Pago
ACredito
Pago
ConCheque
Pago-por
Venta
superclase
justificada
atributos
comunes
asociaciones
subclase
pago
maneja
asociaciones
adicionales
11
Identifica-credito-con
Tarjeta
DeCredito
Pagado-con
Cheque
Figura
26.8
Justificación
jerarquía
ServicioAutorización
ServicioAutorizacion
direccion
nombre
numeroTelefono
Autoriza-pagos-de
Tienda
Servicio
Autorizacion
Credito
Servicio
Autorizacion
Cheques
Autoriza
Autoriza
11
Pago
ACredito
Pago
ConCheque
asociaciones
adicionales
superclase
justificada
atributos
comunes
asociacionesClases
Transacción
Autorización
modelado
distintos
tipos
transacciones
servicio
autorización
solicitudes
yr
espuestas
presenta
caso
interesante
general
til
mo
strar
transacciones
servicios
externos
modelo
dominio
actividades
proce-
sos
suelen
girar
conceptos
importantes
Debería
modelador
repre
sentar
variaciones
tran
sacción
servicio
externo
Depende
modelos
dominio
nece-
sariamente
correctos
incorrectos
tile
s.
tile
clase
transacción
est
relacionada
conceptos
procesos
reglas
negocio
pregunta
interesante
grado
generalización
conveniente
mostrar
modelo
motivo
explicaci
ón
asumamos
cla
tran-
sacción
fecha
hora
atributos
comunes
deseo
crear
generalización
familia
conceptos
relacionados
justifica
creación
TransaccionAutorizacionPago
til
generalizar
re
spuesta
RespuestaAutorizacionPagoACredito
RespuestaAutorizacionPagoConCheque
muestra
Figura
26.9
sufi-
ciente
generalización
muestra
Figura
26.10
MODELADO
GENERALIZACI
379
Figura
26.9
jerarquía
clases
transacciones
servicios
externos
Respuesta
Aprobacion
PagoACredito
Respuesta
Desaprobacion
PagoACredito
Respuesta
AutorizacionPago
ConCheque
Respuesta
Autorizacion
PagoACredito
Respuesta
Autorizacion
Pago
Solicitud
Autorizacion
Pago
Transaccion
Autorizacion
Pago
fecha
hora
Conceptos
grano
fino
útil
mostrar
grado
particionamiento
transacción
maneja
útil
dividirlas
clases
separadas
Respuesta
AprobacionPago
ConCheque
Respuesta
Desaprobación
PagoConCheque
Solicitud
AprobacionPago
ACredito
Solicitud
AprobacionPago
ConCheque
modelos
dominio
telecomunicaciones
igualmente
til
identificar
tipo
men
saje
intercambio
cambio
jerarquía
clases
muestra
Figura
26.10
suficientemente
til
generalización
generalizaciones
adicionales
aden
ning
lor
obvio
jerarquía
Figura
26.9
expresa
granularidad
generalización
fina
enriquece
significativa
comprensión
conceptos
re-
glas
negocio
modelo
complejo
conveniente
adir
complejidad
proporcione
beneficios
26.7
Clases
conceptuales
abstractas
til
identificar
clases
abstractas
modelo
dominio
restringe
cla-
ses
instancias
concretas
clarifica
reglas
dominio
problema
miembro
clase
miembro
subclase
clase
denomina
clase
conceptual
abstracta
ejemplo
asuma
in
stancia
Pago
deber
concretamente
instancia
subclase
PagoACredito
PagoEnEfectivo
PagoConCheque
ilustra
diagrama
Venn
Figura
26.11
Puesto
miembro
Pago
miembro
subclases
Pago
clase
conceptual
de-
finición
cambio
instancias
Pago
miembros
subclase
clase
abstracta
ilustra
Figura
26.11
dominio
PDV
Pago
realmente
miembro
subclase
Fi-
gura
26.11
descripción
correcta
pagos
Pago
clase
conceptual
abstracta
380
UML
PATRONES
Figura
26.10
jerarquía
clases
transacción
alternativa
Respuesta
Autorizacion
Pago
Solicitud
Autorizacion
Pago
Transaccion
Autorizacion
Pago
fecha
hora
Respuesta
Aprobacion
PagoACredito
Respuesta
Desaprobacion
PagoACredito
Respuesta
AprobacionPago
ConCheque
Respuesta
Desaprobacion
PagoConCheque
Solicitud
Aprobacion
PagoACredito
Solicitud
AprobacionPago
ConChequeNotación
clases
abstractas
UML
Recordemos
UML
proporciona
notación
representar
clases
abstractas
nombre
clase
cursiva
Figura
26.12
MODELADO
GENERALIZACI
381
Figura
26.11
Clases
conceptuales
abstractas
Pago
PagoEnEfectivo
PagoACredito
PagoConCheque
Pago
PagoEnEfectivo
PagoACredito
PagoConCheque
existir
instancia
Pago
PagoEnEfectivo
PagoACredito
PagoConCheque
Pago
clase
conceptual
abstracta
Pago
clase
conceptual
abstracta
instancia
Pago
conformar
subclases
PagoEnEfectivo
PagoACredito
PagoConCheque
clase
conceptual
abstracta
Figura
26.12
Notación
clases
abstractas
Pago
EnEfectivo
Pago
ACredito
Pago
ConCheque
Pago
cantidad
Dinero
clase
abstracta
representa
cursiva
Identifique
clases
abstractas
represéntelas
nombre
cursiva
Modelo
Dominio
26.8
Modelado
cambios
Asuma
pago
autorizado
autorizado
significa-
tivo
mostrarlo
modelo
dominio
serlo
realmente
as
malo
exposición
muestra
Figura
26.13
enfoque
modelado
definirsubclases
Pago
PagoNoAutorizado
PagoAutorizado
observe
pago
permanece
normalmente
cambia
autorizado
au-
torizado
guía
modele
concepto
subclases
X.
Defina
jerarquía
asocie
Ignore
representación
concepto
modelo
dominio
lu-
gar
represente
diagramas
26.9
Jerarqu
as
clases
herencia
software
explicación
jerarquías
clases
conceptuales
mencionado
herencia
discusión
centra
modelo
dominio
cosas
mundo
ar-
tefactos
software
lenguaje
programaci
ón
orientado
objeto
subclase
software
hereda
definición
atributos
operaciones
superclases
creación
jerarqu
as
clases
software
herencia
mecanismo
software
cosas
superclase
apliquen
subclases
Permite
factorizar
código
subclases
subirlo
jerarquía
clases
herencia
ning
papel
real
desempe
ar
di
scusión
modelo
dominio
pasamos
punto
vista
dise
implementaci
ón
jerarquías
clases
conceptuales
generadas
reflejarse
Modelo
Dise
o.
ejemplo
jerarqu
ía
clases
transacciones
servicios
externos
reunirse
expandirse
jerarquías
clases
alternativas
dependiendo
caracter
ísticas
lenguaje
factore
s.
ejemplo
cla
ses
plantilla
template
H11001
H11001algunas
reducir
mero
cla
ses
382
UML
PATRONES
Figura
26.13
Modelado
cambios
PagoNo
útil
subclases
cambian
superclase
PagoNoAutorizado
PagoAutorizado
EstadoPago
EstadoNoAutorizado
Pago
Esta-en
EstadoAutorizadoObjetivos
Añadir
clases
asociación
Modelo
Dominio
Añadir
relaciones
agregación
Modelar
intervalos
tiempo
información
aplicable
•E
legir
modelar
roles
Organizar
Modelo
Dominio
paquetes
Introducción
capítulo
presenta
ideas
útiles
notaci
ón
adicional
di
sponible
modelado
dominio
aplica
refinar
spectos
Modelo
Dominio
PDV
NuevaEra
27.1
Clases
asociación
siguientes
requisitos
dominio
disponen
escenario
clases
asociación
servicios
autorización
asignan
ID
comerciante
tienda
identifique
comunicaciones
solicitud
autorización
pago
tienda
servicio
autorización
necesita
ID
comerciante
identifica
tienda
servicio
Capítulo
27
REFINAMIENTO
MODELO
DOMINIO
PRESENTE
n.
eternidad
divide
dominio
desilusión
reino
esperanza
Ambrose
Bierce.•
tienda
ID
comerciante
distinto
servicio
debería
residir
ID
comerciante
Modelo
Dominio
UP
incorrecto
colocar
comercianteID
Tienda
Tienda
valor
comercianteID
ocurre
colocamos
Servi-
cioAutorizacion
Figura
27.1
384
UML
PATRONES
Figura
27.1
inapropiado
atributo
direccion
comercianteID
nombre
numeroTelefono
ServicioAutorizacion
direccion
comercianteID
nombre
Tienda
ambas
localizaciones
comercianteID
incorrectas
comercianteIDEsto
principio
modelado
modelo
dominio
clase
simultáneamente
valores
tipo
atributo
coloque
atributo
C.
Coloque
atributo
clase
esté
asociada
C.
ejemplo
Persona
números
teléfono
Coloque
número
teléfono
clase
NumeroTelefonoo
InformacionDeContacto
asocie
Persona
principio
sugiere
apropiado
modelo
Figura
27.2
mundo
negocios
concepto
recoge
formalmente
información
relacionada
servicios
servicio
proporciona
cliente
Contrato
Figura
27.2
intento
modelado
problema
comercianteID
direccion
nombre
numeroTelefono
ServicioAutorizacion
nombre
direccion
Tienda
comercianteID
ContratoDeServicioCompra
modelo
útil
Vende
Autoriza-pago-mediante
Tienda
ServicioAutorizacion
estén
relacionados
ContratoDeServicio
síntoma
depende
relación
pensar
comercianteID
atributo
relacionado
asociación
Tien-
ServicioAutorizacion
noción
clase
asociación
añadir
caracterís-
ticas
asociación
modelar
ContratoDeServicio
clase
aso-
ciación
relacionada
asociación
Tienda
ServicioAutorizacion
UML
representa
línea
punteada
asociación
clase
asociación
Figura
27.3
tran
smite
visualmente
idea
ContratoDeSer-
vicio
atributos
relacionado
sociación
Tienda
Ser-
vicioAutorizacion
tiempo
vida
ContratoDeServicio
depende
re
lación
REFINAMIENTO
MODELO
DOMINIO
385
Figura
27.3
clase
asociación
direccion
nombre
numeroTelefono
ServicioAutorizacion
nombre
direccion
Tienda
comercianteID
ContratoDeServicio
clase
asociación
atributos
relacionados
asociación
tiempo
vida
depende
asociación
Autoriza-pago-mediante
Guías
guías
incluir
clases
asociaciones
encuentran
siguientes
Indicios
útil
clase
asociación
modelo
dominio
atributo
relacionado
asociación
tiempo
vida
instancias
clase
asociación
depende
asociación
asociación
muchos-a-muchos
conceptos
información
asociada
asociación
presencia
asociación
muchos-a-muchos
signo
típico
cla-
asociación
útil
escondida
plano
sitio
vea
ten-
ga
clase
asociación
Figura
27.4
ilustra
ejemplos
clases
asociación
27.2
Agregación
composición
agregación
tipo
asociación
utiliza
modelar
relaciones
todo-
cosas
denomina
compuesto
ejemplo
ensamblajes
físicos
organizan
relaciones
agregación
Mano
agrega
Dedos
Agregación
UML
agregación
representa
UML
rombo
hueco
relleno
extremo
compuesto
asociación
todo-parte
Figura
27.5
agregación
propiedad
rol
asociación1
386
UML
PATRONES
Figura
27.4
Clases
asociación
salario
Empleo
EmpleaCompañia
Persona
fechaDeEncarcelamiento
PeriodoEncarcelamiento
EncarcelaCarcel
Persona
Casado-con
Persona
10
persona
empleos
compañías
Figura
27.5
Notación
agregación
Dedo0
7Mano
rombo
agregación
Recordemos
extremo
sociación
rol
rol
UML
varia
propiedades
multiplicidad
nombre
navegabilidad
esAgregado
nombre
sociación
excluye
relaciones
agregaci
ón
puesto
piensa
habitualmente
Tiene-parte
aco
s-
tumbrarse
proporcionar
detalles
semánticos
Agregación
composición
rombo
relleno
agregación
composición
composición
significa
miembro
único
objeto
compuesto
dependencia
existencia
disposición
compuesto
ejemplo
relación
composición
mano
dedo
Modelo
Diseño
composición
implicación
dependencia
exis-
tencia
indica
objetos
software
compuestos
crean
provocan
creación
objetos
software
ejemplo
Venta
crea
objetos
LineaDeVenta
Modelo
Dominio
puesto
representa
objetos
software
rara
relevante
noción
crea
partes
venta
real
crea
ínea
venta
real
analogía
ejemplo
modelo
do-
minio
cuerpo
humano
pien
sa
mano
incluye
dedos
formado
mano
entendemos
significa
for-
mado
dedos
igualmente
composición
denota
rombo
relleno
implica
com-
puesto
posee
encuentran
jerarquía
partes
forma
árbol
forma
agregación
común
presenta
modelar
ejemplo
dedo
única
mano
speramos
rombo
agregaci
ón
relleno
indicar
agregaci
ón
compo
sición
Figu-
ra
27.6
REFINAMIENTO
MODELO
DOMINIO
387
Figura
27.6
Agregación
composición
Dedo0
7Mano
agregación
composición
multiplicidad
extremo
compuesto
exactamente
po-
dría
exi
stir
separada
alg
ún
compue
sto
ejemplo
quita
dedo
mano
conectarse
inmediatamente
objeto
compuesto
mano
pie
declarando
modelo
independientemente
méritos
mé-
dicos
idea
multiplicidad
extremo
compuesto
eliminarse
compuesto
existir
pertenecer
compuesto
dedos
floten
aire
utilice
1.Agregación
compartida
rombo
hueco
agregación
compartida
significa
multiplicidad
extremo
compuesto
representa
rombo
hueco
Implica
simultáneamente
instancias
compuesto
agregación
com-
partida
rara
agregaciones
físicas
con-
ceptos
físicos
ejemplo
considerar
paquete
UML
agrega
elementos
elemento
referenciado
paquete
pertenece
paquete
referenciado
ejemplo
agregaci
ón
compartida
Figu-
ra
27.7
388
UML
PATRONES
Figura
27.7
Agregaci
ón
compartida
ElementoUMLReferenciaPaqueteUML
agregación
compartida
identificar
agregación
casos
presencia
agregación
obvia
normalmente
ensamblajes
físicos
agregación
duda
descártela
continuación
presentamos
guías
sugieren
mostrar
agre-
gación
Considere
mostrar
agregación
tiempo
vida
ligado
tiempo
vida
compuesto
dependencia
creación-eliminación
ensamblaje
obvio
todo-parte
físico
lógico
propiedad
compuesto
propaga
partes
ubicación
operaciones
aplican
compuesto
propagan
partes
destrucción
movimiento
grabación
Aparte
ensamblaje
partes
obvio
pista
útil
presencia
dependencia
creación-eliminación
beneficio
representación
agregación
Identificar
representar
agregación
excesivamente
importante
po-
sible
excluya
modelo
dominio
mayoría
modela-
dores
dominio
experiencia
visto
malgasta
tiempo
improductivo
de-
batiendo
puntos
sutiles
asociaciones
Descubra
muestre
agregaciones
proporciona
siguientes
beneficios
mayoría
relacionan
diseño
lugar
análisis
significativa
exclusión
modelo
dominio
Aclara
restricciones
dominio
exi
stencia
desea
independiente
agregación
composición
existir
tiempo
vida
trabajo
diseño
influye
dependencias
creación-eli-
minación
clases
software
elementos
base
datos
integridad
referencial
caminos
eliminación
cascada
Ayuda
identificaci
ón
creador
compue
sto
utilizando
patr
ón
GRASP
Creador
operacione
copia
eliminaci
ón
aplican
propagan
partes
Agregación
Modelo
Dominio
PDV
dominio
PDV
considerar
instancias
LineaDeVenta
Venta
compuesta
general
líneas
transacción
ven
transacción
agregada
Figura
27.8
ajustarse
patrón
de-
pendencia
creación-eliminación
líneas
venta
Venta
tiempos
vida
ligados
tiempo
vida
Venta
justificación
parecida
CatalogoDeProductos
agregado
objetos
EspecificacionDelProducto
REFINAMIENTO
MODELO
DOMINIO
389
Figura
27.8
Agregación
aplicación
punto
venta
LineaDeVentaVenta
EspecificacionDelProductoCatalogoDeProductos
relaci
ón
combinaci
ón
convincente
sugiera
semántica
todo-parte
dependencia
creación-eliminación
caso
duda
descártela”.27.3
Intervalos
tiempo
precios
productos
arreglar
error
Iteración
iteración
instancias
LineaDeVenta
asociaron
instancias
EspecificacionDelProducto
recogen
precio
art
ículo
simpli-
ficación
razonable
primeras
iteraciones
necesita
corrija
Surge
cuestión
interesante
ampliamente
aplicable
intervalos
tiempo
asociados
información
contratos
cosas
estilo
LineaDeVenta
recuperaba
precio
actual
registrado
Especi-
ficacionDelProducto
cambió
precio
objeto
antiguas
ven-
tas
referenciarían
precios
incorrecto
necesita
dis-
tinguir
precio
histórico
creó
venta
precio
actual
Dependiendo
requisitos
información
formas
modelar
simplemente
copiar
precio
producto
LineaDeVenta
mantener
precio
actual
EspecificacionDelProducto
enfoque
robusto
asociar
colección
objetos
PrecioProducto
EspecificacionDelProducto
intervalo
tiempo
aplicable
asociado
organización
registrar
precios
anteriores
resolver
problema
precios
venta
análisis
tendencias
registrar
fu-
turos
precios
previstos
Figura
27.9
Diríjase
CLD99
discusión
am-
plia
intervalos
tiempo
categoría
arquetipos
Momento-Intervalo
390
UML
PATRONES
Figura
27.9
PrecioProducto
intervalos
tiempo
Venta
fecha
hora
Linea
DeVenta
cantidad
Especificacion
DelProducto
descripcion
articuloID
Descrita-por
Catalogo
DeProductos
Precio
Producto
intervaloActivo
IntervaloTiempo
precio
Dinero
IntervaloTiempo
inicio
MarcaDeTiempo
MarcaDeTiempo
*1
Tasado-por
habitual
necesite
mantener
colección
información
relacionada
intervalos
tiempo
lugar
valor
simple
Medidas
físicas
médicas
científicas
artefactos
contabilidad
jurídicos
requisito
27.4
Nombres
roles
asociación
extremo
asociación
rol
propiedades
nombre
multiplicidadUn
nombre
rol
identifica
extremo
asociación
idealmente
describe
papel
juegan
objetos
sociación
Figura
27.10
mue
stra
ejemplos
nombres
roles
REFINAMIENTO
MODELO
DOMINIO
391
Figura
27.10
Nombres
roles
Vuelo
CiudadVuela-a
destino
nombre
rol
describe
rol
ciudad
asociación
Vuela-a
Persona
padre
Crea
hijo
requiere
nombre
rol
expl
ícito
útil
rol
objeto
Normalmente
comienza
letra
min
úscula
muestra
explí-
citamente
asuma
defecto
nombre
rol
nombre
clase
relaciona
empezando
minúscula
presentó
previamente
explicación
paso
diseño
código
roles
utilizados
DCDs
interpretarse
base
nombres
atributos
generación
código
27.5
Roles
conceptos
vs
roles
asociaciones
modelo
dominio
rol
mundo
real
especialmente
rol
humano
po-
dría
modelarse
formas
concepto
separado
representado
rol
asociación2
ejemplo
rol
cajero
encargado
expresar
formas
muestran
Figura
27.11
enfoque
llamarse
roles
asociaciones
roles
conceptos
enfoques
ventajas
roles
asociaciones
atractivos
forma
relativamente
precisa
expresar
instancia
persona
asume
múltiples
cambiantes
di-
námicamente
roles
asociaciones
persona
simultáneamente
suce-
sivamente
asumir
rol
escritor
diseñador
software
padre
etcétera
simplicidad
ignorado
excelentes
soluciones
discuten
Fowler96].Por
roles
conceptos
facilitan
flexible
inclusión
atributos
únicos
asociaciones
semántica
adicional
implementación
roles
clases
separadas
sencillo
limitaciones
lenguajes
programación
orientados
objetos
comerciales
actuales
conveniente
cambiar
di-
námicamente
in
stancia
cla
añadir
din
ámicamente
comporta
miento
atributos
cambia
rol
persona
27.6
Elementos
derivados
elemento
derivado
determinado
atributos
aso-
ciaciones
elementos
derivados
comunes
mostrar
ele-
mentos
derivados
Evite
mostrar
elementos
derivados
diagrama
puesto
añaden
complejidad
información
añada
elemento
derivado
ele-
mento
destacado
terminología
excluye
perjudica
comprensión
ejemplo
Venta
derivar
información
objetos
LineaDeVenta
EspecificacionDelProducto
Figura
27.12
UML
re-
presenta
anteponiendo
nombre
elemento
392
UML
PATRONES
Figura
27.11
formas
modelar
roles
humanos
Tienda
PersonaEmplea-para-gestionar-ventas
cajero
Emplea-para-dirección
encargado
Gestiona
trabajadorencargado
Tienda
Cajero
EncargadoEmplea
Emplea
roles
conceptos
Gestiona
roles
asociación
11
Figura
27.12
Atributo
derivado
fecha
/total
hora
Venta
atributo
derivadoOtro
ejemplo
cantidad
LineaDeVenta
realmente
derivar
par-
tir
úmero
in
stancias
Articulo
asociadas
ínea
venta
Figu-
ra
27.13
REFINAMIENTO
MODELO
DOMINIO
393
Figura
27.13
Atributo
derivado
relacionado
multiplicidad
LineaDeVenta1
Venta
/cantidad
derivable
multiplicidad
existente
27.7
Asociaciones
calificadas
asociación
utilizarse
calificador
permite
distinguir
con-
objetos
extremo
asociación
base
valor
calificador
asociación
calificador
asociación
calificada
ejemplo
podr
ían
di
stinguirse
objeto
EspecificacionDelProducto
CatalogoDeProductos
articuloID
ilu
stra
Figura
27.14
Comparando
figuras
Figura
27.14
calificación
reduce
multipli-
cidad
extremo
alejado
calificador
normalmente
disminuye
inclusión
calificador
modelo
dominio
comunica
dominio
distinguen
instancias
clase
relación
clase
debe-
ría
utilizarse
modelo
dominio
expre
sar
decisiones
diseño
cla-
ves
búsqueda
conveniente
diagramas
ilustren
decisiones
diseño
calificadores
normalmente
añaden
información
útil
convincente
po-
demos
caer
trampa
pensar-diseño
utilizados
juiciosamente
pue-
den
mejorar
conocimiento
dominio
sociación
calificada
Catalo-
goDeProductos
EspecificacionDelProducto
proporciona
ejemplo
razonable
calificador
valor
añadido
Figura
27.14
Asociación
calificada
Catalogo
DeProductos
Especificacion
DelProductoarticuloID
Contiene
Catalogo
DeProductos
Especificacion
DelProducto
Contiene
reduce
multiplicidad
calificador
1127.8
Asociaciones
reflexivas
concepto
asociado
conoce
asociación
re-
flexiva3
Figura
27.15
394
UML
PATRONES
Figura
27.15
Asociación
reflexiva
Persona
padre
Crea
hijo
27.9
Elementos
ordenados
objetos
asociados
ordenados
representar
Figura
27.16
ejemplo
instancias
LineaDeVenta
mantener
orden
entrada
Figura
27.16
Elementos
ordenados
LineaDeVenta
ordered
Venta
tipo
ordenación
orden
añaden
27.10
Utilización
paquetes
organizar
Modelo
Dominio
modelo
dominio
crecer
fácilmente
llegar
suficientemente
amplio
conveniente
dividirlo
paquetes
incluyen
conceptos
fuertemente
re-
lacionados
sirve
ayuda
mejorar
comprensión
abordar
trabajo
análisis
paralelo
personas
realizan
análisis
dominio
di-
ferentes
subdominios
siguientes
secciones
ilustran
estructura
paquetes
Modelo
Dominio
UP
Notación
paquetes
UML
Recordemos
paquete
UML
representa
carpeta
Figura
27.17
mostrarse
paquete
paquetes
subordinados
pa-
MO95
restringe
definición
asociaciones
reflexivas.quete
describe
elementos
nombre
paquete
coloca
etiqueta
caso
centra
carpeta
REFINAMIENTO
MODELO
DOMINIO
395
Figura
27.17
paquete
UML
Dominio
Elementos
VentasBasicos
Pertenencia
referencias
elemento
pertenece
paquete
definido
referenciado
paquetes
caso
nombre
elemento
califica
nombre
pa
quete
utilizando
formato
nombre
camino
NombrePaquete::NombreElemento
Figura
27.18
cla
muestra
paquete
pertene-
ce
podr
ía
modificar
nuev
as
asociaciones
dem
ás
permanece
alterar
Figura
27.18
clase
referenciada
paquete
VentasElementos
Basicos
Venta
Elementos
Basicos
Registro
Captura
Tienda
RegistroTiene
*1
Dependencias
paquetes
elemento
modelo
depende
representar
de-
pendencia
relación
dependencia
descrita
línea
punta
flecha
dependencia
paquetes
indica
elementos
paquete
dependiente
co-
nocen
acoplados
elementos
paquete
destino
ejemplo
paquete
referencia
elemento
pertenece
dependencia
paquete
Ventas
dependencia
paquete
Elementos
Basicos
Figura
27.19).Indicación
paquete
diagrama
paquetes
conveniente
dibujar
diagrama
paquetes
obstante
desea-
ble
indicar
paquete
pertenecen
elementos
situación
incluya
nota
rectángulo
esquina
doblada
ilustra
Figura
27.20
396
UML
PATRONES
Figura
27.19
Dependencia
paquetes
Dominio
Elementos
Basicos
Ventas
Figura
27.20
Representación
pertenencia
paquete
nota
Tienda
RegistroTiene
paquete
Elementos
Basicos
particiona
Modelo
Dominio
deberían
organizarse
paquetes
clases
modelo
dominio
Aplique
siguientes
guías
generales
particionar
modelo
dominio
paquetes
ponga
juntos
elementos
encuentran
área
interés
estrechamente
relacionados
concep-
tos
objetivos
juntos
jerarquía
clases
participan
casos
fuertemente
asociados
Resulta
útil
elementos
relacionados
modelo
dominio
tengan
raíz
paquete
denominado
Dominio
conceptos
básicos
comunes
compartidos
definan
paquete
llamar
Elementos
Ba-
sicos
Conceptos
Comunes
ausencia
paquete
significativo
colocarlos
Paquetes
Modelo
Dominio
PDV
base
criterio
organización
paquetes
Modelo
Dominio
PDV
muestra
Figura
27.21
REFINAMIENTO
MODELO
DOMINIO
397
Figura
27.21
Paquetes
conceptos
dominio
Dominio
Basico
Misc
Pagos
Productos
Ventas
Transacciones
Autorizacion
Paquete
Basico
Misc
paquete
Ba
sico
Misc
Figura
27.22
conveniente
contenga
concepto
ampliamente
compartidos
ubicación
obvia
referencias
posteriores
abreviará
nombre
paquete
Basico
Figura
27.22
Paquete
básico
Basico
Misc
Registro
Encargado
Tienda
direccion
nombre
Alberga
Emplea
conceptos
asociaciones
específicas
iteración
pa-
quete
Pagos
iteración
consideración
criterio
necesito-conocer
motiva
aparición
asociaciones
ejemplo
necesita
registrar
relación
PagoACredito
TarjetaDeCredito
cambio
añaden
asociaciones
mejorar
comprensión
CarnetConducir
Identifica
Cliente
Figura
27.23).Nótese
RespuestaAutorizacionPago
repre
senta
cla
socia-
ción
respuesta
surge
asociación
pago
servicio
autorización
Productos
excepción
agregación
composición
conceptos
aso-
ciaciones
específicas
iteración
Figura
27.24
Ventas
excepción
agregación
composición
atributos
derivados
conceptos
asociaciones
específicas
iteración
Figura
27.25
Transacciones
Autorización
recomienda
proporcionar
nombre
significativos
asociaciones
gunos
casos
indispensable
especialmente
propósito
398
UML
PATRONES
Figura
27.23
Paquete
pagos
Pagos
Cheque
Cuentas
PorCobrar
Pago
ACredito
Pago
ConCheque
Servicio
Autorizacion
Cheques
Servicio
Autorización
Credito
Autorizado-por
Autorizado-por
ServicioAutorizacion
direccion
nombre
numeroTelefono
Basico::TiendaPago
cantidad
Establece-
credito-para
Registra
TarjetaDeCredito
fechaCaducidad
numero
CarnetConducir
numero
Establece-
identidad-para
Pago
PagoEnEfectivo
cantidadEntregada
Ventas::ClienteAbusa-de-ella
Identifica
Transacciones
Autorización
RespuestaAutorizacionPago
PagosConCheque
RespuestaPagoConCheque
PagosACredito
RespuestaPagoACredito
111
11
Autoriza-pago-de
comercianteID
ContratoDeServicio
1de
asociación
obvio
destinatarios
ejemplo
caso
asociación
pagos
transacciones
nombres
dejado
especificar
asumir
personas
leer
diagrama
clases
Figura
27.26
entenderán
transacciones
pagos
añadir
nombres
simplemente
enmaraña
diagrama
diagrama
detallado
muestra
demasiadas
especializaciones
De-
pende
criterio
utilidad
incorrecto
añade
valor
mejorar
comprensión
dominio
respuesta
debería
influir
número
es-
pecializaciones
representan
modelo
dominio
REFINAMIENTO
MODELO
DOMINIO
399
Figura
27.24
Paquete
productos
Productos
Basico::Tienda
Almacena
Describe
Ventas
LineaDeVenta
Descrita-por
Registra-venta-de
Especificacion
DelProducto
descripcion
precio
articuloID
CatalogoDeProductos
Articulo1
Figura
27.25
Paquete
ventas
Ventas
Cajero
Cliente
LineaDeVenta
/cantidad
Venta
fecha
esCompleta
hora
Inicia
Basico::Registro
Records-sales-on
Capturada
Basico::TiendaRegistra-completada
LineaDe
Impuesto
descripcion
porcentaje
cantidad
1400
UML
PATRONES
Figura
27.26
Paquete
transacciones
autorización
Transacciones
Autorización
Solicitud
Autorizacion
Pago
Respuesta
Aprobacion
PagoACredito
Solicitud
Aprobacion
PagoACredito
Solicitud
Aprobacion
PagoConCheque
Respuesta
Autorización
PagoACredito
Pagos
Servicio
Autorizacion
Envia
Recibe
Pagos
PagoACredito
Pagos
PagoConCheque
Transaccion
Autorizacion
Pago
fecha
hora
Basico
Tienda
Respuesta
Autorizacion
Pago
Recibe
Envia
11
11
Respuesta
Desaprobacion
PagoACredito
Respuesta
Aprobacion
PagoConCheque
Respuesta
Desaprobacion
PagoConChequeObjetivos
Definir
DSSs
contratos
operaciones
sistema
iteración
actual
28.1
diagramas
secuencia
sistema
iteración
actual
requisitos
gestión
pagos
implican
colaboraciones
sistemas
externos
Recordemos
DSSs
utilizan
notación
diagramas
secuencia
representar
colaboraciones
sistemas
tratando
sistema
caja
negra
conveniente
ilustrar
eventos
siste-
ma
DSSs
aclarar
operaciones
sistema
sistema
PDV
NuevaEra
nece-
sitará
soporte
solicitudes
sistemas
respuestas
esperadas
solicitudes
Inicio
común
escenario
Procesar
Venta
DSS
inicio
scenario
básico
incluye
eventos
sistema
crearNuevaVenta
introducirArticulo
finalizarVenta;e
sta
común
indepen-
dientemente
método
pago
Figura
28.1
Capítulo
28
AÑADIR
DSSS
CONTRATOS
virtud
tentación
insuficiente
George
Bernard
Shaw402
UML
PATRONES
Pago
crédito
DSS
escenario
pago
crédito
comienza
inicio
común
Figura
28.2
Figura
28.1
DSS
inicio
común
introducirArticulo(articuloID
cantidad
Sistema
PDVNuevaEra
Cajero
finalizarVenta
Escenario
Procesar
Venta
descripcion
impuestos
artículos
crearNuevaVenta
actor
CalculadorImpuestos
lineasDeImpuesto
getImpuestos
venta
Figura
28.2
DSS
pago
crédito
realizarPagoACredito
numCred
fechaCad
respuesta
solicitarAprobacion
solicitud
Cliente
anotarCuentaPorCobrar
cuentaPorCobrar
Sistema
PDVNuevaEra
actor
ServicioAutorizacion
Credito
actor
Contabilidad
anotarVenta
venta
pago
cr
édito
pago
cheque
asume
simplicidad
iteración
pago
exactamente
venta
pasar
parámetro
cantidad
entregada
Nótese
solicitud
ServicioAutorizacionCredito
externo
modela
mensaje
síncrono
ordinario
valor
retorno
abstracción
im-plementarse
solicitud
SOAP
HTTPS
seguros
mecanismo
comunicación
remota
adaptadores
recursos
definieron
iteración
ocultarán
protocolo
específico
operación
sistema
realizarPagoACredito
caso
uso—asume
in-
formación
crédito
cliente
procede
tarjeta
crédito
in-
troduce
sistema
número
crédito
fecha
caducidad
proba-
blemente
lector
tarjeta
admitimos
futuro
surgirán
mecanismos
alternativos
comunicar
información
acerca
crédito
suposición
tarjetas
crédito
estable
Recordemos
servicio
autorización
crédito
aprueba
pago
crédito
deuda
tienda
pago
necesario
añada
sistema
contabilidad
entrada
cobrar
Pago
cheque
DSS
escenario
pago
cheque
muestra
Figura
28.3
AÑADIR
DSSS
CONTRATOS
403
Figura
28.3
DSS
pago
cheque
realizarPagoConCheque
numCarnetConducir
respuesta
solicitarAprobacion(solicitud
Cajero
Sistema
PDVNuevaEra
actor
ServicioAutorizacion
Cheque
caso
cajero
introducir
número
carnet
con-
ducir
validarlo
28.2
operaciones
sistema
sta
iteraci
ón
operacione
sistema
ge
stionar
sistema
realizarPagoACredito
•r
alizarPagoConCheque
iteración
evento
sistema
operación
pago
efectivo
simplemente
realizarPago
pagos
tipos
renombra
realizarPagoEnEfectivo.28.3
contratos
operaciones
sistema
Recordemos
contratos
operaciones
sistema
artefacto
requi-
sitos
opcional
Modelo
Casos
añade
detalles
sutiles
relativos
operación
sistema
texto
caso
suficiente
necesarios
contratos
ocasiones
resultan
útiles
precisa
detallada
identificar
ocurre
invoca
operación
com-
pleja
sistema
términos
cambios
objetos
definidos
Mo-
delo
Dominio
continuación
presentamos
contratos
operaciones
sistema
Contrato
CO5
realizarPagoACredito
Operación
realizarPagoACredito(numCtaCredito
fechaCaducidad
Referencias
Cruzadas
Casos
Procesar
Venta
Precondiciones
venta
curso
introducido
artículos
Postcondiciones
creó
PagoACredito
pg
pg
asoció
Venta
actual
vta
creó
TarjetaDeCredito
tc
tc.numero
numCtaCredito
tc.fechaCaducidad
fechaCaducidad
tc
asoció
pg
creó
SolicitudPagoACredito
spc
pg
asoció
spc
creó
EntradaCuentaPorCobrar
ec
ec
asoció
sistema
externo
ContabilidadEntradasPorCobrar
vta
asoció
Tienda
venta
completa
Obsérvese
postcondición
indica
asociación
entrada
cobrar
contabilidad
cuentas
cobrar
responsabilidad
límites
sistema
NuevaEra
sistema
contabilidad
cobrar
en-
cuentra
control
negocio
añadido
sentencia
com-
probación
corrección
ejemplo
pruebas
postcondición
de-
bería
comprobar
sistema
contabilidad
cobrar
contiene
entrada
cobrar
Contrato
CO6
realizarPagoConCheque
Operación
realizarPagoConCheque(numCarnetConducir
Referencias
Cruzadas
Casos
Procesar
Venta
Precondiciones
venta
curso
introducido
artículos
Postcondiciones
creó
PagoConCheque
pg
pg
asoció
enta
actual
vta
creó
CarnetDeConducir
cc
cc.numero
numCarnetConducir
404
UML
PATRONESPostcondiciones
cc
asoció
pg
continuación
creó
SolicitudPagoConCheque
spc
pg
asoció
spc
vta
asoció
Tienda
venta
completa
AÑADIR
DSSS
CONTRATOS
405Objetivos
Crear
diagramas
clases
casos
Introducción
UML
incluye
notación
diagramas
representar
eventos
cosas
transacciones
casos
personas
etcétera
intro-
ducción
presentan
características
importantes
notación
cubren
destaca
diagramas
mostrar
eventos
sistema
casos
aplicarse
adicionalmente
clase
29.1
Eventos
transiciones
evento
ocurrencia
significativa
relevante
ejemplo
Descolgar
teléfono
condición
objeto
instante
tiempo
tiempo
eventos
ejemplo
teléfono
inactivo
colgarlo
descolgarlo
Capítulo
29
MODELADO
COMPORTAMIENTO
DIAGRAMAS
utilidad
oxígeno
notas
pierdes
AnónimoUna
transición
relación
indica
lugar
evento
objeto
pasa
ejemplo
lugar
evento
descolgar
transición
te-
léfono
inactivo
activo
29.2
Diagramas
diagrama
UML
muestra
Figura
29.1
representa
eventos
ye
stados
interesantes
objeto
comportamiento
objeto
reacción
evento
transiciones
representan
flechas
etiquetadas
eventos
es-
tados
representan
rect
ángulos
squinas
redondeadas
habitual
incluir
pseudo-estado
inicial
pasa
automáticamente
crea
instancia
408
UML
PATRONES
Figura
29.1
Diagrama
teléfono
descolgar
Inactivo
Activo
colgar
Teléfono
transición
evento
inicial
diagrama
muestra
ciclo
vida
objeto
qu
eventos
experi-
menta
transiciones
eventos
necesario
ilustrar
posibles
eventos
surge
evento
representado
diagrama
ignora
evento
diagrama
refiere
tan-
to
crear
diagrama
describa
ciclo
vida
objeto
nivel
detalle
arbitrariamente
simple
complejo
dependiendo
necesidades
Aplicaciones
diagramas
diagrama
aplicarse
variedad
elemento
UML
encuentran
clases
conceptuales
software
casos
Puesto
sistema
completo
representar
clase
diagrama
estados.29.3
Diagramas
UP
UP
modelo
llame
modelo
elemento
modelo
Modelo
Diseño
Modelo
Dominio
etcétera
máquina
entenderlo
comunicar
comportamiento
dinámico
respuesta
eventos
ejemplo
máquina
asociada
clase
diseño
Venta
Modelo
Diseño
forma
Modelo
Diseño
29.4
Diagramas
casos
aplicación
útil
diagramas
descripción
secuencia
legal
eventos
sistema
externo
reconoce
maneja
sistema
contexto
caso
ejemplo
caso
Procesar
Venta
aplicación
PDV
NuevaEra
legal
cabo
operación
realizarPagoACredito
lugar
evento
finalizarVenta
caso
Procesar
Documento
procesador
texto
legal
ejecutar
operación
Guardar-Fichero
lugar
evento
Nuevo-Fichero
Abrir-Fichero
diagrama
describe
eventos
sistema
global
secuencias
caso
especie
diagrama
casos
diagrama
casos
Figura
29.2
muestra
versión
simplificada
eventos
sistema
caso
Procesar
Venta
aplicación
PDV
Ilustra
legal
generar
evento
realizarPago
previamente
evento
finalizarVenta
causado
transición
sistema
EsperandoPago
MODELADO
COMPORTAMIENTO
DIAGRAMAS
409
Figura
29.2
Diagrama
caso
Procesar
Venta
EsperandoVenta
IntroduciendoArticulos
introducirArtículo
EsperandoPago
crearNuevaVenta
realizarPago
finalizarVentaevento
sistema
externo
Procesar
Venta
Utilidad
diagramas
casos
número
eventos
sistema
orden
legal
caso
Procesar
Venta
momento
relativamente
triviales
necesario
undiagrama
mostrar
secuencia
válida
caso
complejo
innumerables
eventos
sistema
utiliza
procesador
texto
re-
sulta
útil
utilizar
diagrama
ilustre
orden
válido
eventos
externos
Veamos
trabajo
diseño
implementación
necesario
crear
implementar
diseño
asegure
ocurran
eventos
secuencia
esta-
blecida
producirse
condición
error
ejemplo
de-
bería
permitir
sistema
reciba
pago
complete
venta
escribir
código
garantice
Proporcionando
conjunto
diagramas
diseñador
desarrollar
metódicamente
di
seño
segure
orden
correcto
eventos
sistema
posibles
soluciones
diseño
encuentran
estructura
condicional
código
comprobar
eventos
ocurren
orden
correcto
utilizar
patrón
presentará
capítulo
posterior
deshabilitar
elementos
gráficos
ventanas
activas
rechazar
even-
tos
válidos
enfoque
deseable
intérprete
máquinas
ejecuta
tabla
stados
repre-
senta
diagrama
casos
dominio
eventos
sistema
concisión
minuciosidad
diagramas
casos
ayudan
diseñador
asegurar
omi-
tido
29.5
Diagramas
casos
aplicación
PDV
Procesar
Venta
410
UML
PATRONES
Figura
29.3
diagrama
muestra
EsperandoVenta
IntroduciendoArticulos
introducirArticulo
EsperandoPago
crearNuevaVenta
realizarPagoEnEfectivo
finalizarVenta
AutorizandoPago
realizarPagoConCheque
realizarPagoACredito
autorizado
Procesar
Venta29.6
Clases
benefician
diagramas
crearse
diagramas
casos
sistema
global
crearse
prácticamente
tipo
clase
Objetos
dependientes
independientes
objeto
responde
evento
independiente-del-estado
modeless
evento
ejemplo
objeto
recibe
mensaje
método
responde
método
normalmente
lógica
condicional
objeto
independiente
re
specto
men
saje
eventos
inter
és
objeto
reacciona
sma
objeto
independiente-del-estado
cambio
objetos
pendientes-del-estado
reaccionan
dife
rente
eventos
dependiendo
Cree
máquinas
objetos
dependientes
comporta-
miento
complejo
general
sistemas
información
gestión
clases
realmente
depen-
dientes
minoría
cambio
dominios
control
procesos
telecomunicaciones
frecuencia
objetos
dependientes
Clases
dependientes
comunes
continuación
presentamos
li
sta
objeto
comunes
normalmente
de-
pendientes
útil
crear
diagrama
Casos
Visto
clase
caso
Procesar
Venta
reacciona
dife-
rente
evento
finalizarVenta
dependiendo
venta
curso
Sesiones
objetos
software
servidor
representan
sesiones
marcha
conversaciones
cliente
ejemplo
objetos
se-
sión
stateful
EJB
ejemplo
común
gestión
servidor
aplicaciones
web
cliente
ógica
flujo
pre
sentación
ejemplo
servlet
Java
helper
controlador
recuerda
stado
sesión
cliente
Web
controla
transiciones
páginas
web
modificaciones
información
muestra
pagina
web
actual
basado
se-
sión
conversación
sesión
normalmente
suele
clase
software
representa
ca
so
so
Recordemos
variantes
patr
ón
GRASP
Controlador
controlador
casos
objeto
se-
sión
caso
MODELADO
COMPORTAMIENTO
DIAGRAMAS
411•
Sistemas
clase
representa
aplicación
sistema
global
sistema
PDV
Ventanas
acción
Editar-Pegar
válida
portapapeles
pegar
Controladores
objetos
controlador
GRASP
cla
Registro
maneja
eventos
sistema
introducirArticulo
finalizarVenta
Transacciones
formas
reacciona
transacción
venta
pe-
dido
pago
evento
dependen
stado
actual
en-
cuentra
ciclo
vida
global
Venta
recibe
mensaje
crearLineaDeVenta
evento
finali-
zarVenta
debería
lugar
condición
error
ignorarlo
Dispositivos
TV
microondas
reaccionan
evento
particular
de-
pendiendo
actual
Cambiador
Rol
clases
cambian
rol
Persona
cambia
rol
pasa
civil
militar
29.7
Representación
eventos
externos
internos
Tipos
eventos
útil
clasificar
eventos
Evento
exte
rno
conocido
evento
sistema
origina
límites
sistema
ejemplo
actor
DSSs
muestran
eventos
externos
eventos
externos
relevantes
originan
invocaci
ón
operaciones
sistema
responder
cajero
pre
siona
bot
ón
introducir
art
ículo
terminal
PDV
ocurrido
evento
externo
Evento
interno
Causado
límites
sistema
refiere
software
evento
interno
surge
invoca
méto-
do
mensaje
señal
enviada
objeto
interno
mensajes
diagramas
interacción
sugieren
eventos
internos
Venta
recibe
mensaje
crearLineaDeVenta
ocurrido
even-
to
interno
Evento
tiempo
Causado
ocurrencia
fecha
hora
específicas
paso
tiempo
software
evento
temporal
dirige
reloj
tiempo
real
tiempo
simulado
Suponga
lugar
operación
finalizarVenta
ocu-
rrir
operación
realizarPago
minutos
caso
venta
actual
elimina
automáticamente
412
UML
PATRONESDiagramas
eventos
internos
diagrama
mostrar
eventos
internos
representan
generalmente
mensajes
recibe
sde
objetos
Puesto
diagramas
interacción
muestran
mensajes
reacciones
función
mensajes
utilizar
diagrama
ilustrar
eventos
internos
diseño
objetos
paradigma
diseño
objetos
objetos
colaboran
mensajes
cabo
tareas
diagramas
interacción
UML
ilustran
forma
evidente
paradigma
incoherente
utilizar
diagrama
mostrar
diseño
paso
mensajes
interacciones
objetos1
consecuencia
reservas
recomendar
diagramas
es-
tados
mostrar
eventos
internos
obtener
diseño
objetos
crea-
tivo2
útiles
resumir
resultados
diseño
complete
cambio
discusión
diagramas
ca-
sos
diagrama
stados
herramienta
útil
concisa
eventos
externos
preferible
utilizar
diagramas
ilustrar
eventos
externos
tiem-
po
reacciones
lugar
utilizarlas
diseñar
comportamiento
objetos
basado
eventos
internos
29.8
Notación
adicional
diagramas
notación
UML
diagramas
contiene
conjunto
rico
caracte-
rísticas
utilizado
introducción
características
significativas
Acciones
transición
Condiciones
guarda
transición
•E
tados
anidados
Acciones
condiciones
guarda
transición
transición
provocar
dispare
acción
implementación
software
representar
invocación
método
clase
diagrama
MODELADO
COMPORTAMIENTO
DIAGRAMAS
413
lector
literatura
DOO
encontrará
ejemplos
publicaciones
libros
texto
diagramas
complejos
dedican
eventos
internos
yl
as
reacciones
objetos
Esencialmente
creadores
reemplazado
paradigma
interacción
colaboración
objetos
mensajes
para-
digma
objetos
máquinas
utilizado
diagramas
diseñar
comportamien-
to
objetos
lugar
utilizar
diagrama
colaboración
abstracta
visiones
equi-
valentes
razonable
utilizar
diagramas
mostrar
diseño
objetos
basado
eventos
inter-
obtener
código
generador
código
dirigido
diagramas
utiliza
intérprete
máquinas
ejecutar
sistema
software
tran
sición
podr
ía
tambi
én
condici
ón
guarda
condici
ón
booleana
ocurre
transición
cumple
condición
414
UML
PATRONES
Figura
29.4
Notación
acción
condición
guarda
transición
Inactivo
colgar
Activo
acción
transicción
condición
guarda
abonado
válido
descolgar
sonar
tono
marcado
anidados
permite
anidamiento
contener
subestados
subestado
hereda
tran-
sición
superestado
incluye
contribución
clave
notación
diagramas
Harel
basa
UML
diagramas
concisos
subestados
mostrar
gráficamente
ani-
dándolos
caja
representa
superestado
Figura
29.5
anidados
Inactivo
descolgar
sonar
tono
marcado
colgar
Activo[abonado
válido
SonandoTonoMarcado
Marcando
Conectando
dígito
dígito
completo
Hablando
conectado
ejemplo
ocurre
transición
Activo
lugar
creación
transición
subestado
SonandoTonoMarcado
importa
subestado
en-
cuentre
objeto
lugar
evento
colgar
relacionado
superestado
Activo
lugar
transición
Inactivo.29.9
Lecturas
adicionales
aplicación
modelos
DOO
cubre
Designing
Ob-
ject
Systems
Cook
Daniels
Doing
Hard
Time
Douglas
proporciona
discusión
excelente
acerca
modelado
contenido
centra
siste-
tiempo
real
aplicar
general
MODELADO
COMPORTAMIENTO
DIAGRAMAS
415Objetivos
Diseñar
arquitectura
lógica
función
capas
particiones
patrón
Ca-
pas
Layers
Ilustrar
arquitectura
lógica
utilizando
diagramas
paquetes
UML
Aplicar
patrones
Fachada
Observador
Controlador
Introducción
fijar
expectativas
capítulo
introduc-
ción
tema
arquitectura
lógica
tema
realmente
extenso
iteraciones
anteriores
centraron
grupo
objetos
software
domi-
nio
estrechamente
relacionados
Modelo
Diseño
Venta
Pago
prestó
atención
interfaz
usuario
acceso
recursos
base
datos
motivo
mantener
cosas
simples
centrarse
técnicas
fundamentales
di-
seño
objetos
sistema
típico
compuesto
paquetes
lógicos
paquete
interfaz
usuario
paquete
acceso
bases
datos
etcétera
pa-
quete
agrupa
conjunto
cohesivo
responsabilidades
ej.
acceso
bases
datos
práctica
básica
aplicar
modularidad
soporte
separación
intereses
capítulo
presenta
brevemente
arquitecturas
lógicas
comunicación
aco-
plamiento
paquetes
Capítulo
30
DISEÑO
ARQUITECTURA
LÓGICA
PATRONES
0x2B
~0x2B
Hamlet30.1
Arquitectura
software
definición
arquitectura
software
arquitectura
conjunto
decisiones
significativas
organización
sistema
software
selección
elementos
estructurales
interfaces
compone
sistema
comportamiento
es-
pecifica
colaboraciones
elementos
composición
ele-
mentos
estructurales
comportamiento
subsistemas
progresivamente
amplios
estilo
arquitectura
guía
organización
elementos
interfaces
colaboraciones
composición
BRJ99
Independientemente
definición
tema
común
de-
finiciones
arquitectura
software
scala
Idea
influencia
organizaci
ón
stilos
patrone
re
sponsabilidades
colaboraciones
conexiones
motivaciones
sistema
sistema
sistemas
subsistemas
importantes
desarrollo
software
arquitectura
nombre
verbo
nombre
arquitectura
comprende
indica
definición
organización
estructura
elementos
importantes
sistema
allá
de-
finición
estática
incluye
comportamiento
sistema
especialmente
función
responsabilidades
escala
sistemas
subsistemas
colaboraciones
descripción
arquitectura
comprende
motivaciones
fundamentos
sistema
diseñado
forma
verbo
arquitectura
investigación
trabajo
diseño
cla-
ridad
término
califique
investigación
arquitectural
diseño
arquitectural
investigación
arquitectural
implica
identificación
requisitos
funcio-
nales
no-funcionales
influyen
deberían
influir
significativa
diseño
sistema
tendencias
mercado
rendimiento
coste
mantenimiento
puntos
evolución
Ampliamente
análisis
requisitos
centrado
requisitos
influencia
especial
decisiones
diseño
sistema
importantes
diseño
arquitectural
resolución
influencias
requisitos
diseño
software
hardware
redes
operaciones
políticas
etcétera
UP
di
seño
inve
stigación
arquitectura
llaman
conjuntamente
análisis
arquitectural
cuyo
proceso
introducirán
brevemente
Capítulo
32
Dimensiones
vistas
arquitectura
Proceso
Unificado
arquitectura
sistema
abarca
dimensiones
ejemplo
arquitectura
lógica
describe
sistema
términos
organización
con-
ceptual
capas
paquetes
frameworks
importantes
clases
interfaces
subsistemas
418
UML
PATRONES•E
despliegue
arquitectura
describe
sistema
términos
asigna-
ción
procesos
unidades
proceso
configuración
red
Proceso
Unificado
sugiere
vistas
arquitectura
lógica
despliegue
etcé-
tera
definirán
Capítulo
32
capítulo
centra
vista
lógica
arquitectura
Patrones
arquitectura
categorías
patrones
prácticas
conocida
di
seño
arquitectural
specialmente
arquitectura
lógica
escala
prácticas
escrito
forma
patrones
patrón
Capas
Layers
libro
dedicó
tema
patrone
arquitectura
Patter
n-
Oriented
oftw
are
Arc
hi
tect
ure
POSA
BMRSS96
libro
POSA
ofrece
clasificación
patrones
sencilla
útil
di-
ferentes
niveles
Patrones
rquitectura
Relacionados
di
seño
scala
grano
grueso
aplican
típicamente
primeras
iteraciones
fase
elaboraci
ón
stablecen
structuras
conexione
ás
importantes
patrones
Capas
estructuran
sistema
principales
capas
Patrones
diseño
Relacionados
diseño
objetos
frameworks
pequeña
mediana
escala
Aplicables
diseño
solución
conec-
tar
elementos
escala
definen
patrones
arqui-
tectura
trabajo
di
seño
detallado
specto
di-
seño
local
conocen
patrones
micro-arquitectura
patrón
Fachada
utilizar
proporcionar
interfaz
capa
patrón
Estrategia
permitir
algoritmos
conectables
Estilos
Soluciones
diseño
nivel
orientadas
implementación
lenguaje
patrón
Singleton
asegurar
acceso
global
única
instancia
clase
capítulo
centra
patrones
arquitectura
aplicación
patrones
diseño
conexiones
estructuras
escala
categorías
patrones
categorías
POSA
forman
ítida
tríada
útiles
patrones
cubre
gama
completa
patrones
DISEÑO
ARQUITECTURA
LÓGICA
PATRONES
419que
publicado
rie
sgo
simplificar
patrón
re-
petición
mejores
prácticas
funciona
dominio
ca-
tegorías
patrones
publicadas
comprenden
Patrones
proceso
desarrollo
software
organizacionales
Patrones
interfaz
usuario
Patrones
pruebas
30.2
Patrón
arquitectura
Capas
Layers
Solución
ideas
esenciales
patrón
Capas
BMRSS96
simples
Organizar
estructura
lógica
escala
sistema
capas
separadas
responsabilidades
distintas
relacionadas
separación
clara
cohesiva
intereses
capas
bajas
servicios
generales
nivel
capas
altas
específicas
aplicación
colaboración
acoplamiento
capas
altas
ba-
jas
evita
acoplamiento
capas
bajas
altas
capa
elemento
escala
compuesto
paquetes
subsistemas
patrón
Capas
relaciona
arquitectura
lógica
describe
organi-
zación
conceptual
elementos
di
seño
grupo
independiente
empa-
quetamiento
despliegue
físico
Capas
definen
modelo
general
N-niveles
arquitectura
lógica
pro-
duce
arquitectura
capas
tiempo
aplicando
scribiendo
patrón
Pattern
Almanac
2000
Rising00
listan
100
patrones
variantes
relacionados
patrón
Capas
Problemas
cambios
código
fuente
propagan
sistema
partes
sistema
altamente
acopladas
ógica
aplicaci
ón
entrelaza
interfaz
suario
entonce
reutilizar
interfaz
distribuirse
nodo
proceso
lógica
específica
aplicación
entrelaza
servicios
técnicos
ló-
gica
negocio
potencialmente
generales
reutilizar
distribuir
nodo
reemplazar
fácilmente
implementación
•E
xiste
alto
acoplamiento
áreas
interés
di-
fícil
dividir
trabajo
desarrolladores
límites
claros
alto
acoplamiento
mezcla
intere
ses
difícil
funcionalidad
evolucione
sistema
crezca
forma
proporcionada
actualice
uti-
lizar
tecnologías
Ejemplo
objetivo
úmero
capas
varía
aplicaci
ón
dominio
aplicación
sistemas
información
sistemas
operativos
etcétera
Aplicado
sis-
temas
información
capas
típicas
ilustran
explican
Figura
30.1
420
UML
PATRONESDISEÑO
ARQUITECTURA
LÓGICA
PATRONES
421
Figura
30.1
Capa
comunes
arquitectura
lógica
sistema
información1
Presentación
TCC
Interface
UI
Vista
Aplicación
TCC
Flujo
trabajo
Proceso
Mediación
Controlador
Aplic
Dominio(s
TCC
Negocio
Servicios
Negocio
Modelo
Servicios
Técnicos
TCC
Infraestructura
Técnica
Servicios
Técnicos
Alto
Nivel
Base
TCC
Servicios
Núcleo
Servicios
Básicos
Servicios
Técnicos
Infraestructura
Nivel
anchura
implica
rango
aplicabilidad
ventanas
GUI
informes
interfaz
voz
HTML
XML
XSLT
JSP
Javascript
gestiona
peticiones
capa
presentación
flujo
trabajo
sesión
transiciones
ventanas
páginas
concentración
transformación
datos
presentación
gestiona
solicitudes
capa
aplicación
implementación
reglas
dominio
servicios
dominio
PDV
Inventario
servicios
utilizados
aplicación
posibilidad
servicios
multi-aplicaciones
servicios
técnicos
relativamente
alto
nivel
frameworks
Persistencia
Seguridad
servicios
técnicos
nivel
utilidades
frameworks
estructuras
datos
hilos
ejecución
librerías
matemáticas
ficheros
base
datos
redes
dependencia
Infraestructura
Negocio
TCC
Servicios
Negocio
Nivel
servicios
negocio
nivel
generales
utilizan
dominios
aplicación
ConversorDeMonedas
específico
aplicación
Basado
arquetipos
Figura
30.2
ilustra
arquitectura
lógica
capas
parcial
aplicación
NuevaEra
Notación
UML
diagramas
paquetes
utilizan
repre
sentar
capas
UML
capa
simplemente
paquete
Obsérvese
sta
iteraci
ón
di
seño
exi
ste
capa
Aplicaci
ón
discutirá
necesario
Puesto
desarrollo
iterativo
normal
crear
di
seño
capas
comience
simple
evolucione
iteraciones
fase
elabo-
anchura
paquete
utiliza
comunicar
rango
aplicabilidad
diagrama
práctica
general
UML
TCC
significa
conocido
como”.ración
objetivos
fase
establecer
arquitectura
ásica
diseñar-
implementarla
iteraciones
elaboración
significa
di
seño
especulativo
detallado
arquitectura
adelantado
empezar
programar
diseña
arquitectura
ógica
tentativa
pri-
meras
iteraciones
evolucionar
incrementalmente
fa
elabo-
ración
Obsérvese
diagrama
paquetes
presentan
tipos
elementos
muestra
motivado
limitaciones
espacio
formato
libro
señal
calidad
diagrama
vista
arquitectura
muestra
elementos
relevantes
transmitir
ma-
nera
concisa
ideas
importantes
aspectos
significativos
arquitectu-
ra
idea
documento
vista
arquitectura
UP
decirle
lector
elegido
pequeño
conjunto
elemento
instructivos
transmitir
gran-
des
ideas
422
UML
PATRONES
Figura
30.2
Vista
lógica
parcial
capas
aplicación
NuevaEra
Log4J
Servicios
Técnicos
Dominio
Presentación
FijarPrecios
Factoria
DeEstrategias
FijarPrecios
Texto
Consola
ProcesarVenta
utilizada
experimentos
rápidos
Persistencia
FachadaDB
interface
IEstrategiaFijarPrecio
Ventas
Impuestos
interface
IAdaptadorCalculador
Impuestos
Factoria
DeServicios
Ventas
Registro
Venta
Swing
Frame
ProcesarVenta
Pagos
PagosACredito
interface
IAdaptadorServicio
AutorizacionCredito
ServicioAcceso
Inventario
interface
IAdaptadorInventario
Jess
motor
reglas
terceras
partes
propósito
general
MotorReglasPDV
FachadaMotorReglasPDV
SOAP
librería
Swing
Java
clases
GUI
basadas
SwingComentarios
acerca
diagrama
•E
xisten
tipos
paquetes
muestran
indicar
aspectos
relevantes
mostró
vista
capa
Ba
arquitecto
decidi
aña
informaci
ón
intere
sante
equipo
sarrollo
seguridad
añadirá
clases
Base
utilidades
avanzadas
manipulación
Strings
momento
utiliza
capa
Aplicaci
ón
separada
responsa-
bilidades
control
objetos
sesión
capa
aplicación
maneja
objeto
Registro
arquitecto
añadirá
capa
Aplicación
iteración
pos-
terior
crezca
complejidad
comportamiento
introduzcan
interfa-
ces
alternativas
clientes
navegador
web
PDA
portátil
red
cable
DISEÑO
ARQUITECTURA
LÓGICA
PATRONES
423
Figura
30.3
Acoplamiento
parcial
paquete
s.
Log4J
Servicios
Técnicos
Dominio
Presentación
FijarPrecios
Persistencia
FachadaDB
Impuestos
interface
IAdaptadorCalculador
Impuestos
Factoria
DeServicios
Ventas
Registro
Venta
Swing
Frame
ProcesarVenta
Pagos
PagoACredito
interface
IAdaptadorServicio
AutorizacionCredito
ServicioAcceso
Inventario
interface
IAdaptadorInventario
Jess
MotorReglasPDV
FachadaMotorReglasPDV
SOAPAcoplamiento
capas
paquetes
proporciona
informaci
ón
inclu
sión
diagrama
vi
sta
lógica
muestre
acoplamiento
relevante
capas
paquetes
Figura
30.3
ilustra
ejemplo
parcial
Notación
UML
Obsérvese
utilizar
íneas
dependencia
mo
strar
acopla
miento
paquetes
tipos
paquetes
conveniente
utilizar
sim-
ples
líneas
dependencia
comunicador
preocupa
specificar
dependencia
exacta
visibilidad
atributo
subclase
simplemente
quie-
re
resaltar
dependencias
Nótese
línea
dependencia
sale
paquete
lugar
tipo
specífico
sde
paquete
Ventas
cla
FachadaMo-
torReglasPDV
paquete
Dominio
paquete
Log4J.
útil
interesante
tipo
concreto
depende
comunicador
entender
compartir
dependencia
elementos
paquete
común
diagrama
paquetes
ocultar
tipos
específicos
centrarse
ilustrar
acoplamiento
paquete-paquete
diagrama
parcial
Figura
30.4
424
UML
PATRONES
Figura
30.4
Acoplamiento
parcial
paquetes
Log4J
Servicios
Técnicos
Dominio
Presentación
JessPersistencia
MotorReglasPDV
Inventario
PagosServicioAcceso
FijarPreciosVentas
TextoSwing
SOAPDe
Figura
30.4
ilustra
probablemente
estilo
común
diagrama
arquitectura
lógica
UML
diagrama
paquetes
normalmente
muestra
20
paquetes
importantes
dependencias
Escenarios
interacción
capas
paquetes
diagrama
paquete
mue
stran
informaci
ón
estática
diagrama
interac
ción
proporciona
informaci
ón
entender
din
ámica
co-
nectan
comunican
objetos
capas
espíritu
vista
arqui-
tectura
oculta
detalle
irrelevantes
staca
arquitectura
transmitir
diagrama
interacción
vista
lógica
arquitectura
centra
colaboraciones
cruzan
límites
capas
paquetes
útil
con-
tar
conjunto
diagramas
interacción
ilustren
escenarios
signi-
ficativos
punto
vista
arquitectura
sentido
ilustran
mu-
chos
aspectos
escala
ideas
diseño
DISEÑO
ARQUITECTURA
LÓGICA
PATRONES
425
Figura
30.5
diagrama
interacción
significativo
punto
vista
arquitectura
pone
relieve
conexiones
cruzan
límites
Dominio
Ventas
Registro
Cajero
Presentacion
Swing
Frame
ProcesarVenta
singleton
ServiciosTec
Persistencia
Fachada-
Persistencia
espec
getEspec-
Producto(id
esInvalida
linea
venta
espec
getObject(
,id
singleton
Dominio
MotorReglasPDV
Fachada-
MotorReglas
introducir-
Articulo
id
ctd
introducir-
Articulo
id
ctd
Dominio
Ventas
Venta
Dominio
Productos
CatalogoDe
Productos
crearLineaDeVenta
spec
ctd
subsystem
ServiciosTec
Jess
algunasLlamadasAJess(linea
venta
Puntos
cruce
límites
interesantes
capas
especialmente
relevantes
personas
necesitan
entender
sistema
ponen
relieve
diagrama
diagrama
soporte
comunicación
vista
lógica
arquitectura
término
UP
destaca
información
significativa
arquitectura
Notación
UML
Nótese
subsistema
modelar
objeto
UML
útil
caso
conozco
quiero
describir
detalles
trabajar
motor
reglas
Jess
desea
mostrar
únicamente
colabora
Notación
UML
nombre
camino
UML
indicar
paquete
onPropertyEvent(v
venta.total
PropertyListenerPor
ejemplo
Figura
30.5
ilustra
escenario
Procesar
Venta
pone
relieve
puntos
conexión
capas
paquetes
Notación
UML
•E
paquete
pertenece
tipo
mostrar
opcionalmente
calificando
tipo
expresión
nombre
camino
UML
NombrePaquete>::<Nom-
breTipo
ejemplo
Dominio::Ventas::Registro
aprovechar
destacarle
lector
conexiones
paquetes
capas
diagrama
interacción
Nótese
estereotipo
subsystem
UML
subsistema
entidad
discreta
comportamiento
interfaces
modelar
subsistema
tipo
especial
paquete
muestra
objeto
útil
mostrar
colaboraciones
subsis-
temas
sistemas
UML
sistema
entero
subsistema
raíz
mostrar
objeto
diagrama
in-
teracción
DSS
Obsérvese
diagrama
mue
stra
mensajes
colabora-
ciones
Venta
relie
ve
interacciones
significativas
arqui-
tectura
Colaboraciones
decisiones
diseño
nivel
arquitectura
Cu
áles
partes
importantes
ómo
conectan
patrón
arquitectura
Capas
guía
definición
partes
impor-
tantes
patrones
micro-arquitectura
Fachada
Controlador
Observador
utilizan
comúnmente
di
seño
conexiones
capas
paquetes
sección
estudia
patrones
conexión
comunicación
capas
paquetes
Paquetes
simples
vs
subsistemas
paquetes
capas
simplemente
grupos
cosas
conceptuales
verdaderos
subsistemas
comportamiento
interfaces
contrastar
•E
paquete
FijarPrecios
subsistema
agrupa
simplemente
factoría
estrategias
utilizan
fijar
precios
pa-
quetes
Base
java.util
paquetes
Persistencia
MotorReglasPDV
Jess
subsiste-
motores
discretos
responsabilidades
cohesivas
realizan
tra-
UML
subsistema
identificar
stereotipo
Figu-
ra
30.6
Fachada
paquetes
repre
sentan
subsistemas
patrón
común
acce
so
Fachada
patr
ón
diseño
GoF.
objeto
fachada
úblico
define
ser-
426
UML
PATRONESvicios
subsistema
clientes
colaboran
fachada
componen
tes
interno
subsistema
refiere
FachadaMotorRe-
glasPDV
FachadaPersistencia
acceder
subsistemas
motor
regla
persistencia
Normalmente
fachada
debería
incluir
operaciones
nivel
deseable
fachada
incluyera
pequeño
número
operaciones
alto
ni-
vel
servicios
grano
grueso
fachada
ope-
raciones
nivel
tiende
perder
cohesión
fachada
llegar
objeto
distribuido
remoto
bean
sesión
EJB
objeto
servidor
RMI
servicios
grano
fino
lugar
problemas
rendimiento
comunicaciones
llamadas
remotas
pequeñas
constituyen
cuello
botella
rendimiento
sistemas
distribuidos
DISEÑO
ARQUITECTURA
LÓGICA
PATRONES
427
Figura
30.6
Estereotipos
subsistemas
subsystem
Persistencia
FachadaBD
subsystem
Jess
subsystem
MotorReglasPDV
FachadaMotorReglasPDV
FijarPrecios
subsistema
normalmente
fachada
realiza
trabajo
actúa
concentrar
mediador
objetos
subsistema
subyacente
trabajo
ejemplo
FachadaMotorReglasPDV
envoltorio
wrapper)y
único
pun-
to
acceso
motor
regla
aplicaci
ón
PDV
paquetes
ven
implementación
subsistema
puesto
stá
oculta
detr
ás
fachada
ponga
implementaciones
subsistema
motor
reglas
PDV
implementa
colaborando
motor
regla
Jess
Jess
subsistema
expone
interfaz
operacione
grano
fino
sto
co-
mún
subsistemas
terceras
partes
generales
FachadaMotorRe-
glasPDV
pone
scubierto
interfaz
operaciones
nivel
Je
ss
proporciona
operaciones
alto
nivel
esInvalida(linea
venta
aplicación
número
pequeño
operaciones
sistema
enton-
ces
habitual
capa
Dominio
Aplicación
exponga
objeto
capa
superior
capa
Servicios
Técnicos
contiene
subsis-
temas
expone
fachada
objetos
públicos
utilizan
fa-
chadas
clases
superiores
subsistema
Véase
Figura
30.7.Fachadas
Sesión
capa
Aplicación
diferencia
Figura
30.7
aplicación
operaciones
sis-
tema
soporte
casos
so
común
ás
objeto
diando
capas
Presentación
Dominio
versión
actual
sistema
NuevaEra
diseño
simple
único
ob-
jeto
Registro
actúa
fachada
capa
Dominio
virtud
patr
ón
GRASP
Controlador
sistema
crece
manejar
casos
opera-
ciones
sistema
raro
introduzca
capa
Aplicación
objetos
mantienen
sesión
operaciones
caso
ins-
tancia
sesión
representa
sesión
cliente
objetos
conocen
Fa-
chadas
sión
so
recomendaci
ón
patr
ón
GRASP
Controlador
controlador
fachada
sesión
caso
variante
patrón
Figura
30.8
presenta
ejemplo
podr
ía
evolucionar
ar-
quitectura
NuevaEra
capa
Aplicación
fachadas
sesión
Controlador
patrón
GRASP
Controlador
describe
alternativas
comunes
manejo
cliente
controladores
denominado
peticiones
operacio-
nes
sistema
emiten
capa
Presentación
Figura
30.9
ilustra
428
UML
PATRONES
Figura
30.7
Número
interfaces
muestran
capas
superiores
Log4J
Servicios
Técnicos
Dominio
Presentación
Persistencia
FachadaBD
Ventas
Registro
Venta
Swing
Frame
ProcesarVentas
Jess
SOAP
aplicaciones
operaciones
sistema
objeto
actúe
fachada
capa
capa
Servicios
Técnicos
normalmente
expone
interfaces
subsistema—DISEÑO
ARQUITECTURA
LÓGICA
PATRONES
429
Figura
30.8
Fachadas
sesión
Capa
Aplicación
Aplicación
Dominio
Presentación
Ventas
Registro
Venta
Alquileres
Alquiler
Swing
Frame
ProcesarVenta
Frame
ProcesarAlquiler
FachadaDeSesion
ProcesarVenta
FachadaDeSesion
ProcesarAlquiler
FachadaDeSesion
GestionarDevoluciones
objetos
fachada
sesión
aplicación
mantienen
sesión
controlan
flujo
trabajo
relacionado
trabajo
caso
Figura
30.9
Alternativas
Controlador
Aplicación
Dominio
Presentación
Swing
Frame
ProcesarVenta
Patrón
GRASP
Controlador
sugiere
alternativas
comunes
objetos
gestionan
peticiones
operaciones
sistema
Registro
crearNuevaVenta
introducirArticulo
FachadaSesion
ProcesarVenta
crearNuevaVenta
introducirArticulo
OR
Operaciones
sistema
capas
DSS
ilustran
operaciones
sistema
ocultando
objetos
presentación
diagrama
operaciones
sistema
invocan
sistema
Figura
30.10son
peticiones
genera
actor
capa
Presentación
capa
Aplicación
Dominio
430
UML
PATRONES
Figura
30.10
Operaciones
sistema
DSSs
función
capas
Dominio
Presentación
Swing
Frame
ProcesarVenta
Registro
crearNuevaVenta
introducirArticulo
Cajero
crearNuevaVenta
introducirArticulo
finalizarVenta
crearNuevaVenta
introducirArticulo
finalizarVenta
introducirArticulo(id
ctd
Sistema
Cajero
finalizarVenta
descripcion
artículos
crearNuevaVenta
operaciones
sistema
gestiona
sistema
DSS
representan
llamadas
operaciones
capa
Aplicación
Dominio
capa
Presentación
Colaboraciones
ascendentes
Observador
patrón
Fachada
utiliza
normalmente
colaboración
descendente
capa
alta
baja
acceso
servicios
subsistemas
capa
capas
bajas
Aplicación
Dominio
nece
sitan
comunicarse
capa
Presentación
general
patrón
Observador
objetos
UI
capa
Pre
sentación
alta
implementan
interfaz
PropertyListener
AlarmaListener
suscriben
escuchan
eventos
eventos
propiedad
alarma
proceden
objetos
capas
ba-
jas
objetos
capas
bajas
envían
mensajes
directamente
objetos
superio-
res
capa
UI
acopla
objetos
vistos
cosas
implementan
interfaz
PropertyListener
vistos
ventana
concreta
GUI
estudió
presentó
patrón
Observador
Figura
30.11
resume
idea
relación
capas
Acoplamiento
relajado
capas
capas
mayoría
arquitecturas
capas
acopladas
sentido
limitado
protocolo
red
ba
sado
Modelo
OSI
Capa
s.
modelo
protocolo
restricción
estricta
elementos
capa
acceden
servicios
capa
inmediatamente
inferior
N-1
raramente
arquitecturas
sistemas
informaci
ón
stándar
arquitectura
capa
relajadas
capa
transparentes”[BMRSS96
elementos
capa
colaboran
acoplan
capas
Comentarios
acerca
acoplamiento
típico
capas
•T
odas
capas
altas
dependen
Servicios
Técnicos
capa
Base
ejemplo
Java
capas
dependen
elementos
paquete
java.util
•E
capa
Dominio
depende
capa
Infraestructura
Negocio
capa
Presentación
realiza
llamadas
capa
Aplicación
solicita
servicios
capa
Dominio
capa
Presentación
invoca
Dominio
exista
capa
Aplicación
aplicación
desktop
proceso
objetos
software
capa
Dominio
visibles
directamente
pasan
Pre
sentación
Aplicación
menor
extensión
Servicios
Técnicos
ejemplo
asumiendo
sistema
NuevaEra
tipo
objeto
Ven-
ta
Pago
visibles
directamente
Capa
Pre
sentación
GUI
pasarse
subsistema
Persistencia
capa
Servicio
Técnicos
DISEÑO
ARQUITECTURA
LÓGICA
PATRONES
431
Figura
30.11
Observador
comunicación
ascendente
capa
Presentación
onPropertyEvent(v
venta.total
Dominio
Ventas
Registro
Cajero
Presentacion
Swing
Frame
ProcesarVenta
introducirArticulo
id
ctd
introducirArticulo
id
ctd
Dominio
Ventas
Venta
crearLineaDeVenta
spec
ctd
colaboración
capas
bajas
capa
Presentación
normalmente
cabo
patrón
Observador
Publicar-Suscribir
objeto
Venta
registrado
suscriptores
objetos
PropertyListener
Resulta
JFrame
Swing
GUI
Venta
conoce
objeto
JFrame
GUI
PropertyListener
PropertyListener
sistema
distribuido
general
pasa
capa
Presentación
réplicas
serializables
tambi
én
conocida
objetos
data
holder
objetosv
alor
objetos
capa
Dominio
caso
capa
Dominio
despliega
ordenador
servidor
nodos
cliente
obtienen
copias
datos
servidor
peligroso
acoplamiento
servicios
técnicos
capas
básicas
presentó
discusión
acerca
patrones
GRASP
Variaciones
Protegidas
Acoplamiento
acoplamiento
constituye
problema
acoplamiento
innecesario
puntos
variación
evolución
inestables
costosos
arreglar
justificable
malgastar
tiempo
dinero
intentando
abstraer
ocultar
probable
cambie
coste
impacto
in
significante
ejemplo
struimos
aplicaci
ón
tecnolog
ías
Java
beneficio
ocultar
aplicación
acceso
librerías
Java
alto
acoplamiento
puntos
librerías
problema
probable
pues-
to
relativamente
estables
ubicuas
Discusión
cuestiones
estructurales
colaboración
patrón
discutidas
an-
teriormente
cuestiones
encontramos
siguientes
Recursos
externos
capa
base
datos
externa
abajo
mayoría
sistemas
confían
recursos
servicios
externos
base
datos
Oracle
servicio
nombres
directorio
LDAP
Novell
compo-
nentes
implementación
físicos
capa
vista
lógica
arquitectura
432
UML
PATRONES
Figura
30.12
Mezcla
vistas
arquitectura
Dominio(s
Servicios
Técnicos
Base
Inventario
Persistencia
Servicio
Nombres
Directorio
Framework
Aplic
Web
Servicios
Técnicos
PDV
Inventario
Dominio(s
Base
mezcla
vistas
lógica
implementación
vista
lógica
representación
lógica
necesidad
datos
servicios
relacionados
subdominios
abstrayendo
decisiones
implementación
tales
base
datos
Novell
LDAP
Notación
UML
componente
UML
física
sistema
Notación
UML
base
datos
física
UML.Mostrando
recursos
externos
ba
dato
específica
capa
capa
Ba
ejemplo
mezcla
vi
sta
lógica
vistas
des-
pliegue
implementación
arquitectura
función
vista
lógica
arquitectura
capas
acceso
conjunto
datos
persistentes
datos
inventario
sub-
dominio
Capa
Dominio
subdominio
Inventario
servicios
ge-
nerales
proporcionan
acceso
bases
datos
parti-
ción
Servicio
Técnico
servicio
Persistencia
Véase
Figura
30.12
Vista
lógica
vs
vistas
proceso
despliegue
arquitectura
capas
arquitectura
vista
lógica
arquitectura
vista
des-
pliegue
elementos
procesos
nodos
procesos
Dependiendo
platafor-
ma
capas
desplegarse
proceso
nodo
aplicación
PDA
portátil
dispersas
ordenadores
procesos
aplicación
web
escala
Modelo
spliegue
UP
stablece
corre
spondencia
ar
quitectura
lógica
procesos
nodos
influye
fuertemente
elección
platafor-
ma
software
hardware
frameworks
aplicaci
ón
sociados
ejemplo
elección
J2EE
.NET
influye
arquitectura
despliegue
formas
organizar
capas
lógicas
despliegue
ge-
neral
tema
arquitectura
despliegue
introducirá
ligeramente
puesto
trivial
queda
claramente
alcance
libro
depende
discusión
detallada
plataforma
software
elegida
J2EE
opcional
capa
Aplicación
existir
capa
Aplicación
contiene
objetos
responsables
sesión
clientes
mediar
capas
Presentación
Dominio
controlar
flujo
trabajo
flujo
organizarse
controlando
orden
ventanas
páginas
web
ejemplo
patrones
GRASP
forman
capa
objetos
Controlador
GRASP
controlador
fachada
ca
so
sistemas
distribuidos
for-
man
capa
componentes
tales
bean
sesión
EJB
objetos
se-
sión
general
aplicaciones
necesaria
capa
útil
lista
ex-
haustiva
cumple
siguientes
criterios
utilizarán
diversas
interfaces
usuario
ejemplo
páginas
web
GUI
Swing
sistema
objetos
capa
Aplicaci
ón
actuar
Adaptadores
recopilan
re
únen
datos
necesitan
UIs
actuar
Fachadas
envuelven
ocultan
acceso
capa
Dominio
•E
sistema
distribuido
capa
Dominio
nodo
capa
Presentación
comparten
múltiples
clientes
Normalmente
necesita
DISEÑO
ARQUITECTURA
LÓGICA
PATRONES
433mantener
traza
stado
sesión
objetos
capa
Aplicaci
ón
opción
conveniente
responsabilidad
Capa
Dominio
mantener
sesión
•E
xiste
flujo
trabajo
definido
función
orden
controlado
ventanas
op
áginas
web
presentar
Pertenencia
conjunto
difuso
capas
elementos
duda
miembros
capa
clase
Math
forma
capa
Ba
especialmente
capas
Servicios
Técnicos
Base
Dominio
Infraestructura
Negocio
difícil
clasificar
elementos
diferencia
stas
capas
rasgos
alto
frente
específico
frente
general
conjunto
términos
difusos
normal
rara
necesario
optar
clasificación
definitiva
equipo
de-
sarrollo
considerar
elemento
rasgos
forma
Servicios
Técnicos
capa
Ba
sideran
grupo
general
conocido
capa
Infraestructura.3
ejemplo
Suponga
proyecto
utiliza
tecnologías
Java
ele-
gido
framework
logging4
libre
distribución
Log4J
proyecto
Ja-
karta
Logging
forma
Servicio
Técnico
capa
Base
Log4J
framework
general
pequeño
nivel
razonablemente
miembro
conjuntos
difusos
Servicios
Técnicos
Base
Suponga
aplicaci
ón
web
elegido
framework
aplicaciones
web
Struts
Jakarta
Struts
framework
técnico
específico
re-
lativamente
alto
nivel
justificar
fuertemente
miembro
conjunto
Servicio
Técnicos
ébilmente
miembro
conjunto
Base
persona
Servicio
Técnico
Alto
Nivel
Base
Finalmente
ca
so
librer
ías
proporcionan
plataforma
software
representan
servicios
Básicos
nivel
ejemplo
.N
ET
J2SE+J2EE
servicios
incluyen
funciones
relativamente
alto
nivel
servicios
nombres
directorio
Terminología
niveles
capas
particiones
noción
original
nivel
tier
arquitectura
capa
lógica
nodo
físico
palabra
utilizarse
ampliamente
referirse
nodo
procesa-
miento
físico
agrupación
nodos
nivel
cliente
ordenador
434
UML
PATRONES
N.
T.
refiere
clase
Math
Java
reúne
funciones
matemáticas
Nótese
convención
nombres
establecida
capas
común
aparezca
literatura
arquitectura
sobrecarga
contradicciones
nombres
N.
T.
Permite
programador
insertar
sentencias
log
control
errores
programas
Java
incurrir
penalización
rendimiento.cliente
presentación
evitará
término
claros
téngalo
presente
lea
literatura
arquitectura
capas
arquitectura
representan
cortes
verticales
particiones
representan
división
horizontal
subsistemas
relativamente
pa-
ralelos
capa
ejemplo
capa
Servicios
dividirse
particiones
ta-
Seguridad
Informes
Figura
30.13
DISEÑO
ARQUITECTURA
LÓGICA
PATRONES
435
Figura
30.13
Capas
particiones
Persistencia
Securidad
Framework
Aplic
Web
Servicios
Técnicos
PDV
Inventario
Impuestos
Dominio
Capas
Verticales
Particiones
Horizontales
•E
contexto
añadir
capa
introduce
problema
rendimiento
ejemplo
juego
utilizan
gráficos
exige
alto
rendi-
miento
añadir
capas
abstracción
indirección
acceso
componen-
tes
tarjeta
gráfica
introducir
problemas
rendimiento
patrón
Capas
patrones
arquitectura
básicos
aplicable
problemas
ejemplo
sustituto
Tuberías
Filtros
Pipes
and
Fil-
ters
BMRSS96
útil
problema
principal
aplicación
implica
procesamiento
co
sa
serie
tran
sformaciones
transformaciones
imagen
orden
transformaciones
cambiar
caso
patrón
arquitectura
alto
nivel
Tube-
rías
Filtros
tuberías
filtros
particulares
diseñar
Capas
Beneficios
•E
general
separación
intereses
separación
servicios
alto
nivel
servicios
específicos
generales
aplicación
re-
duce
acoplamiento
dependencias
mejora
cohe
sión
incrementa
po
tencial
reutilizar
incrementa
claridad
complejidad
relacionada
encapsula
descompone
capas
reemplazar
implementaciones
general-
mente
capas
nivel
Servicios
Técnicos
Base
ej.
java.util
capas
Presentación
Aplicación
Dominio
capas
bajas
contienen
funciones
reutilizables
capas
Dominio
Servicio
Técnicos
distri-
buidas
ayuda
desarrollo
equipo
segmentación
lógica
Contraindicacio-
nes
Compromi-
sosImplementación
Implementación
capas
personas
procesos
común
recomendable
iteración
contar
desarrollador
especializado
capa
servicio
caso
equipo
completo
proyecto
centre
capa
servicio
iteración
habitual
implementar
cortes
verticales
capas
enfoque
UP
fase
elaboración
elegir
escenarios
requisitos
fuercen
iteraci
ón
cubrir
ampliamente
paquetes
ca-
pas
subsistemas
significativos
arquitectura
descubrir
estabilizar
ele-
mentos
importantes
arquitectura
primeras
iteraciones
libro
ilustra
enfoque
caso
estudio
NuevaE-
ra
requeriría
discusión
previa
extensos
temas
des-
programación
GUI
correspondencia
objeto-relacional
optimización
sentencias
SQL
caso
estudio
libro
centrado
diseño
objetos
capa
Dominio
reconoce
realidad
llevaría
cabo
trabajo
paralelo
desarrollar
capas
subsistemas
principios
diseño
ilustran
ca
so
estudio
aplicar
prácticamente
capas
diseño
Vista
implementación
correspondencia
organización
código
fuente
capas
paquetes
organización
código
fuente
forma
Modelo
Implementación
UP
lenguajes
Java
proporcionan
soporte
sencillo
paquetes
espacio
nombres
namespace
correspondencia
paquetes
lógicos
paquetes
implementación
similar
notables
excepciones
utilizan
li-
brerías
s5
etapa
sarrollo
paquetes
dibujan
especulativa
implementan
diferencias
significativas
tiempo
código
base
crece
normal
abandonar
prime-
ros
dibujos
especulativos
acabamos
lugar
utilizar
herramienta
CASE
UML
cabo
proceso
ingeniería
inversa
lea
código
fuente
genere
diagrama
paquetes
diagramas
paquetes
generados
automáticamente
reflejan
precisa
código
diseño
real
convierten
base
vista
lógica
arquitectura
Utilizando
Java
ejemplo
mostrar
correspondencia
paquetes
implementación
capas
paquetes
ilustraban
Figura
30.4
co-
rresponderse
siguientes
nombres
paquetes
Java
PRESENTACIÓN
com.foo.nuevaera.ui.swing
com.foo.nuevaera.ui.texto
436
UML
PATRONES
C++
soporte
espacios
nombres
resulta
difícil
utilizar
lenguaje
docenas
cien-
tos
espacios
nombres
grano
fino
Java
C#.//
DOMINIO
//paquetes
relativamente
específicos
proyecto
NuevaEra
com.foo.nuevaera.dominio.ventas
com.foo.nuevaera.dominio.fijarprecios
com.foo.nuevaera.dominio.servicioacceso
com.foo.nuevaera.dominio.motorreglaspdv
//paquetes
diseñar
fácilmente
//servicios
negocio
comunes
múltiples
aplicaciones
com.foo.dominio.inventario
com.foo.dominio.pagoacredito
SERVICIOS
TÉCNICOS
//nuestro
equipo
crea
com.foo.servicios.persistencia
//de
terceras
partes
org.apache.log4j
org.apache.soap.rpc
jess
BASE
//nuestro
equipo
crea
com.foo.utilidades
com.foo.utilstring
Nótese
esfuerzo
evitar
utilización
calificadores
nombres
paquetes
dependientes
aplicación
nuevaera
necesario
ejemplo
paquetes
UI
relacionados
aplicación
Nueva-
califiquen
nombre
aplicación
com.foo.nuevaera.ui
soporte
reutilización
práctica
nombrar
elementos
independiente
aplicación
apropiado
ejemplo
sencillo
utilidades
propósito
general
String
creadas
equipo
colocan
com.foo.utilstring
lugar
com.foo.nuevaera.utilstring
com.foo.utils-
tring
debería
colocarse
repositorio
código
fuente
compañía
nivel
compañía
lugar
enterrarse
carpetas
código
fuente
proyecto
NuevaEra
reutilizar
ejemplo
considere
servicios
acceder
sistemas
terceras
partes
inventario
autorización
pago
crédito
equipo
NuevaEra
creó
servicio
proyecto
NuevaEra
servicios
negocio
generales
imaginar
acce
so
sistema
inventario
interior
aplica-
ciones
autorizaci
ón
pagos
crédito
preferible
com.foo.dominio.inventario
lugar
com.foo.nuevaera.dominio.inventario
paquete
MotorReglasPDV
completamente
relacionado
proyecto
PDV
NuevaEra
com.foo.nuevaera.dominio.motorreglaspdv
DISEÑO
ARQUITECTURA
LÓGICA
PATRONES
437En
caso
duda
califique
paquete
nombre
proyecto
cambiar
Usos
Conocidos
número
sistemas
orientados
objetos
modernos
aplicaciones
desktop
sistemas
web
distribuidos
J2EE
desarrollan
Capas
difícil
encontrar
esté
desarrollado
Retrocediendo
lejos
historia
Máquinas
virtuales
sistemas
operativos
Comenzando
años
sesenta
arquitectos
sistemas
operativos
abogaban
diseño
sistemas
operativos
función
capas
claramente
definidas
capa
baja
encapsulaba
acceso
recursos
físicos
proporcionaba
procesos
ser-
vicios
capas
altas
invocaban
servicios
encuentran
Multics
CV65
sistema
THE
Dijkstra68
cincuenta
investigadores
sugirieron
idea
máquina
virtual
MV
lenguaje
áquina
universal
bytecodes
ejemplo
UNCOL
Conway1
958
aplicacione
pudieran
scribirse
capas
altas
arquitectura
ejecutarse
recompilarse
plataformas
capa
máquina
virtual
asentaría
en-
cima
sistema
operativo
recursos
máquina
Alan
Kay
aplicó
arquitectu-
ra
capas
MV
Flex
sistema
computación
personal
basado
orienta-
ción
objeto
marc
hito
Kay68
spués
1972
Kay
Ingall
influyente
máquina
virtual
Smalltalk
GK76
progenitora
MVs
re-
cientes
Máquina
Virtual
Java
Sistemas
información
arquitectura
clásica
tres-niveles
descripción
arquitectura
capas
sistemas
información
influencia
inclu
ía
interfaz
suario
almacenamiento
per
sistente
datos
conocida
arquitectura
niveles
Figura
30.14
descrita
años
setenta
TK78
término
alcanzó
popularidad
media-
noventa
Gartner
95
presentaba
solu-
ción
problemas
asociados
extendido
arquitecturas
niveles
438
UML
PATRONES
Figura
30.14
Vista
clásica
arquitectura
niveles
Calcular
impuestos
Interfaz
Lógica
Aplicación
Autorizar
pagos
Almacenamiento
Base
datos
Artículo
ID
Cantidad
Introducir
Artículo
Etcétera
Tienda
FOOEl
término
original
común
motivación
relevante
descripción
clásica
niveles
verticales
arquitectura
niveles
Interfaz
ventanas
informes
etcétera
Lógica
Aplicación
tareas
reglas
dirigen
proceso
Almacenamiento
mecanismos
almacenamiento
persistente
cualidad
singular
arquitectura
niveles
separación
lógica
aplicación
nivel
software
intermedio
distinto
lógica
nivel
interfaz
relativamente
liberado
proce
samiento
aplicaci
ón
ventanas
páginas
web
remiten
peticiones
tareas
nivel
intermedio
ni-
vel
intermedio
comunica
capa
almacenamiento
back-end
malentendido
creía
descripción
original
implicaba
requería
despliegue
físico
ordenadores
descripción
dada
puramente
lógica
asignación
niveles
nodos
ordenadores
variar
Véa-
Figura
30.15
DISEÑO
ARQUITECTURA
LÓGICA
PATRONES
439
Figura
30.15
división
lógica
niveles
desplegada
arquitecturas
físicas
calcular
impuestos
Lógica
Aplicación
Interfaz
Interfaz
Arquitectura
clásica
niveles
desplegada
nodos
cliente
grueso
Arquitectura
clásica
niveles
desplegada
nodos
cliente
delgado
notación
UML
nodo
recurso
procesamiento
ordenador
Artículo
ID
Cantidad
Introducir
Artículo
Etcétera
Tienda
FOO
Artículo
ID
Cantidad
Introducir
Artículo
Etcétera
Tienda
FOO
calcular
impuestos
Lógica
Aplicación
Grupo
Gartner
contrastó
arquitectura
niveles
diseño
niveles
ejemplo
lógica
aplicación
coloca
definiciones
ven-
tanas
lee
escribe
directamente
base
datos
nivel
intermedio
separe
lógica
aplicación
arquitecturas
cliente-servidor
niveles
hi-
cieron
populares
especialmente
surgir
herramientas
Visual
Basic
PowerBuilder
diseños
niveles
casos
ventaja
desarrollo
rá-
pido
inicial
sufrir
inconvenientes
presentaron
sección
Problemas
obstante
aplicaciones
simples
sistemas
in-
tensivo
datos
CRUD
creación
recuperación
actualización
borrado
opción
adecuada.•
Indirección
capas
añadir
nivel
indirección
servicios
nivel
inferior
Variaciones
Protegidas
capas
proteger
impacto
imple
mentaciones
varían
Acoplamiento
Alta
Cohesión
capas
soporte
efectivo
obje-
tivos
aplicación
específica
sistemas
información
orientados
objetos
des-
cribe
Fowler96
Arquitectura
Capas
Shaw96
Gemstone00
30.3
Principio
Separación
Modelo-Vista
principio
discutido
sección
resume
tipo
vi
sibilidad
tendrían
paquetes
capa
Pre
senta-
ción
deberían
comunicarse
clases
ventanas
ventanas
conveniente
exista
acoplamiento
directo
componentes
obje-
tos
ventana
puesto
ventanas
relacionadas
aplicaci
ón
específica
idealmente
componentes
ventanas
reutilizarse
aplicaciones
conectarse
interfaz
principio
Separación
Modelo-Vista
contexto
modelo
sinónimo
capa
Dominio
objetos
Vista
sinónimo
objetos
presentación
ventanas
applets
in-
formes
principio
Separación
Modelo-Vista6
establece
objetos
modelo
do-
minio
deberían
directamente
objetos
vista
presentación
me-
objetos
vista
ejemplo
objeto
Registro
Venta
debería
en-
viar
men
saje
directamente
objeto
ventana
GUI
FrameProcesarVenta
pidiéndole
muestre
cambie
color
cierre
etcétera
discutió
anteriormente
relajación
legítima
principio
patrón
Observador
objetos
dominio
envían
mensajes
objetos
UI
vistos
términos
interfaz
PropertyListener
AlarmaListener
adicional
principio
clases
dominio
encapsulan
in-
formación
comportamiento
relacionado
lógica
aplicación
clases
ventanas
relativamente
delgadas
responsables
entrada
salida
cap-
turar
eventos
GUI
mantienen
dato
proporcionan
directamente
nin-
guna
funcionalidad
aplicación
440
UML
PATRONES
Patrones
Relacionados
Conocido
principio
clave
patrón
Modelo-Vista-Controlador
MVC
MVC
originalmente
pa-
trón
pequeña
escala
Smalltalk-80
relacionaba
objetos
datos
modelos
elementos
gráficos
GUI
vistas
manejo
eventos
rat
ón
teclado
controladore
recientemente
érmino
MVC
adoptado
comunidad
di
seño
distribuido
aplicarlo
niveles
arqui-
tectura
escala
Modelo
Capa
Dominio
Vista
Capa
Presentación
Controlador
objetos
flujo
trabajo
capa
Aplicación
motivos
Separación
Modelo-Vista
siguientes
soporte
definiciones
modelos
cohesivos
centren
procesos
dominio
lugar
preocuparse
interfaces
usuario
Permitir
separar
desarrollo
capas
modelo
interfaz
usuario
Minimizar
impacto
cambios
requisitos
interfaz
capa
dominio
Permitir
conecten
fácilmente
vistas
capa
dominio
existente
afectar
capa
dominio
Permitir
múltiples
vistas
simultáneas
modelo
dominio
vista
información
ventas
formato
tabular
dia-
grama
barras
Permitir
ejecución
capa
modelo
independiente
capa
interfaz
usuario
sistema
procesamiento
mensajes
procesamiento
lotes
Permitir
trasladar
fácilmente
capa
modelo
framework
interfaz
usuario
Separación
Modelo-Vista
comunicación
ascendente
obtener
ventanas
informaci
ón
mo
strar
Normal-
mente
suficiente
envíen
mensajes
objetos
dominio
preguntando
información
mostrarán
elementos
gráficos
modelo
escrutinio
polling)o
tirar-desde-arriba
pull-from-above
mostrar
actualizaciones
DISEÑO
ARQUITECTURA
LÓGICA
PATRONES
441
Figura
30.16
Ocasionalmente
utiliza
FachadaUI
capa
Presentación
diseños
tirar-desde-arriba
Dominio
Presentación
Registro
Venta
FrameProcesar
Venta
FachadaUI
utilizan
ocasionalmente
objetos
FachadaUI
requiere
modelo
comunicación
tirar-desde-arriba
clase
Swing
GUI
Simplemente
objeto
común
añade
nivel
indirección
objetos
GUI
modelo
scrutinio
vece
insuficiente
ejemplo
com
probar
cientos
objetos
descubrir
cambiado
utiliza
actualizar
información
muestra
GUI
eseficiente
caso
eficiente
objetos
dominio
cambian
comuniquen
ventanas
provoque
actualice
información
muestran
objeto
dominio
cambia
situaciones
típicas
caso
Aplicaciones
vigilancia
gestión
redes
telecomunicaciones
Aplicaciones
simulación
requieren
visualización
modelado
aero-
dinámico
situaciones
requiere
modelo
empujar-desde-abajo
push-from-be-
low
mostrar
actualizaciones
restricción
patrón
Separación
Mo-
delo-Vista
necesitamos
establecer
comunicación
indirecta
objetos
in-
feriores
ventanas
subir
notificación
actualización
abajo
soluciones
comunes
patrón
Observador
objetos
GUI
simplemente
parezcan
objetos
implementan
interfaz
PropertyListener
objeto
fachada
Pre
sentación
añadir
fachada
capa
Presentación
recibe
peticiones
abajo
ejemplo
inclusión
Indirección
proporcionar
Variaciones
Protegidas
cambia
GUI
ejemplo
véase
Figura
30.16
30.4
Lecturas
adicionales
abundante
literatura
arquitecturas
capas
impresas
Web
serie
patrone
Pattern
anguages
of
Program
Des
ign
volumen
CS95
abordó
tema
forma
patrones
arquitecturas
capas
escribe
años
sesenta
volumen
con-
tinúa
patrones
relacionados
capas
adicionales
Pattern-Oriented
Software
Ar-
chitecture
volumen
BMRSS96
adecuada
patrón
Capas
442
UML
PATRONESObjetivos
Organizar
paquetes
reducir
impacto
cambios
notación
UML
alternativa
estructura
paquetes
Introducci
equipo
desarrollo
depende
medida
paquete
conveniente
inestable
pasando
versiones
puesto
incrementa
impacto
equipo
stantes
re-sincronizaciones
versiones
arreglos
software
dependiente
deja
funcionar
respuesta
cambios
destrozo
versiones
suena
obvio
equipo
presta
atención
iden-
tificación
stabilización
paquetes
ás
depende
termina
experi
mentando
destrozo
versiones
necesario
capítulo
fundamenta
introducción
capítulo
capas
paquetes
sugiriendo
heurísticas
grano
fino
organización
pa-
quetes
reducir
tipo
impacto
cambios
objetivo
crear
diseo
paquetes
físicos
robusto
sufre
organización
paquetes
frágil
sensible
dependencias
rápidamente
C++
Java
dependencias
hiper-sensibles
com-
pilación
enlace
C++
cambio
clase
fuerte
impacto
depen-
dencias
transitivas
recompilación
clases
enlazar
Capítulo
31
ORGANIZACI
PAQUETES
MODELOS
DISE
IMPLEMENTACI
estuvieses
arando
campo
qu
preferir
as
utilizar
bueyes
fuertes
1.024
gallinas
Seymour
Craynuevo1
sugerencias
útiles
especialmente
proyectos
C++
proyectos
Java
Smalltalk
ejemplos
útil
trabajo
Robert
Martin
Martin95
tratado
abordar
diseo
í-
sico
empaquetado
aplicaciones
C++
influido
guías
si-
guientes
Dise
físico
digo
fuente
Modelo
Implementaci
asunto
aspecto
diseo
sico
Modelo
Implementación
UP
empaquetado
código
fuenteÑ
simplemente
dibujando
diagramas
dise
paquete
pizarra
herramienta
CAS
colocar
arbitraria
tipos
paquete
funcionalmente
cohesivo
impacto
diseo
físico
ódigo
fuente
or
ganización
tipos
unidade
versión
físicas
paquetes
Java
C++Ñ
elecciones
influirán
nivel
impacto
desarrollador
tengan
lugar
cambios
paquetes
desarrolladores
compartiendo
código
base
común
31.1
Guías
organizaci
paquetes
Guía
Paquete
secciones
verticales
horizontales
funcionalmente
cohesivas
principio
intuitivo
ásico
dividir
ódulos
ba
cohe
sión
funcional
agrupan
tipos
fuertemente
relacionados
función
participación
objetivo
común
servicio
colaboración
política
funciónÑ
ejemplo
tipos
paquete
FijarPrecios
NuevaEra
relacionados
política
fijar
precios
productos
capas
paquetes
dise
Nue
vaEra
organizan
grupos
funcionales
Normalmente
suficiente
conjeturas
informales
agrupación
fun-
ciones
clase
LineaDeVenta
pertenece
Ventas
indicio
agrupamiento
funcional
grupo
tipos
fuerte
acoplamiento
interno
bil
acoplamiento
grupos
ejemplo
Registro
acoplado
fuertemente
Venta
fuertemente
acoplada
LineaDeVenta
acoplamiento
interno
paquete
cohesi
relacional
cuantificar
análisis
formal
raramente
utilidad
práctica
curiosos
medida
CR
/H11005NumeroDeRelacionesInternas
NumeroDeTipos
444
UML
PATRONES
C++
paquetes
realizarse
namespaces
probable
suponga
organización
código
fuente
directorios
físicos
separados
paquete”Ñ
.Donde
NumeroDeRelacionesInternas
incluye
relaciones
atributos
pará-
metros
herencia
implementaciones
interfaces
tipos
paquete
paquete
tipos
12
relaciones
internas
CR=2
paquete
tipos
relaciones
tipos
CR=0.5
números
altos
entender
cohesión
relación
paquete
Nótese
sta
medida
aplicable
paquetes
formados
interfaces
útil
paquetes
contienen
clases
imple-
mentación
valor
CR
sugiere
siguientes
cuestiones
•E
paquete
contiene
elementos
relacionados
factorizado
•E
paquete
contiene
elementos
relacionados
dise
ador
importa
deli
beradamente
habitual
paquetes
utilidades
servicios
dispares
ej.
java.util
importante
valor
alto
CR
Contiene
agrupaciones
subconjuntos
grupos
alto
CR
global
Guía
Paquete
familia
interfaces
Coloque
familia
interfaces
relacionadas
funcionalmente
paquete
separado
separado
clases
implementación
fundamental
caso
od
interfaces
relacionadas
familia
inter-
faces
paquete
tecnología
Java
EJB
javax.ejb
ejemplo
paquete
interfaces
implementaciones
paquetes
separados
Guía
Paquete
trabajo
agrupaciones
clases
inestables
contexto
discusión
paquetes
normalmente
unidad
básica
trabajo
desarrollo
siones
común
trabajar
lanzar
sión
únicamente
clase
Suponga
paquete
P1
treinta
clases
tendencia
trabajo
subconjunto
concreto
clases
C1
C10
modifica
re-
gularmente
vuelve
lanzar
Ene
ste
caso
reagrupe
P1
P1-a
P1-b
P1-b
contiene
clases
trabaja
frecuentemente
paquete
reagrupado
subconjuntos
estables
es-
tables
general
grupos
relacionados
trabajo
tra-
baja
conjunta
ía
tipos
paquete
entonce
conve-
niente
agruparlos
Idealmente
meno
sarrolladores
dependen
P1
-b
P1
-a
agrupando
inestable
paquete
separado
tantos
desarrolladores
vean
ORGANIZACIÓN
PAQUETES
MODELOS
DISEÑO
IMPLEMENTACIÓN
445afectados
versiones
P1-b
relanzamientos
paquete
P1
original
Nótese
reagrupación
tendencia
trabajo
surge
di-
fícil
identificar
especulativa
estructura
paquetes
prime-
ras
iteraciones
Evoluciona
incrementalmente
iteraciones
elabo-
ración
debería
objetivo
fase
elaboración
significativo
arquitectura
estabilizar
mayoría
estructura
paquete
complete
fase
guía
ilustra
estrategia
básica
reducir
dependencia
extendida
pa-
quetes
inestables
Guía
responsables
estables
paquetes
responsables
depende
inestables
riesgo
extender
impacto
cambios
dependencias
caso
ex-
tremo
paquete
utilidade
ampliamente
utilizado
com.foo.utilidades
cambia
frecuencia
podr
ían
dejar
funcionar
cosas
Figura
31.1
ilustra
estructura
dependencia
apropiada
446
UML
PATRONES
Figura
31.1
paquetes
responsables
deberían
estables
Estable
-más
dependiente
-concreto
detallado
Estable
-menos
dependiente
-código
concreto
detallado
estabiliza
refinamiento
acuero
-clases
abstractas
interfaces
fachadas
com.foo.utilidades
com.foo.nuevaera
dominio.motorreglaspdv
com.foo.nuevaera
ui.swing
com.foo.nuevaera
dominio.ventas
paquetes
depende
deberían
estables
cambian
impacto
com.foo.nuevaera
dominio.pagos
Visualmente
paquetes
inferiores
diagrama
deberían
estables
formas
incrementar
estabilidad
paquete
Contiene
interfaces
clases
abstractas
ejemplo
java.sql
contiene
interfaces
clases
clases
tipos
simples
estables
Time
Date.•
depende
paquetes
independiente
depende
paquetes
estables
encapsula
dependencias
dependientes
ven
afectados
ejemplo
com.foo.nuevaera.dominio.motorreglaspdv
oculta
implementa-
ción
motor
regla
simple
objeto
fachada
im-
plementación
cambia
paquetes
dependientes
ven
afectados
Contiene
código
relativamente
estable
implementó
cuidado
refinó
lanzar
versión
ejemplo
java.util
•E
obligatorio
planificación
lenta
cambios
ejemplo
java.lang
paquete
central
librerías
Java
simplemente
permite
cambie
frecuencia
Guía
Separar
tipos
independientes
Organice
tipos
puedan
utilizar
independientemente
contextos
paquetes
separados
estimación
cuidadosa
agrupación
funcionali-
dades
comunes
proporcionar
nivel
adecuado
granularidad
factori-
zación
paquetes
ejemplo
suponga
definido
subsistema
servicios
persis-
tencia
paquete
com.foo.servicios.persistencia
paquete
clases
utilidades
auxiliares
generales
UtilidadesJDBC
OrdenesSQL
utilidades
generales
trabajar
JDBC
servicios
Java
acceso
base
datos
re-
lacional
utilizar
independiente
subsistema
per-
sistencia
ocasión
desarrollador
utilice
JDBC
mi-
grar
tipos
paquete
separado
com.foo.utilidades.jdbc
Figura
31.2
ilustra
ORGANIZACIÓN
PAQUETES
MODELOS
DISEÑO
IMPLEMENTACIÓN
447
Figura
31.2
Separar
tipos
independientes
com.foo.servicios.persistencia
com.foo.servicios.persistencia
FachadaBD
FachadaBD
Conversi—n
Conversi—n
UtilidadesJDBC
UtilidadesJDBC
OrdenesSQL
OrdenesSQL
com.foo.utilidades.jdbcGuía
Utilice
factorías
reducir
dependencia
paquetes
concretos
forma
incrementar
stabilidad
paquetes
reducir
dependencia
clases
concretas
paquetes
Figura
31.3
ilustra
situación
448
UML
PATRONES
Figura
31.3
Acoplamiento
directo
paquetes
concretos
creación
Ventas
Registro
Pagos
PagoACredito
Persistencia
Conversor
Pago
PagoACredito
pg
new
PagoACredito
Suponga
Registro
ConversorPago
clase
almacena
re-
cupera
objetos
pago
base
datos
relacional
crean
instancias
PagoACre-
dito
paquete
Pagos
mecanismo
incrementar
estabilidad
plazo
paquetes
Ventas
Persistencia
detener
creación
explícita
objetos
clases
concretas
definidas
paquetes
PagoACredito
Pagos
Figura
31.4
Reducción
acoplamiento
paquete
concreto
utilizando
objeto
factoría
IPagoACredito
pg
FactoriaObjetosDominio.getInstance().getNuevoPagoACredito
Ventas
Registro
Persistencia
Conversor
Pago
CreacionObjetosDominio
FactoriaObjetosDominio
getNuevoPagoACredito
IPagoACredito
getNuevoCatalogoProductos
ICatalogoDeProductos
ÇinterfaceÈ
IPagoACredito
ÇinterfaceÈ
ICatalogoDeProductos
setCuentaCredito
getEspecificacionProducto
Pagos
PagoACredito
Productos
Catalogo
DeProductosPodemos
reducir
acoplamiento
paquete
concreto
utilizando
objeto
fac-
toría
crea
instancias
cuyos
creación
devuelven
objetos
decla-
rados
rmino
interfaces
lugar
clases
Figura
31.4
Patr
Factoría
Objetos
Dominio
factorías
objetos
dominio
interfaces
creación
objetos
dominio
estilo
dise
com
ún
visto
mencionarlo
informalmen-
literatura
dise
patr
ón
Factoría
Objetos
Dominio
conozco
referencia
describa
formalmente
patrón
Guía
Paquetes
ciclos
grupo
paquetes
ciclo
dependencias
necesitar
tratara
paquete
rminos
unidad
versión
conveniente
lanzando
paquetes
mayores
paquetes
agregados
incrementa
probabilidad
afectar
soluciones
Separar
tipos
participan
ciclo
paquete
peque
o.
Romper
ciclo
interfaz
pasos
romper
ciclo
interfaz
Redefinir
clases
depende
paquetes
imple-
mentar
interfaces
Definir
interfaces
paquete
Redefinir
tipos
dependientes
dependan
interfaces
paquete
lugar
clases
originales
Figura
31.5
ilustra
estrategia
ORGANIZACIÓN
PAQUETES
MODELOS
DISEÑO
IMPLEMENTACIÓN
449
Figura
31.5
Rotura
ciclo
dependencias
interface
IB31.2
Notaci
adicional
paquetes
UML
propósito
paquetes
UML
proporciona
notación
alternativa
ilustrar
paquetes
internos
externos
difícil
dibujar
caja
paquete
externo
paquetes
internos
alternativas
muestran
Figura
31.6
450
UML
PATRONES
Figura
31.6
Enfoques
UML
alternativos
mostrar
estructura
paquetes
utilizando
nombres
camino
UML
símbolo
círculo
cruz
Dominio
Ventas
Presentación
Texto
Presentación
Swing
Servicios
Técnicos
Jess
Dominio
MotorReglasPDV
Ventas
TextoSwing
Jess
MotorReglasPDV
Presentación
Servicios
Técnicos
Dominio
Log4J
31.3
Lecturas
adicionales
mayoría
trabajo
detallado
sorprendenteÑ
mejoras
diseo
paquetes
reducir
impacto
dependencias
procede
comunidad
C++
principio
aplicar
lenguaje
s.
Designing
bject-
Oriented
C++
Aplications
Using
the
Booch
Method
Martin
Martin95
cubre
tema
Large
Scale
C++
Software
Design
Lakos96
tema
tambi
in-
troduce
Java
Performance
and
Idiom
Guide
GL99].Objetivos
Crear
tablas
factores
arquitectura
Crear
memor
ándums
técnicos
recojan
deci
siones
acerca
arqui
tectura
principios
básicos
diseño
arquitectural
recursos
aprender
patrones
arquitectura
Introducción
esencia
análisis
arquitectural
identificar
factores
deberían
influir
arquitectura
entender
variabilidad
prioridad
re
solverlos
difícil
co-
nocer
qu
preguntar
valorando
compromi
sos
conociendo
formas
resolver
factor
significativo
punto
vista
arquitectura
extienden
omisiones
benignas
diseños
extravagantes
productos
ter-
ceras
partes
UP
factores
arquitectura
recogen
Especificación
Comple-
mentaria
decisiones
diseño
resuelven
recogen
Documento
Arquitectura
Software
SAD
Software
Architecture
Document
escrito
detalle
capítulo
análisis
arquitectural
comienza
fa
inicio
puntos
interés
fase
elaboración
actividad
alta
prioridad
tie-
ne
influencia
sarrollo
software
tema
aplazado
Capítulo
32
INTRODUCCIÓN
ANÁLISIS
ARQUITECTURAL
YE
SAD
Error
teclado
presione
F1
continuar
mensaje
inicial
BIOS
PCpunto
libro
pudieran
presentar
lugar
fundamentos
DOO
actividad
útil
reducir
riesgo
olvidar
esencial
diseño
sistemas
evitar
dedicar
excesivo
esfuerzo
cuestiones
prioridad
ayudar
alinear
producto
objetivos
negocio
capítulo
introducción
pasos
ideas
básicas
análisis
arquitectu-
ral
perspectiva
UP
método
lugar
consejos
astucias
arquitectos
expertos
libro
recetas
cocina
solu-
ciones
arquitectura
tema
amplio
dependiente
contexto
allá
alcance
libro
introductorio
obstante
caso
estudio
PDV
NuevaEra
comenta
capítulo
proporciona
ejemplos
concretos
soluciones
relaciona-
das
arquitectura
32.1
Análisis
arquitectural
análisis
arquitectural
identificaci
ón
re
solución
requisitos
funcionales
sistema
ejemplo
calidad
contexto
requisitos
fun-
cionales
UP
término
comprende
investigación
arquitectural
identificación
diseño
arquitectural
resolución
continuación
presentan
ejemplos
cuestiones
identificar
re
solver
nivel
ar
quitectura
afectan
diseño
requisitos
fiabilidad
tolerancia
fallos
ejemplo
PDV
NuevaEra
servicios
remotos
ej.
calculador
impuestos
mantener
servicio
fallos
servicios
locales
Proporcionan
exactamente
servicios
localmen-
remota
diferencias
afecta
rentabilidad
co
ste
licencias
subcomponentes
comprados
ejemplo
fabricante
excelente
servidor
bases
datos
SinPistas
2%
PDV
venda
utiliza
producto
subcomponente
utilización
producto
acelerará
desarrollo
salida
mercado
robusto
proporciona
servicios
conocen
desarrolladores
precio
lugar
so
debería
utilizar
equipo
servidor
bases
datos
SuSQL
libre
distri-
bución
robusto
riesgo
limita
facultad
cobrar
producto
NuevaEra
afecta
distribución
servicios
requisitos
calidad
re-
quisitos
funcionales
ejemplo
utilizando
sistema
calculador
impue
stos
remoto
único
centralizado
reduce
huella
cliente
NuevaEra
reduce
costes
li-
452
UML
PATRONEScencia
necesita
copia
minimiza
sfuerzo
configuraci
ón
cliente
determinado
instalación
requiere
ajustes
semanales
cambios
políticas
negocio
legislación
servicio
remoto
reduce
tiempo
re
spuesta
suficiente
im-
puestos
puedan
calcular
introducir
artícu-
precio
parcial
impuestos
línea
venta
llamada
remota
tarda
crea
único
punto
fallo
afectan
diseño
requisitos
adaptabilidad
configuración
ejemplo
ía
tiendas
difieren
reglas
negocio
quieren
representar
aplicaciones
PDV
variaciones
forma
diseñarlas
criterios
me-
jor
NuevaEra
ganar
dinero
exigiendo
adapte
programa-
ción
cliente
esfuerzo
supondrá
solución
per-
mita
clientes
adapten
fácilmente
dinero
debería
objetivo
corto
plazo
Pasos
comunes
análisis
arquitectural
métodos
análisis
arquitectural
Comunes
mayoría
variaciones
siguientes
pasos
Identificar
analizar
requisitos
funcionales
influyen
arquitec-
tura
requisitos
funcionales
relevantes
especialmente
tér-
minos
variabilidad
cambio
presta
atención
completa
funcionales
general
llamarse
factores
arqui-
tectura
conocidos
controladores
arquitectura
architec-
tural
drivers
•E
pa
so
podr
ía
caracterizar
an
álisis
requi
sitos
ordinario
puesto
cabo
contexto
identificación
impacto
arquitectura
toma
deci
siones
soluciones
ar
quitectura
alto
nivel
análisis
arquitectural
UP
refiere
UP
requisitos
identificarán
re-
copilarán
líneas
generales
Especificación
Complementaria
casos
fase
inicio
análisis
arquitectural
tie-
ne
lugar
principio
elaboración
equipo
investiga
requisitos
detenidamente
requisitos
influyen
significativa
arquitectura
analizar
alternativas
crear
soluciones
resuelvan
impacto
decisiones
arquitectura
decisiones
varían
eliminar
requisito
solución
medida
detener
proyecto
contratar
experto
presentación
introduce
pasos
básicos
contexto
caso
estudio
PDV
NuevaEra
simplicidad
evita
cuestiones
despliegue
arquitectura
tales
INTRODUCCIÓN
ANÁLISIS
ARQUITECTURAL
SAD
453como
configuración
hardware
sistema
operativo
sensibles
contexto
momento
32.2
Tipos
vistas
arquitectura
descripciones
arquitectura
definen
tipos
arqui-
tectura
aplicación
asignación
características
componentes
arquitectura
sistema
configuración
hardware
sistema
operativo
UP
especialización
información
parecida
describen
vistas
arquitectura
resumen
destacan
perspectiva
particular
ejem-
plo
vista
lógica
arquitectura
introdujo
Capítulo
30
resume
or-
ganización
funcionalidad
elementos
software
importantes
capas
similar
término
arquitectura
aplicación
vista
despliegue
resume
topología
sistema
comunicaciones
correspondencia
elementos
eje-
cutables
nodos
proceso
análogo
término
arquitectura
sistema
UP
define
vistas
arquitectura
describen
detalle
capítulo
Concretamente
vistas
combinan
texto
diagramas
describen
recogen
SAD
análisis
arquitectural
relaciona
vistas
arquitectura
de-
cisiones
arquitectura
reflejan
scriben
ás
vistas
arqui
tectura
32.3
ciencia
identificación
análisis
factores
arquitectura
Factores
arquitectura
Cualquiera
requisitos
FURPS+
influir
significativa
arquitectura
sistema
variando
fiabilidad
planificación
habili-
dades
restricciones
coste
ejemplo
caso
planificación
ajustada
ha-
bilidades
limitadas
dinero
suficiente
probablemente
favorece
contratar
alquilar
es-
pecialistas
externos
lugar
construir
componentes
compañía
factores
influyen
fuerza
arquitectura
tienden
encontrarse
categorías
FURPS+
alto
nivel
funcionalidad
fiabilidad
rendi-
miento
soporte
implementación
interfaz
véase
Capítulo
desglose
deta-
llado
Curiosamente
atributos
calidad
funcionales
fiabilidad
rendimiento
arquitectura
concreta
sabor
único
lugar
re-
quisitos
funcionales
ejemplo
diseño
sistema
NuevaEra
soporte
componentes
terceras
partes
interfaces
únicas
diseño
so-
porte
conexión
fácil
conjuntos
reglas
negocio
UP
factores
implicaciones
arquitectura
denominan
requisi-
tos
significativos
arquitectura
Utilizamos
factores
simplificar
454
UML
PATRONESSe
caracterizar
factores
técnicos
organizativos
restricciones
limitan
solución
ejecutarse
Linux
presu-
puesto
comprar
componentes
terceras
partes
Escenarios
calidad
definen
requisitos
calidad
análisis
factores
ar-
quitectura
recomienda
so
escenarios
ca
lidad1
definen
re
s-
puestas
cuantificables
observables
verificar
sirve
establecer
vaga
sistema
fácil
modificar
nin-
guna
medida
significa
Cuantificar
cosas
objetivos
rendimiento
tiempo
fallos
prácticas
conocida
escenarios
calidad
ampl
ían
idea
pro
mueve
recopilación
mayoría
factores
sentencias
cuantificables
escenarios
calidad
sentencias
cortas
forma
estímulo
respuesta
cuantificable
ejemplo
envía
venta
completa
calculador
impuestos
remoto
añadir
impuestos
resultado
devolverá
segundos
mayoría
medido
entorno
producción
condiciones
carga
media
llega
informe
errores
voluntario
prueba
versión
beta
NuevaEra
responda
llamada
teléfono
laborable
Nótese
necesario
arquitecto
NuevaEra
realice
estudio
adicional
defina
mayoría
media
escenario
calidad
realmente
válido
probar
implica
especificado
completamente
observe
calificación
escenario
calidad
función
entorno
aplica
mejora
especificación
escenario
calidad
verifica
pasa
entorno
desarrollo
ligeramente
cargado
falla
evaluarlo
en-
torno
producción
realista
Escoja
Batallas
advertencia
escritura
escenarios
calidad
espejismo
utilidad
ácil
escribir
specificaciones
detallada
materializarla
s.
Alguien
probará
realmente
requiere
fuerte
dosis
realismo
escriben
sentido
listar
objetivos
sofisti-
cados
realmente
acabará
comprobándolos
relacionado
discusión
acerca
escoja
batallas
presentó
capítulo
patrón
Variaciones
Protegidas
realmente
escenarios
calidad
críticos
causan
éxito
fracaso
ejemplo
sistema
reservas
vuelos
realmente
crítico
éxito
sistema
completen
INTRODUCCIÓN
ANÁLISIS
ARQUITECTURAL
SAD
455
término
utilizado
métodos
arquitectura
promovido
Instituto
Ingeniería
Soft-
ware
SEI
Software
Engineering
Institute
ejemplo
método
Diseño
Basado
Arquitectura.transacciones
rápida
consistente
condiciones
carga
alta
com-
probarse
lugar
dudas
sistema
NuevaEra
aplicación
realmente
deber
tolerante
fallos
mantener
servicio
fallos
copias
locales
servicios
fallan
remotos
duda
probar
validar
debidamente
céntrese
escribir
escenarios
calidad
batallas
importantes
siga
principio
plan
evaluarlos
Descripción
factores
objetivo
importante
análisis
arquitectural
entender
influencia
factores
prioridades
varían
necesidad
inmediata
flexibilidad
evo-
lución
futura
ía
métodos
arquitectura
ejemplo
véase
HNS00
abogan
creaci
ón
tabla
árbol
variaciones
si-
guiente
información
formato
varía
dependiendo
método
estilo
muestra
Tabla
32.1
denomina
tabla
factores
UP
forma
Especificación
Complementaria
456
UML
PATRONES
Tabla
32.1
Ejemplo
tabla
factores
Factor
Medidas
Variabilidad
flexibilidad
Impacto
factor
Prioridad
Dificultad
Escenarios
actual
futura
evolución
variabilidad
Riesgo
Calidad
personas
involucradas
éxito
arquitectura
factores
Fiabilidad-Capacidad
recuperación
Recupe-
ración
fallos
servicios
remotos
falla
servicio
remoto
restablecer
conexión
minuto
carga
normal
tienda
entorno
producción
Flexibilidad
actual
EME
acepta-
bles
convenientes
servicios
simplificados
lo-
cales
cliente
re-
conexión
Evolución
años
tiendas
intención
pagar
copia
local
completa
servicios
remotos
calculador
impuestos
Probabilidad
Alta
Impacto
alto
diseño
escala
tiendas
realmente
disgusta
fallan
servicios
remotos
impide
restringe
PDV
ventas
Leyenda
Alta
Media
EME
Experto
Materia
Estudio
Obsérvese
squema
cla
sificación
Fiabilidad—Capacidad
rec
uperación
categorías
FURPS+
presenta
único
esque-
ma
resulta
útil
agrupar
factores
arquitectura
categorías
ejemplo
categorías
fiabilidad
rendimiento
fuertemente
relacionadas
identificación
definición
planes
pruebas
conveniente
agruparlas
valores
códigos
básicos
prioridad
rie
sgo
simple-
mente
insinúan
utilicen
códigos
equipo
encuentre
útiles
variedad
esquemas
codificación
numéricos
cualitativos
procedentes
dife-
rentes
métodos
estándares
ISO
9126
arquitectura
advertencia
esfuerzo
extra
utilizar
squema
complejo
conduce
acci
ón
práctica
merece
pena
Factores
artefactos
UP
repositorio
central
requisitos
funcionales
UP
casos
Visión
Especificación
Complementaria
fuente
inspiración
importante
creando
tabla
factores
casos
deberían
revisar
Requisitos
especiales
Variaciones
tecnología
yl
Temas
abiertos
reunir
factore
arquitectura
impl
ícitos
xplícitos
Especificación
Complementaria
razonable
recoger
principio
factores
relacionados
casos
casos
creando
relación
obvia
conveniente
gestión
contenido
traza
legibilidad
reu-
nir
factores
arquitectura
sitio
tabla
factores
Espe-
cificación
Complementaria
Caso
UC1
Procesar
Venta
Escenario
principal
éxito
Requisitos
especiales
tiempo
respuesta
autorización
crédito
30
segundos
90%
sistema
recupere
robusta
falla
acceso
servicios
remotos
sistema
inventario
Lista
tecnología
variaciones
datos
2a
identificador
artículo
introduce
escáner
láser
código
barras
presente
código
barras
teclado
Temas
abiertos
variaciones
ley
impuestos
Estudiar
cuestiones
recuperación
servicios
remotos
32.4
Ejemplo
tabla
factores
parcial
arquitectura
PDV
NuevaEra
tabla
factores
parcial
Tabla
32.2
muestra
factores
relacionados
discusión
posterior
INTRODUCCIÓN
ANÁLISIS
ARQUITECTURAL
SAD
457458
UML
PATRONES
Tabla
32.2
Tabla
factores
parcial
análisis
arquitectural
NuevaEra
Factor
Medidas
Variabilidad
flexibilidad
Impacto
factor
Prioridad
Dificultad
Escenarios
actual
futura
evolución
variabilidad
Riesgo
Calidad
personas
involucradas
éxito
arquitectura
factores
Fiabilidad—Capacidad
recuperación
Recuperación
fallos
servicios
remotos
falla
servicio
remoto
restablecer
conexión
minuto
carga
normal
tienda
entorno
producción
Flexibilidad
actual
EME
aceptables
convenientes
servicios
simplificados
locales
cliente
reconexión
Evolución
años
tiendas
intención
pagar
copia
local
completa
servicios
remotos
calculador
impuestos
Probabilidad
Alta
Impacto
alto
diseño
escala
tiendas
realmente
disgusta
fallan
servicios
remotos
impide
restringe
PDV
ventas
Recuperación
fallos
bases
datos
productos
remotas
Flexibilidad
actual
EME
aceptable
conveniente
almacene
cliente
información
acerca
productos
comunes
reconexión
Evolución
años
soluciones
almacenamiento
masivo
replicación
cliente
baratas
efectivas
permitiendo
mantenga
copia
completa
permanente
local
Probabilidad
Alta
soporte
servicios
terceras
partes
calculador
impuestos
inventario
RRHH
contabilidad
Variarán
instalación
deba
integrar
servicio
terceras
partes
esfuerzo
10
persona
Flexibilidad
actual
describe
factor
Evolución
requiere
aprobación
producto
impacto
diseño
Soporte—Adaptabilidad
Continúa)INTRODUCCIÓN
ANÁLISIS
ARQUITECTURAL
SAD
459
soporte
terminales
PDA
inalámbricos
clientes
PDV
añade
soporte
terminales
requiere
cambie
diseño
capas
arquitectura
UI
Flexibilidad
actual
requiere
momento
Evolución
años
pensamos
probable
mercado
demande
PDAs
inalámbricos
clientes
PDV
Impacto
alto
diseño
variaciones
protegidas
elementos
ejemplo
sistemas
operativos
UIs
dispositivos
pequeños
aplicar
legislación
impuestos
actual
auditor
evalúe
ajusta
encontrará
ajusta
100%
cambia
legislación
impuestos
estarán
operativas
plazo
marcado
gobierno
Flexibilidad
actual
conformidad
inflexible
legislación
impuestos
cambiar
semanalmente
leyes
niveles
impuestos
gobierno
nacional
regional
Evolución
Fallar
cumplimiento
delito
Influye
servicios
cálculo
impuestos
difícil
escribir
servicio
leyes
complejas
cambios
constantes
necesidad
seguir
pista
niveles
gobierno
riesgo
fácil
compra
paquete
Tabla
32.2
Tabla
factores
parcial
análisis
arquitectural
NuevaEra
Continuación
Factor
Medidas
Variabilidad
flexibilidad
Impacto
factor
Prioridad
Dificultad
Escenarios
actual
futura
evolución
variabilidad
Riesgo
Calidad
personas
involucradas
éxito
arquitectura
factores
Soporte—Adaptabilidad
continuación
Otros—Legal
Leyenda
Alta
Media
Baja
EME
Experto
Materia
Estudio
32.5
arte
resolución
factores
arquitectura
ciencia
arquitectura
recolección
organización
información
factores
arquitectura
tabla
factores
arte
arquitectura
tomar
decisiones
acertadas
resolver
factores
teniendo
compromisos
interdependencias
prioridades
arquitectos
expertos
conocen
variedad
áreas
ejemplo
estilos
pa-
trones
arquitectura
tecnologías
productos
peligros
tendencias
aplican
decisiones
Registro
alternativas
decisiones
motivación
arquitectura
Ignorando
principios
toma
decisiones
arquitectura
to-
métodos
arquitectura
recomiendan
mantener
registro
soluciones
al-
ternativas
decisiones
factores
influyen
motivo
cuestiones
decisiones
relevantes
tales
registros
llamado
memorándums
técnicos
Cunningham96
tar-
jetas
cuestiones
HNS00
documentos
técnicas
arquitectura
propuestas
arquitectura
SEI
diversos
grados
formalidad
sofisticación
métodos
memorándums
base
paso
revisión
refina-
miento
UP
memorándums
recoger
SAD
aspecto
importante
memorándums
técnicos
motivación
ol
funda-
mentos
futuro
desarrollador
arquitecto
necesita
modificar
sistema2,e
enormemente
útil
entender
motivos
diseño
es-
cogió
enfoque
concreto
recuperación
fallos
servicios
remotos
PDV
NuevaEra
rechazaron
objeto
tomar
decisiones
conoci-
miento
causa
cambios
sistema
importante
explicar
motivos
rechazar
alternativas
evolución
futura
producto
arquitecto
reconsiderar
alternativas
querer
alternativas
consideraron
escogió
continuación
presentamos
memorándum
técnico
ejemplo
recoge
de-
cisión
arquitectura
PDV
NuevaEra
formato
exacto
importante
Manténgalo
simple
recoja
únicamente
información
ayudará
fu-
turos
lectores
tomar
decisiones
conocimiento
causa
estén
cambiando
sistema
Memorándum
Técnico
Asunto
Fiabilidad—Recuperación
fallos
servicios
remotos
Resumen
solución
Ubicación
transparente
utilizando
servicio
bús-
queda
mantenimiento
servicio
fallos
pasando
remoto
local
re-
plicación
parcial
local
servicio
Factores
Recuperación
robusta
fallos
servicios
remotos
ej.
calculador
impuestos
in-
ventario
460
UML
PATRONES
semanas
arquitecto
original
olvidado
motivación!•
Recuperación
robusta
fallos
base
datos
productos
ej.
descripción
pro-
ductos
precios
remota
Solución
variaciones
protegidas
ubicación
servicios
utilizando
Adaptador
creado
FactoriaDeServicios
ofrecer
implementaciones
locales
servicios
remotos
normalmente
comportamiento
simplificado
restringido
ejemplo
calculador
impuestos
local
utilizará
porcentajes
impuestos
constantes
base
datos
información
productos
local
pequeña
caché
pro-
ductos
comunes
almacenarán
actualizaciones
inventario
remitirán
cuan-
do
restablezca
conexión
Véase
memorándum
técnico
Adaptabilidad—Servicios
terceras
partes
aspectos
adaptabilidad
solución
implementaciones
servicios
remotos
variarán
instalación
satisfacer
escenarios
calidad
reconexión
servicios
remotos
ASAP
utilizar
servicios
objetos
Proxy
inteligentes
llamada
servicio
com-
prueban
reactivar
servicio
remoto
redireccionan
Motivación
tiendas
realmente
quieren
dejar
vender
PDV
NuevaEra
ofrece
nivel
fiabilidad
recuperación
producto
atractivo
nues-
tros
competidores
proporciona
capacidad
pequeña
caché
productos
motivada
limitación
recursos
cliente
calculador
impuestos
terceras
partes
real
duplica
cliente
fundamentalmente
coste
licencias
alto
esfuerzos
configuración
puesto
instalación
calculador
re-
ajustes
semanales
diseño
soporta
puntos
evolución
de-
seos
futuros
clientes
capaz
replicar
servicios
permanentemente
calcu-
lador
impuestos
terminal
cliente
Cuestiones
resolver
Alternativas
consideradas
calidad
nivel
oro
contrato
servicio
servicios
autorización
crédito
mejorar
fiabilidad
disponible
caro
Nótese
ilustra
ejemplo
punto
clave
decisión
so-
bre
arquitectura
descrita
memorándum
técnico
resolver
grupo
fac-
tores
Prioridades
jerarquía
objetivos
guían
decisiones
arquitectura
Re
stricciones
inflexibles
encuentran
ajustarse
normas
le-
gales
seguridad
PDV
NuevaEra
aplicar
correctamente
leyes
impuestos
Objetivo
negocio
Demo
características
relevantes
listo
feria
POSWorld
Ham-
burgo
18
meses
INTRODUCCIÓN
ANÁLISIS
ARQUITECTURAL
SAD
461
cualidades
características
atractivas
almacenes
Eu-
ropa
ejemplo
soporte
moneda
regla
negocio
medida
objetivos
seguir
pista
atrás
establecer
directa-
mente
objetivos
negocio
indirectos
ejemplo
es-
tablecer
traza
ácilmente
extensible
añadir
unidad
funcional
10
semanas
persona
objetivo
negocio
ver-
sión
meses
UP
objetivos
recogen
artefacto
Visión
Recuerde
valores
Prioridad
éxito
tabla
factore
debería
reflejar
prioridad
objetivos
aspecto
distintivo
toma
decisiones
nivel
frente
diseño
objetos
pequeña
escala
considerar
simultáneamente
objetivos
influyen
globalmente
compromisos
objetivos
ne-
gocio
pa
san
cruciale
deci
siones
écnicas
meno
deber
ían
ejemplo
Memorándum
Técnico
Asunto
Legal—Cumplimiento
legislación
impuestos
Resumen
solución
Comprar
componente
cálculo
impuestos
Factores
aplicar
ley
legislación
impuestos
actuales
Solución
Comprar
calculador
impuestos
licencia
recibir
actualizaciones
legislación
impuestos
actuales
Nótese
utilizar
calculadores
instalaciones
distintas
Motivación
Acelerar
salida
mercado
corrección
requisitos
mantenimiento
bajos
desarrolladores
felices
véase
alternativas
productos
costosos
afecta
objeti-
vos
negocio
política
contención
costes
política
fijación
precios
alternativa
inaceptable
Cuestiones
resolver
productos
líderes
cualidades
Alternativas
consideradas
equipo
NuevaEra
construya
estima
tiempo
propenso
fallos
crea
responsabilidad
mantenimiento
continua
costosa
interés
desarrolladores
compañía
afecta
objetivo
desarrolladores
felices
se-
guramente
objetivo
importante
462
UML
PATRONESPrioridades
puntos
evolución
ingeniería
defecto
exceso
característica
distintiva
toma
decisiones
arquitectura
establecer
prioridades
probabilidad
puntos
evolución
puntos
va-
riabilidad
cambio
surgir
futuro
ejemplo
NuevaEra
exis-
posibilidad
desee
terminales
clientes
portátiles
inalámbricos
diseño
influye
significativa
diferencias
sistemas
opera-
tivos
interfaces
usuario
recursos
hardware
etcétera
compañía
gastarse
cantidad
enorme
dinero
incrementar
diversos
riesgos
futura
necesidad
futuro
re
sulta
rele-
vante
ejercicio
caro
sobre-ingeniería
Nótese
sostener
futuras
necesidades
rara
pue
sto
especula-
ciones
inclu
so
ocurre
cambio
previ
sto
probable
produzcan
cambios
diseño
futuras
necesidades
problema
datos
Y2
habría
dinero
empleado
lugar
esfuerzo
ingeniería
defecto
resultado
tremendamente
costoso
arte
arquitecto
batallas
merece
pena
pelear
merece
pena
invertir
diseños
protejan
cambios
evolutivos
decidir
deberían
evitar
futuras
necesidades
prematuras
considere
realmen-
escenario
posponer
cambio
futuro
requiera
di-
seño
código
cambiar
realidad
esfuerzo
es-
tudio
detallado
cambio
potencial
revelará
principio
cuestión
gigantesca
protegerse
estima
esfuerzo
semanas-persona
precisamente
problema
dif
ícil
predicción
difícil
especial-
mente
futuro
atribuido
comprobar
Niels
Bohr
Principios
básicos
diseño
arquitectura
principios
básicos
diseño
estudiado
libro
aplicaron
di
seño
objeto
pequeña
scala
todav
ía
principio
in
fluencia
nivel
arquitectura
escala
acoplamiento
Alta
cohesión
Variaciones
protegidas
interfaces
indirección
servicio
búsqueda
etcétera
granularidad
componentes
acopla-
miento
aplicaciones
subsistemas
procesos
lugar
pequeños
objetos
escala
amplia
mecanismos
cualidades
acoplamiento
variaciones
protegidas
ejemplo
considere
memorándum
técnico
INTRODUCCIÓN
ANÁLISIS
ARQUITECTURAL
SAD
463Memorándum
Técnico
Asunto
Adaptabilidad—Servicios
terceras
partes
Resumen
solución
Variaciones
Protegidas
utilizando
interfaces
adaptadores
Factores
soporte
cambiables
servicios
terceras
partes
calculadores
impuestos
autorización
crédito
inventario
Solución
variaciones
protegidas
Analizar
productos
cálculo
im-
puestos
comerciales
sucesivamente
categorías
productos
construir
in-
terfaces
comunes
mínimo
común
denominador
funcionalidades
utilizar
Indirección
patrón
Adaptador
crear
objeto
Adaptador
recursos
implementa
interfaz
actúa
conexión
traductor
calculador
impuestos
back-end
concreto
Véase
memorándum
técnico
Fiabilidad—Recuperación
fallos
servicios
remotos
aspectos
ubicación
transparente
solución
Motivación
Simple
Comunicación
barata
rápida
utilizando
servicio
intercambio
mensajes
alternativas
evento
servicio
intercambio
mensajes
utilizar
conectar
directamente
servicio
autorización
crédito
externo
Cuestiones
resolver
Originarán
interfaces
mínimo
común
denominador
problema
imprevisto
limitada
Alternativas
consideradas
Aplicar
indirección
utilizando
servicio
intercambio
mensajes
publicar-suscribir
ej.
implementación
JMS
cliente
calculador
impuestos
adaptadores
utilizar
directamente
autorizador
crédito
costoso
fiables
fia-
bilidad
entrega
mensajes
necesita
práctica
nivel
arquitectura
normalmente
mecanismos
variaciones
protegidas
objetivos
frecuencia
colaboración
componente
utilizar
Servicio
Men
sajes
Java
JMS
Java
Messaging
Service
servidor
EBJ
Separación
intereses
localización
impacto
principio
básico
aplica
análisis
arquitectural
sepa-
ración
intereses
aplicable
escala
pequeños
objetos
al-
canza
relevancia
análisis
arquitectural
intereses
transversales
amplia
aplicación
influencia
sistema
persistencia
datos
seguridad
diseñar
soporte
persistencia
aplicación
NuevaEra
objeto
contiene
código
lógica
aplicación
comunique
base
datos
alma-
cenar
datos
entrelazaría
interés
persistencia
ógica
464
UML
PATRONESaplicación
código
fuente
clases
seguridad
co-
hesión
disminuye
aumenta
acoplamiento
cambio
diseñando
separación
intereses
separa
soporte
persistencia
soporte
seguridad
cosas
separadas
mecanismos
separación
objeto
lógica
aplicación
únicamente
lógica
aplicación
lógica
persistencia
seguridad
Igualmente
subsistema
persistencia
centra
cuestiones
persistencia
seguridad
subsistema
seguridad
cabo
persistencia
separación
intereses
forma
pensar
escala
acerca
aco-
plamiento
alta
cohesión
nivel
arquitectura
aplica
objetos
peque-
ña
escala
ausencia
lugar
objetos
cohesión
áreas
responsabilidad
cuestión
arquitectura
especialmente
intereses
amplios
soluciones
conllevan
elecciones
diseño
importantes
fundamen-
tales
técnicas
escala
separación
in-
tereses
Tratar
interés
módulo
componente
separado
ejemplo
subsistema
invocar
servicios
enfoque
común
ejemplo
sistema
NuevaEra
so-
porte
persistencia
colocarse
subsistema
aparte
denominado
servicio
pers
istencia
fachada
ofrecer
interfaz
público
servicios
componentes
arquitecturas
capas
ilustran
separación
intereses
Utilizar
decoradore
s.
enfoque
común
lugar
Servicio
Transacciones
Microsoft
posteriormente
servi-
dores
EJB
enfoque
inter
és
seguridad
decora
objetos
objeto
Decorador
encap
sula
objeto
interno
inter
pone
servicio
Decorador
denomina
contenedor
termino
logía
EJB
ejemplo
sistema
PDV
NuevaEra
control
se-
guridad
servicio
externo
sistema
RRHH
contenedor
EJB
añade
comprobacione
segu-
ridad
Decorador
externo
ógica
aplicaci
ón
objeto
interno
Utilizar
po
st-compiladores
tecnologías
orientadas
aspectos
ejemplo
entidades
bean
EJB
añadir
soporte
per-
sistencia
clases
Venta
especifica
fichero
descripción
propiedade
caracter
ísticas
per
sistencia
cla
Venta
En-
tonces
post-compilador
compilador
ejecuta
compilador
ordinario
añadir
soporte
per
sistencia
nece
sario
cla
Venta
modificada
modificando
únicamente
byte
codes
subclase
desarrollador
contin
úa
viendo
cla
original
cla
limpia
contiene
ógica
aplicaci
ón
variación
tecnolog
ías
orientadas
spectos
spectJ
INTRODUCCIÓN
ANÁLISIS
ARQUITECTURAL
SAD
465(www.aspectj.org
similar
soporte
entrelazar
po
st-
compilaci
ón
intere
ses
tran
sversales
ódigo
tran
spa-
rente
sarrollador
enfoque
mantienen
ilu
sión
se-
paración
trabajo
desarrollo
entrelazan
interés
ejecución
Promoción
patrones
arquitectura
estudio
patrones
arquitectura
aplicar
aplicar
ca
so
studio
NuevaEra
queda
alcance
ste
texto
intro-
ductorio
continuación
presentamos
indicaciones
Probablemente
mecani
smo
común
seguir
acoplamiento
riaciones
protegidas
separación
intere
ses
nivel
arquitectura
patrón
Capas
introdujo
cap
ítulo
ejemplo
écnica
común
separación
tratar
intereses
módulos
componentes
separados
capas
amplio
creciente
cuerpo
material
escrito
patrones
arquitec-
tura
Estudiarlos
rápida
conozco
aprender
soluciones
ar-
quitectura
favor
vea
lecturas
recomendadas
32.6
Resumen
temas
análisis
arquitectural
asunto
destacar
cuestiones
arquitecturales
especialmente
re-
lacionadas
requisitos
funcionales
conllevan
percepción
contexto
negocio
mercado
aplicación
tiempo
ignorar
re-
quisitos
funcionales
ejemplo
procesar
ventas
proporcionan
contexto
resolver
cuestiones
identificación
variabilidad
significativa
arquitectura
tema
cuestiones
arquitecturales
implican
problemas
nivel
sistema
escala
amplios
cuya
resolución
normalmente
conlleva
decisiones
diseño
escala
fundamentales
ejemplo
elección
servidor
aplicación
tercer
tema
análisis
arquitectural
interdependencias
compromisos
ejemplo
mejora
seguridad
afectar
rendimiento
facilidad
mayoría
opciones
afectan
coste
cuarto
tema
análisis
arquitectural
generación
evaluación
soluciones
alternativas
arquitecto
experto
ofrecer
soluciones
diseño
impliquen
construcción
software
sugerir
soluciones
soluciones
parciales
utilicen
software
hardware
comercial
libre
di
stribución
ejemplo
re-
cuperación
servidor
remoto
PDV
NuevaEra
di-
seño
programaci
ón
proce
sos
guardiane
watchdog
quiz
ás
trav
és
agrupación
duplicación
servicios
sobreponerse
fallos
ofrecen
sistemas
operativos
componentes
hardware
arquitectos
conocen
pro-
ductos
hardware
software
terceras
partes
466
UML
PATRONESLa
definición
inicial
cue
stiones
arquitectura
proporciona
marco
pensar
tema
arquitectura
identificando
puntos
implica-
ciones
escala
nivel
sistema
resolviéndolos
análisis
arquitectural
preocupa
identificación
resolución
requisitos
funcionales
p.e
calidad
sistema
contexto
requisitos
funcionales
32.7
Análisis
arquitectural
UP
Advertencia
Análisis
arquitectural
cascada
frecuencia
métodos
libro
análisis
arquitectural
implícitamente
fo-
mentan
extensas
decisiones
diseño
arquitectura
siguiendo
estilo
cascada
implementación
desarrollo
iterativo
UP
aplique
ideas
con-
texto
pequeñas
etapas
retroalimentación
adaptación
lugar
pretender
resolver
completamente
arquitectura
programar
Aborde
implementación
so-
luciones
arriesgadas
difíciles
primeras
iteraciones
ajuste
soluciones
arquitectura
base
retroalimentación
conocimiento
adquiere
Información
arquitectura
artefactos
UP
factores
arquitectura
ejemplo
tabla
factores
recogen
Especificación
Complementaria
decisiones
arquitectura
recogen
SAD
incluye
memo-
rándums
técnicos
descripciones
vistas
arquitectura
SAD
vistas
arquitectura
diagramas
UML
paquetes
clases
interacciones
SAD
ar-
tefacto
clave
Modelo
Diseño
UP
describe
ideas
arqui-
tectura
incluyendo
decisiones
análisis
arquitectural
Prácticamente
ayuda
aprendizaje
desarrolladores
necesitan
entender
ideas
esencia-
sistema
alguien
une
equipo
jefe
pro
yecto
Bienvenido
proyecto
NuevaEra
favor
sitio
web
proyecto
lea
SAD
10
páginas
obtener
visión
ideas
importantes
versión
posterior
trabaja
sistema
gente
SAD
stituye
ayuda
clave
aprendizaje
escribir
teniendo
mente
leer
objetivo
ne-
cesito
representar
UML
rápidamente
ayudará
alguien
entender
ideas
principales
sistema
INTRODUCCIÓN
ANÁLISIS
ARQUITECTURAL
SAD
467La
esencia
SAD
resumen
decisiones
arquitectura
memorándums
técnicos
vistas
arquitectura
UP
Vistas
arquitectura
SAD
arquitectura
cosa
describirla
Kruchten95
fomenta
influyente
idea
scribir
arquitectura
múltiples
vistas
idea
esencial
vista
arquitectura
Vista
arquitectura
vista
arquitectura
sistema
perspectiva
dada
centra
estructura
modularidad
componentes
fundamentales
principales
flu-
jos
control
RUP
aspecto
importante
vista
obvia
definición
RUP
motivación
vista
arquitectura
debería
explicar
arquitectura
vista
arquitectura
ventana
sistema
perspectiva
par-
ticular
destaca
información
relevante
ideas
claves
ignora
resto
vista
arquitectura
herramienta
comunicación
enseñanza
re-
flexión
representa
texto
diagramas
UML
UP
sugieren
vistas
arquitectura
permiten
vis-
ta
seguridad)3
opcionales
recomienda
documentar
vistas
lógica
proceso
caso
despliegue
vistas
Lógica
Organización
conceptual
software
función
capas
subsistemas
paquetes
frameworks
clases
interfaces
importantes
resume
funcionalidad
elementos
software
importantes
subsis-
tema
Muestra
escenarios
realización
casos
diagramas
in-
teracción
destacados
ilustran
aspectos
claves
sistema
vista
Modelo
Di
seño
UP
visualizada
diagramas
paquetes
clases
interacción
UML
Proceso
Procesos
hilo
ejecuci
ón
re
sponsabilidades
colaboracione
signación
elemento
lógicos
capa
subsistemas
cla
ses
vista
Modelo
Di
seño
UP
visualizada
diagramas
clases
interacción
UML
utilizando
notación
UML
procesos
hi-
468
UML
PATRONES
primeras
versiones
UP
describían
+1
vistas
definen
Kruchten95
evolucio-
naron
vistas.3
Despliegue
Despliegue
físico
procesos
componentes
nodos
proceso
configuración
red
física
nodos
vista
Modelo
Despliegue
UP
visualizada
diagra-
despliegue
UML
Normalmente
vista
simplemente
mo-
delo
completo
lugar
subconjunto
relevante
Véase
Capítulo
38
notaci
ón
diagrama
spliegue
UML
Datos
Vista
global
esquema
datos
persistentes
correspondencia
esquema
objetos
datos
persistentes
normalmente
base
datos
relacional
mecanismo
correspondencia
objetos
base
datos
procedimientos
almacenados
base
datos
disparadores
triggers
vista
Modelo
Datos
UP
visualizada
diagramas
cla-
ses
UML
utilizan
describir
modelo
datos
Casos
Resumen
casos
significativos
arquitectura
requisitos
funcionales
casos
implementación
cubren
significativa
arquitectura
in
fluyen
elemento
arquitectura
ejemplo
ca
so
Procesar
Venta
implementa
completamente
cua-
lidades
vista
Modelo
Casos
UP
expresada
textualmente
visualizada
diagramas
casos
UML
Implementación
lugar
definición
Modelo
Implementación
diferencia
modelos
UP
texto
diagramas
modelo
có-
digo
fuente
real
ejecutables
etcétera
partes
entregables
cosas
crean
entregables
código
fuente
gráficos
Mode-
Implementación
formado
cosas
incluyendo
pá-
ginas
web
DLL
ejecutable
ódigo
fuente
etc
étera
organizaci
ón
código
fuente
paquetes
Java
bytecodes
organizados
ficheros
JAR
vista
implementación
descripción
resumida
organización
relevante
entregables
cosas
crean
entregables
código
fuente
vista
Modelo
Implementaci
ón
UP
expresada
textual-
mente
vi
sualizada
diagrama
paquete
componente
UML
ejemplo
diagramas
paquetes
interacci
ón
NuevaEra
pre-
sentaron
Capítulo
30
arquitectura
capas
lógica
muestran
ideas
structura
lógica
arquitectura
software
SAD
arquitecto
creará
sección
denominada
Vista
Lógica
nsertará
diagramas
UML
añadirá
INTRODUCCIÓN
ANÁLISIS
ARQUITECTURAL
SAD
469algunos
comentarios
escritos
acerca
paquete
capa
motivo
diseño
lógico
vistas
proceso
despliegue
idea
clave
vistas
arquitectura
concretamente
texto
dia-
gramas
describen
sistema
perspectiva
ideas
destacadas
perspectiva
vista
descripción
minuto
ascensor
cosas
importantes
dirías
minuto
as-
censor
compañero
perspectiva
crearse
vistas
arquitectura
construya
sistema
resumen
ayuda
aprendizaje
futuros
desarrolladores
hitos
iteración
iteración
sir-
ayuda
aprendizaje
equipo
sarrollo
actual
miembros
especulativa
primeras
iteraciones
ayuda
traba-
jo
diseño
creativo
reconociendo
vista
original
cambiará
prosiga
diseño
implementación
Estructura
ejemplo
SAD
Documento
Arquitectura
Software
Representación
arquitectura
Resumen
describirá
arquitectura
documento
utilizando
memorándums
técnicos
vistas
arquitectura
útil
alguien
esté
fa-
miliarizado
idea
memorándums
técnicos
vistas
Nótese
necesa-
rias
vistas
Factores
decisiones
arquitectura
Referencia
Especificación
Complementaria
Tabla
Factores
con-
memorándums
técnicos
resume
decisiones
Vista
Lógica
diagramas
paquetes
UML
diagramas
clases
elementos
importantes
Comentarios
estructura
escala
funcionalidad
componentes
principales
Vista
Proceso
Diagramas
interacción
clases
UML
ilustran
procesos
hilos
ejecución
sistema
Agruparlos
hilos
procesos
interaccionan
Comentarios
funciona
comunicación
procesos
ej.
RMI
Java
Vista
Casos
Resumen
casos
significativos
punto
vista
arqui-
tectura
Diagramas
interacción
UML
realizaciones
casos
significativos
arquitectura
escenarios
comentarios
diagramas
explicando
ilustran
elementos
importantes
arquitectura
Vista
Despliegue
diagramas
despliegue
UML
muestra
nodos
asignación
procesos
componentes
Comentarios
red
470
UML
PATRONESFases
Inicio
técnicamente
satisfacer
requisitos
signifi-
cativos
arquitectura
equipo
implementar
prueba
concepto
arquitectura
PDC
determinar
viabilidad
UP
creación
evaluación
denomina
Síntesis
Arquitectura
distinto
anteriores
experimentos
pequeños
simples
programaci
ón
PDC
cue
stiones
técnicas
aisladas
PDC
arquitectura
cubre
ligeramente
requisitos
significativos
arquitectura
evaluar
viabilidad
combinada
Elaboración
objetivo
importante
fase
implementación
ele-
mentos
centrales
arquitectura
riesgo
mayoría
análisis
ar-
quitectural
completa
elaboración
Normalmente
espera
par-
contenido
tabla
factore
memorándums
técnicos
SAD
completar
elaboración
Transición
idealmente
factores
decisiones
significativas
ar-
quitectura
resolvieron
transición
SAD
necesitará
repase
yp
osiblemente
revise
fase
asegurar
describe
precisa
sistema
despliegue
Ciclos
evolución
siguientes
diseñar
versiones
común
volver
av
isitar
factores
arquitectura
decisiones
ejemplo
deci
sión
versión
1.0
crear
único
servicio
remoto
cálculo
impuestos
lugar
duplicado
nodo
PDV
haberse
motivado
coste
evitar
múltiples
licencias
futuro
reduce
coste
calculadores
impuestos
razones
tolerancia
fallos
rendimiento
ar-
quitectura
cambia
utilizar
calculadores
impuestos
32.8
Lecturas
adicionales
cuerpo
creciente
patrones
relacionados
arquitectura
consejos
ge-
nerales
arquitectura
software
Sugerencias
Pattern-Oriented
Software
Architecture
volúmenes
Software
Architecture
in
Practice
BCK98
Pattern
Languages
of
Program
Design
odos
volúmenes
volumen
con-
sección
patrones
relacionados
arquitectura
Artículos
disponibles
web
patrones
arquitectura
arquitecturas
J2EE
Sun
IBM
sitios
web
Artículos
disponibles
web
arquitectura
Instituto
Inge-
niería
Software
SEI
Software
Engineering
Institute
Universidad
Car-
negie
Mellon
tiempo
centro
investigación
arquitectura
www.sei.cmu.edu
INTRODUCCIÓN
ANÁLISIS
ARQUITECTURAL
SAD
471Objetivos
Aplicar
patrones
GRASP
GoF
diseño
Introducci—n
capítulo
estudia
diseños
parciales
iteración
actual
manejando
re-
quisitos
tales
mantenimiento
servicios
fallos
servicios
lo-
cales
gestión
dispositivos
PDV
autorización
pagos
33.1
Mantenimiento
servicios
fallos
servicios
locales
rendimiento
almacenamiento
local
requisitos
grado
recuperaci
ón
fallo
failover
servicio
remoto
ba
dato
producto
di
sponible
temporalmente
acceso
información
productos
caso
utiliza
es-
tudiar
estrategia
recuperación
mantenimiento
servicio
fallo
Po
ste-
Capítulo
33
DISE
REALIZACIONES
CASOS
OBJETOS
PATRONES
ocasiones
preguntado
miembros
Parlamento
favor
Mr
Babbage
introduce
mq
uina
cifras
incorrectas
obtendr
respuesta
correcta
capaz
comprender
exactamente
tipo
confusión
ideas
podr
provocar
pregunta
Charles
Babbageriormente
explora
acceso
servicio
contabilidad
solución
lige-
ramente
distinta
Revisemos
memorándum
técnico
Memor
ndum
Técnico
Asunto
FiabilidadÑ
Recuperaci—n
fallos
servicios
remotos
Resumen
soluci—n
Ubicaci—n
transparente
utilizando
servicio
s-
queda
mantenimiento
servicio
fallos
pasando
remoto
local
re-
plicaci—n
parcial
servicio
local
Factores
Recuperación
robusta
fallos
servicios
remotos
ej.
calculador
impuestos
in-
ventario
Recuperación
robusta
fallos
base
datos
productos
ej.
descripciones
pre-
cios
remota
Soluci—n
variaciones
protegidas
ubicación
servicios
utilizando
Adaptador
creado
FactoriaDeServicios
ofrecer
implementaciones
locales
servicios
remotos
normalmente
comportamiento
simplificado
restringido
ejemplo
calculador
impuestos
local
utilizará
porcentajes
impuestos
constantes
base
datos
local
información
productos
pequeña
caché
pro-
ductos
comunes
almacenarán
actualizaciones
inventario
remitirán
cuan-
do
restablezca
conexión
Véase
memorándum
técnico
Adaptabilidad—Servicios
terceras
partes
aspectos
adaptabilidad
solución
implementaciones
servicios
remotos
variarán
instalación
satisfacer
escenarios
calidad
reconexión
servicios
remotos
utilizar
servicios
objetos
Proxy
inteligentes
llamada
servicio
comprueban
reactivar
servicio
remoto
redireccionan
Motivaci—n
tiendas
realmente
quieren
dejar
vender
PDV
NuevaEra
ofrece
nivel
fiabilidad
recuperación
producto
atractivo
nues-
tros
competidores
proporciona
capacidad
solucionar
aspectos
recuperación
mantenimiento
servicio
fallos
observe
razones
rendimiento
mejorar
re-
cuperación
falla
base
datos
remota
arquitecto
recomendado
caché
local
persiste
fiable
disco
duro
local
simple
fichero
objetos
EspecificacionDelProducto
debería
buscar
caché
lo-
cal
hubiera
acierto
cach
intentar
acceso
remoto
elegante
diseño
existente
adap-
tador
factoría
FactoriaDeServicios
devolverá
adaptador
servicio
infor-
mación
producto
local
adaptador
productos
locales
realmente
adaptador
componente
Implementará
responsabilidades
servicio
local
474
UML
PATRONES3
valor
inicial
servicio
local
referencia
adaptador
servicio
productos
remoto
servicio
local
dato
caché
devuelve
caso
re-
mite
petición
adaptador
servicio
externo
Obsérvese
niveles
caché
cliente
objeto
CatalogoDeProductos
memoria
mantendrá
colección
me-
moria
HashMap
Java
ejemplo
1.000
objeto
EspecificacionDelProducto
obtenido
servicio
infor-
mación
productos
ajustar
tamaño
colección
función
disponibilidad
memoria
local
servicio
productos
local
mantendrá
caché
persistente
di
sco
duro
mantiene
cantidad
informaci
ón
producto
100
MB
spacio
fichero
aju
star
de-
pendiendo
configuraci
ón
local
cach
per
sistente
importante
tolerancia
fallos
aplicación
PDV
cae
pierde
caché
memoria
objeto
CatalogoDeProductos
permanece
caché
persistente
diseño
afecta
código
existente
objeto
servicio
local
in-
serta
afectar
diseño
objeto
CatalogoDeProductos
colabora
servicio
productos
momento
introducido
nue
vos
patrone
utilizado
Adaptador
Factoría
Figura
33.1
ilustra
tipos
diseño
Figura
33.2
ilustra
inicialización
DISEÑO
REALIZACIONES
CASOS
OBJETOS
PATRONES
475
Figura
33.1
Adaptadores
información
productos
interface
IAdaptadorProductos
getEspecificacion(articuloID
EspecificacionDelProducto
AdaptadorBDProductos
getEspecificacion(articuloID
ProductosLocales
servicioProductosRemoto
IAdaptadorProductos
getEspecificacion(articuloID
AdaptadorServicioWebProductos
getEspecificacion(articuloID
Implementa
interfaz
adaptador
realmente
adaptador
componente
implementa
función
servicio
local
CatalogoDeProductos
servicioProductos
IAdaptadorProductos
getEspecificacion
1La
Figura
33.3
muestra
colaboración
inicial
catálogo
servicio
pro-
ductos
476
UML
PATRONES
Figura
33.2
Inicialización
servicio
información
productos
Tienda
Registro
cp
CatalogoDeProductos
create
create(cp
create
singleton
FactoriaDeServicios
ap
ProductosLocales
servicioExterno
AdaptadorBDProductos
1.1
ap
getAdaptadorProductos
IAdaptadorProductos
1.1.2
create(servicioExterno
1.1.1
create
servicio
local
obtiene
referencia
adaptador
servicio
externo
IAdaptadorProductos
devuelve
servicio
local
Figura
33.3
Comienzo
colaboración
servicio
productos
crearLineaDeVenta(ep
cant)introducirArticulo(id
cant
ep
getEspecificacion(id
1.1
ep
get(id
1.3
not
in
especs
especs
not
llena
put(id
ep
Registro
Venta
Catalogo
DeProductos
Especificacion
DelProducto
notación
UML
observe
sintaxis
mensaje
condicional
ProductosLocales
IAdaptadorProductos
1.2
not
in
especs
ep
getEspecificacion(id
especs
continúa
diagrama
servicio
productos
local
producto
caché
colabora
adaptador
servicio
externo
muestra
Figura
33.4
Nótese
servi-
cio
productos
local
almacena
objetos
EspecificacionDelProducto
verdade-
ros
objetos
serializados
cambió
servicio
externo
base
datos
servicio
Web
necesario
cambiar
configuración
factoría
servicio
remoto
Véase
Figura
33.5
DISEÑO
REALIZACIONES
CASOS
OBJETOS
PATRONES
477
Figura
33.4
Continuación
colaboración
obtener
información
producto
ep:=getEspecificacion(id
IAdaptadorProductos
IAdaptadorProductos
ProductosLocales
ep:=get(id
3[notinfichero]:put(id
ep
FicheroIndexadoPor
ClaveDeObjetosSerializados
2[notinfichero
ep:=getEspecificacion(id
servicioRemoto
AdaptadorBDProductos
continœaenotro
diagrama
Figura
33.5
servicios
externos
afectan
diseño
ep:=getEspecificacion(id
IAdaptadorProductos
IAdaptadorProductos
ProductosLocales
2[notinfichero
ep:=getEspecificacion(id
servicioRemoto
AdaptadorServicioWebProductos
Continuando
ca
so
colaboraci
ón
AdaptadorBDProductos
inte-
ractuará
subsistema
persistencia
establecer
correspondencia
objeto-relacional
mapping
O-R
Figura
33.6
Figura
33.6
Colaboración
subsistema
persistencia
Adaptador
BDProductos
IAdaptadorProductos
FachadaBD
ep
getEspecificacion(id
ep
getObject(EspecificacionDelProducto.class
id
colaboración
subsistema
persistencia
mapping
O-R
necesita
especifique
tipo
objeto
recuperar
ID
subsistema
relativamente
genérico
especialmente
diseñado
únicamente
aplicación
PDV
NuevaEra
EspecificacionDelProducto.class
forma
especificar
Java
tipo
objeto
Estrategias
almacenamiento
caché
Considere
alternativas
cargar
memoria
caché
CatalogoDeProductos
yl
caché
basada
ficheros
ProductosLocales
enfoque
inicialización
perezosa
cachés
cargan
lentamente
recupera
información
producto
externo
enfoque
inicialización
impaciente
cachés
cargan
du-rante
caso
PonerEnMarcha
diseñador
seguro
enfoque
utilizar
experimentar
alternativas
familia
objetos
Estrategia-
Cache
basada
patrón
Estrategia
solucionar
problema
elegante
Caché
antigua
Puesto
precios
productos
cambian
rápidamente
antojo
en-
cargado
tienda
almacenar
caché
precio
productos
crea
problema
caché
contiene
datos
antiguos
preocupación
re-
plican
datos
solución
añadir
operación
servicio
remoto
responda
cambios
actuales
ía
objeto
ProductosLocales
consulta
minutos
actualiza
caché
Hilos
UML
objeto
ProductosLocales
solucionar
problema
cache
datos
antiguos
minutos
enfoque
diseño
objeto
activo
posea
hilo
control
hilo
dormirá
minutos
despertará
objeto
obtendrá
datos
478
UML
PATRONES
Figura
33.7
Hilos
mensajes
asíncronos
UML
cp
CatalogoDeProductos
singleton
FactoriaDeServicios
active
ap
ProductosLocales
servicioExterno
AdaptadorBDProductos
IAdaptadorProductos
inicializar
run
ap
getAdaptadorProductos
create
create(servicioExterno
IAdaptadorProductos
productos
getActualizacionProductos
activación
hilo
loop
-dormir
minutos
-pedir
actualizaciones
productos
Nótese
objeto
activo
posee
hilo
l’nea
gruesa
active
opcional
recomendado
ejemplo
objetos
activos
Java
implementarán
Runnable
Nótese
pirul
interfaz
detalles
nivel
colaboración
objeto
Thread
ignorados
diagrama
Java
run
Thread
Runnable
considerarse
mensaje
as’ncrono
UML
representa
flecha
cabeza
abierta
lugar
cabeza
rellena
Nótese
cambio
versión
1.4
UML
sol’a
extraña
flecha
media
cabeza
métodos
ejecutan
hilo
expresión
secuencia
UML
comenzar
nombre
letra
indica
hilo
opcional
as
resalta
visualmente
mensajes
ejecutan
hilo
ProductosLocales
comenzarán
ejemplo
Runnableel
hilo
volverá
dormirse
UML
proporciona
notación
representar
hilos
lla-
madas
asíncronas
muestra
Figura
33.7
diagrama
interacción
instancia
objeto
activo
etiquetarse
propiedad
active
diagrama
clases
clase
objetos
activos
clase
ac-
tiva
posee
hilo
estereotipar
thread
éase
Figura
33.8
DISEÑO
REALIZACIONES
CASOS
OBJETOS
PATRONES
479
Figura
33.8
Notaci
ón
clases
activas
thread
ProductosLocales
miHilo
Thread
run
interface
Runnable
run
interface
IAdaptadorProductos
33.2
Manejo
fallos
diseño
proporciona
solución
almacenamiento
caché
cliente
objetos
EspecificacionDelProducto
fichero
persistente
me-
jorar
rendimiento
proporcionar
solución
parcial
recurrir
acceder
servicio
productos
externo
almacenen
caché
10.000
productos
fichero
local
satisfacer
mayoría
pe-
ticiones
información
productos
falla
servicio
externo
caso
encuentre
caché
falla
acceso
ser-
vicio
producto
externo
Suponga
per
sonas
involucrada
piden
creemos
solución
indique
cajero
introduzca
manualmente
precio
descripción
cancele
entrada
línea
venta
ejemplo
condici
ón
error
fallo
utilizará
contexto
scribir
patrone
generale
ocupan
manejo
fallos
excepciones
manejo
excepciones
errores
tema
amplio
introducción
únicamente
centrará
patrones
específicos
contexto
caso
es-
tudio
lugar
terminología
Defecto
origen
causa
comportamiento
programador
escribe
nombre
base
datos
Error
manifestación
defecto
sistema
ejecución
errores
detectan
invocando
servicio
nombre
obtener
refe
rencia
base
datos
nombre
escrito
señala
error
Fallo
denegación
servicio
causada
error
subsistema
Productos
PDV
NuevaEra
falla
proporcionar
servicio
información
productos
Lanzamiento
excepciones
enfoque
directo
señalar
fallo
produciendo
lanzar
excep-
ción
excepciones
apropiadas
especialmente
tratando
fallos
recursos
disco
memoria
acceso
red
base
datos
servicios
externos
lanzar
excepci
ón
sde
interior
subsistema
per
sistencia
real
mente
probable
implementación
JDBC
Java
detecte
lugar
fallo
utilizar
base
datos
productos
exter-
na
excepción
desenrollará
pila
llamadas
atrás
punto
apropiado
manejar1
Suponga
excepción
original
utilizando
Java
ejemplo
java.sql
SQLEx-
ception
Deber
ía
propagarse
SQLException
camino
llegar
capa
presentación
nivel
correcto
abstracción
lle-
patrón
común
manejo
excepciones
Patrón
Convertir
Excepciones
Brown01
subsistema
evite
emisión
excepciones
nivel
proceden
sub-
sistemas
inferiores
servicios
convierta
excepción
nivel
significativa
nivel
subsistema
excepción
alto
nivel
nor-
malmente
encapsula
excepción
nivel
inferior
añade
información
excepción
significativa
contexto
niveles
altos
guía
regla
absoluta
Excepción
utiliza
sentido
vernáculo
lanzar
Java
equivalente
Throwable
conocido
Abstracción
Excepción
Renzel97
ejemplo
subsistema
persistencia
captura
SQLException
concreta
asumiendo
manejarla
lanza
BDNoDisponibleException
contiene
SQLException
ótese
AdaptadorBDProductos
fa-
chada
subsistema
lógico
informaci
ón
productos
AdaptadorBDProductos
alto
nivel
representante
subsistema
lógi-
co
captura
BDNoDisponibleException
nivel
inferior
asumiendo
pue-
manejarla
lanza
InfoProductoNoDisponibleException
encapsula
BDNoDisponibleException
480
UML
PATRONES
manejo
excepciones
comprobadas
frente
comprobadas
soportado
to-
lenguajes
OO
conocidos—C++
Smalltalk
ejemplo
Resolver
excepción
cerca
nivel
produce
objetivo
loable
difícil
puesto
re-
quisitos
acerca
manejar
error
frecuencia
específicos
aplicación
Considere
nombres
stas
excepciones
qu
BDNoDisponibleEx-
ception
lugar
SubsistemaPersistenciaException
patrón
Patrón
Nombre
Problema
Lanzador
Grosso00
llamar
excepción
Asigne
nombre
describa
lanzar
excepción
lanza
ventaja
facilita
programador
comprensión
problema
resalta
similitud
fundamental
clases
excepciones
ocurre
nombrando
lanza
Excepciones
UML
momento
adecuado
introducir
notación
UML
lanzamiento3
captura
excepciones
DISEÑO
REALIZACIONES
CASOS
OBJETOS
PATRONES
481
Oficialmente
UML
env
excepción
lanza
término
adecuado
familiar
Figura
33.9
Excepciones
capturadas
lanzadas
clase
excepciones
capturan
modelan
tipo
operación
maneja
señal
FachadaPersistencia
estadisticasFrecuentes
Map
Object
get(Clave
Class
throws
BDNoDisponibleException
FatalException
put(Clave
Class
throws=(BDNoDisponibleException
FatalException
signal
SQLException
signal
IOException
excepciones
FatalException
BDNoDisponibleException
excepciones
lanzan
listar
compartimento
etiquetado
excepciones
Notaci
UML
UML
sintaxis
defecto
operaciones
incluye
solución
oficial
mostrar
excepciones
lanza
operación
soluciones
UML
permite
utilice
operaciones
sintaxis
lenguaje
Java
herramientas
CASE
UML
permiten
mostrar
pantalla
operaciones
expl’citamente
sintaxis
Java
Object
get(Clave
Class
throws
BDNoDisponibleException
FatalException
sintaxis
defecto
permite
elemento
string
propiedades
property
string
lista
arbitraria
pares
propiedad+valor
autor
Craig
niños=(Hannah
Haley),É
As
put(Object
id
throws=
BDNoDisponibleException
FatalException
herramientas
CASE
UML
permiten
especificar
cuadro
diálogo
especial
excepciones
lanza
operación
preguntas
típicas
notación
UML
diagrama
clases
ómo
representamos
excepciones
captura
lanza
clase
diagrama
interacción
ómo
representamos
lanzamiento
ex-
cepción
Figura
33.9
presenta
notación
diagrama
clases
UML
Exception
especialización
Signal
especifica-
ción
comunicación
asíncrona
objetos
significa
diagrama
interacción
excepciones
representan
mensajes
asn
cronos4
Figura
33.10
muestra
notación
utilizando
ejemplo
descripción
SQLException
transforma
BDNoDisponibleException
482
UML
PATRONES
Nótese
versión
1.4
UML
cambió
notación
mensajes
asíncronos
flecha
media
cabeza
cabeza
abierta
Figura
33.10
Excepciones
diagrama
interacción
exception
BDNoDisponibleException
Adaptador
BDProductos
IAdaptadorProductos
Fachada
Persistencia
Notaci
UML
mensajes
as’ncronos
incluyendo
excepciones
ilustran
flecha
cabeza
abierta
excepciones
representan
mensajes
designados
nombre
clase
excepción
legal
estereotipos
opcionales
exception
signal
excepción
tipo
señal
UML
desea
incrementar
visibilidad
ep
get(É
ep
getEspecificacion(id
Object
java.sql
Statement
resultSet
executeQuery(É
exception
SQLException
Observe
diferencia
cabeza
flecha
mensajes
s’ncronos
as’ncronos
UML
Recordemos
útil
indicar
instancia
tipo
Object
referirnos
interfaz
clase
instancia
exception
InfoProductoNoDisponibleException
Detener
l’nea
mensaje
punto
significa
objeto
FachadaPersistencia
capturando
excepción
resumen
notación
UML
repre
sentar
excepciones
utiliza
recomendemos
evitar
consideraciones
iniciales
manejo
ex-
cepciones
contrario
nivel
arquitectura
necesario
establecer
patrones
básicos
políticas
colaboraciones
manejo
excepciones
puesto
difícil
insertar
manejo
excepciones
ocurrencia
tardía
desarrolladores
consideran
diseño
nivel
manejo
excepciones
concretas
decide
ás
apropiada
programaci
ón
s-
cripciones
diseño
detalladas
lugar
diagramas
UML
detallados
Manejo
errores
considerado
diseño
lanzamiento
excepciones
conversión
asignación
nombres
representarlas
ma-
nejo
excepción
patrones
aplicar
mayoría
casos
Patrón
Registro
Centralizado
Errores
Renzel97
Utilice
objeto
central
registro
errores
acceso
patrón
Singleton
notifíquele
excepciones
sistema
distribuido
singleton
lo-
cal
colaborará
registro
error
central
Beneficios
Informes
consistentes
Definición
flexible
información
salida
formato
conocido
Registrador
Diagnóstico
Diagnostic
Logger
Harrison98
patrón
sencillo
Patrón
Diálogo
Error
Renzel97
notificar
errores
usuarios
utilice
objeto
pertenezca
interfaz
usuario
independiente
aplicación
accede
siguiendo
patrón
Singleton
Actúa
envoltorio
wrapper
objetos
diálogo
UI
tales
diálogo
modal
UI
consola
texto
emitir
sonido
generador
voz
delega
notificación
error
objetos
UI
salida
diá-
logo
GUI
generador
voz
informará
excepción
registro
centralizado
errores
Factoría
lee
parámetros
sistema
creará
objetos
apropiados
UI
Beneficios
Variaciones
Protegidas
cambios
mecanismo
salida
Estilo
consistente
informes
error
ejemplo
ventanas
GUI
invocar
singleton
mostrar
diálogo
error
Control
centralizado
estrategia
común
notificación
errores
Ganancia
rendimiento
pequeña
utiliza
recurso
caro
diálogo
GUI
fácil
ocultarlo
almacenarlo
caché
volver
utilizarlo
lugar
volver
crear
diálogo
error
Debería
objeto
UI
ejemplo
FrameProcesarVenta
manejar
error
capturando
excepción
informando
usuario
aplicaciones
ventanas
DISEÑO
REALIZACIONES
CASOS
OBJETOS
PATRONES
483y
caminos
navegación
ventanas
simples
estables
diseño
directo
cumple
actualmente
aplicación
NuevaEra
presente
sitúa
ógica
aplicación
rela
cionada
manejo
errores
capa
pre
sentación
GUI
manejo
errores
relacionado
notificación
usuarios
lógica
tendencia
inherentemente
problema
UI
simples
oportunidades
reemplazar
UI
punto
fragilidad
ejemplo
suponga
equipo
sustituir
UI
Swing
Java
framework
GUI
Java
MicroView
IBM
ordenadores
portátiles
ló-
gica
aplicación
versión
Swing
identificar
replicar
ver-
sión
MicroView
punto
inevitable
sustituciones
UI
agravará
lógica
aplicación
migre
general
responsabilidades
lógica
aplicación
UI
mi-
gren
capa
pre
sentación
probabilidad
produzcan
quebra-
deros
cabeza
relacionados
diseño
mantenimiento
sistemas
ventanas
caminos
navegación
complejos
in-
cluso
cambiantes
soluciones
ejemplo
insertar
capa
aplicación
controladores
capas
presentación
dominio
insertar
objeto
mediador
manejo
vi
sta
GHJV
95
BMRSS96
responsable
mantener
referencia
ventanas
abiertas
transiciones
ventanas
evento
E1
error
mediador
abstracta
máquina
encapsula
es-
tados
ventana
muestra
transiciones
base
even-
tos
leer
modelo
transición
ventanas
fichero
externo
caminos
navegación
dirigidos
datos
nece-
sario
cambio
código
fuente
cerrar
ventanas
aplicación
disponerlas
minimizarlas
puesto
referencia
ventanas
diseño
diseñarse
controlador
capa
aplicación
re-
ferencia
mediador
manejo
vi
sta
controlador
apli
cación
acopla
capa
pre
sentación
controlador
apli-
cación
capturar
excepción
colaborar
mediador
manejo
vista
producir
notificación
basado
patrón
Diálogo
Error
ma-
nera
controlador
aplicación
involucrado
flujos
trabajo
aplica-
ción
deja
ventanas
manejo
lógico
errores
diseño
detallado
control
UI
navegación
quedan
alcance
introducción
simple
diseño
ventana
captura
excepción
su-
ficiente
diseño
utiliza
Diálogo
Error
muestra
Figura
33.11
33.3
Mantenimiento
servicios
fallos
Proxy
GoF
mantenimiento
servicios
fallos
failover
servicio
local
información
productos
consiguió
insertando
servicio
local
servicio
externo
servicio
local
prueba
diseño
484
UML
PATRONESno
apropiado
servicios
debería
probar
ser-
vicio
externo
versión
local
lugar
ejemplo
considere
registro
ventas
servicio
contabilidad
negocio
registren
po-
sible
controlar
tiempo
real
actividad
tienda
registro
caso
patrón
GoF
solucionar
problema
Proxy5
Proxy
pa-
trón
sencillo
utiliza
ampliamente
variante
Proxy
Remoto
ejemplo
RMI
Java
CORBA
objeto
local
cliente
denominado
stub
invoca
acceda
servicios
objeto
remoto
stub
cliente
proxy
local
representante
sustituto
objeto
remoto
ejemplo
Proxy
NuevaEra
variante
Proxy
Remoto
variante
Proxy
Redireccin
Redirection
Proxy
conocido
Proxy
Mantenimiento
Servicio
Failover
Proxy
DISEÑO
REALIZACIONES
CASOS
OBJETOS
PATRONES
485
Figura
33.11
Manejo
excepción
cant
N.
T.
traducido
motivo
caso
patrón
Singleton
Independientemente
variante
estructura
Proxy
variantes
proxy
llamado
proxy
simplemente
objeto
implementa
interfaz
objeto
acceder
realidad
manteniendo
referencia
sujeto
real
suele
controlar
acceso
Figura
33.12
muestra
estructura
general
Proxy
Contexto
Problema
desea
acceso
directo
objetos
aplicar
acción
realmente
Solución
Añada
nivel
indirección
objeto
proxy
sustituto
implemente
in-
terfaz
objeto
desea
acceder
responsable
controlar
mejorar
acceso
objeto
486
UML
PATRONES
Figura
33.12
Estructura
general
patrón
Proxy
interface
IInterfazSujeto
metodoB
SujetoReal
metodoB
pre-procesamiento
sujetoReal.metodoB
post-procesamiento
Cliente
sujeto
IInterfazSujeto
metodoA
Proxy
sujetoReal
IInterfazSujeto
metodoB
cosa
sujeto.metodoB
cosa
sujeto
realmente
referencia
instancia
Proxy
SujetoReal
sujetoReal
referenciará
realmente
instancia
SujetoReal
Aplicado
caso
estudio
NuevaEra
acceso
servicio
contabilidad
externo
utiliza
proxy
redirección
Enviar
mensaje
anotarVenta
proxy
redirecci
ón
tratándolo
pensase
servicio
contabilidad
externo
real
falla
proxy
redirecci
ón
establecer
contacto
servicio
externo
adaptador
entonce
redireccionar
men
saje
anotarVenta
au
servicio
local
almacena
localmente
ventas
remitirlas
servicio
contabilidad
esté
disponible
Figura
33.13
ilustra
diagrama
clases
elementos
interesantes
Notación
UML
evitar
crear
diagrama
interacci
ón
muestre
comportamiento
di-
námico
obsérvese
diagrama
estático
utiliza
numeración
mostrar
secuencia
interacción
Normalmente
preferible
diagrama
interacción
presenta
estilo
ilustrar
estilo
alternativo
Obsérvese
marcadores
visibilidad
pública
privada
méto-
Registro
indican
significa
especifica
lugar
asumir
valor
defecto
público
privado
práctica
ha-
bitual
mayoría
personas
leen
diagrama
UML
herramientas
CASE
generan
código
interpretan
visibilidad
especificada
privada
atributos
pública
métodos
diagrama
particular
quiero
transmitir
realizarPago
público
cambio
gestionarVentaCompleta
privado
ruido
visual
sobrecarga
información
preocupación
comunicación
conveniente
interpretaciones
convencionales
mantener
diagramas
simples
Resumiendo
proxy
objeto
externo
envuelve
objeto
interno
implementan
interfaz
objeto
cliente
Registro
refe-
DISEÑO
REALIZACIONES
CASOS
OBJETOS
PATRONES
487
Figura
33.13
NuevaEra
proxy
redirección
ÓcontabilidadÓ
realmentereferencia
aunainstanciade
ProxyRedireccion
Contabilidad
trabajodelpago
if(secompletaelpago
gestionarVentaCompleta
Registro
contabilidad
IAdaptadorContabilidad
realizarPago
-gestionarVentaCompleta
11
ÇinterfaceÈ
IAdaptadorContabilidad
anotarCuentaPorCobrar(cuentaPorCobrar
anotarVenta(venta
anotarCuentaPorCobrar(cuentaPorCobrar
anotarVenta(venta
anotarCuentaPorCobrar(cuentaPorCobrar
anotarVenta(venta
anotarCuentaPorCobrar(cuentaPorCobrar
anotarVenta(venta
contabilidad.anotarVenta(ventaActual
ProxyRedireccionContabilidad
contabilidadExterna
IAdaptadorContabilidad
contabilidadLocal
IAdaptadorContabilidad
contabilidadExterna.anotarVenta(venta
if(contabilidadExternafalla
contabilidadLocal.anotarVenta(venta
grabarlaventaenunfichero(para
remitirlaalacontabilidadexternam‡starde
ContabilidadLocal
AdaptadorContabilidadSAPrencia
proxy
diseña
piense
colaborando
sujeto
real
ejemplo
AdaptadorContabilidadSAP
Proxy
intercepta
llamadas
mejorar
acceso
sujeto
real
caso
redireccionando
operación
ser-
vicio
local
ContabilidadLocal
accesible
servicio
externo
33.4
Dise
requisitos
funcionales
calidad
pasar
sección
observe
trabajo
diseño
punto
cap
ítulo
relacionado
ógica
negocio
re-
quisitos
funcionales
calidad
relacionados
fiabilidad
recuperación
Curiosamente
punto
clave
arquitectura
software
habitual
diseños
den
forma
temas
patrones
estructuras
arquitectura
soft-
ware
escala
resolver
requisitos
funcionales
calidad
lugar
lógica
negocio
básica
33.5
Acceso
dispositivos
sicos
externos
adaptadores
comprar
vs
construir
requisito
iteracción
interactuar
dispositivos
físicos
componen
terminal
PDV
abrir
cajón
caja
entregar
cambio
dispensador
mo-
nedas
capturar
firma
dispositivo
firmas
digitales
PDV
NuevaEra
trabajar
variedad
equipamiento
PDV
in-
cluye
vende
IBM
Epson
NCR
Fujitsu
etcétera
Afortunadamente
arquitecto
software
investigado
descubierto
estándar
industrial
UnifiedPOS6
www.nrf-arts.org
define
in-
terfaces
orientadas
objetos
estándar
sentido
UML
dispositivos
comunes
PDV
JavaPOS
www.javapos.com
corresponden-
cia
Java
UnifiedPOS
Documento
Arquitectura
Software
arquitecto
añade
memorándum
técnico
comunicar
alternativa
significativa
arquitectura
Memor
ndum
Técnico
Asunto
FiabilidadÑ
Control
dispositivos
hardware
PDV
Resumen
soluci—n
Utilizar
software
Java
fabricantes
disposi-
tivos
ajusta
interfaces
est
ndares
JavaPOS
Factores
Controlar
correctamente
dispositivos
Coste
comprar
vs
construir
mantener
488
UML
PATRONES
N.
T.
POS
acrónimo
Point-Of-Sale
Punto-De-Venta
sección
aparece
POS
PDV
.Soluci—n
UnifiedPOS
www.nrf-arts.org
define
modelo
interfaces
UML
estándar
in-
dustrial
dispositivos
PDV
JavaPOS
www.javapos.com
estándar
in-
dustrial
establece
correspondencia
UnifiedPOS
Java
fabricantes
dispositivos
PDV
ej.
IBM
NCR
venden
implementaciones
Java
interfaces
controlan
dispositivos
Comprarlos
lugar
construirlos
Utilizar
Factoría
lea
propiedad
sistema
cargar
conjunto
clases
IBM
NCR
etc.
devuelva
instancias
basadas
interfaces
Motivaci—n
Basado
encuesta
informal
creemos
funcionan
fabricantes
proceso
actualización
regular
mejorarlos
difícil
experiencia
recursos
escribirlos
Alternativas
consideradas
Escribirlos
difícil
arriesgado
Figura
33.14
muestra
interfaces
añadido
pa-
quete
capa
dominio
Modelo
Diseño
DISEÑO
REALIZACIONES
CASOS
OBJETOS
PATRONES
489
Figura
33.14
Interfaces
JavaPOS
estándares
Dominio
Ventas
Registro
Venta
JavaPOS
interface
jpos
CashDrawer
isDrawerOpened
openDrawer
waitForDrawerClose(timeout
interface
jpos
CoinDispenser
dispenseChange(amount
getDispenserStatus
Asuma
fabricantes
importantes
equipos
PDV
suministran
implementaciones
JavaPOS
ejemplo
compramos
terminal
PDV
IBM
cajón
caja
di
spensador
moneda
etcétera
IBM
tambi
én
propor
cionar
clases
Java
implementan
interfaces
JavaPOS
controlan
dis-
positivos
físicos
consecuencia
arquitectura
resuelve
comprando
componentes
software
lugar
construyéndolos
Fomentar
componentes
existentes
prácticas
UP.Cómo
funcionan
nivel
di
spositivo
físico
controlador
di
s-
positivo
operaciones
sistema
operativo
subyacente
cla
Java
ejemplo
implemente
jpos
CashDrawer
utiliza
JNI
Java
ative
Interface
llamadas
controladores
dispositivos
clases
Java
adaptan
controladores
dispositivos
nivel
interfa-
ces
JavaPOS
caracterizar
objetos
Adaptador
sentido
patrón
GoF.
llamar
objetos
Proxy
objetos
proxy
locales
con-
trolan
mejoran
acceso
dispositivos
físicos
raro
seamos
capaces
clasificar
diseño
función
múltiples
patro-
nes
33.6
Factor
Abstracta
GoF
familias
objetos
relacionados
comprarán
fabricantes
implementaciones
JavaPOS
ejemplo7
//controladores
IBM
com.ibm.pos.jpos
CashDrawer
implements
jpos
CashDrawer
com.ibm.pos.jpos
CoinDispenser
implements
jpos
CoinDispenser
//Controladores
NCR
com.ncr.posdrivers
CashDrawer
implements
jpos
CashDrawer
com.ncr.posdrivers
CoinDispenser
implements
jpos
CoinDispenser
ómo
diseñamos
aplicación
PDV
NuevaEra
utilizar
controla-
dores
Java
IBM
utiliza
hardware
IBM
controladores
NCR
fueran
apropiados
etcétera
Nótese
familias
clases
CashDrawer+CoinDispenser+
nece-
sario
creen
familia
implementa
interfaces
situación
patrón
GoF
utiliza
comúnmente
Factoría
Abs-
tracta
Abstract
Factory
Factoría
Abstracta
Abstract
Factory
Contexto
Problema
crear
familias
clases
relacionadas
implementen
interfaz
común
Solución
Defina
interfaz
factoría
factoría
abstracta
Defina
clase
factoría
con-
creta
familia
cosas
crear
Opcionalmente
defina
clase
abs-
tracta
implemente
interfaz
factoría
proporcione
servicios
comunes
factorías
concretas
extienden
490
UML
PATRONES
nombres
paquetes
ficticios
Figura
33.15
ilustra
idea
básica
mejora
sección
DISEÑO
REALIZACIONES
CASOS
OBJETOS
PATRONES
491
Figura
33.15
factoría
abstracta
básica
interface
IFactoriaDispositivosJavaPOS
getNuevoCajonCaja
jpos
CashDrawer
geNuevoDispensadorMonedas
jpos
CoinDispenser
FactoriaDispositivosIBMJavaPOS
getNuevoCajonCaja
jpos
CashDrawer
geNuevoDispensadorMonedas
jpos
CoinDispenser
return
new
com.ibm.pos.jpos
CashDrawer
interface
jpos
CashDrawer
isDrawerOpened
FactoriaDispositivosNCRJavaPOS
getNuevoCajonCaja
jpos
CashDrawer
geNuevoDispensadorMonedas
jpos
CoinDispenser
return
new
com.ncr.posdevices
CashDrawer
Factor’a
Abstracta
interfaz
crear
familia
objetos
relacionados
com.ibm.pos.jpos
CashDrawer
isDrawerOpened
com.ncr.posdevices
CashDrawer
isDrawerOpened
Factor
Abstracta
clase
abstracta
variación
típica
Factoría
Abstracta
crear
clase
abstracta
factoría
accede
utilizando
patrón
Singleton
lee
propiedad
sistema
decidir
subclases
factoría
crear
entonce
devuelve
in
stancia
subclase
apropiada
utiliza
ejemplo
librerías
Java
clase
java.awt
To-
olkit
clase
abstracta
representa
factoría
abstracta
creación
familias
elementos
gráficos
GUI
sistemas
operativos
subsiste-
GUI
ventaja
enfoque
soluciona
problema
ómo
aplicación
factoría
ab
stracta
utilizar
FactoriaDispositivosIBMJavaPOS
actoriaDispo-
sitivosNCRJavaPOS
refinamiento
soluciona
problema
Figura
33.16
ilustra
solución
clase
abstracta
factoría
método
getInstancia
patrón
Singleton
objetos
colaborar
superclase
abstracta
obtener
referencia
instancias
subclases
ejemplo
considere
declaración
cajonCaja
FactoriaDispositivosJavaPOS.getInstancia().getNuevoCajonCaja();La
expre
sión
FactoriaDispositivosJavaPOS.getInstancia
devolverá
in
stan-
cia
FactoriaDispositivosIBMJavaPOS
FactoriaDispositivosNCRJavaPOS
pendiendo
propiedad
sistema
lea
Ob
sérvese
cambiando
pro
piedad
sistema
externa
jposfactory.classname
nombre
cla
String
fichero
propiedades
sistema
NuevaEra
utilizará
familia
controladores
JavaPOS
Variaciones
Protegidas
respec-
to
cambios
factoría
diseño
programación
dirigido
datos
le-
yendo
fichero
propiedade
reflexivo
utilizando
expre
sión
c.newInstan-
ce
interacción
factoría
lugar
Registro
objeti-
vo
salto
representación
razonable
Registro
software
cuyo
nom-
492
UML
PATRONES
Figura
33.16
Factoría
Abstracta
clase
abstracta
interface
IFactoriaDispositivosJavaPOS
getNuevoCajonCaja
jpos
CashDrawer
getNuevoDispensadorMonedas
jpos
CoinDispenser
FactoriaDispositivosIBMJavaPOS
getNuevoCajonCaja
jpos
CashDrawer
getNuevoDispensadorMonedas
jpos
CoinDispenser
return
new
com.ibm.pos.jpos
CashDrawer
FactoriaDispositivosNCRJavaPOS
getNuevoCajonCaja
getNuevoDispensadorMonedas
return
new
com.ncr.posdevices
CoinDispenser
subclases
superclase
abstracta
FactoriaDispositivosJavaPOS
instancia
IFactoriaDispositivosJavaPOS
getInstancia
IFactoriaDispositivosJavaPOS
getNuevoCajonCaja
jpos
CashDrawer
getNuevoDispensadorMonedas
jpos
CoinDispenser
cursiva
indica
métodos
abstractos
clases
abstractas
IDEA
CLAVE
public
static
synchronized
IFactoriaDispositivosJavaPOS
getInstancia
if
instancia
null
String
nombreClaseFactoria
System.getProperty("jposfactory.classname
Class
Class.forName(nombreClaseFactoria
instancia
IFactoriaDispositivosJavaPOS
c.newInstance
return
instancia
bre
sugiere
terminal
PDV
global
mantenga
referencia
di
spositivos
CajonCaja
ejemplo
class
Registro
private
jpos
CashDrawer
cajonCaja
private
jpos
CoinDispenser
dispensadorMonedas
public
Registro
cajonCaja
FactoriaDispositivosJavaPos.getInstancia().getNuevoCajonCaja
33.7
Gesti
pagos
Polimorfismo
formas
habituales
aplicación
polimorfismo
Experto
Informa-
ción
contexto
Peter
Coad
denomina
estrategia
patrón
Coad
95
objeto
software
cosas
normalmente
objeto
actual
abstracción
Coad95
estilo
diseño
orientado
objetos
clásico
objetos
Circulo
dibujan
objetos
Cuadrado
dibujan
objetos
Texto
comprobación
ortográfica
sucesivamente
Nótese
objeto
Texto
compruebe
ortograf
ía
ejemplo
Experto
Informaci
ón
objeto
información
rela-
cionada
trabajo
Diccionario
candidato
Experto
Experto
Información
normalmente
llevan
elección
Análogamente
observe
Circulo
Cuadrado
dibujen
ejemplos
Polimorfismo
alternativas
relacionadas
var
an
seg
tipo
asigne
responsabilidad
utilizando
operaciones
polimórficas
tipos
paral
var
comportamiento
Polimorfismo
normalmente
llevan
elección
obstante
estudió
discusión
acerca
Fabricación
Pura
fre-
cuencia
contraindicado
problemas
acoplamiento
cohesión
DISEÑO
REALIZACIONES
CASOS
OBJETOS
PATRONES
493lugar
so
di
señador
utiliza
fabricacione
pura
strategias
factor
ías
estilo
Ap
esar
apropiado
atractivo
por-
favorece
salto
representación
diseño
gestión
pagos
lle-
vará
cabo
patrones
Polimorfismo
requisitos
sta
iteración
gestionar
múltiples
tipos
pago
esencialmente
significa
gestionar
pasos
autorización
contabilidad
ti-
pos
pagos
autorizan
distintas
formas
pagos
crédito
débito
autorizan
servicio
autorización
externo
requieren
registre
entrada
cuentas
cobrar
dinero
institución
financiera
autorización
•E
tiendas
tendencia
países
autorizan
pagos
efectivo
utilizando
analizador
especial
billetes
unido
terminal
PDV
comprueba
dinero
falso
tiendas
•E
tiendas
autorizan
pagos
cheque
utilizando
servicio
au-
torización
informatizado
tiendas
autorizan
cheques
PagosACredito
autorizan
forma
PagosConCheque
autorizan
caso
clásico
Polimorfismo
muestra
Figura
33.17
subclase
Pago
método
autorizar
494
UML
PATRONES
Figura
33.17
Polimorfismo
clásico
múltiples
métodos
autorizar
Pago
cantidad
autorizar
PagoEnEfectivo
PagoACredito
PagoADebito
PagoConCheque
autorizar
autorizar
autorizar
autorizar
DeacuerdoconelPolimorfismo
cadatipodepagodeber’a
23
ejemplo
ilustra
Figuras
33.18
33.1
Venta
instancia
PagoACredito
PagoConCheque
pide
autorice
DISEÑO
REALIZACIONES
CASOS
OBJETOS
PATRONES
495
Figura
33.18
Creación
PagoACredito
Registro
Venta
PagoACredito
TarjetaCredito
1.1
create(numCC
fechaCaducidad
1.2
autorizar
realizarPagoACredito(numTarjeta
fechaCaducidad
1.1.1
create(numCC
fechaCaducidad
realizarPagoACredito(numCC
fechaCaducidad
Creador
Creador
Polimorfismo
Figura
33.19
Creación
PagoConCheque
Registro
Venta
PagoConCheque
CarnetConducir
1.1
create(numCarnetConducir
1.2
autorizar
realizarPagoConCheque(numCarnetConducir
1.1.1
create(numCarnetConducir
realizarPagoConCheque(numCarnetConducir
Polimorfismo
Creador
Cheque
1.1.2
create(total
Creador
Clases
peque
as
Considere
creación
objetos
software
TarjetaCredito
CarnetConducir
Cheque
impulso
simplemente
registrar
datos
contienen
clases
pago
relacionadas
eliminar
tales
clases
pequeñas
normalmente
utilizarlas
estrategia
beneficiosa
terminan
proporcionando
com-portamiento
útil
acaban
reutilizables
ejemplo
TajetaCredito
Ex-
perto
natural
decirno
tipo
compañ
ía
crédito
Visa
MasterCard
etcétera
comportamiento
resultará
necesario
aplicación
Autorizaci—n
pago
crédito
sistema
comunicar
servicio
externo
autorización
crédito
creado
base
diseño
soporte
basada
adaptadores
Informaci—n
dominio
pago
crédito
relevante
Establezcamos
contexto
diseño
continuación
sistemas
PDV
conectan
físicamente
servicios
externos
autoriza-
ción
formas
encuentran
líneas
telefónicas
marcar
conexiones
permanentes
Internet
banda
ancha
utilizan
protocolos
nivel
aplicación
formatos
datos
aso-
ciados
Transacciones
Electrónicas
Seguras
SET
Secure
Electronic
Tran-
saction
hacerse
populares
XMLPay
autorización
pagos
operación
síncrona
ordinaria
hilo
ejecución
PDV
bloquea
esperando
respuesta
servicio
remoto
límites
periodo
tiempo
espera
•T
odos
protocolos
autorización
pago
conllevan
envío
identificadores
identifican
única
tienda
ID
comerciante
ter
minal
PDV
ID
terminal
re
spuesta
incluye
ódigo
aprobación
denegación
ID
transacción
único
tienda
utilizar
servicios
autorización
externos
dis-
tintos
tipos
tarjetas
crédito
VISA
Ma
sterCard
servicio
tienda
ID
comerciante
distinto
•E
tipo
compañía
crédito
deducir
número
tarje-
ta
ejemplo
números
comienzan
MasterCard
números
empiezan
Visa
implementaciones
adaptadores
protegerán
capas
superiores
sistema
stas
variacione
autorizaci
ón
pago
s.
adaptador
re
sponsable
segurar
tran
sacción
solicitud
autorización
formato
adecuado
colaboraci
ón
servicio
ex-
terno
discutió
iteraci
ón
FactoriaDeServicios
res-
ponsable
enviar
implementación
IAdaptadorServicioAutorizacionCredito
adecuada
escenario
dise
Figura
33.20
comienza
presentación
diseño
anotaciones
satisface
es-
tos
detalles
requisitos
mensajes
notas
aclaratorias
mostrar
razona-
miento
496
UML
PATRONESUna
IAdaptadorServicioAutorizacionCredito
correcto
otorga
re
sponsabilidad
completar
autorizaci
ón
muestra
Figu-
ra
33.21
momento
obtiene
respuesta
PagoACredito
responsabilidad
gestionar
finalización
Polimorfismo
asumiendo
aprueba
completa
tareas
muestra
Fi-
gura
33.22
Notación
UML
Obsérvese
diagrama
secuencia
apilaron
objetos
legal
herramientas
CASE
soportan
utilidad
incluirlo
libro
documento
ancho
página
limitado
DISEÑO
REALIZACIONES
CASOS
OBJETOS
PATRONES
497
Figura
33.20
Gestión
pago
crédito
Tienda
conoce
IDs
comerciantes
salto
representación
Experto
ID
comerciante
indexa
código
tipo
crédito
ej.
Visa
MasterCard
pg
Pago
ACredito
singleton
Registro
Tarjeta
Credito
singleton
Tienda
ComercianteID
autorizar
tID
getTerminalID
tc
getTipo():TipoCredito
cID
getComercianteID(tc
cID
buscar(tc
Registro
cuyo
nombre
sugiere
terminal
conoce
ID
terminal
salto
representación
singleton
FactoriaDeServicios
sac:=getServicioAutorizacionCredito(tc
Variaciones
Protegidas
utiliza
Factor’a
Adaptador
sac
Object
IAdaptadorServicio
AutorizacionCredito
respuesta:=
solicitudAprobacion(pg
tID
cID
continúa33.8
Conclusi
importante
ste
caso
estudio
mo
strar
solución
correcta
única
solución
seguro
lectores
me-
498
UML
PATRONES
Figura
33.21
Finalización
autorización
actor
externo
servicio
actor
Sistema-SAC
respuestaEnProtocolo
solicitarAprobacion(solicitud
Adaptador
respuesta
solicitarAprobacion(pg
tID
cID
sac
Object
IAdaptadorServicio
AutorizacionCredito
solicitud
getNuevaSolicitud
pg
tID
cID
abstraemos
protocolo
espec’fico
interacción
sistema
remoto
respuesta
getNuevaRespuestaTransformada
respuestaEnProtocolo
Adaptador
implementación
particular
Adaptador
creará
solicitud
transformará
respuesta
formato
formato
SET
colaboración
real
servicio
externo
hará
protocolo
espec’fico
protocolo
SET
SSL
Figura
33.22
Finalización
pago
crédito
aprobado
Variaciones
Protegidas
Factor’a
Adaptador
pg
PagoA
Credito
autorizar
singleton
FactoriaDeServicios
sc
getServicioContabilidad
Polimorfismo
sac
Object
IAdaptadorServicio
AutorizacionCredito
respuesta
solicitarAprobacion(pg
tID
cID
respuesta.estaAprobada
gestionarAprobacion
respuesta
sc
Object
IAdaptador
ServicioContabilidad
anotarVenta(pg.getVenta
anotarCuentaPorCobrar(pg
pg
almacenada
respuesta
atributo
adaptador
extraerá
pg
información
respuesta
dará
formato
adecuado
servicio
contabilidad
concreto.jorar
propuesto
Espero
sinceramente
demostrado
cabo
diseño
objetos
basado
razonamiento
siga
principios
básicos
acoplamiento
aplicación
patrones
lugar
proceso
misterioso
Advertencia
Patron-itis
presentación
utilizado
patrones
diseño
GoF
puntos
cosas
importantes
caso
estudio
ayuda
aprendizaje
ha-
bido
informes
diseñadores
preocupados
excesivamente
introducir
patrones
forzada
frenesí
creativo
patron-itis
conclusión
ex-
traer
necesario
estudiar
patrones
múltiples
ejemplos
dige-
rirlos
método
aprendizaje
extendido
formar
grupo
estudio
hora
comida
trabajo
participantes
comparten
formas
visto
aplicación
patrones
discutir
sección
li-
bro
patrones
DISEÑO
REALIZACIONES
CASOS
OBJETOS
PATRONES
499Objetivos
Diseñar
framework
patrone
étodo
Plantilla
Command
Introducir
cuestiones
correspondencia
mapping
objeto-relacional
O-R
Implementar
materialización
perezosa
Proxies
Virtuales
Introducción
aplicación
NuevaEra
mayoría
requiere
almacene
recupere
información
mecanismos
almacenamiento
persistente
base
datos
re-
lacional
BDR
capítulo
presenta
di
seño
framework
almacena
miento
objetos
persistentes
Normalmente
comprar
producto
inde-
pendiente
contenedor
maneja
persistencia
beans
entidad
entity
beans
utiliza
EJBs
tecnologías
Java
Construir
servicio
per
sis-
tencia
O-R
calidad
indu
strial
sfuerzo
persona-año
exi
sten
cuestiones
sutiles
requieren
experiencia
especializada
tecnologías
basan
Java
Data
Objects
JDO
ofrecen
soluciones
parciales
intención
mostrar
framework
industrial
sugerir
igno-
ren
tecnologías
JDO
utilizar
framework
persistencia
Capítulo
34
DISE
FRAMEWORK
PERSISTENCIA
PATRONES
temps
est
grand
professeur
mais
malheureusement
il
tue
tous
ses
ves
tiempo
profesor
desgraciadamente
mata
alumnos
Hector
Berlioz
N.
T.
miembros
comunidad
software
hispana
utilizan
término
original
inglés
aun-
traduce
framework
marco
elección
acertada.medio
explicar
diseño
general
frameworks
patrones
puesto
constituye
caso
estudio
especialmente
ejemplo
utilización
UML
comunicar
diseño
software
framework
presenta
introducir
diseño
frameworks
en-
foque
recomendado
diseño
servicio
persistencia
industrial
34.1
problema
objetos
persistentes
Asuma
aplicación
NuevaEra
datos
EspecificacionDelProducto
resi-
den
base
datos
relacional
datos
traerse
memoria
local
aplicación
objetos
persistentes
requieren
almacena-
miento
persistente
instancias
EspecificacionDelProducto
Mecanismos
almacenamiento
objetos
persistentes
Bases
datos
objetos
utiliza
base
datos
objetos
almace-
nar
recuperar
objetos
necesita
servicio
persistencia
medida
terceras
partes
adicional
diversos
atractivos
Bases
datos
relacionales
predominio
BDR
ne-
cesario
utilicen
lug
ar
bases
dato
objeto
conve-
nientes
caso
surgen
problemas
incompatibilidad
representación
datos
orientada
registros
orientada
objeto
pro-
blemas
estudiarán
requiere
servicio
especial
establecer
co-
rrespondencia
O-R
mapping
O-R
BDR
desea
almacenar
objetos
meca-
nismos
almacenamiento
formato
simples
ficheros
estructuras
XML
fi
cheros
Palm
PDB
bases
datos
jerárquicas
etcétera
bases
datos
relacionales
incompatibilidades
representaciones
objetos
formatos
orientados
objetos
BDR
requieren
servicios
especiales
hagan
funcionen
objetos
34.2
solución
servicio
persistencia
framework
persistencia
framework
persistencia
conjunto
tipos
propósito
general
reutilizable
extensible
proporciona
funcionalidad
soporte
objetos
persistentes
servicio
persistencia
subsistema
realmente
proporciona
servicio
creará
framework
persistencia
servicio
persistencia
escribe
normalmente
trabaje
BDR
cuyo
ca
so
conoce
servicio
co
rrespon-
dencia
O-R.
Generalmente
servicio
persistencia
traducir
objetos
re-
gistros
forma
datos
estructurada
XML
guardarlos
base
datos
traducir
registros
objetos
recuperamos
base
datos
arquitectura
capas
aplicación
NuevaEra
servicio
per-
sistencia
subsistema
capa
servicios
técnicos
502
UML
PATRONES34.3
Frameworks
riesgo
simplificar
exceso
framework
conjunto
extensible
ob-
jetos
funcione
relacionada
s.
ejemplo
protot
ípico
framework
GUI
AWT
Swing
Java
señal
calidad
framework
proporciona
implementación
funciones
básicas
invariables
incluye
mecanismo
permite
desarrollador
conectar
funciones
varían
extender
funciones
ejemplo
framework
Swing
GUI
Java
proporciona
clases
inter-
faces
funciones
principales
GUI
desarrolladores
incluir
elementos
gráficos
especializados
creando
subclases
clases
Swing
redefiniendo
mé-
desarrolladores
conectar
diver
sos
comportamientos
re
s-
puesta
eventos
clases
elementos
gráficos
predefinidas
JButton)r
e-
gistrando
oyentes
suscriptores
basados
patrón
Observador
framework
general
framework
conjunto
cohesivo
interfaces
clases
colaboran
proporcionar
servicios
central
invariable
subsistema
lógico
Contiene
clases
concretas
especialmente
abstractas
definen
interfaces
ajustarse
interacciones
objetos
participar
invariantes
Normalmente
necesariamente
requiere
usuario
framework
defina
subclases
clases
framework
existentes
utilizar
adaptar
ex-
tender
servicios
framework
clases
abstractas
contener
métodos
abstractos
concretos
Confía
Principio
Hollywood
llame
llamaremos
significa
clases
definidas
usuario
ejemplo
clases
recibirán
mensajes
clases
predefinidas
framework
mensajes
normalmente
manejan
implementando
métodos
abstractos
superclases
ejemplo
framework
persistencia
describirá
explicará
principios
frameworks
reutilizables
frameworks
ofrecen
alto
grado
reutilización
clases
individuales
consecuencia
organizaci
ón
interesada
qui
én
incrementar
grado
reutilización
software
debería
enfatizar
creación
frameworks
34.4
Requisitos
servicio
framework
persistencia
aplicaci
ón
PDV
necesitamos
servicio
per
sistencia
construya
framework
persistencia
utilizar
crear
servicios
persistencia
Llamemos
framework
FWP
Framework
Persis-
DISEÑO
FRAMEWORK
PERSISTENCIA
PATRONES
503tencia
FWP
framework
simplificado
framework
persistencia
desarrollado
calidad
industrial
queda
alcance
introducción
framework
debería
proporcionar
funciones
almacenar
recuperar
objetos
mecanismo
almacenamiento
persistente
confirmar
deshacer
commit
rollback
transacciones
diseño
extensible
soporte
mecanismos
almace-
namiento
BDRs
registros
ficheros
simples
XML
ficheros
34.5
Ideas
claves
siguientes
ideas
claves
estudiarán
secciones
vienen
continuación
Correspondencia
stablecer
corre
spondencia
mapping
clase
almacenamiento
persistente
ejemplo
tabla
base
datos
atributos
objetos
campos
columnas
registro
existir
correspondencia
esquemas
esquemas
Identidad
objeto
registros
objetos
único
identificador
objeto
relacionar
fácilmente
registros
objetos
asegurar
duplicados
inapropiados
Conversor
base
datos
Fabricación
Pura
conversor
mapper
base
datos
responsable
materialización
desmaterialización
Materializacin
desmaterializacin
materialización
acto
tran
s-
formar
representación
datos
orientada
objetos
ejemplo
registros
almacenamiento
persistente
objetos
desmaterialización
actividad
opuesta
conocida
passivation
Cach
servicios
persistentes
almacenan
caché
objetos
materiali-
zados
razones
rendimiento
transaccin
objetos
útil
objetos
función
relaciones
transacción
actual
ejemplo
útil
objetos
modificado
sucios
determinar
necesario
guarden
almacenamiento
persistente
Operaciones
transaccin
Operaciones
confirmar
deshacer
commit
roll-
back
Materializacin
perezosa
objetos
materializan
instancia
particular
materializa
demanda
necesita
Proxies
virtuales
materialización
perezosa
implementar
utilizando
referencia
inteligente
conoce
proxy
virtual
34.6
Patrón
Representación
Objetos
Tablas
conviertes
objeto
registro
esquema
base
datos
relacional
patrón
Representacin
Objeto
Tablas
BW96
propone
defini
ción
tabla
BDR
clase
objeto
persistente
atributos
504
UML
PATRONESobjetos
contienen
tipo
dato
primitivos
número
cadena
texto
booleano
etcétera
corresponden
columnas
objeto
atributos
tipos
datos
primitivos
correspondencia
directa
veremos
cosas
simples
puesto
objetos
atri-
butos
referencia
objetos
complejos
modelo
relacional
re-
valores
atómicos
Forma
Normal
Figura
34.1
DISEÑO
FRAMEWORK
PERSISTENCIA
PATRONES
505
Figura
34.1
Correspondencia
objetos
tablas
Fabricante
nombre
ciudad
nombre
ciudad
Fruta
Fresca
Valle
TABLA
FABRICANTES
Fabricante
nombre
Fruta
Fresca
ciudad
Valle
Expresión
Celestial
San
Jacobo
34.7
Perfil
Profile
modelado
datos
UML
propósito
BDR
sorprendente
UML
convertido
nota-
ción
utilizada
modelos
datos
Fíjese
artefactos
oficiales
UP
Modelo
Dato
forma
di
sciplina
Diseño
Figura
34.2
ilustra
notación
UML
modelado
datos
Figura
34.2
Ejemplo
Perfil
Profile
Modelado
Datos
UML
laagregaci—ndenotaunarestricci—ndelareferencia
nopuedeexistiruna
filadeEspecificacionDelProductosinunafiladeFabricanterelacionada
ÇTableÈ
Fabricante
ÇPKÈOID
char(16
Nombre
varchar(100
Ciudad
varchar(50
ÇTableÈ
EspecificacionDelProducto
ÇPKÈOID
char(16
Descripcion
varchar(100
ÇFKÈFrab_OID
char(16
PK-claveprimaria
FK-claveajena
PrimaryKey
ForeignKey
estereotipos
forman
núcleo
UML
extensiones
Gene-
ralizando
UML
concepto
profile
perfil
UML
conjunto
coherente
estereotipos
UML
valores
etiquetados
restricciones
propósito
específico
Figura
34.2
ilu
stra
Perfil
Modelado
Dato
UML
propue
sto
OMG
momento
escribió
libro
aprobado
perfil
aprobado
OMG
perfil
enviando
algu-
extendido
modelado
datos
aprueben
34.8
Patrón
Identificador
Objeto
conveniente
contar
forma
sistente
relacionar
objetos
re-
gistros
capaces
asegurar
materialización
repetida
regi
stro
resultado
objetos
duplicados
patrón
Identificador
Objeto
BW96
propone
asignar
identificador
ob-
jeto
OID
registro
objeto
proxy
objeto
OID
normalmente
valor
alfanumérico
único
objeto
es-
pecífico
enfoques
generar
identificadores
únicos
OIDs
va-
riando
únicos
base
datos
únicos
globalmente
generadores
secuen-
cia
bases
datos
estrategia
generación
claves
Alto-Bajo
Ambler00
campo
objetos
OID
representa
interfaz
clase
OID
encapsula
valor
real
representación
BDR
normalmente
almacena
valor
tipo
carácter
longitud
fija
tabla
OID
clave
primaria
objeto
directa
indirectamente
OID
asocia
objeto
OID
tabla
OID
clave
primaria
objeto
corresponde
única
fila
tabla
Figura
34.3
506
UML
PATRONES
Figura
34.3
identificadores
objetos
enlazan
objetos
registros
OID
xyz123
abc345
dise
simplificado
realidad
OID
podr
colocarse
clase
Proxy
clave
primaria
Fabricante
ciudad
nombre
oid
OID
nombre
ciudad
Fruta
Fresca
Valle
TABLA
FABRICANTES
Fabricante
ciudad
Valle
nombre
Fruta
Fresca
oid
xyz123
Expresión
celestial
San
Jacobo
vista
simplificada
diseño
realidad
OID
podr
ía
colocarse
exactamente
objeto
persistente
lugar
colocar
objeto
Proxy
envuelve
objeto
per
sistente
diseño
influye
elección
lenguaje
OID
proporciona
tipo
clave
consistente
utilizarla
inter-
faz
servicio
persistencia
34.9
Acceso
servicio
persistencia
Fachada
paso
diseño
subsistema
definir
fachada
servicios
recordemos
Fachada
patrón
común
proporcionar
interfaz
uniforme
subsistema
empezar
nece
sita
operaci
ón
recuperar
objeto
OID
adem
ás
OID
subsistema
necesita
tipo
objeto
materializar
proporcionar
tipo
clase
Figura
34.4
ilustra
operaciones
fachada
colaboración
adaptadores
servicios
NuevaEra
DISEÑO
FRAMEWORK
PERSISTENCIA
PATRONES
507
Figura
34.4
FachadaDePersistencia
FachadaDePersistencia
getInstancia
FachadaDePersistencia
get(OID
Class
Object
put(OID
Object
AdaptadorBDProductos
singleton
FachadaDePersistencia
obj
get
ejemplo
fachada
OID
oid
new
OID("XYZ123
EspecificacionDelProducto
ep
EspecificacionDelProducto
FachadaDePersistencia.getInstancia().get
oid
Especificacion
DelProducto.class
IAdaptadorProductos
34.10
Correspondencia
objetos
patrón
Conversor
Mapper
Base
Datos
Intermediario
Broker
Base
Datos
FachadaDePersistencia
cumple
fachadas
mis-
ma
trabajo
delega
peticiones
objetos
subsistema
responsable
materialización
desmaterialización
ob-
jetos
ejemplo
EspecificacionDelProducto
procedentes
almacenamien-
to
persistente
patrón
Experto
Información
sugiere
cla
objeto
Especifi-
cacionDelProducto
persistente
candidata
datos
da-
tos
almacenar
necesita
responsabilidad
clase
objetos
persistentes
define
código
almacenarse
base
datos
denomina
diseño
correspondencia
directa
utilizar
correspondencia
directa
código
relacionado
base
datos
genera
in-
yecta
automáticamente
clase
compilador
post-procesamiento
desarrollador
mantener
código
base
datos
complejo
añade
confusión
clase
correspondencia
directa
añade
mantiene
manual
va-
rios
defectos
tiende
escalable
programación
mantenimiento
problemas
encontramos
Fuerte
acoplamiento
clase
objetos
persistentes
conocimiento
al-
macenamiento
persistente
violación
Acoplamiento
Responsabilidades
complejas
área
relacionada
respon-
sabilidades
previas
objeto
violación
Alta
Cohesión
mantenimiento
laseparación
intereses
Cuestiones
relacionadas
servicios
técnicos
mez-
clan
lógica
aplicación
Estudiaremos
enfoque
cl
ásico
correspondencia
indirecta
utiliza
objetos
establecer
correspondencia
objetos
persistentes
enfoque
utilizar
patrón
Intermediario
Broker
Base
Datos
BW95
propone
crear
clase
responsable
materializar
desmaterializar
objeto
almacenado
llamado
patrón
Conversor
Mapper
Base
Datos
Fowler01
nombre
adecuado
Broker
Bases
Datos
pues-
to
describe
responsabilidad
término
broker
diseño
sistemas
dis-
tribuidos
BMRSS96
significado
distinto
tiempo2
define
clase
establece
correspondencia
clase
objetos
persistentes
Figura
34.5
ilustra
objeto
persistente
pro-
pia
clase
lleve
cabo
correspondencia
existir
tipos
con-
versores
tipos
mecanismos
almacenamiento
extracto
código
508
UML
PATRONES
Figura
34.5
Conversores
bases
datos
conversor
obtiene
almacena
objetos
única
dependiendo
tipo
almacenamiento
datos
formato
FachadaDePersistencia
getInstancia
FachadaDePersistencia
get
OID
Class
Object
put
OID
Object
ConversorBDR
EspecificacionDelProducto
get
OID
Object
put
OID
Object
get
OID
Object
put
OID
Object
get
OID
Object
put
OID
Object
Nótese
necesita
Class
parámetro
versión
get
clase
conectada
tipo
persistente
concreto
interface
IConversor
get(OID
Object
put
OID
Object
Class
notación
UML
asociación
calificada
significa
asociación
1-M
FachadaDePersistencia
objetos
IConversor
clave
tipo
Class
IConversor
ej.
búsqueda
HashMap
ConversorFichero
EspecificacionDelProducto
ConversorBDR
Fabricante
sistemas
distribuidos
broker
proceso
servidor
front-end
delega
tareas
pro-
cesos
servidor
back-end.class
FachadaDePersistencia
public
Object
get(OID
oid
Class
clasePersistente
//la
clave
IConversor
Clase
objeto
persistente
IConversorconversor=(IConversor)conversores.get(clasePersistente
//delega
return
conversor.get(oid
diagrama
señala
conversores
EspecificacionDelProducto
activo
servicio
persistencia
funcionamiento
Conversores
basados
metadatos
diseño
conversores
flexible
difícil
basa
metadatos
datos
so-
bre
datos
diferencia
clases
hechas
mano
stablecen
correspon-
dencia
individual
tipos
persistentes
conversores
basados
metadatos
generan
dinámicamente
correspondencia
esquema
objetos
esquema
relacional
base
lectura
metadatos
describen
co-
rrespondencia
TablaX
corresponde
Cla
columna
co-
rresponde
propiedad
objeto
llega
complejo
enfo-
viable
lenguajes
capacidades
programación
reflexiva
Java
Smalltalk
resulta
difícil
C++
Estableciendo
correspondencia
base
metadatos
cambiar
corres-
pondencia
esquemas
almacenamiento
externo
efecto
sistema
marcha
cambiar
ódigo
fuente
Variaciones
Protegidas
res-
pecto
variaciones
esquemas
obstante
cualidad
útil
framework
presentado
utilizar
conversores
escritos
mano
basados
metadatos
afectar
clientes
encapsulación
implementación
34.11
Dise
framework
patrón
Plantilla
sección
describe
características
esenciales
diseño
Conversores
Bases
Datos
constituyen
central
FWP
ca-
racterísticas
diseño
basan
patrón
diseño
GoF
Plantilla
Templa-
Method
GHJV95]3
patrón
esencial
diseño
framework4,ye
familiar
mayoría
programadores
OO
práctica
nombre
DISEÑO
FRAMEWORK
PERSISTENCIA
PATRONES
509
patrón
relacionado
plantillas
template
C++
patrón
describe
plantilla
algoritmo
específica
frameworks
caja
blanca
Normalmente
frameworks
orien-
tados
definición
subclases
jerarquías
clases
requieren
usuarios
conozcan
acerca
diseño
estructura
caja
blanca.510
UML
PATRONES
Figura
34.6
Patrón
Método
Plantilla
framework
GUI
ComponenteGUI
actualizar
repintar
MiBotonExcelente
repintar
ste
plantilla
algoritmo
var
public
void
actualizar
limpiarFondo
enganche
var
repintar
enganche
variable
redefinido
subclases
podr
abstracto
implementación
defecto
enganche
redefinido
rellena
variable
algoritmo
PRINCIPIO
HOLLYWOOD
llame
llamaremos
Observe
invoca
MiBotonExcelente
--repintar
actualizar
superclase
heredado
normal
aden
clases
framework
Clase
FRAMEWORK
clase
plantilla
enganche
34.12
Materialización
patrón
Plantilla
tuviéramos
programar
clases
establecer
correspondencia
mecanismo
almacenamiento
permanente
apreciaríamos
partes
comunes
có-
digo
estructura
básica
repite
algoritmo
materializar
objeto
if
objeto
cache
return
obj
else
crear
objeto
representación
almacenamiento
guardar
objeto
cache
return
obj
punto
variación
crear
objeto
almacenamiento
Crearemos
método
get
método
plantilla
superclase
abstracta
Con-
versorPersistenciaAbstracto
define
plantilla
utiliza
método
enganche
hook
method
subclases
varía
Figura
34.7
muestra
diseño
esencial
muestra
ste
ejemplo
normal
étodo
plantilla
blico
método
enganche
protegido
ConversorPersistenciaAbstracto
ICon-
versor
forman
FWP
programador
aplicaciones
incorporar
idea
crear
método
Método
Plantilla
superclase
define
es-
queleto
algoritmo
partes
variables
invariables
Método
Plantilla
in-
voca
métodos
redefinirse
subclase
subclases
redefinir
métodos
var
ían
añadir
comportamiento
único
puntos
variabilidad
Figura
34.6).DISEÑO
FRAMEWORK
PERSISTENCIA
PATRONES
511
Figura3
4.7
Método
Plantilla
objetos
conversores
ÇinterfaceÈ
IConversor
get(OID):Object
put(OID
Object
Conversor
PersistenciaAbstracto
get(OID):Object{leaf
getObjetoDelAlmacenamiento(OID
Object{abstract
PLANTILLA
ENGANCHE
leaf}seutilizaparalas
operacionesoclases
finalesuhojas
significa"protected
s—lovisiblealas
subclases
56
obj:=objetoEnCache.get(oid
if(obj==null
obj
getObjetoDelAlmacenamiento
oid
objetoEnCache.put(oid
obj
returnobj
public
Object
get(OID
oid
elementos
framework
añadiendo
subclase
redefiniendo
implementando
método
enganche
getObjetoDelAlmacenamiento
Figura
34.8
muestra
ejemplo
Figura
34.8
Redefinición
método
enganche5
IConversor
Conversor
PersistenciaAbstracto
get(OID):Object{leaf
getObjetoDelAlmacenamiento(OID
Object{abstract
RQ
HU
RU
SHFLILFDFLRQ
DelProducto
getObjetoDelAlmacenamiento(OID):Object
56
obj:=objetosEnCache.get(oid
if(obj==null
obj
getObjetoDelAlmacenamiento(oid
objetosEnCache.put(oid
obj
returnobj
public
Object
get(OID
oid
ULQ
FOD
RLG
ULQ
UH
UH
DGRGHODH
HF
FL
Q6
6HOHF
IURP
KHUHFOD
FOD
LILFDFLRQ
HO
URG
RHS
QH
SHFLILFDFLRQ
DelProducto
ep.setOID(oid
HS
UHFLR
UH
RO
HS
LF
OR
UH
RO
HS
FULSFLRQ
UH
RO
returnep
protected
Object
getObjetoDelAlmacenamiento(OID
oid
Java
ejemplo
regBD
devuelve
ejecución
consulta
SQL
ResultSet
JDBC.Asuma
implementación
método
enganche
Figura
34.8
pri-
mera
algoritmo
ejecución
SELECT
SQL
objetos
varía
nombre
tabla
base
datos6
sostiene
su-
posición
aplicarse
patrón
Método
Plantilla
facto-
rizar
separado
partes
varían
Figura
34.9
artifi-
ciosa
ConversorAbstractoBDR--getObjetoDelAlmacenamiento
método
enganche
método
ConversorPersistenciaAbstracto--get
mé-
plantilla
método
enganche
getObjetoDelRegistro
512
UML
PATRONES
Figura
34.9
Ajustando
código
Método
Plantilla
IConversor
Conversor
PersistenteAbstracto
get(OID
Object
leaf
getObjetoDelAlmacenamiento(OID
Object
abstract
Conversor
BDRAbstracto
nombreTabla
String
constructor
ConversorBDRAbstracto(nombreTabla
getObjetoDelAlmacenamiento(OID
Object
leaf
getObjetoDelRegistro(OID
RegistroBD
Object
abstract
getRegistroBD(OID
RegistroBD
ConversorBDR
EspecificacionDelProducto
constructor
ConversorBDREspecificacionDelProducto
nomTabla
getObjetoDelRegistro(OID
RegistroBD
Object
protected
Object
getObjetoDelAlmacenamiento(OID
oid
regBD
getRegistroBD(oid
método
enganche
return
getObjetoDelRegistro(oid
regBD
private
RegistroBD
getRegistroBD(OID
oid
String
clave
oid.toString
regBD
resultado
ejecuciónSQL
Select
from
nombreTabla
where
clave
clave
return
regBD
Método
enganche
redefinido
protected
Object
getObjetoDelRegistro(OID
oid
RegistroBD
regBD
EspecificacionDelProducto
ep
new
Especificacion
DelProducto
ep.setOID(oid
ep.setPrecio
regBD.getColumn("PRECIO
ep.setArticuloID
regBD.getColumn("ARTICULO_ID
ep.setDescripcion(regBD.getColumn("DESC
return
ep
casos
situación
simple
objeto
derivarse
datos
contenidos
tablas
múltiples
bases
datos
cuyo
caso
versión
diseño
Método
Plan-
tilla
flexible
Notaci—n
UML
Observe
declarar
constructores
UML
es-
tereotipo
opcional
utiliza
convención
nombre
constructor
nombre
clase
probablemente
innecesario
IConversor
ConversorPersistenciaAbstracto
ConversorBDRAbstracto
for-
man
framework
programador
aplicación
necesita
añadir
sub-
clase
ConversorBDREspecificacionDelProducto
segurar
crea
nombre
tabla
pasa
encadenamiento
constructores
Con-
versorBDRAbstracto
jerarquía
clases
Conversor
Base
Datos
esencial
fra-
mework
programador
aplicación
añadir
subclases
adaptarlo
tipos
mecanismos
almacenamiento
persistente
tablas
ficheros
es-
pecíficos
mecanismo
almacenamiento
existente
Figura
34.10
muestra
es-
tructura
paquetes
clases
Nótese
clases
específicas
pro-
yecto
NuevaEra
pertenecen
paquete
general
servicios
técnicos
Persistencia
DISEÑO
FRAMEWORK
PERSISTENCIA
PATRONES
513
Figura
34.10
framework
persistencia
interface
IConversor
get(OID
Object
put
OID
Object
Class
FachadaDePersistencia
getInstancia
FachadaDePersistencia
get
OID
Class
Object
put
OID
Object
ConversorPersistencia
Abstracto
get
OID
Object
leaf
getObjetoDelAlmacenamiento(OID
Object
Conversor
BDRAbstracto
ConversorBDRAbstracto(nombreTabla
getObjetoDelAlmacenamiento(OID
Object
leaf
getObjetoDelRegistro(OID
RegistroBD
Object
getRegistroBD(OID
RegistroBD
Persistencia
Persistencia
NuevaEra
ConversorBDR
EspecificacionDelProducto
ConversorBDREspecificacionDelProducto(nombreTabla
getObjetoDelRegistro(OID
RegistroBD
Object
ConversorFicheroConXML
EspecificacionDelProducto
getObjetoDelAlmacenamiento(OID):Object
ConversorBDR
Venta
getObjetoDelRegistro(OID
RegistroBD
Object
ConversorPruebaDeDatosEnMemoria
EspecificacionDelProducto
getObjetoDelAlmacenamiento(OID):ObjectCreo
diagrama
combinado
Figura
34.9
ilustra
valor
lenguaje
vi-
sual
UML
describir
partes
software
transmite
concisa
mu-
cha
información
Obsérvese
cla
ConversorPruebaDeDatosEnMemoriaEspecificacionDelPro-
ducto
Tales
clases
utilizar
servir
objetos
valores
definidos
directa-
mente
código
pruebas
acceder
almacenamiento
persistente
externo
UP
Documento
Arquitectura
Software
SAD
UP
documentaci
ón
recordemos
SAD
sirve
ayuda
aprendizaje
futuro
desarrolladores
contiene
vi
stas
arquitectura
ideas
claves
relevantes
inclusión
diagramas
Figuras
34.9
34.10
SAD
proyecto
NuevaEra
línea
tipo
información
SAD
debería
contener
sincronizados
guarda
UML
método
ConversorPersistenciaAbstracto--get
contiene
código
secciones
críticas
seguro
hilo
ejecución
materializar
objeto
ma-
nera
concurrente
hilos
subsistema
servicios
técnicos
ser-
vicio
persistencia
necesita
diseñe
teniendo
presente
seguridad
hilos
subsistema
completo
distribuido
proce
so
separado
ordenador
transformando
FachadaDePersistencia
objeto
servidor
remoto
hilos
ejecutándose
simultáneamente
subsistema
sirviendo
múlti-
ples
clientes
método
debería
control
concurrencia
hilos
uti-
liza
Java
añadirá
palabra
clave
syncronized
Figura
34.11
ilustra
método
sincronizado
diagrama
clases
514
UML
PATRONES
Figura
34.11
Métodos
guarda
UML
ConversorPersistencia
Abstracto
get(OID
Object
leaf
guarded
Java
public
syncronized
Object
get(OID
oid
guarded
significa
sincronizado
hilo
podr
ejecutarlo
instante
familia
guarda
objeto
IConversor34.13
Configuración
conversores
FactoriaDeConversores
Análogamente
ejemplos
anteriores
factorías
caso
estudio
configuración
FachadaDePersistencia
conjunto
objetos
IConversor
objeto
factoría
FactoriaDeConversores
pequeño
giro
con-
veniente
nombrar
conversor
operación
ejemplo
deseable
class
FactoriaDeConversores
public
IConversor
getConversorEspecificacionDelProducto
public
IConversor
getConversorVenta
soporta
Variaciones
Protegidas
lista
creciente
conver-
sores
crecerá
consecuencia
preferible
class
FactoriaDeConversores
public
Map
getTodosLosConversores
claves
java.util
Map
probablemente
implementado
HashMap
objetos
Class
tipos
persistentes
objetos
IConversor
valores
fachada
inicializar
colección
objetos
IConversor
class
FachadaDePersistencia
private
java.util
Map
conversores
FactoriaDeConversores.getInstancia().getTodosLosConversores
factoría
asignar
conjunto
objetos
IConversor
utilizando
diseño
di-
rigido
datos
factoría
leer
propiedades
sistema
des-
cubrir
clases
IConversor
instanciar
utiliza
lenguaje
capacidades
programación
reflexiva
Java
instanciación
basar
lectura
nombres
clases
cadenas
texto
utilización
ope-
ración
Class.newInstance
crear
instancias
reconfi-
gurar
conversor
cambiar
código
fuente
34.14
Patrón
Gestión
Cach
conveniente
mantener
objetos
materializados
caché
local
mejorar
rendimiento
materialización
relativamente
lenta
soporte
operaciones
gestión
transacciones
commit
patrón
Gestin
Cach
Cache
Management
BW96
propone
versor
Base
Datos
responsable
mantener
caché
utiliza
con-
versor
clase
objetos
persistentes
conversor
mantener
caché
DISEÑO
FRAMEWORK
PERSISTENCIA
PATRONES
515Cuando
materializan
objetos
colocan
caché
OID
cla-
ve
siguientes
peticione
conver
sor
obtener
objeto
provocar
conversor
bu
sque
cach
evitando
sta
materializacione
innecesarias
34.15
Reunir
ocultar
sentencias
SQL
clase
Sentencias
SQL
embebidas
clases
conversores
pecado
terrible
mejorar
Suponga
lugar
única
cla
Fabricación
Pura
singleton
OperacionesBDR
reúnen
operaciones
SQL
SELECT
INSERT
clases
conversores
BDR
colaboran
obtener
registro
BD
conjunto
registros
ejemplo
ResultSet
interfaz
parecido
class
OperacionesBDR
public
ResultSetgetDatosEspecificacionDelProducto(OID
oid
public
ResultSet
getDatosVenta(OID
oid
ejemplo
conversor
código
classConversorBDREspecificacionDelProductoextendsConversorPersistenciaAbstracto
protected
Object
getObjetoDelAlmacenamiento(OID
oid
ResultSetrs
OperacionesBDR.getInstancia().getDatosEspecificacionDelProducto(oid
EspecificacionDelProducto
ep
new
EspecificacionDelProducto
ep.setPrecio(rs.getDouble(“PRECIO
ep.setOID(oid
return
ep
Fabricación
Pura
obtienen
siguientes
beneficios
facilita
mantenimiento
rendimiento
ajustado
experto
op-
timización
SQL
requiere
programador
SQL
lugar
programador
objetos
SQL
embebido
única
clase
facilita
programador
SQL
encontrarlo
trabajar
Encapsulación
métodos
detalles
acceso
ejemplo
SQL
struido
código
sustituirse
llamada
procedimiento
almacenado
BDR
obtener
datos
insertar
enfoque
sofisticado
basado
metadatos
generar
SQL
genera
SQL
ma-
nera
dinámica
descripción
esquema
metadatos
lee
fuente
externa
arquitecto
aspecto
interesante
decisión
diseño
in-
fluyen
habilidades
desarrollador
compromiso
alta
cohesión
comodidad
especialista
decisiones
diseño
motivadas
cuestiones
ingeniería
software
puras
acoplamiento
cohesión
516
UML
PATRONES34.16
transaccionales
patrón
cuestiones
relacionadas
soporte
transacciones
complicarse
mantener
cosas
simples
momento
centrarnos
patrón
GoF
Esta-
do
asuma
objetos
persistentes
insertarse
eliminarse
modificarse
Operar
objeto
per
sistente
ejemplo
modificarlo
provoca
actualización
inmediata
base
datos
ejecutar
opera-
ción
commit
explícita
respuesta
operación
depende
transacción
objeto
ejemplo
respuestas
mostrar
máquina
Figura
34.12
DISEÑO
FRAMEWORK
PERSISTENCIA
PATRONES
517
Figura
34.12
Máquina
ObjetoPersistente
ViejoLimpio
ViejoSucio
ViejoAEliminar
commit
eliminar
eliminar
BD][new
BD
guardar
commit
actualizar
eliminar
rollback
re-cargar
rollback
re-cargarcommit
insertar
Máquina
ObjetoPersistente
Leyenda
Nuevo--reci
creado
BD
Viejo--recuperado
BD
Limpio--sin
modificar
Sucio--modificado
Eliminado
ejemplo
objeto
viejo
sucio
old
dirty)e
recuperado
base
da-
tos
modificado
operación
commit
debería
actualizarse
base
datos
diferencia
viejo
limpio
de-
bería
cambiado
FWP
orientado
objetos
ejecuta
operación
eliminar
guardar
origina
elimine
guarde
inme-
diatamente
base
datos
transiciones
objetos
persistentes
apropiado
esperando
operación
commit
rollback
realmente
comentario
UML
ejemplo
útil
máquina
transmitir
información
concisa
difícil
expresar
diseño
asuma
haremos
clases
objetos
persistentes
ex-
tenderán
cla
ObjetoPersistente7
proporciona
servicios
técnicos
comunes
persistencia8
ejemplo
véase
Figura
34.13
Ambler00b
referencia
acerca
clase
ObjetoPersistente
yl
as
capas
persistencia
idea
antigua
cuestiones
relacionadas
extensión
clase
ObjetoPersistente
discuten
Siem-
pre
clase
objetos
dominio
extienda
clase
servicios
técnicos
debería
pausa
reflexionar
mezclando
intereses
arquitectura
persistencia
lógica
aplicación).518
UML
PATRONES
cuestión
resolverá
patrón
observe
métodos
commit
rollback
requieren
estructura
similar
lógica
casos
ba-
sada
código
transacción
commit
rollback
ejecutan
ac-
ciones
caso
estructuras
lógicas
similares
alternativa
estructura
lógica
casos
repite
patrón
GoF
Es-
tado
State
State
Contexto
Problema
comportamiento
objeto
depende
métodos
contienen
lógica
casos
reflejan
acciones
condicionales
dependientes
al-
ternativa
lógica
condicional
Solución
Cree
clases
implementan
interfaz
común
lugar
definir
objeto
contexto
operaciones
dependen
deléguelas
objeto
actual
Asegure
objeto
contexto
referencie
objeto
refleja
actual
Figura
34.14
ilustra
aplicación
subsistema
persistencia
public
void
commit
switch(estado
case
VIEJO_SUCIO
break
case
VIEJO_LIMPIO
break
public
void
rollback
switch(estado
case
VIEJO_SUCIO
break
case
VIEJO_LIMPIO
break
Figura
34.13
Objetos
persistentes
Persistencia
Dominio
EspecificacionDelProducto
ObjectoPersistente
oid
OID
marcaDeTiempo
fechaHora
commit
eliminar
rollback
guardar
métodos
dependientes
ObjetoPersistente
delegan
ejecución
objeto
asociado
objeto
contexto
referencia
EstadoViejoSucio
en-
tonces
método
commit
provocará
actualización
base
datos
ob-
jeto
contexto
pasará
referenciar
EstadoViejoLimpio
objeto
contexto
referenciando
EstadoViejoLimpio
ejecuta
étodo
commit
here-
esperaba
puesto
objeto
limpio
Observe
Figura
34.14
clases
comportamiento
corres-
ponden
máquina
Figura
34.12
patrón
mecanismo
DISEÑO
FRAMEWORK
PERSISTENCIA
PATRONES
519
Figura
34.14
Aplicación
patrón
Estado9
ObjectoPersistente
oid
OID
EstadoObjectoP
commit
eliminar
rollback
guardar
setEstado(EstadoObjectoP
EstadoObjectoP
commit(obj
ObjectoPersistente
eliminar(obj
ObjectoPersistente
rollback(obj
ObjectoPersistente
guardar(obj
ObjectoPersistente
EstadoViejo
Sucio
commit
eliminar
rollback
eliminar
guardar
commit
commit
rollback
EspecificacionDel
Producto
Venta
estado.eliminar(this
defecto
cuerpos
vac
eliminar
obj.setEstado(EstadoViejoAEliminar.getInstancia
guardar
obj.setEstado(EstadoViejoSucio.getInstancia
rollback
FachadaDePersistencia.getInstancia().recargar(obj
obj.setEstado(EstadoViejoLimpio.getInstancia
commit
FachadaDePersistencia.getInstancia().actualizar(obj
obj.setEstado(EstadoViejoLimpio.getInstancia
estado.rollback(this
estado.commit(this
estado.guardar(this
commit
FachadaDePersistencia.getInstancia().insertar(obj
obj.setEstado(EstadoViejoLimpio.getInstancia
commit
FachadaDePersistencia.getInstancia().eliminar(obj
obj.setEstado(EstadoEliminado.getInstancia
EstadoLimpio
Sucio
EstadoViejo
AEliminar
clase
Borrado
omitido
restricciones
espacio
diagrama.para
implementar
modelo
transición
software10
lugar
produzca
transición
objeto
respuesta
eventos
comentario
acerca
rendimiento
stos
objetos
ónica-
mente
atributos
necesario
múltiples
instancias
clase
singleton
Miles
objetos
persistentes
refe-
renciar
instancia
EstadoViejoSucio
ejemplo
34.17
Dise
transacción
Patrón
Command
sección
vista
simplificada
transacciones
sección
amplía
discusión
cubre
cuestiones
relacionadas
diseño
transacciones
Informalmente
transacción
unidad
trabajo
conjunto
tareas
cuyas
tareas
completarse
éxito
completar
nin-
guna
terminación
atómica
servicios
persistencia
tareas
transacción
incluyen
inser-
ción
actualización
eliminación
objetos
transacción
contener
inser-
ciones
actualización
eliminaciones
ejemplo
representar
añade
clase
Transaccion
Ambler00b]11
señala
Fowler01
orden
tareas
base
datos
transacción
influir
éxito
rendimiento
ejemplo
Suponga
ba
datos
restricción
integridad
referencial
actualiza
registro
TablaA
contiene
clave
ajena
registro
TablaB
base
datos
requiere
registro
TablaB
exista
Suponga
tran
sacción
contiene
tarea
INS
ERT
añadir
re
gistro
TablaB
tarea
UPDATE
actualizar
regi
stro
Ta-
blaA.
ejecuta
UPDATE
INSERT
surge
error
integridad
re-
ferencial
ordenación
tareas
base
datos
ayudar
cuestiones
ordenaci
ón
específicas
esquema
strategia
general
inserciones
actualizacione
eliminacione
s.
orden
aplicaci
ón
añade
tareas
tran-
sacción
reflejar
orden
ejecuci
ón
tareas
necesitan
or-
denen
justo
ejecución
patrón
GoF
Command
12
520
UML
PATRONES
10
encuentran
lógica
condicional
construida
código
intérpretes
má-
quinas
generadores
código
dirigidos
tablas
11
denomina
UnidadDeTrabajo
Fowler01
12
N.
T.
traducido
motivo
caso
patrón
Singleton
Command
Contexto
Problema
gestionar
solicitudes
tareas
necesitan
funciones
ordenar
esta-
bleciendo
prioridades
cola
retrasar
anotar
registro
deshacer
Solución
Defina
clase
tarea
implemente
interfaz
común
patrón
sencillo
aplicaciones
útiles
acciones
convierten
objetos
ordenar
anotar
registro
cola
et-
cétera
ejemplo
FWP
Figura
34.15
muestra
clases
Command
tareas
operaciones
base
datos
DISEÑO
FRAMEWORK
PERSISTENCIA
PATRONES
521
Figura3
4.15
Clases
Command
operaciones
base
datos
interface
ICommand
ejecutar
deshacer
CommandInsertarBDCommandActualizarBD
CommandEliminarBD
ejecutar
Transaccion
commands
List
commit
adirEliminar(obj
ObjectoPersistente
adirInsertar(obj
ObjectoPersistente
adirActualizar(obj
ObjectoPersistente
ordenar
CommandDB
objecto
ObjectoPersistente
ejecutar
abstract
deshacer
leaf
deshacer
operativo
ejemplo
solución
compleja
ade
deshacer
polimórfico
subclase
conoce
única
deshacer
operación
ObjectoPersistente
commit
11
commands.add(CommandActualizarBD(obj
utiliza
objetos
EstrategiaOrdenacion
permitir
algoritmos
ordenación
ordenar
objetos
Command
simplemente
object.commit
Command
ejecutar
acciones
únicas
ordenar
for
each
ICommand
cmd
cmd.ejecutar
ejecutar()ejecutar
completar
solución
transacción
idea
clave
sección
representar
tarea
acción
transacción
objeto
método
ejecutar
polimórfico
accesible
mundo
flexibilidad
tratando
respuesta
objeto
ejemplo
prototípico
Command
acciones
GUI
cortar
pegar
ejemplo
método
ejecutar
CommandCortar
realiza
acción
cortar
sumétodo
deshacer
deshace
corte
CommandCortar
retendrá
datos
necesa-
rios
cabo
acción
deshacer
objetos
Command
GUI
mantener
pila
recoge
historia
ejecuciones
puedan
desapilar
turnos
deshacerse
típico
patrón
Command
gestión
peticiones
servidor
objeto
servidor
recibe
mensaje
remoto
crea
objeto
Com
mand
petición
entrega
CommandProcesador
BMRSS96
cola
anotar
registro
priorizar
ejecutar
objetos
Command
34.18
Materialización
perezosa
Proxy
Virtual
conveniente
diferir
materialización
objetos
abso-
lutamente
necesario
normalmente
razones
rendimiento
ejemplo
suponga
objetos
EspecificacionDelProducto
referencian
objeto
Fabricante
rara
necesario
materialice
base
datos
provocan
petición
in-
formación
fabricante
escenarios
frecuentes
escenarios
relacionados
rebajas
fabricantes
necesita
nombre
dirección
compañía
522
UML
PATRONES
Figura
34.16
Proxy
Virtual
Fabricante
Proxy
Fabricante
sujetoReal
IFabricante
getSujetoReal
IFabricante
getDireccion
Fabricante
direccion
getDireccion
interfaz
IFabricante
getDireccion
Proxy-del
sujetoReal
return
getSujetoReal().getDireccion
EspecificacionDelProducto
fabricante
IFabricante
getDireccionFabricante
Direccion
if
sujetoReal
null
sujetoReal
FachadaPersistencia.get(oid
Fabricante.class
return
sujetoReal
ObjectoPersistente
oid
return
fabricante.getDireccion
realmente
referencia
instancia
ProxyFabricante
23La
materialización
diferida
objetos
hijos
conoce
materializacin
perezosa
materialización
perezosa
implementar
utilizando
patrón
GoF
Proxy
Virtual
variaciones
Proxy
Proxy
Virtual
proxy
objeto
sujeto
acceder
realmente
materializa
sujeto
real
referencia
implementa
materialización
perezosa
objeto
ligero
simboliza
ob-
jeto
real
materializado
ejemplo
concreto
patrón
Proxy
Virtual
EspecificacionDelProducto
ye
Fabricante
muestra
Figura
34.16
diseño
basa
suposición
proxies
conocen
OID
sujetos
reales
requiere
materialización
utiliza
OID
ayudar
identificar
recuperar
sujeto
real
Nótese
EspecificacionDelProducto
visibilidad
atributo
instancia
IFabricante
Fabricante
EspecificacionDelProducto
haberse
ma-
terializado
memoria
EspecificacionDelProducto
envía
mensaje
getDireccion
ProxyFabricante
creyendo
objeto
fabricante
materializado
proxy
materializa
Fabricante
real
utilizando
OID
Fabricante
recuperarlo
materializarlo
Implementación
Proxy
Virtual
implementación
Proxy
Virtual
varía
lenguaje
detalles
quedan
fue-
ran
alcance
capítulo
continuación
presentamos
resumen
Lenguaje
Implementación
Proxy
Virtual
C++
Define
clase
plantilla
puntero
inteligente
smart
pointer
Realmente
necesita
definición
interfaz
IFabricante
Java
implementa
clase
ProxyFabricante
define
interfaz
IFabricante
normalmente
codifican
manualmente
crea
generador
código
analiza
clases
acceder
realmente
ej.
Fabricante
genera
IFabricante
ProxyFabricante
alternativa
Java
utilizar
API
Proxy
Dinámico
Smalltalk
Definir
Proxy
Morphing
Virtual
Proxy
Fantasma
utiliza
doesNotUnderstand
become
transformar
sujeto
real
necesita
definición
IFabricante
Qui
crea
Proxy
Virtual
Observe
Figura
34.16
ProxyFabricante
colabora
FachadaDePersis-
tencia
materializar
sujeto
real
qui
én
crea
ProxyFabricante?R
espuesta
clase
establece
correspondencia
EspecificacionDelProducto
base
datos
clase
responsable
decidir
materializa
objeto
objetos
hijos
debería
materializarse
impaciente
cu
áles
de-
berían
materializarse
perezosa
proxy
Considere
soluciones
alternativas
utiliza
materialización
impaciente
materialización
perezosa
DISEÑO
FRAMEWORK
PERSISTENCIA
PATRONES
523//MATERIALIZACIÓN
IMPACIENTE
FABRICANTE
classConversorBDREspecificacionDelProductoextendsConversorPersistenciaAbstracto
protected
Object
getObjetoDelAlmacenamiento(OID
oid
ResultSet
rs
OperacionesBDR.getInstancia().getDatosEspecificacionDelProducto(oid
EspecificacionDelProducto
ep
new
EspecificacionDelProducto
ep.setPrecio(rs.getDouble(“PRECIO
//aquí
esencia
String
claveAjenaFabricante
rs.getString(“FAB_OID
OID
oidFab
new
OID(claveAjenaFabricante
ep.setFabricante((IFabricante
FachadaDePersistencia.getInstancia().get(oidFab
Fabricante.class
continuación
presentamos
solución
materialización
perezosa
//MATERIALIZACIÓN
PEREZOSA
FABRICANTE
classConversorBDREspecificacionDelProductoextendsConversorPersistenciaAbstracto
protected
Object
getObjetoDelAlmacenamiento(OID
oid
ResultSet
rs
OperacionesBDR.getInstancia().getDatosEspecificacionDelProducto(oid
EspecificacionDelProducto
ep
new
EspecificacionDelProducto
ep.setPrecio(rs.getDouble(“PRECIO
//aquí
esencia
String
claveAjenaFabricante
rs.getString(“FAB_OID
OID
oidFab
new
OID(claveAjenaFabricante
ep.setFabricante(new
ProxyFabricante(oidFab
34.19
representar
relaciones
tablas
ódigo
sección
conf
ía
clave
ajena
FAB_OID
tabla
ESPEC_PRODUCTO
conectar
regi
stro
tabla
FABRICANTE
pone
relieve
pregunta
representan
relaciones
objetos
mo-
delo
relacional
respuesta
patrón
Representacin
Relaciones
Objetos
Tablas
BW96
propone
524
UML
PATRONESAsociaciones
uno-a-uno
Colocar
clave
ajena
OID
ambas
tablas
representan
objetos
relación
crear
tabla
asociación
recoja
OIDs
objetos
relación
Asociaciones
uno-a-muchos
colección
Crear
tabla
asociativa
registre
OIDs
objetos
asociación
Asociaciones
muchos-a-muchos
Crear
tabla
asociativa
registre
OIDs
objetos
asociación
34.20
Superclase
ObjetoPersistente
separación
intereses
solución
diseño
parcial
típica
proporcionar
persistencia
objetos
crear
clase
abstracta
servicios
técnicos
ObjetoPersistente
heredan
ob-
jetos
persistentes
Figura
34.17
clase
normalmente
define
atributo
persistencia
OID
único
métodos
almacenarlos
base
datos
DISEÑO
FRAMEWORK
PERSISTENCIA
PATRONES
525
Figura
34.17
Problemas
superclase
ObjetoPersistente
ObjectoPersistente
EspecificacionDel
Producto
Dise
problemático
acoplamiento
mezcla
intereses
servicio
cnico
persistencia
lógica
aplicación
objeto
dominio
incorrecto
adolece
debilidad
acoplamiento
clase
clase
ObjetoPersistente
clases
dominio
terminan
extendiendo
clase
servicios
técnicos
diseño
ilustra
clara
separación
intereses
mezclan
in-
tereses
servicios
técnicos
intereses
lógica
negocio
capa
dominio
virtud
extensión
separación
intereses
virtud
absoluta
seguir
precio
discutió
presentaron
Variaciones
Protegidas
diseñadores
necesitan
escoger
batallas
puntos
realmente
proba-
ble
inestabilidad
costosa
aplicación
particular
clase
subclase
ObjetoPersistente
solución
ordenada
fácil
lugar
problemas
diseño
mantenimiento
plazo
respuesta
en-
tender
evolución
requisitos
diseño
aplicación
influye
len-
guaje
herencia
simple
Java
consumen
única
preciada
superclase.34.21
Cuestiones
resolver
introducción
problemas
soluciones
diseño
fra-
mework
servicio
persistencia
encubierto
cuestiones
importantes
encuentran
Desmaterialización
objetos
Brevemente
conversores
definir
métodos
putObjetoEnAlmace-
namiento
desmaterialización
jerarquías
composición
requiere
cola-
boración
múltiples
conversores
mantenimiento
tablas
asociativas
utiliza
BDR
Materialización
desmaterialización
colecciones
Consultas
grupos
objetos
Gestión
completa
transacciones
Gestión
errores
falla
operación
base
datos
Acceso
multiusuario
estrategias
bloqueo
Seguridad—control
acceso
base
datos
526
UML
PATRONESParte
TEMAS
ESPECIALESObjetivos
Aprender
consejos
dibujar
diagramas
UML
proyecto
Ilustrar
funciones
comunes
herramientas
CASE
UML
Introducción
proyecto
real
realización
análisis
diseño
dibujan
diagra-
UML
ocurre
ordenadamente
páginas
libro
lugar
contexto
equipo
desarrollo
software
ocupado
trabaja
oficinas
ha-
bitaciones
garabatos
pizarras
utilizando
herramienta
menu-
do
tendencia
querer
comenzar
programar
lugar
trabajar
detalle
detalles
realización
diagramas
herramienta
UML
proce-
so
dibujar
diagramas
resultan
molestos
engorrosos
valor
programación
evitarán
capítulo
propone
mantener
equilibrio
programaci
ón
dibujo
diagramas
fomentar
entorno
soporte
tarea
dibujar
dia-
gramas
cómoda
útil
lugar
difícil
35.1
Diseño
especulativo
razonamiento
visual
diseños
ilustran
diagramas
UML
incompletos
servirán
trampolín
programación
Demasiados
diagramas
programar
pérdida
tiempo
direcciones
diseño
especulativas
pérdida
Capítulo
35
DIBUJO
DIAGRAMAS
HERRAMIENTAS
burbujas
explotan
Bertrand
Meyertiempo
obsesionados
herramientas
UML
código
real
decirte
funciona
Bertrand
Meyer
burbujas
explotan
obstante
promuevo
enérgicamente
anticipe
idea
rea-
lización
diagramas
programar
útil
especialmente
ex-
plorar
estrategias
di
seño
importantes
pregunta
intere
sante
tiempo
dedicar
dibujar
diagramas
programar
res-
puesta
función
experiencia
estilo
cognitivo
diseñadores
personas
razonamiento
spacial
visual
expre
sar
pensamientos
acerca
diseño
software
lenguaje
visual
complementa
na-
turaleza
porcentaje
cerebro
stá
dedicado
razonamiento
procesamiento
visual
simbólico
lugar
proce
samiento
textual
código
lenguajes
visuales
UML
juegan
capacidad
natural
mente
ma-
yoría
gente
enseñado
UML
obviamente
resulta-
rá
sencillo
general
diseñadores
objetos
ex-
periencia
diseñar
efectiva
dibujando
perderse
especulaciones
realistas
experiencia
juicio
Aplicados
expertos
diagramas
ayudar
grupo
moverse
rápidamente
diseño
apropiado
capacidad
ignorar
detalles
centrarse
verdaderos
problemas
excepción
sugerencia
dibujar
diagramas
ligeros
sistemas
modelan
natural
máquinas
herramien-
tas
CASE
trabajo
impre
sionante
generando
código
completo
ba-
sado
máquinas
UML
detalladas
clases
do-
minios
encajan
natural
enfoque
fuertemente
centrado
máquinas
ejemplo
máquinas
control
telecomunicacione
ajustan
sistemas
información
gestión
normalmente
35.2
Sugerencias
dibujar
diagramas
UML
proceso
desarrollo
Nivel
esfuerzo
guía
considere
diagramas
parejas
siguientes
periodos
programar
seria
iteración
Iteración
2-semanas
comienzo
iteración
ej.
lunes
martes
Iteración
4-semanas
cerca
comienzo
casos
realización
diagramas
parar
esfuerzo
inicial
enfocado
desarrolladores
dirigirse
idealmente
parejas
pizarra
sesiones
cortas
esbozar
ideas
programar
sesión
larga
mitad
iteración
cuan-
do
tropiecen
problema
complejo
ámbito
tarea
inicial
terminen
tarea
pasen
530
UML
PATRONESOtras
sugerencias
Dibuje
parejas
importante
sinergia
conduce
diseños
mejores
lugar
pareja
aprende
ápidamente
técnicas
diseño
llegan
mejores
diseñadores
difícil
mejo-
rar
diseñador
software
di
seña
individualmente
Cambie
regular
compañero
dibujo
diseño
periodos
tiempo
am-
plios
expuestos
conocimiento
aclarar
punto
alusión
procesos
ite-
rativos
UP
programadores
diseñadores
equipo
separado
dibuja
diseños
entrega
programadores
desarrolladores
ponen
sombrero
UML
dibujan
po-
nen
sombrero
programador
implementan
continúan
diseñando
programan
desarrolladores
suponga
equipos
dibujo
trabajando
pizarras
arquitecto
dedica
tiempo
rotar
equipos
llegará
puntos
dependencia
conflictos
ideas
equi-
po
sirven
arquitecto
actuar
enlace
llegar
armonía
diseños
clarificar
dependencias
Contrate
escritor
técnico
proyecto
enséñele
notación
UML
conceptos
básicos
DOO
entender
contexto
Dis-
ponga
ayuda
escritor
realización
trabajo
engorroso
he-
rramientas
CASE
UML
procesos
ingeniería
inversa
generando
diagramas
código
impresión
presentación
diagramas
impresos
plotter
etcétera
desarrolladores
dedicarán
tiempo
caro
idear
diseños
programar
escritor
técnico
ayu-
realizando
gestión
diagramas
verdaderas
responsabili-
dades
escritura
técnica
tales
trabajo
documento
usuario
conoce
patrón
Analista
Mercenario
Coplien95a
Organice
área
desarrollo
pizarras
amplias
distribuidas
cer-
ca
Generalizando
maximice
entorno
trabajo
dibujar
cómodamente
paredes
Cree
entorno
amigable
dibujar
colgar
diagrama
s.
esperar
consiga
cultura
modelado
visual
éxito
en-
torno
desarrolladores
peleando
dibujar
pizarras
pequeñas
60x
90
cm
monitore
ordenador
tamaño
corriente
trozo
papel
dibujar
cómoda
falta
espacios
amplios
abiertos
fí-
sicos
virtuales
accesorio
pizarras
utilice
finas
hojas
blancas
plástico
adhe-
rencia
estática
vienen
paquetes
20
colocar
pa-
redes
encuentran
disponibles
papelerías
hojas
permanecen
unidas
pared
adherencia
stática
utilizar
pi
zarra
rotulador
borrar
empapelar
pared
es-
tas
hoja
crear
pizarra
temporale
masivas
dirigido
grupo
DIBUJO
DIAGRAMAS
HERRAMIENTAS
531hemos
empapelado
paredes
abajo
sala
proyecto
hojas
encontramos
ayuda
comunicación
utiliza
pizarra
dibujos
UML
utilice
dispositivo
me-
mercado
capture
dibujos
hechos
mano
transmita
ordenador
fichero
gráfico
diseño
involucra
receptora
esquina
pizarra
captura
imagen
enviarla
ordenador
fun-
das
especiales
transmisoras
insertan
rotuladores
alternativa
utiliza
pizarra
dibujos
UML
utilice
cámara
digital
capturar
imágenes
normalmente
secciones
práctica
dibujar
diagramas
común
efectiva
tecnología
pizarra
pizarra
imprime
normalmente
pizarra
lados
escáner
impresora
conectada
útiles
Imprima
imágenes
UML
dibujadas
mano
capturadas
cámara
dispositivo
pizarra
cu
élguelas
vi
sible
cerca
esta-
ciones
trabajo
programación
importante
diagramas
inspirar
dirección
programación
programadores
puedan
echar-
vistazo
programando
dibujan
entierran
te-
nía
sentido
dibujarlos
dibuja
diagramas
UML
mano
utilice
notación
simple
elegida
ace-
lerar
facilitar
realización
diagramas
cabo
di
seño
creativo
pizarra
utilice
herramienta
CASE
UML
generar
diagramas
paquetes
clases
proceso
ingeniería
inversa
código
fuente
iteración
comienzo
iteración
posterior
utilice
diagramas
generados
proceso
ingeniería
inversa
punto
partida
diseño
creativo
Imprima
periódicamente
diagramas
paquetes
clases
interesantes
ines-
tables
difíciles
generados
recientemente
proce
so
ingenier
ía
in-
versa
tamaño
ampliado
facilitar
vea
plotter
imprimir
papel
continuo
90
120
cm
ancho
Cuélguelos
paredes
cerca
desarrolladores
ayuda
vi
sual
escritor
técnico
presente
trabajo
Anime
desarrolladores
dibujen
ha-
gan
garabatos
diagramas
trabajo
diseño
creativo
ingenier
ía
inversa
herramientas
UML
soportan
proceso
ingenier
ía
inversa
generar
diagrama
secuencia
única-
mente
diagramas
clases
código
fuente
disponible
utilice
generar
diagramas
secuencia
escenarios
significativos
arquitectura
imprímalos
tamaño
plotter
cu
élguelos
fa-
cilitar
vean
utiliza
herramienta
CASE
UML
hágalo
trabajo
programación
utilice
estación
trabajo
monitor
dual
moni-
tores
pantalla
plana
tamaño
ordinario
baratas
único
monitor
532
UML
PATRONESde
pantalla
plana
tamaño
sistemas
operativos
modernos
soportan
tarjetas
ídeo
duales
sta
do
monitores
Organice
ventanas
herramienta
UML
monitores
monitor
pequeño
reprime
psicológicamente
creativamente
refiere
dibujos
lenguajes
visuales
espacio
área
visual
pe-
queño
estrecho
desarrollador
caer
aptitud
desmotivada
di-
seño
terminado
ventana
llena
desordenado
utilice
herramienta
CASE
UML
realice
diseño
creativo
parejas
pequeños
grupos
conecte
proyectores
ordenador
tarjetas
vídeo
ordenador
alinee
proyecciones
pared
equipo
trabajar
espacio
amplio
área
visual
área
pe-
queña
diagramas
difíciles
impedimentos
psicológicos
sociales
diseño
visual
colaboración
pequeños
grupos
35.3
Herramientas
características
ejemplo
libro
imparcial
herramienta
extraño
mencionar
herramienta
CAS
Computer
Aid
Software
Engineering
ingeniería
software
asistida
ordenador
UML
li-
bro
realizaci
ón
dibujos
UML
lugar
herra
mienta
CASE
pizarra
tiempo
cubrir
herramientas
evaluaciones
apropiadas
quedan
alcance
libro
imparcial
libro
avala
herramienta
CASE
UML
siguientes
ejemplos
sir-
ven
ilustrar
características
típicas
claves
encontrar
herramientas
CASE
UML
herramientas
ajustan
inconsistente
UML
herramientas
dibujan
notación
UML
correctamente
conforme
versión
actual
especificación
UML
realmente
versión
Aun-
estaría
debería
factor
elección
herramienta
puesto
importante
funcionalidad
facilidad
Ejemplo
Figuras
35.1
35.2
utiliza
Together
TogetherSoft
ilustrar
definir
funciones
claves
herramienta
CASE
UML
ingeniería
directa
inversa
Es-
tas
funciones
distinguen
esencialmente
herramienta
CASE
UML
herramienta
dibujar
DIBUJO
DIAGRAMAS
HERRAMIENTAS
53335.4
Ejemplo
Figuras
35.3
35.4
utiliza
Rational
Rose
ilustrar
funciones
básicas
herramienta
CASE
UML
534
UML
PATRONES
Figura
35.1
Ingeniería
directa
Ingeniería
directa
capacidad
generar
código
diagramas
ejemplo
elegir
mensaje
diagrama
secuencia
ej.
introducirArticulo
objeto
Registro
herramienta
generará
código
fuente
Java
cuerpo
método
refleja
diseño
diagrama
secuencia
Figura
35.2
Ingeniería
inversa
Ingeniería
inversa
capacidad
generar
diagramas
código
ejemplo
elegir
operación
diagrama
clases
ej.
Registro.introducirArticulo)yl
herramienta
generará
diagrama
secuencia
refleja
diseñod
código
fuente
Peticiones
vendedores
herramientas
CASE
UML
Sugiero
consumidores
hagan
peticiones
vendedores
herramientas
CASE
UML
Implementaci
ón
correcta
notación
actual
UML
herramienta
equipo
sarrollo
herramienta
CASE
dibujado
leí-
do
revisado
seriamente
diagramas
UML
incluyendo
proceso
ingeniería
inversa
diagrama
proce
so
strucción
herra
mienta
UML
DIBUJO
DIAGRAMAS
HERRAMIENTAS
535
Figura
35.3
Creación
diagramas
clase
función
clave
herramienta
CASE
UML
dibujar
diagramas
clase
utilizarán
generar
código
Figura
35.4
Gestión
paquetes
organización
diagramas
paquetes
característica
clave
herramientas
CASE
UML
Seleccionando
paquete
amplía
contenido.3
Utilizar
sión
herramienta
UML
crear
versión
N+1
Proporcionar
soporte
procesos
ingeniería
directa
inversa
diagramas
secuencia
mayoría
herramientas
soportan
diagrama
clases
Microsoft
aboga
creadores
herramientas
coman
comi-
perros
consejo
536
UML
PATRONESObjetivos
Priorizar
requisitos
riesgos
Comparar
contrastar
planificación
adaptable
predictiva
Definir
Plan
Fase
Plan
Iteración
UP
Introducir
herramientas
mantener
traza
requisitos
desa-
rrollo
iterativo
Sugerir
organizar
artefactos
proyecto
Introducción
cuestiones
relacionadas
gestión
planificación
proyecto
temas
am-
plios
sirve
ayuda
abordar
estudio
preguntas
claves
re-
lacionadas
desarrollo
iterativo
UP
iteración
mantener
traza
requisitos
desarrollo
iterativo
organizamos
artefactos
proyecto
predicción
difícil
especialmente
acerca
futuro
anónimo
Capítulo
36
INTRODUCCIÓN
CUESTIONES
RELACIONADAS
PLANIFICACIÓN
ITERATIVA
PROYECTO36.1
Priorización
requisitos
Criterios
dirigen
primeras
iteraciones
riesgo
cobertura
naturaleza
crítica
desarrollo
habilidades
primeras
iteraciones
Organice
requisitos
iteraciones
riesgo
cobertura
naturaleza
crítica
Kruchten00
riesgo
requisito
comprende
complejidad
técnica
factores
incertidumbre
es-
fuerzo
especificación
pobre
problemas
políticos
facilidad
Debemos
diferen-
ciar
priorización
riesgos
requisitos
priorización
riesgos
proyecto
estudiará
sección
posterior
cobertura
implica
partes
importantes
sistema
tratado
brevemente
primeras
iteraciones
implementación
an-
chura
superficial
componentes
naturaleza
crítica
refiere
as
funciones
alto
valor
negocio
funciones
principales
deberían
implementaciones
parciales
escenarios
principales
éxito
primeras
iteraciones
técnicamente
arriesgadas
proyectos
criterio
desarrollo
habilidades
objetivo
ayudar
equipo
dominar
habilidades
adoptar
tecnologías
obje-
tos
tales
proyectos
desarrollo
habilidades
factor
peso
es-
tablecer
prioridades
tiende
reorganizar
iteraciones
requisitos
riesgo
simples
primeras
iteraciones
motivado
aprendizaje
lugar
objetivos
reducción
riesgo
priorizamos
UP
dirigido
casos
incluye
práctica
priorizar
casos
escenarios
casos
implementación
expresan
re-
quisitos
características
alto
nivel
relacionadas
caso
específi-
co
normalmente
abarcan
casos
servicio
general
servicios
registro
funciones
pertenecen
caso
re-
cogerán
Especificación
Complementaria
incluya
lista
priori-
zación
casos
características
alto
nivel
Requisito
Tipo
Procesar
Venta
CU
Registrar
Característica
Métodos
cualitativos
grupo
priorización
base
anteriores
criterios
priorizan
requisitos
alta
prioridad
manejan
primeras
iteraciones
priorización
informal
cualitativa
ge-
nerada
reunión
grupo
miembros
conscientes
criterios
538
UML
PATRONESSugerencia
priorizar
informalmente
requisitos
tareas
riesgos
reunión
grupo
utilice
votación
puntos
iterativa
Liste
ítems
pizarra
coge
ejemplo
20
puntos
adhesivos
grupo
silencio
reducir
influencia
aproximan
pizarra
aplican
puntos
ítems
reflejando
prioridades
vota
termine
ordenan
discuten
haga
vuelta
votación
puntos
silenciosa
reflejar
percepciones
actualiza-
das
base
votación
vuelta
discusión
vuelta
pro-
porciona
retroalimentación
adaptación
mejoran
decisiones
priorización
requisitos
riesgo
hará
iteración
re-
petirá
iteración
sucesivamente
Métodos
cuantitativos
priorización
discusión
grupo
votación
puntos
priorizar
requisitos
riesgo
probablemente
suficientes
enfoque
cualitativo
difuso
mente
cuantitativa
utilizado
variaciones
valores
pe-
sos
ejemplo
sugerencias
importante
valores
numéricos
pesos
utilizar
razonar
acerca
prioridades
Requisito
Tipo
SA
Riesgo
Naturaleza
crítica
Suma
P.
Procesar
Venta
CU
15
Registrar
Caract
Gestionar
Devoluciones
CU
Peso
Rango
SA
Significativo
Arquitectura
0-3
Riesgo
tecnol
complejo
0-3
Naturaleza
crítica
valor
alto
negocio
inicial
0-3
proyecto
valores
exactos
deberían
tomarse
demasiada
se-
riedad
termine
utilizar
puntuaciones
numéricas
ayudar
agrupar
requisitos
conjuntos
difusos
prioridad
alta
media
baja
Claramen-
importante
trabajar
ca
so
Procesar
Venta
primeras
itera-
ciones
números
registrar
característica
simple
riesgo
significativo
arquitectura
integrarse
completamente
código
principio
difícil
disminuye
integridad
arquitectura
añadirlo
posteriori
INTRODUCCIÓN
CUESTIONES
RELACIONADAS
PLANIFICACIÓN
ITERATIV
539Priorización
requisitos
PDV
NuevaEra
base
métodos
priorizar
establecer
grupos
difusos
re-
quisitos
términos
artefactos
UP
clasificación
recoge
Plan
Desarrollo
Software
UP
Requisitos
Prioridad
caso
característica
Comentario
Alta
Procesar
Venta
Puntuación
alta
criterios
clasificación
Registrar
Generalizado
Difícil
añadir
Media
Gestionar
Usuarios
Influye
subdominio
seguridad
Autenticar
Usuarios
Proceso
importante
difícil
Baja
Cerrar
Caja
Fácil
efecto
mínimo
arquitectura
Desconectar
ídem
casos
Marcha
Desconectar
Prácticamente
sistemas
caso
Marcha
implícito
explícito
prioridad
alta
criterios
ne-
cesario
abordar
visión
simplificada
Marcha
prime-
ra
iteración
proporcione
incializaci
ón
asumen
casos
iteración
desarrolla
incrementalmente
caso
Marcha
satisfacer
necesidades
comienzo
casos
aná-
loga
sistemas
caso
Desconectar
sistemas
complejo
sconectar
conmutador
telecomunicacione
activo
términos
planificación
sencillos
casos
listar
in-
formalmente
Plan
Iteración
implementar
puesta
marcha
desco-
nexión
necesite
Obviamente
versiones
complejas
necesitan
cuiden
requisitos
planificación
Advertencia
Planificación
proyecto
vs
objetivos
aprendizaje
objetivo
libro
ofrecer
ayuda
aprendizaje
introducción
aná-
lisis
diseño
lugar
funcione
realmente
proyecto
PDV
tomado
licencias
elección
aborda
primeras
iteraciones
caso
estudio
motivado
objetivos
educativos
lugar
obje-
tivos
proyecto
540
UML
PATRONES36.2
Priorización
riesgos
proyecto
método
útil
priorizar
riesgos
proyecto
global
estimar
probabilidad
impacto
co
ste
tiempo
sfuerzo
stimación
podr
ía
cuantitativa
normalmente
speculativas
simplemente
cualitativas
ejemplo
alto
medio-bajo
basado
discusiones
votaciones
puntos
grupo
peores
ries-
gos
naturalmente
probables
impacto
alto
ejemplo
Riesgo
Probabilidad
Impacto
Ideas
atenuarlo
Número
insuficiente
calidad
Leer
libro
desarrolladores
orientados
Contratar
consultores
temporales
objetos
expertos
Educación
aulas
tutorías
Diseño
programación
parejas
Demostración
preparada
Contratar
consultores
temporales
próxima
convención
especialistas
desarrollo
sistemas
POS-World
Hamburgo
PDV
Java
Identificar
requisitos
atractivos
queden
demostración
darles
prioridad
Maximizar
componentes
prefabricados
términos
artefactos
UP
sto
forma
Plan
sarrollo
Software
36.3
Planificación
adaptable
vs
predictiva
ideas
desarrollo
iterativo
adaptación
basada
retroali-
mentación
lugar
intentar
predecir
planificar
detalle
proyecto
completo
consecuencia
UP
crea
Plan
Iteraci
ón
iteración
allá
iteración
deja
abierto
plan
detallado
ajuste
adaptable
futuro
Figura
36.1
fomentar
comportamiento
flexible
oportunista
razón
sencilla
planificar
proyecto
completo
de-
talle
desarrollo
iterativo
requisitos
detalles
diseño
tan-
to
etapas
conocen
comienzo
proyecto1
preferencia
confiar
juicio
planificaci
ón
equipo
conforme
proceden
Finalmente
suponga
hubiese
plan
detallado
grano
fino
comienzo
proyecto
equipo
desvía
adquirir
percepción
ejecutar
proyecto
me-
jor
exterior
verse
tipo
fallo
justo
contrario
INTRODUCCIÓN
CUESTIONES
RELACIONADAS
PLANIFICACIÓN
ITERATIV
541
conocen
realmente
fiable
proyecto
cascada
planifique
ma-
nera
detallada
proyecto
completo
conocieran
objetivos
hitos
desarrollo
adaptable
significa
equipo
fechas
hitos
objetivos
desarrollo
ite-
rativo
equipo
llega
compromiso
fechas
objetivos
camino
detallado
alcanzarlos
flexible
ejemplo
equipo
NuevaEra
es-
tablecer
hito
meses
completarán
casos
Procesar
Venta
Ges-
tionar
Devoluciones
Autenticar
Usuarios
yl
características
registrar
reglas
co-
nectables
punto
clave
define
detalle
plan
camino
grano
fino
iteraciones
fijadas
semanas
hito
fija
orden
etapas
iteración
siguientes
meses
únicamente
planifica
iteración
semanas
equipo
adapta
paso
paso
trabajando
cumplir
objetivos
fecha
entrega
dependencias
componentes
recursos
naturalmente
restringen
orden
tra-
actividades
necesitan
planifiquen
detalle
grano
fino
personal
involucrado
externo
ve
plan
macro-nivel
nivel
me-
ses
equipo
compromete
organización
micro-nivel
deja
me-
jor
adaptable
juicio
equipo
beneficie
percepciones
Figura
36.1
Finalmente
UP
prefiere
planificaci
ón
adaptable
grano
fino
planificar
éxito
iteraciones
ni-
veles
crecientes
desconfianza
conforme
requisitos
arquitectura
estabilizan
equipo
madura
datos
recogen
velocidad
desarrollo
542
UML
PATRONES
Figura
36.1
hitos
importantes
evite
planificación
detallada
predice
futuro
lejano
desarrollo
adaptable
significa
evitar
planificación
predictiva
ocurrirá
iteraciones
futuras
detalle
planifica
iteraciones
adapta
Requisitos
planificados
especulativa
iteración
futura
lejana
proyecto
punto
mitad
iteración
razonable
planificar
iteración
posiblemente
allá
basa
predicciones
especulativo
anti-adaptable
HITO
establece
fecha
meses
conjunto
objetivos
desarrollo
planificación
iterativa
adaptable
llegamos
compromiso
relación
fechas
objetivos
intentamos
lograr
nivel
superior
caminos
detallados
llegar
hito
planifican
detalle
iteración
iteración
fomentar
encuentre
adaptable
camino
alcanzar
hito
Correcto36.4
Planes
Fase
Iteración
macro-nivel
establecer
fechas
objetivos
hitos
micro-ni-
vel
plan
hitos
deja
flexible
futuro
inmediato
ejemplo
siguientes
semanas
niveles
reflejan
Plan
Fase
Plan
Iteración
UP
forman
Plan
sarrollo
Software
com
puesto
Plan
Fase
expone
fechas
objetivos
hitos
macro-nivel
tales
hitos
fases
pruebas
sistema
piloto
mitad
fase
Plan
Iteración
define
trabajo
iteración
actual
iteraciones
Figura
36.2
INTRODUCCIÓN
CUESTIONES
RELACIONADAS
PLANIFICACIÓN
ITERATIV
543
Figura
36.2
Planes
Fase
Iteración
inicio
elaboración
construcción
páginas
Estima
fechas
fase
hitos
finalización
objetivos
planificación
detallada
Plan
Iteración
onda
enrolla
específica
alto
grado
relación
presente
futuro
inmediato
ejemplo
iteración
transición
Plan
Fase
Plan
Iteración
hito
fase
inicio
hitos
estimados
Plan
Fase
vagos
estima-
base
conjeturas
medida
progresa
elaboración
estimaciones
mejoran
objetivo
fase
elaboración
terminación
suficiente
información
realista
equipo
llegue
compromiso
relación
fe-
chas
objetivos
hitos
importantes
strucción
tran
sición
entrega
proyecto
36.5
Plan
Iteración
iteración
UP
dirigido
casos
implica
organiza
tra-
finalizaci
ón
casos
asigna
iteración
implemente
ás
casos
escenarios
casos
elcaso
completo
complejo
iteración
puesto
requisitos
expresan
casos
características
registrar
reglas
negocio
conectables
asignar
iteraciones
Figura
36.3
544
UML
PATRONES
Figura
36.3
Trabajo
asignado
iteración
Caso
Procesar
Venta
Caso
Procesar
Venta
Caso
Procesar
Venta
Caso
Procesar
Alquileres
Característica
Registro
frecuencia
caso
característica
complejo
complete
iteración
corta
partes
escenarios
asignarse
iteraciones
Normalmente
dedica
iteración
elaboración
innumerables
tareas
generales
instalación
ajuste
herramientas
componentes
aclarar
requi-
sitos
etcétera
priorización
requisitos
guía
elección
trabajo
inicial
ejemplo
caso
Procesar
Venta
claramente
importante
empezamos
abordarlo
iteraci
ón
implementan
escenarios
Procesar
Venta
iteración
escogen
escenarios
simples
ca-
mino
feliz
pago
efectivo
escenario
simple
imple-
mentación
comienza
desarrollar
elementos
centrales
diseño
iteraciones
elaboración
abordarán
requisitos
signifi-
cativos
arquitectura
relacionados
caso
forzando
equipo
tratar
brevemente
aspectos
arquitectura
capas
importantes
base
datos
interfaz
usuario
interfaz
subsistemas
importantes
etcétera
creación
primeras
etapas
implementación
anchura
superficial
partes
sistema
objetivo
común
fase
elaboración
36.6
Traza
requisitos
iteraciones
tarea
crear
Plan
Iteración
trae
cuestión
relevante
desa-
rrollo
iterativo
ilustra
Figura
36.3
sección
implementarán
escenarios
Procesar
Venta
iteración
complejo
caso
tar-dar
completarse
iteraciones
semanas
periodo
meses
iteración
abordará
escenarios
partes
escenarios
cabo
escenarios
caso
ite-
ración
surge
problema
traza
requisitos
recoge
partes
caso
completado
trabajando
actualmente
herramienta
requisitos
construida
trabajo
proporciona
solución
ejemplo
herramienta
Rational
RequisitePro
merece
pena
dedicar
momento
estudio
entender
trabajan
herramientas
mantener
traza
casos
completados
parcialmente
iteraciones
propongamos
herramienta
ofrece
presentación
ilustrar
solución
importante
problema
mantener
traza
ejemplo
herramienta
gestión
requisitos
RequisitePro
integrada
Microsoft
Word
introducir
editar
requisitos
Word
seleccionar
frase
definir
frase
seleccionada
requisito
seguir
pista
RequisitePro
requisito
variedad
atributos
riesgo
etcétera
Figuras
36.4
36.5
herramienta
manejar
proble-
ma
mantener
traza
terminaci
ón
parcial
casos
iteraciones
sentencias
escenarios
principales
éxito
extensiones
pue-
den
representar
individualmente
requisitos
seguir
pista
INTRODUCCIÓN
CUESTIONES
RELACIONADAS
PLANIFICACIÓN
ITERATIV
545
Figura
36.4
Etiquetado
básico
frases
casos
requisitos
sentencias
seleccionar
marcar
RequisitePro
requisito
seguir
pista
herramienta
inserta
código
UC
cambia
estilo
aparece
pantalla
códigos
UC1
UC2
significan
casos
requisitos
grano
fino
caso
Procesar
Venta
sentencia
identificar
traza
requisito
separado.cada
identificar
valores
propuesto
aprobado
etcétera
36.7
in)validez
primeras
estimaciones
Basura
entra
basura
sale
estimaciones
hechas
información
fiable
di
fusa
fiables
difusas
UP
entiende
estimaciones
ha-
cen
fa
inicio
fiar
sto
cumple
métodos
UP
reconoce
estimaciones
iniciales
fase
inicio
proporcionan
guía
merece
pena
haga
studio
real
elaboraci
ón
generar
stimación
spués
iteraci
ón
elaboraci
ón
contamos
informaci
ón
realista
producir
stimación
aproximada
iteración
estimación
comienza
cobrar
credibilidad
Fi-
gura
36.6
estimaciones
útiles
requieren
investigación
iteraciones
ela-
boración
significa
imposible
merezca
pena
intentar
estimaciones
precisas
principio
mayoría
organiza-
ciones
encuentran
caso
razones
encuentran
con-
tinua
introducción
tecnologías
aplicaciones
compli-
caciones
UP
aboga
trabajo
realista
elaboración
generar
estimaciones
utilizan
planificación
proyecto
elaboración
presupuestos
546
UML
PATRONES
Figura
36.5
requisito
etiquetado
atributos
asignar
valores
atributos
requisitos
curso
Posteriormente
utilizar
herramienta
informes
mostrar
requisitos
requisitos
completado
curso.36.8
Organización
artefactos
proyecto
UP
organiza
artefactos
función
disciplinas
Modelo
Casos
Especificación
Complementaria
disciplina
Requisitos
Plan
De-
sarrollo
Software
forma
disciplina
Gestión
Proyecto
etcétera
organice
carpetas
control
versiones
sistema
directorios
reflejar
disciplinas
coloque
artefactos
disciplina
carpeta
disciplina
re-
lacionada
Figura
36.7
INTRODUCCIÓN
CUESTIONES
RELACIONADAS
PLANIFICACIÓN
ITERATIV
547
Figura
36.6
Estimación
fases
proyecto
inicio
elaboración
construcción
estimaciones
fase
inicio
utilizan
llegar
compromiso
acerca
duración
proyecto
esfuerzo
proporcionan
guía
decidir
merece
pena
continuar
elaboración
cabo
investigación
realista
fase
elaboración
comienza
surgir
estimación
creíble
iteraciones
elaboración
cerca
llevado
cabo
estudio
suficientemente
realista
generar
llegar
compromiso
acerca
estimaciones
esfuerzo
duración
proyecto
global
Figura
36.7
Organice
artefactos
UP
carpetas
corresponden
disciplinas
carpeta
Requisitos
casos
artefactos
requisitos
carpeta
Gestión
Proyecto
artefactos
planificación
organización
funciona
ía
elementos
im-
plementación
artefactos
implementación
base
datos
actual
ficheros
ejecutables
encuentran
comúnmente
ubicaciones
diversos
motivos
implementación
Sugerencia
iteración
utilice
herramienta
control
versiones
crear
punto
control
etiquetado
congelado
elementos
carpetas
in-
cluyendo
código
fuente
versión
Elaboración-1
Elaboración-2
su-
cesivamente
artefacto
estimación
posterior
velocidad
equipo
proyecto
puntos
control
proporcionan
datos
reales
can-
tidad
trabajo
iteración
36.9
cuestiones
planificación
iteración
equipo
Equipos
desarrollo
paralelo
proyecto
normalmente
divide
trabajos
desarrollo
paralelo
equipos
trabajan
paralelo
organizar
equipos
líneas
arquitectura
capas
subsistemas
estructura
organizacional
conjuntos
características
corresponderse
organización
arquitectura
ejemplo
•E
quipo
capa
dominio
equipo
subsistema
dominio
•E
quipo
interfaz
usuario
•E
quipo
internacionalización
•E
quipo
servicios
técnicos
equipo
persistencia
etc.
Equipos
iteraciones
longitud
vece
sarrollo
subsistema
servicio
per
sistencia
nivel
significativamente
utilizable
requiere
tiempo
especialmente
du-
rante
primeras
etapas
lugar
alargar
longitud
iteración
global
to-
equipos
alternativa
mantener
iteración
corta
general
objetivo
548
UML
PATRONES
Figura
36.8
Diversas
longitudes
iteraciones
Equipo
Interfaz
Usuario
Equipo
Capa
Dominio
Equipo
Servicio
Persistencia
Iteración
Iteración
Iteraciónrespetable
mayoría
equipos
longitud
doble
equipo
len-
to
Figura
36.8
Velocidad
equipo
adopción
incremental
proceso
nece
sitar
iteracione
ás
largas
equipo
motivo
alargar
iteración
ejemplo
semanas
relacio-
nado
velocidad
experiencia
equipo
equipo
mu-
chas
pr
ácticas
tecnolog
ías
naturalmente
ás
spacio
nece
sitará
tiempo
completar
iteración
Equipos
experiencia
beneficia-
rán
iteraciones
ligeramente
largas
equipos
experiencia
Nótese
sarrollo
iterativo
proporciona
mecanismo
mejorar
sti-
mación
velocidad
progreso
real
primeras
iteraciones
es-
timaciones
iteraciones
posteriores
Relacionado
estrategia
adopción
incremental
proceso
primeras
iteraciones
equipos
experiencia
asumen
conjunto
pequeño
prácticas
medida
miembros
equipo
digieren
dominan
añaden
asumiendo
útiles
ejemplo
primeras
iteraciones
equipo
po-
dría
construir
probar
sistema
ía
iteraciones
posteriores
adoptar
integraciones
continuas
pruebas
sistema
suceden
herramienta
integraci
ón
continua
libre
di
stribución
Cruise
Control
cruisecontrol.sourceforge.net
36.10
entendió
planificación
UP
•T
odas
iteraciones
planifican
especulativa
detalle
prediciendo
trabajo
objetivos
iteración
espera
primeras
estimaciones
fase
inicio
itera-
ción
elaboración
fiables
utilizan
llegar
compromisos
pro-
yecto
plazo
generalizando
esperan
estimaciones
fiables
investiga-
ciones
triviales
ligeras
problemas
sencillos
cuestiones
riesgo
abordan
primeras
iteraciones
estimación
organización
proceso
planificación
presenta
continuación
entendió
planificación
propone
UP
comienzo
fa
planificación
anual
identifican
sistemas
características
alto
nivel
ejemplo
Sistemas
Web
gestión
contabilidad
encargados
técnicos
tiempo
estimar
espe-
culativa
esfuerzo
duración
proyectos
caros
arriesgados
involucran
frecuencia
tecnologías
INTRODUCCIÓN
CUESTIONES
RELACIONADAS
PLANIFICACIÓN
ITERATIV
5493
stablece
planificación
presupuesto
proyectos
año
personas
involucradas
preocupan
proyectos
reales
co-
rresponden
estimaciones
originales
Paso
enfoque
carece
estimación
realista
refinada
iterativamente
basada
investigaciones
serias
promueve
UP
36.11
Lecturas
adicionales
Software
Project
Management
Unified
Framework
Royce
proporciona
pers-
pectiva
iterativa
UP
gestión
planificación
proyectos
Surviving
Object-Oriented
Projects
Manager’s
Guide
Cockburn
contiene
in-
formación
útil
acerca
planificación
iterativa
transición
proyectos
iterati-
vos
tecnología
objetos
The
Rational
Unified
Process
An
Introduction
Kruchten
contiene
capítulos
útiles
de-
dicados
especialmente
gestión
planificación
proyectos
UP
advertencia
libros
plantean
discutir
planificación
de-
sarrollo
iterativo
Proce
so
Unificado
realmente
sconden
enfoque
planificación
cascada
predictivo
Rapid
Development
McConnell96
ofrece
excelente
visión
global
prác-
ticas
cuestiones
relacionadas
gestión
planificación
proyecto
riesgos
proyecto
550
UML
PATRONESObjetivos
Introducir
ampliar
temas
UP
Introducir
prácticas
aplicables
desarrollo
iterativo
•E
tudiar
ciclo
vida
iterativo
ayudar
reducir
problemas
desarrollo
37.1
prácticas
conceptos
UP
adicionales
idea
importante
apreciar
pr
áctica
UP
desa-
rrollo
adaptable
iteraciones
cortas
duración
fija
prácticas
conceptos
claves
adicionales
UP
encontramos
Abordar
uestiones
lto
riesgo
valor
primeras
iteraciones
ejemplo
sistema
servidor
aplicaciones
ges-
tionar
2.000
clientes
concurrentes
tiempo
re
spuesta
transacción
espere
meses
años
diseñar
implementar
requisito
alto
riesgo
céntrese
rápidamente
diseñar
programar
probar
componentes
esenciales
software
arquitectura
cues-
tión
arriesgada
deje
trabajo
fácil
iteraciones
posteriores
idea
dis-
minuir
riesgos
altos
primeras
iteraciones
proyecto
fracase
característica
proyectos
cascada
retrasan
temas
dif
íciles
arrie
sgados
etapa
po
steriores
ciclo
vida
fracasar
fracasa
cosas
difíciles
Capítulo
37
COMENTARIOS
ACERCA
DESARROLLO
ITERATIVO
YE
UP
Deberías
utilizar
desarrollo
iterativo
proyectos
quieras
éxito
Martin
Fowlereste
UP
stá
dirigido
riesgo
Finalmente
obsérvese
riesgo
llega
formas
falta
habilidades
recursos
desafíos
téc-
nicos
facilidad
política
etcétera
formas
influyen
abordar
primeras
iteraciones
Usuarios
involucrados
continuamente
desarrollo
iterativo
UP
tratan
pequeños
pasos
rápidamente
obtener
retroalimentaci
ón
requiere
continua
atención
implicación
personas
involucradas
negocio
yl
expertos
materia
estudio
clarificar
dirigir
proyecto
prin-
cipio
personal
negocio
podr
ía
sentir
imposición
em-
bargo
correlación
mayoría
proyectos
fracasado
falta
implicaci
ón
usuarios
Standish94
enfoque
propor
ciona
per
sonal
negocio
capacidad
forma
software
real-
mente
necesitan
proyectos
usuario
cualquiera
sitio
web
producto
consumidor
grupos
interesados
actuar
sustitutos
Atención
primeras
etapas
construir
arquitectura
básica
cohesiva
UP
centrado
arquitectura
relacionado
abor-
cuestiones
alto
rie
sgo
primeras
iteraciones
puesto
normal-
mente
establecer
elementos
básicos
arquitectura
elemento
arries-
gado
crítico
primeras
iteraciones
centran
implementaci
ón
arquitectura
anchura
ysuperficial
estableciendo
cuestiones
diseño
im-
portantes
subsistemas
interface
re
sponsabilidades
equipo
investigará
áreas
verticalmente
profundas
requisitos
específicos
difíci-
arriesgados
requisito
transacciones
2.000
clientes
concurrentes
Verificar
continuamente
calidad
principio
frecuencia
ca-
lidad
contexto
abarca
satisfacer
superar
correctamente
requisitos
proceso
sostenible
repetible
software
fácil
mantenimiento
escalable
razón
campaña
temprana
continua
inten
siva
pruebas
inspec-
ción
aseguramiento
calidad
coste
defecto
tard
ío
incre-
menta
lineal
fases
proyecto
desa-
rrollo
iterativo
ba
sa
retroalimentaci
ón
adaptaci
ón
pruebas
evaluación
realistas
primeras
etapas
actividades
críticas
obtener
retroalimentación
significativa
difiere
proyecto
cascada
don-
etapa
seguramiento
calidad
cerca
proyecto
respuesta
difícil
costosa
UP
verificación
ca-
lidad
integra
continua
principio
gran-
des
sorpresas
cerca
proyecto
Observe
UP
verificación
calidad
refiere
calidad
proceso
iteración
evaluando
equipo
Aplicar
casos
Informalmente
casos
historias
escritas
sistema
mecani
smos
explorar
recoger
requisitos
fun-
cionales
diferencia
estilo
antiguo
lista
funciones
lista
sistema
deber
UP
recomienda
apliquen
casos
so
forma
principal
captura
requisitos
fuerza
dirige
planificaci
ón
diseño
prueba
scritura
documentaci
ón
usuario
552
UML
PATRONES•
Modelar
software
visualmente
porcentaje
importante
cerebro
personas
implicado
procesamiento
visual
motiva-
ciones
presentación
visual
gráfica
información
Tuf-
te92
conveniente
emplear
lenguajes
textuales
texto
código
lenguajes
simbólicos
basados
diagramas
visuales
orientación
espacial
UML
beneficia
ventajas
natura-
cerebro1
abstracción
práctica
útil
razonar
diseños
software
comunicarlos
permite
centrarnos
as-
pectos
importantes
ocultamos
ignoramos
detalles
producen
rui-
do
lenguaje
visual
UML
permite
visualizar
razonar
mo-
delos
abstractos
software
pasando
rápidamente
di
seño
squemas
forma
diagramas
ideas
estudiará
exis-
punto
dulce
UML
demasiados
diagramas
Gestión
requisitos
cuidadosa
significa
estilo
cas-
definir
completamente
congelar
requisitos
fase
pro-
yecto
implica
descuidado
habilidoso
elicita-
ción
scritura
signación
prioridade
stablecimiento
traza
mantenimiento
pi
sta
ciclo
vida
requisitos
normal-
mente
soporte
herramienta
obvio
impresión
rara
pone
práctica
gestión
requisitos
pobre
fac-
tor
común
proyectos
problemas
Standish94
Control
cambios
práctica
comprende
ideas
gestión
peticiones
cambios
proyecto
UP
iterativo
acepta
cambios
acepta
caos
surge
solicitud
requisito
itera-
ciones
lugar
jovial
problemas
evaluación
racional
sfuerzo
impacto
acepta
modifica
planificaci
ón
incluye
idea
mantener
pi
sta
ciclo
vida
peti-
ciones
cambio
solicitado
curso
gestión
configuraciones
utilizan
herramientas
gestión
configuraciones
construcción
so-
porte
frecuente
idealmente
diariamente
integración
pruebas
sistema
desarrollo
paralelo
áreas
trabajo
desarrolladores
configu-
raciones
separadas
control
versiones
comienzo
proyecto
UP
bienes
proyecto
código
deberían
con-
trol
configuraciones
versiones
37.2
fases
construcción
transición
Construcción
elaboración
termina
resuelto
cuestiones
alto
riesgo
com-
pletado
núcleo
central
esqueleto
arquitectura
entendido
mayoría
requisitos
elaboración
estimar
realista
esfuerzo
duración
restante
proyecto
COMENTARIOS
ACERCA
DESARROLLO
ITERATIVO
UP
553
motivo
utilizar
colores
diagramas
miembro
equipo
daltónico
ejemplo
véase
CDL99].Le
fase
co
nstrucción
cuyo
prop
ósito
sencialmente
terminar
construir
aplicación
pruebas
alpha
preparar
pruebas
beta
fase
transición
preparar
despliegue
actividades
tales
escritura
guías
usuario
ayuda
on-line
resume
carne
esqueleto
creado
elaboración
elaboración
caracterizar
construye
núcleo
sistema
arriesgado
significativo
arquitectura
construcción
describir
struye
resto
desa-
rrollo
avanza
serie
iteracione
fija
duraci
ón
personal
recomienda
utilice
equipo
pequeño
cohesivo
elaboración
ampliar
tamaño
equipo
strucción
probablemente
equipos
paralelo
desarrollando
fase
Transición
construcción
termina
sistema
preparado
des-
pliegue
operacional
completado
materiale
soporte
guías
usuario
materiale
aprendizaje
etc
étera
fase
transición
cuyo
prop
ósito
sistema
producci
ón
podr
ía
incluir
actividade
prueba
beta
reaccionar
retroalimentaci
ón
pruebas
beta
pequeño
ajustes
conversión
datos
cursos
entrenamiento
marketing
lanzamiento
producto
funcionamiento
paralelo
antiguo
nuevosistema
cosas
estilo
37.3
prácticas
interesantes
lista
exhaustiva
prácticas
interesantes
documentadas
explícitamente
UP
valor
proyecto
iterativos
cuentran
•E
patrón
proceso
SCRUM
BDSSS00
véase
www.controlchaos.com
concreto
reunión
SCRUM
diaria
pie
15
minutos
jefe
proyecto
pregunta
persona
cosas
hechas
reunión
objetivos
obstáculos
jefe
eli-
mine
preguntado
miembro
percepciones
relevantes
compartir
equipo
reunión
fomenta
comportamiento
equipo
adaptable
emerge
medidas
progreso
grano
fino
comunicación
alta
densidad
socialización
proyectos
ideas
claves
equipo
libre
distracciones
externas
añade
trabajo
adicional
equipo
iteración
trabajo
gestión
eliminar
obstáculos
distracciones
equipo
centrarse
pr
ácticas
Programación
Extrema
XP
Extreme
Programming
Beck00
programarp
robando
scribir
prueba
unidad
código
probar
escribir
pruebas
cla-
ses
trabajando
Java
JUnit
www.junit.org
framework
pruebas
conocido
libre
distribución
Escriba
pruebas
escriba
código
haga
pase
pruebas
repita
esencial
escriban
pruebas
lugar
experimentar
valor
enfoque
554
UML
PATRONES•
Integración
continua
práctica
XP
véase
Beck00
obtener
intro-
ducción
www.martinfowler.com
detalles
UP
incluye
práctica
integrar
sistema
completo
iteración
abrevia
frecuencia
práctica
construcción
diaria
Integración
continua
acorta
integrando
ódigo
registra
meno
horas
manualmente
alternativa
uti-
lizar
entorno
automatice
integración
continua
pruebas
máquina
strucción
rápida
ejecuta
proce
so
demonio
Periódicamente
despierta
minutos
busca
código
registrar
dispara
ejecución
script
prueba
reconstrucción
disponible
libremente
sistema
integración
continua
proyectos
Java
denominado
Cruise
Control
libre
distribución
SourceForge
cruisecontrol.sourceforge.net
37.4
Motivos
fijar
duración
iteración
motivos
fijar
duración
iteración
ley
Parkinson
Parkinson
decepción
observó
trabajo
expande
rellena
tiempo
di
sponible
terminaci
ón
Parkin
son58
Fechas
finalización
distantes
difusas
ejemplo
meses
agravan
efecto
Cerca
comienzo
proyecto
parecer
tiempo
proceder
prisa
fecha
finalización
iteración
semanas
colocar
sistema
parcial
ejecutable
proba-
do
fecha
equipo
centrarse
tomar
decisiones
moverse
asignar
prioridades
decisión
as
iteraciones
cortas
duración
fija
fuerzan
equipo
desarrollo
tomar
decisiones
teniendo
prioridad
trabajo
riesgos
identificar
valor
alto
negocio
técnico
ye
stimar
trabajo
ejemplo
embarcado
iteración
elegido
dure
exactamente
semanas
libertad
vago
tomar
decisiones
concretas
hará
realmente
pri-
meras
semanas
satisfacción
equipo
iteraciones
cortas
duración
fija
llevan
rápida
repetida
sensación
terminación
competencia
finalización
ciclos
or-
dinarios
semanas
equipo
experiencia
terminar
lugar
trabajar
lentamente
meses
terminar
factores
psicológicos
im-
portantes
satisfacción
trabajo
individual
generar
confianza
equipo
Cuarto
confianza
personal
involucrado
equipo
lle
ga
com
promiso
público
producir
ejecutable
estable
periodo
corto
tiempo
fecha
concreta
do
semanas
per
sonal
negocio
personas
implicadas
incrementan
confianza
equipo
proyecto
37.5
ciclo
vida
secuencial
cascada
diferencia
ciclo
vida
iterativo
UP
antigua
alternativa
ciclo
vida
secuencial
lineal
cascada
Royce70
asociado
procesos
predictivos
COMENTARIOS
ACERCA
DESARROLLO
ITERATIVO
UP
555En
pr
áctica
habitual
ciclo
vida
ca
scada
define
etapa
parecidas
si-
guientes
Clarificar
recoger
llegar
compromiso
conjunto
requisitos
finales
Di
señar
sistema
base
requisitos
Implementar
ba
sado
diseño
Integrar
ódulos
dispares
Evaluar
probar
corrección
calidad
proceso
desarrollo
basado
ciclo
vida
cascada
asocia
comportamientos
aptitudes
Definición
completa
cuidadosa
artefacto
ejemplo
requisitos
diseño
pasar
etapa
Comprometerse
conjunto
congelado
requisitos
detallados
desviación
requisitos
diseño
etapas
posteriores
indican
fallo
suficientemente
habilidoso
exhaustivo
próxima
intente
empeño
proceso
cascada
similar
enfoque
ingeniería
cons-
truyen
edificios
puentes
adopción
desarrollo
software
pa-
rezca
estructurado
análogo
ingenier
ía
campo
alg
ún
tiempo
proceso
cascada
enfoque
aprendieron
ás
desarrolladores
software
directores
autores
profesores
estudiantes
repetían
investigar
crítica
aplicabilidad
desarrollo
software
cosas
deberían
construir
edificios
tales
edifi-
cios
normalmente
software
capítulo
preliminar
acerca
UP
estudio
años
presentado
MIT
loan
anagement
Review
acerca
proyecto
software
exitosos
identificó
factores
comunes
éxito
desarrollo
iterativo
lugar
ciclo
vida
cascada
lista
MacCormack01
problemas
ciclo
vida
cascada
metáfora
strucción
sobrevivido
utilidad
mo
mento
cambiar
estructuras
conceptuales
construimos
complicadas
especifiquen
precisión
adelantado
dema
siado
complejas
cons-
truyan
errores
debemos
utilizar
enfoque
radicalmente
di-
ferente
desarrollo
iterativo
incremental
Frederick
Brooks
Silver
Bullet
The
Mythical
Man-Month
escala
tiempo
requisitos
diseño
par-
di
seño
implementaci
ón
inevitable
sensato
proyecto
corto
meses
utilizar
ciclo
vida
secuencial
iteración
indi-
vidual
desarrollo
iterativo
proyecto
cascada
corto
556
UML
PATRONESSin
comienzan
aparecer
dificultades
scala
tiempo
alarga
complejidad
pa
sa
alta
decisiones
especulativas
incrementan
complican
retroalimentación
general
cuestiones
alto
riesgo
abordando
suficientemente
definición
intenta
mayo-
ría
trabajo
requisitos
sistema
completo
avanzar
mayoría
diseño
pasar
abordan
etapa
largas
toman
decisiones
beneficio
retroalimentaci
ón
concreta
implementacione
pruebas
reales
escala
mini-proyecto
semanas
iteración
uti-
lizar
secuencia
lineal
requi
sitos-diseño-implementación
grado
compromi
sos
especulativos
requisitos
diseño
zona
peli
grosa
medida
amplía
escala
especulación
riesgo
problemas
relacionados
proceso
cascada
escala
proyec-
to
completo
encontramos
Mitigación
riesgo
atrasada
abordando
problemas
alto
riesgo
difíciles
•E
peculación
inflexibilidad
requisitos
diseño
Alta
complejidad
Baja
adaptabilidad
Mitigación
problemas
ciclo
vida
iterativo
desarrollo
iterativo
bala
ágica
safío
sarrollo
soft-
ware
ayuda
reducir
problemas
agravados
ciclo
vida
ca
s-
lineal
Problema
Mitigación
riesgo
atrasada
riesgo
aparece
formas
diseño
incorrecto
conjunto
requisitos
equi-
vocado
entorno
político
extraño
falta
habilidades
recursos
facilidad
et-
cétera
ciclo
vida
cascada
intento
activo
identificar
mitigar
lugar
cuestiones
riesgo
ejemplo
arquitectura
incorrecta
sitio
web
alta
carga
alta
disponibilidad
causar
retrasos
costosos
cosas
peores
proceso
cascada
validación
adecuación
arquitectura
tie-
ne
lugar
tiempo
especifiquen
inevitablemente
im-
perfecta
requisitos
diseño
importante
etapa
posterior
implementación
meses
años
fase
incio
proyecto
Figura
37.1
scasez
historias
equipos
se-
parados
hayan
construido
subsistemas
periodo
inten-
taran
integrar
comenzar
pruebas
sistema
global
cerca
pro
yecto
previsiblemente
resultados
dolorosos
COMENTARIOS
ACERCA
DESARROLLO
ITERATIVO
UP
557Mitigación
cambio
desarrollo
iterativo
objetivo
identificar
mitigar
cuestiones
riesgo
riesgos
altos
encontrarse
diseño
núcleo
arquitectura
facilidad
interfaces
personal
involucrado
im-
plica
abordan
lugar
ilustra
Figura
37.2
primeras
iteraciones
centran
disminuir
riesgo
Continuando
ejemplo
an-
terior
sitio
web
carga
alta
enfoque
iterativo
es-
tudio
requisitos
trabajo
diseño
equipo
lugar
diseña
imple-
menta
prueba
reali
sta
suficiente
úcleo
arquitectura
demostrar
encuentran
camino
adecuado
re
specto
carga
dis-
ponibilidad
pruebas
demuestran
equivocados
adaptan
diseño
básico
primeras
etapas
proyecto
lugar
cerca
558
UML
PATRONES
Figura
37.1
Ciclo
vida
cascada
riesgos
Figura
37.2
Ciclo
vida
iterativo
riesgos
Problema
Especulación
inflexibilidad
requisitos
suposición
fundamental
proceso
cascada
requisitos
especificar
completo
congelan
fase
proyecto
ta-les
proyectos
esfuerzo
lugar
análisis
requisitos
completo
culminando
conjunto
artefactos
requisitos
revisan
concluidos
Normalmente
resulta
suposición
fallo
esfuerzo
ob-
requisitos
definidos
dados
concluidos
trabajo
diseño
implementación
probable
irónicamente
incremente
dificultades
proyec-
to
lugar
mejorarlas
difícil
responder
proyecto
oportunidad
negocio
cambio
software
Garantizado
proyectos
necesitan
realice
lugar
esfuerzo
especificar
completamente
preci
sión
requisitos
espe-
cialmente
software
acopla
construcción
componentes
físi-
cos
ejemplos
encontramos
dispositivos
aviación
médicos
nóte-
caso
desarrollo
iterativo
aplicarse
provecho
proceso
diseño
implementación
investigación
suscita
interés
crítica
mito
capaz
de-
finir
lugar
éxito
requisitos
procede
Jones97
ilus-
tra
Figura
37.3
amplio
estudio
6.700
proyectos
requisitos
arrastra-
anticiparon
cerca
comienzo
significativo
vida
desarrollo
software
variando
25%
proyectos
ta-
maño
50%
amplios
Boehm
Papaccio
pre
sentan
conclu-
siones
basadas
investigaciones
análogas
BP88
actitudes
cascada
lu-
chan
simplemente
niegan
asumiendo
requisitos
diseños
especificar
congelar
incongruentes
mayoría
rea-
lidades
proyectos
COMENTARIOS
ACERCA
DESARROLLO
ITERATIVO
UP
559
Figura
37.3
requisitos
cambian
fuerza
inevitable
desarrollo2
puntos
función
describen
complejidad
sistema
métrica
independiente
lenguaje
programación
véase
www.ifpug.org).Por
única
constante
cambio
normalmente
personas
involucradas
cambian
idea
imaginarse
quieren
ven
sistema
concreto3
•E
mercado
cambia
especificación
validada
correctamente
detallada
preci
sa
desafío
psi-
cológico
organizativo
ía
per
sonas
involucradas
Kruch
ten00
problemas
previsibles
ve
frecuencia
surgen
proyectos
cascada
Puesto
realidad
cambio
significativo
inevitable
incluyen
describió
anteriormente
descubrimiento
mitigación
altos
riesgos
re-
trasado
sentimiento
negativo
miembros
equipo
vivir
ficci
ón
fracaso
proyecto
realidad
cambios
corresponde
ideal
realización
amplia
costosa
inversión
diseño
implementación
incorrectos
puesto
basa
requisitos
incorrectos
•F
alta
sensibilidad
deseos
usuarios
oportunidades
mer-
cado
cambian
Mitigación
desarrollo
iterativo
especifican
requisitos
diseño
im-
plementación
stabilizan
requi
sitos
sta
spués
meno
varia
iteraciones
ejemplo
define
subconjunto
requisitos
básicos
ejemplo
taller
requisitos
equipo
selecciona
subconjunto
diseño
implementación
normalmente
base
riesgo
valor
negocio
alto
iteración
semanas
personal
involucrado
reúne
se-
gundo
taller
requisitos
revisan
intensiva
sistema
par-
cial
aclaran
modifican
solicitudes
iteración
corta
semanas
implementa
incrementalmente
sistema
personas
involucra-
das
reúnen
tercer
taller
requisitos
refinan
alturas
re-
quisitos
comienzan
estabilizarse
representar
alcance
intenciones
clarificadas
personas
involucradas
alturas
determinar
plan
realista
estimación
trabajo
restante
iteraciones
caracteri-
zarse
fase
elaboración
UP
admiten
cambio
posteriores
requi
sitos
inte
racción
primeras
iteraciones
trabajo
implementaci
ón
paralelo
an
áli-
sis
requisitos
obtiene
retroalimentaci
ón
implementaci
ón
parcial
definici
ón
requisitos
fase
elaboraci
ón
560
UML
PATRONES
Barry
Boehm
llamado
efecto
sabré
vea”
Problema
Especulación
inflexibilidad
diseño
idea
central
ciclo
vida
cascada
arquitectura
diseño
deberían
especificarse
completo
fase
importante
proyecto
aclarado
requisitos
tales
proyectos
esfuerzo
describir
fondo
arquitectura
completa
diseños
objetos
in-
terfaz
usuario
esquema
base
datos
etcétera
comience
im-
plementación
problemas
asociados
suposición
Pue
sto
requisitos
cambiarán
diseño
original
fiable
Herramienta
componentes
entornos
inmaduros
entendidos
decisiones
diseño
especulativas
arriesgadas
demostrarse
in-
correctas
implementación
suponía
servidor
apli-
cación
general
falta
retroalimentación
probar
desaprobar
diseño
has-
ta
tiempo
tomaran
decisiones
diseño
Mitigación
problemas
mitigan
desarrollo
iterativo
construyendo
rápidamente
sistema
validando
diseño
componentes
terceras
partes
pruebas
37.6
Ingeniería
usabilidad
diseño
interfaces
usuario
probablemente
écnica
di
sparidad
importancia
éxito
desarrollo
software
falta
atención
educación
formal
ingeniería
usabilidad
diseño
interfaces
usuario
UI
alcance
introducción
DOO
UP
nótese
UP
incluye
reconocimiento
actividad
modelos
usabilidad
UI
forman
disci-
plina
Requisitos
terminología
UP
guiones
casos
utilizar
describir
abstracta
elementos
interfaz
navegación
relacionan
escenarios
casos
libros
útiles
encontramos
Software
for
Use
Constantine
Lockwood
The
Usability
Engineering
Lifecycle
Mayhew
GUI
Bloopers
Johnson
37.7
Modelo
Análisis
UP
UP
contiene
artefacto
denominado
Modelo
Análisis
necesario
cre-
an
Modelo
Análisis
asignado
nombre
ideal
realmente
tipo
modelo
di
seño
convencional
ejemplo
véase
Coleman+94
MO95
Fowler96
modelo
análisis
sugiere
esencialmente
modelo
objetos
do-
minio
estudio
descripción
conceptos
dominio
Modelo
Aná-
lisis
UP
versión
Modelo
Diseño
UP
describiendo
objetos
software
colaboran
responsabilidades
Citando
textualmente
modelo
análisis
COMENTARIOS
ACERCA
DESARROLLO
ITERATIVO
UP
561es
abstracción
generalización
diseño
Kruchten00
modelo
análisis
verse
corte
modelo
diseño
JBR99
equipo
producto
RUP
staca
opcional
valor
fre-
cuente
fomenta
cree
habitualmente
conjunto
dia-
gramas
crear
implementación
metodologistas
arquitec-
tos
expertos
rara
utilizan
37.8
producto
RUP
producto
RUP
conjunto
documentación
basada
web
cohesivo
diseñado
páginas
HTML
vendido
Rational
Software
describe
Proceso
Uni-
ficado
Rational
refinamiento
actualizado
detallado
UP
general
Describe
artefactos
actividades
roles
proporciona
guías
incluye
plantillas
mayoría
artefactos
Figura
37.4
562
UML
PATRONES
Figura
37.4
producto
RUP
UP
aplicar
adoptar
ayuda
tutore
proceso
libros
ideas
básicas
desarrollo
iterativo
describen
libros
con-
secuencia
necesario
poseer
producto
RUP
obstante
organiza-
ciones
consideran
colocar
producto
basado
web
plantillas
in-
tranet
respetando
licencia
localizaci
ón
visible
mecani
smo
simple
efectivo
extender
gradualmente
adopción
organización
pase
nue-vo
proceso
desarrollo
allá
nivel
superficial
requiere
apoye
va-
rios
modos
tutores
proceso
proyectos
pilotos
seminarios
do-
cumentación
plantilla
ba
sadas
web
proporcionada
producto
RUP
duda
ayudas
útiles
merece
pena
evalúen
37.9
desafíos
mitos
reutilización
UP
desarrollado
proyectos
tecnología
objetos
TO
mente
frecuencia
promueve
adopción
TO
reutilización
software
reutilizar
significativa
objetivo
loable
difícil
función
adoptar
TO
escribir
clases
TO
tecnología
posibilita
conjunto
cambios
técnicos
organizativos
sociales
ocurrir
apreciar
reutilización
significativa
Cier-
tamente
librerías
clases
servicios
técnicos
librerías
tec-
nología
Java
proporcionan
ejemplo
reutilizazión
refiriendo
dificultad
reutilizar
código
creado
organización
librerías
básicas
encuesta
organizaciones
adoptado
TO
preguntó
valor
real
adopción
Curiosamente
reutilización
lista
Cutter97
expertos
organizaciones
experiencia
TO
sorpresa
popular
descripción
prensa
TO
reutilizar
mito
mayoría
organizaciones
ven
implica
ob-
jetivo
valioso
reutilización
merece
pena
habido
altos
niveles
reutilización
sugieren
artículos
libros
desarrolladores
experiencia
TO
contarle
historia
guerra
intento
desorientado
escala
organización
crear
librerías
reutilizables
servicios
compañía
gastando
año
millones
dólares
ter-
minando
proyecto
fracasado
perdió
rumbo
reutilización
di-
fícil
sostener
función
cuestiones
sociales
organizativas
técnicas
Significa
TO
valor
absoluto
valor
asociado
incorrectamente
reutilización
lugar
ayuda
perceptible
práctica
flexibilidad
facilidad
cambio
manejo
complejidad
encuesta
Cutter97
lista
valores
sobresalientes
realmente
experimentan
adoptar
TO
mantenimiento
aplicación
simple
ahorro
costes
sistemas
objetos
diseñan
relativamente
fáciles
om
ás
rápidos
modificar
extender
utilizan
tecnologías
orientadas
ob-
jetos
importante
organizacione
encuentran
ía
costes
globales
plazo
aplicación
revisión
man-
tenimiento
desarrollo
original
importantes
estrategias
permitan
reducir
costes
revisión
racional
querer
reducir
costes
desarrollo
sistemas
irónico
personas
involucradas
pre-
gunten
reducir
costes
revisión
mantenimiento
frecuencia
caro
contribuir
TO
fuerza
elegancia
abordar
sistemas
complejos
COMENTARIOS
ACERCA
DESARROLLO
ITERATIVO
UP
56338.1
Notación
general
Especificaciones
estereotipos
propiedades
etiquetas
estereotipos
utilizan
UML
clasificar
elemento
Figura
38.1
Capítulo
38
NOTACIÓN
UML
Figura
38.1
Estereotipos
propiedades
thread
ObjetoDeSimulacion
miHilo
Thread
delHilo
run
impresión
imprimirBonito
imprimirConciso
estereotipos
utilizan
clasificar
elementos
UML
1.4
elemento
estereotipos
muestra
diagrama
concreto
UML
estereotipos
predefinidos
elementos
thread
interface
Clasificadores
permite
añadan
interface
Runnable
run
autor=
Craig
fechaCreacion
12/1/2037
propiedades
elementos
mostrar
valores
etiquetados
pares
clave-valor
valores
etiquetados
unen
información
arbitraria
elementos
Normalmente
establecen
herramienta
CASE
UML
cuadro
diálogo
propiedades
elemento
UML
etiquetas
predefinidas
elementos
permite
añadan
ejemplo
Clasificador
etiqueta
rango
valores
predefinidos
persistence
persistent
transient
implements»Interfaces
paquetes
representar
paquete
implementa
interfaz
Figura
38.2
566
UML
PATRONES
Figura
38.2
Interfaz
paquete
Persistencia
NuevaEra
interface
IServicioDePersistencia
get(OID
Class
Object
paquetes
indicar
implementación
interfaz
clientes
IServicioDePersistencia
Dependencia
existir
dependencias
elementos
cualesquiera
probablemente
utili-
zan
frecuencia
diagramas
paquetes
UML
ilustrar
de-
pendencias
paquetes
Figura
38.3
Figura
38.3
Dependencias
Clase
Dependiente
ClaseDe
LaQue-Depende
existir
dependencias
elementos
cualesquiera
dependencia
indica
cambio
elemento
depende
afectar
dependiente
ejemplo
dependiente
invocar
crear
importar
extender
elemento
depende
estereotipar
dependencias
indicar
tipo
com.foo.utilidades
java.util
ÇimportÈ
ÇcallÈ
38.2
Diagramas
implementación
UML
define
diagramas
utilizar
ilustrar
detalles
imple-
mentación
utiliza
comúnmente
diagrama
despliegue
ilus-
trar
despliegue
componentes
procesos
nodos
proceso
Diagramas
componentes
Citando
textualmente
componente
representa
sistema
modular
des-
plegable
reemplazable
encapsula
implementación
expone
conjunto
in-
terfaces
OMG01
ejemplo
código
fuente
binario
ejecutable
losejemplos
encontramos
navegadores
servidores
HTTP
base
datos
DLL
fichero
JAR
Enterprise
Java
Bean
componentes
UML
re-
presentan
diagramas
despliegue
lugar
independientemente
Figura
38.4
ilustra
notación
común
NOTACIÓN
UML
567
Figura
38.4
Componentes
UML
file
iostream.cpp
imports
library
winbar.dll
EJBSession
SesionDeCompra
HTTP
componentes
representan
elemento
reemplazable
físico
ilustra
caso
SesionDeCompra
implementar
interfaz
ilustra
iostream.cpp
dependencias
ejemplos
ilustran
estereotipos
comunes
estándar
componentes
process
Dakota
ISesionDeCompra
file
iostream.h
database
TuSQL
browser
Mozzarala
database
BDProductos
file
foo.jar
Diagramas
despliegue
diagrama
spliegue
muestra
configuran
instancias
compo-
nentes
procesos
ejecución
run-time
instancias
nodos
pro-
ceso
memoria
servicios
proceso
Figura
38.5
38.3
Clase
plantilla
parametrizada
genérica
Figura
38.6
muestran
clases
plantilla
instanciación
lenguajes
C++
soportan
clases
plantilla
genéricas
parametri-
zadas
característica
añadirá
lenguaje
Java
ejemplo
C++
ta-
bla
String
Persona
declara
in
stanciación
cla
plantilla
clave
tipo
String
valores
tipos
Persona
38.4
Diagramas
actividades
diagrama
actividades
UML
ofrece
notación
rica
representar
se-
cuencia
actividades
aplicarse
propósito
mostrar
pa-
sos
algoritmo
especialmente
útil
visualizar
flujos
detrabajo
procesos
negocio
casos
flujos
trabajo
disci-
plinas
UP
Modelado
Negocio
propósito
entender
comunicar
estructura
din
ámica
organizaci
ón
splegar
sistema
RUP
artefacto
clave
disciplina
Modelado
Negocio
Modelo
Objetos
Negocio
superconjunto
Modelo
Dominio
UP
visuali-
za
esencialmente
funciona
negocio
utilizando
diagramas
clases
secuencia
actividades
UML
diagramas
actividades
aplican
especial-
mente
disciplina
Modelado
Negocio
UP
568
UML
PATRONES
Figura
38.5
diagrama
despliegue
representar
componente
utiliza
interfaz
implementa
componente
Cliente
Servidor
DBServer
database
productos
YourSQL
browser
Mozzarala
process
Dakota
http
ejb-server
JSlave
EJBSession
SesionDeCompra
ISesionDeCompra
SQL
Observe
componente
contener
componentes
nodo
unidad
proceso
Figura
38.6
Clases
plantilla
tabla
get
TIPO_CLAVE
TIPO_VALOR
put
TIPO_CLAVE
TIPO_VALOR
TIPO_CLAVE
TIPO_VALOR
tabla
bind
String
Persona
notaciones
alternativas
instanciación
clase
plantilla
tabla
String
Persona
notaci
ón
stacada
encontramos
actividades
concurrentes
calles
rela
ciones
flujo
acci
ón-objeto
ilustra
Figura
38.7
adaptado
OMG01
FS00
Formalmente
diagrama
actividad
tipo
especial
diagrama
UML
acciones
transiciones
eventos
disparan
automáticamente
completarse
acción
NOTACIÓN
UML
569
Figura
38.7
Diagrama
actividades
Encargar
Producto
Cliente
Procesamiento
Pedido
Realización
Validar
Pedido
Pedido
colocado
Pedido
pagadoPor
Adelantado
Obtener
Producto
Cobrar
Pago
Pagar
Enviar
urgente
Enviar
ordinario
urgente
Pedido
actividad
transición
completarse
Calles
Opcional
área
responsabilidad
frecuencia
unidad
organizativa
Bifurcación
transición
entrante
múltiples
transiciones
concurrentes
salientes
flujos
objetos
Objeto
Entrada
salida
actividad
Flujo
objeto
Bifurcación
unión
Unión
Múltiples
transiciones
entrantes
flujos
objetos
transición
saliente
Opcional
importante
identificar
único
punto
terminación
Enviar
recibo
Añadir
cliente
lista
Satisfechos
cerveza
transportistas
Comienzo
Opcional
importante
identificar
único
punto
comienzo
terminación)Bibliografía572
BIBLIOGRAFÍA
BIBLIOGRAFÍA
573
574
BIBLIOGRAFÍA
BIBLIOGRAFÍA
575abstracción
acto
reunir
cualidades
esenciales
generales
cosas
similares
características
esenciales
provenientes
cosa
acoplamiento
dependencia
elemento
cla
ses
paquete
subsiste-
típicamente
resultado
colaboración
elementos
proporcionar
servicio
agregación
propiedad
asociación
representa
relación
todo-parte
normalmente
control
tiempo
vida
análisis
estudio
dominio
resultado
modelos
describen
características
estáticas
dinámicas
centra
cuestiones
lu-
gar
análisis
orientado
objetos
estudio
dominio
problema
sistema
fun-
ción
conceptos
dominio
clases
conceptuales
asociaciones
cambios
arquitectura
Informalmente
scripción
organizaci
ón
motivación
s-
tructura
sistema
implicados
niveles
arquitecturas
desarrollo
sistemas
software
arquitectura
hardware
física
arquitectura
lógica
framework
aplicación
asociación
descripción
conjunto
enlaces
relacionados
objetos
clases
asociación
calificada
asociación
cuyos
miembros
particionan
valor
calificador
asociación
recursiva
asociación
fuente
destino
clase
objeto
atributo
característica
propiedad
clase
asigna
nombre
atributo
clase
característica
propiedad
instancias
clase
información
almacena
normalmente
definición
clase
clase
UML
descriptor
conjunto
objeto
comparten
atributos
métodos
relaciones
comportamiento
RJB99
utilizarse
re-
presentar
elementos
software
conceptuales
Glosarioclase
abstracta
clase
utilizar
superclase
clase
crear
objeto
clase
abstracta
instancia
subclase
clase
concreta
clase
instancias
clase
contenedora
clase
designada
guardar
manipular
colección
ob-
jetos
clasificación
clasificación
define
relación
clase
instancias
correspondencia
clasificación
identifica
extensión
clase
colaboración
objetos
participan
relación
cliente
servidor
proporcionar
servicio
composición
definición
clase
instancia
consta
ob-
jetos
concepto
categoría
ideas
cosas
libro
designar
cosas
mundo
real
lugar
entidades
software
intensión
concepto
descripción
atributos
operaciones
semántica
extensión
concepto
conjunto
instancias
objetos
ejemplo
miembros
concepto
define
sinónimo
clase
dominio
constructor
método
especial
invoca
momento
creación
instancia
cla
C++
Java
frecuencia
structor
realiza
ac-
ciones
inicialización
contrato
Define
re
sponsabilidades
po
stcondiciones
aplican
so
operación
método
utiliza
referirse
conjunto
condiciones
relacionadas
interfaz
delegación
noción
objeto
emitir
men
saje
objeto
respuesta
mensaje
objeto
delega
responsabilidad
objeto
derivación
proceso
definir
clase
referenciando
clase
existente
añadiendo
atributos
métodos
clase
existente
superclase
re-
ferimos
clase
subclase
clase
derivada
diseño
proceso
utiliza
productos
análisis
producir
specifi-
cación
implementar
sistema
descripción
lógica
trabajará
sistema
diseño
rientado
objeto
specificación
solución
software
lógica
función
objetos
software
clases
atributos
métodos
colaboraciones
dominio
delimitación
formal
define
materia
área
interés
especí-
fica
encapsulación
mecanismo
utiliza
ocultar
datos
estructura
in-
terna
detalles
implementación
elementos
objeto
subsistema
interacciones
objeto
realizan
interfaz
pública
operaciones
enlace
conexión
objetos
instancia
asociación
578
GLOSARIOestado
condición
objeto
eventos
evento
ocurrencia
relevante
extensión
conjunto
objetos
aplica
concepto
objetos
ex-
tensión
ejemplos
instancias
conceptos
framework
conjunto
clases
abstractas
concretas
colaboran
utilizar
plantilla
solucionar
familia
problemas
relacio-
nados
Normalmente
extiende
definici
ón
subclases
comportamiento
específico
aplicación
generalización
actividad
identificar
elemento
com
ún
concepto
definir
relaciones
superclase
concepto
general
subclase
concepto
es-
pecializado
struir
cla
sificaciones
taxon
ómicas
ceptos
representan
jerarquías
clases
subclases
concep-
tuales
conformes
superclases
conceptuales
inten
sión
extensión
herencia
característica
lenguajes
programación
orientados
objetos
me-
diante
especializar
clases
superclases
generales
subclase
adquiere
automáticamente
definiciones
atributos
métodos
superclases
identidad
objeto
característica
exi
stencia
objeto
indepen-
diente
valor
asociado
objeto
instancia
miembro
individual
clase
UML
denomina
objeto
instanciación
creación
instancia
clase
intensión
definición
concepto
interfaz
conjunto
signaturas
operaciones
públicas
jerarquía
clases
descripción
relaciones
herencia
clases
lenguaje
programación
orientado
objetos
lenguaje
programación
so-
porta
conceptos
encapsulación
herencia
polimorfismo
mensaje
Mecanismo
comunican
objetos
normalmente
solicitud
ejecución
método
metamodelo
modelo
define
modelos
metamodelo
UML
define
tipos
elementos
UML
Clasificador
método
UML
implementación
específica
algoritmo
operación
clase
Informalmente
procedimiento
software
ejecutar
re
s-
puesta
mensaje
método
clase
método
define
comportamiento
clase
dife-
rencia
comportamiento
instancias
método
instancia
método
cuyo
alcance
instancia
invoca
enviando
mensaje
instancia
modelo
descripción
características
estáticas
dinámicas
área
es-
tudio
descritas
serie
vistas
normalmente
diagramas
texto
GLOSARIO
579multiplicidad
número
objetos
permite
participen
asociación
objeto
UML
instancia
clase
encapsula
comportamiento
informalmente
ejemplo
cosa
objeto
activo
objeto
hilo
control
objeto
persistente
objeto
sobrevivir
proceso
hilo
ejecución
crea
objeto
persistente
elimina
explícitamente
OID
Identificador
objeto
operación
UML
especificación
transformación
consulta
pue-
invocar
ejecute
objeto
RJB99
operación
signa-
tura
especificada
nombre
parámetros
invoca
men-
saje
método
implementación
operación
algoritmo
específico
operación
polimórfica
operación
implementada
clases
patrón
patrón
descripción
problema
solución
aplicar
solución
aplicar
solución
contextos
asigna
nombre
persistencia
almacenamiento
permanente
objeto
polimorfismo
concepto
do
clases
objetos
responder
men
saje
forma
utilizando
operacione
polim
órficas
Tam-
bién
capacidad
definir
operaciones
polimórficas
postcondición
restricción
terminar
operación
precondición
restricción
solicite
opera-
ción
privado
mecanismo
alcance
utiliza
restringir
acceso
miem-
bros
clase
objetos
verlos
Normalmente
apli-
ca
atributos
métodos
público
mecanismo
alcance
utiliza
miembros
ac-
cesibles
objetos
Normalmente
aplica
métodos
atri-
butos
puesto
atributos
públicos
violan
encapsulación
receptor
objeto
envía
mensaje
responsabilidad
servicio
grupo
servicios
proporcionados
elemento
clase
subsistema
responsabilidad
contiene
objetivos
obligaciones
elemento
restricción
limitación
condición
elemento
rol
extremo
asociación
asigna
nombre
indicar
pro-
pósito
subclase
especialización
cla
superclase
subclase
hereda
atributos
métodos
superclase
subtipo
subclase
conceptual
especialización
tipo
supertipo
conforme
intensión
extensión
supertipo
580
GLOSARIOsuperclase
clase
clases
heredan
atributos
métodos
supertipo
superclase
conceptual
relaci
ón
generalizaci
ón-especializa-
ción
tipo
general
objeto
subtipos
transición
relación
lugar
ocurre
evento
especificado
cumple
condición
guarda
transición
cambio
objeto
indicar
me-
diante
evento
valores
datos
puros
Tipos
datos
significativa
identidad
instancia
única
números
booleanos
cadenas
texto
variable
instancia
utiliza
Java
Smalltalk
atributo
ins-
tancia
visibilidad
capacidad
referencia
objeto
GLOSARIO
581A
acoplamiento
214
actor
67
apoyo
67
negocio
72
pasivo
67
principal
67
adaptador
322
adopción
incremental
proceso
551
agregación
386
compartida
388
composición
385
387
alta
cohesión
217
análisis
definición
ejemplo
juego
dados
estructurado
125
orientado
objetos
yd
iseño
orientado
objetos
arquitectura
418
452
análisis
418
452
base
105
decisiones
453
diseño
418
ejecutable
105
capas
420
factores
453
intereses
transversales
464
investigación
418
memorándums
técnicos
460
patrones
419
principios
diseño
463
promoción
factores
466
prototipo
105
prueba-de-conceptos
471
separación
intereses
464
síntesis
471
software
418
tabla
factores
456
tarjetas
cuestiones
463
tipos
454
niveles
438
vista
468
casos
469
datos
469
despliegue
469
implementación
469
lógica
468
proceso
468
artefacto
especificación
Complementaria
79
glosario
94
visión
79
artefactos
20
organización
549
asociación
145
calificada
393
centrarse
asociaciones
necesito-conocer
154
criterios
asociaciones
útiles
146
prioridad
alta
148
enlace
190
guías
148
localización
lista
147
múltiples
asociaciones
tipos
152
multiplicidad
149
navegabilidad
273
Índice
alfabéticonivel
detalle
150
nombres
151
roles
390
notación
UML
146
reflexiva
394
atributo
157
derivado
164
claves
ajenas
162
notación
UML
158
referencia
285
simple
158
tipo
dato
159
tipos
primitivos
160
tipos
válidos
158
cantidades
162
atributos
calidad
41
Acoplamiento
214
beneficios
desarrollo
iterativo
17
caja
activación
195
calidad
verificación
continua
554
calificador
393
capa
dominio
325
característica
sistema
92
caso
45
abstracto
365
adicional
366
base
365
47
completo
47
concreto
364
crear
casos
abstractos
365
caja
negra
46
negocio
72
sistema
72
diagrama
409
409
estilo
esencial
66
extensión
extend
365
inclusión
include
363
informal
47
instancia
45
objetivo
usuario
58
postcondición
53
precondición
52
proce
so
negocio
elemental
57
proceso
desarrollo
72
casos
Cambio
318
centrado
arquitectura
554
ciclo
vida
cascada
557
iterativo
14
mitigación
problemas
ciclo
vida
cascada
558
mitigación
problemas
iterati-
vo
559
problemas
558
clase
abstracta
380
381
activa
479
asociación
384
385
conceptual
137
bstracta
380
definiciones
138
diagrama
268
diseño
137
UML
138
genérica
569
implementación
138
jerarquía
382
notación
UML
189
parametrizada
569
partición
375
particionar
376
plantilla
569
significado
UML
137
software
138
transformación
DCD
284
clases
implementación
138
clasificador
137
cohesión
217
relacional
444
colección
iteración
colección
UML
198
command
499
componente
568
comportamiento
clase
202
sistema
114
visión
general
114
composite
337
compuesto
385
584
UML
PATRONESconceptos
especificación
descripción
133
similares
132
descubrimiento
identificación
nom-
bres
128
error
identificación
131
extensión
124
intensión
124
símbolo
124
versus
rol
391
construcción
555
construcciones
diarias
557
contenedor
Decorador
465
contrato
descripción
secciones
169
ejemplo
168
guías
173
postcondición
169
control
cambios
555
controlador
Controler
221
aplicación
237
saturado
226
convertir
excepciones
480
correspondencia
esquemas
504
CRC
229
creador
Creator
211
aplicación
238
cruise
control
integraciones
continuas
557
cuestiones
planificación
550
DCD
268
definición
defecto
479
error
479
fallo
479
desarrollo
adaptable
16
dirigido
casos
72
riesgo
553
beneficios
17
planificación
539
iterativo
incremental
14
descomposición
representación
310
comportamiento
310
diagrama
actividad
569
clases
diseño
268
añadir
métodos
270
DCD
268
ejemplo
268
información
tipo
273
mostrar
navegabilidad
273
relaciones
dependencia
276
notación
miembros
277
multiobjetos
272
colaboración
186
condicionales
mutuamente
exclusivos
193
creación
instancias
191
ejemplo
187
enlaces
190
iteración
193
colección
194
mensaje
self
190
objeto
clase
194
mensajes
195
condicionales
192
número
secuencia
191
secuencia
mensajes
191
componentes
568
contexto
69
despliegue
569
408
acciones
transición
413
condiciones
guarda
413
ejemplo
411
anidados
414
casos
409
visión
general
407
implementación
568
interacción
clase
189
instancia
189
sintaxis
mensajes
189
secuencia
186
caja
activación
195
condicional
mutuamente
exclusivo
198
creación
instancias
196
sistema
114
mostrar
texto
caso
118
destrucción
objetos
196
iteración
198
colección
198
ÍNDICE
ALFABÉTICO
585sobre
serie
mensajes
198
líneas
vida
196
mensaje
self
196
clase
199
condicional
197
mensajes
195
retorno
195
dibujar
diagramas
532
sugerencias
533
diccionario
datos
41
disciplina
20
diseño
20
entorno
20
modelado
Negocio
570
requisitos
20
yf
ases
20
flujo
trabajo
20
diseño
interfaz
usuario
UI
563
dirigido
datos
327
responsabilidades
230
especulativo
532
físico
444
Contrato
177
diseños
modulares
220
documento
arquitectura
software
SAD
467
técnicas
arquitectura
460
EBP
57
elaboración
19
enlace
190
escenario
45
calidad
455
especialización
371
especificación
operación
176
propiedades
567
407
modelado
381
estereotipo
69
estilo
casos
esencial
66
estilos
419
estimación
549
estimar
549
estrategia
Strategy
332
evento
407
tiempo
412
sistema
222
asignación
nombres
117
externo
412
interno
412
excepciones
UML
481
experto
207
aplicación
240
información
207
extensi
ón
124
fabricación
pura
308
factoría
Factory
326
abstracta
Abstract
Factory),4
90
fachada
Facade
346
fases
UP
19
fijación
duración
18
motivación
557
flujo
trabajo
20
yd
isciplina
20
focos
control
195
framework
persistencia
502
503
caja
blanca
509
ideas
claves
504
materialización
510
patrón
identificador
objeto
505
manejo
caché
515
representación
objetos
tablas
504
representación
relaciones
tablas
524
requisitos
503
generalización
372
conformidad
374
notación
clases
abstractas
381
UML
372
partición
375
pruebas
validez
subclases
375
visión
general
371
clases
conceptuales
373
conjuntos
clases
conceptuales
373
guiones
casos
563
586
UML
PATRONESH
493
herencia
341
herramientas
CASE
UML
535
hilos
UML
478
implementación
20
independiente
411
indirección
312
ingeniería
usabilidad
563
directa
535
inversa
536
inicialización
impaciente
330
perezosa
330
inicio
19
instancia
notación
UML
184
integración
continua
557
cruise
control
557
construcciones
diarias
557
intensión
124
intereses
transversales
464
interfaz
307
paquete
568
intervalos
tiempo
390
iteraciones
14
jerarquía
clases
371
junit
556
límite
sistema
116
marco
desarrollo
22
memorándums
técnicos
460
mensaje
asíncrono
481
482
notación
UML
191
metadatos
509
método
176
diagrama
colaboración
287
guarda
514
estáticos
194
plantilla
Template
Method
509
sincronizados
514
modelado
datos
505
visual
555
modelo
conceptual
122
análisis
563
casos
43
datos
505
delegación
eventos
348
diseño
182
vs
Modelo
dominio
269
dominio
122
conceptos
similares
132
encontrar
concepto
127
estrategia
cartógrafo
130
modelado
irreal
133
cambios
381
organización
paquetes
396
vocabulario
dominio
123
vs
Modelo
diseño
269
implementación
444
objetos
Negocio
570
modelos
datos
505
objetos
análisis
122
dominio
122
momento-intervalo
390
multiobjeto
194
multiplicidad
149
navegabilidad
273
nivel
tier
434
objetivo
usuario
58
nodos
569
nombre
camino
426
notas
UML
243
objetivo
subfunción
60
ÍNDICE
ALFABÉTICO
587de
usuario
58
objeto
activo
478
dominio
inicial
252
UML
189
líneas
vida
196
persistente
502
objetos
control
225
data
holder
432
entidad
225
frontera
225
persistentes
502
valor
432
observador
Observer
348
OCL
176
ocultamiento
información
319
operación
sistema
222
operaciones
176
sistema
167
organización
artefactos
549
paquete
348
dependencias
395
guías
organización
444
interfaz
568
notación
450
UML
394
pertenencia
395
referencia
395
patrón
adaptador
Adapter
322
alta
cohesión
217
acoplamiento
214
capas
Layers
420
command
499
composite
337
controlador
221
convertir
excepciones
481
creador
211
State
175
estrategia
Strategy
332
experto
207
fabricación
pura
308
factoría
Factory
326
abstracta
Abstra
ct
Factory),4
90
fachada
Facade
346
493
indirección
312
método
plantilla
Template
Method),5
09
nombres
205
observador
Observer
348
polimorfismo
306
pagos
493
Proxy
484
redirección
485
remoto
485
virtual
522
publicar-suscribir
348
separación
modelo-vista
239
Singleton
328
variaciones
protegidas
313
patrones
análisis
127
arquitectura
419
diseño
419
tilo
419
pandilla
Gang
of
Four
322
GRASP
alta
cohesión
217
acoplamiento
214
controlador
221
creador
211
experto
207
fabricación
pura
308
indirección
312
polimorfismo
306
variaciones
protegidas
313
plan
desarrollo
software
107
fase
24
iteración
24
planificación
adaptable
543
vs
Predictiva
543
cuestiones
planificación
550
iterativa
539
polimorfismo
306
postcondición
169
casos
53
metáfora
171
precondición
casos
52
principio
abierto-Cerrado
319
stitución
Liskov
315
Hollywood
503
588
UML
PATRONESpriorización
requisitos
540
riesgos
543
proceso
adaptable
24
ágil
24
desarrollo
software
13
negocio
elemental
57
iterativo
14
pesado
23
predictivo
23
unificado
13
rational
14
programación
extrema
556
orientada
aspecto
465
programar
probando
556
Proxy
485
redirección
485
remoto
485
virtual
522
PSL
315
publicar-suscribir
348
punto
evolución
463
extensión
366
variación
318
razonamiento
visual
531
realizaciones
casos
72
reglas
negocio
86
relación
dependencia
568
extensión
casos
extend
365
inclusión
casos
include
362
réplicas
431
requisitos
39
funcionales
41
modelo
casos
44
gestión
555
funcionales
especificación
com-
plementaria
80
priorización
540
significativos
arquitectura
454
traza
546
visión
general
39
re
sponsabilidades
202
202
202
importancia
patrones
204
diagramas
interacción
203
ym
étodos
202
restricciones
85
retorno
diagramas
secuencia
195
reutilización
565
riesgo
543
rol
149
nombre
285
versus
concepto
391
RUP
14
producto
564
SAD
467
salto
representación
138
SCRUM
556
separación
intereses
464
modelo-vista
239
símbolo
124
Singleton
328
notación
abreviada
UML
329
solicitud
Cambio107
subclase
341
conformidad
374
creación
375
partición
376
pruebas
validez
375
superclase
creación
377
SWEBOK
42
tabla
factores
457
tarea
usuario
57
tarjetas
cuestiones
460
tipo
dato
158
transición
556
UML
10
herramientas
CASE
535
ÍNDICE
ALFABÉTICO
589modelado
visual
555
perfil
506
modelado
datos
505
perfiles
505
sugerencias
dibujar
diagramas
532
visión
general
10
UP
14
ágil
24
prácticas
conceptos
553
fases
19
usuarios
comprometidos
554
variaciones
protegidas
313
visibilidad
262
atributo
263
global
265
local
265
parámetro
263
defecto
UML
278
vista
casos
469
datos
469
despliegue
469
implementación
469
lógica
454
proceso
468
XP
556
590
UML
PATRONESUML
Patrones
Larman
www.pearsoneducacion.com
ISBN
978-84-205-3438-1
manual
presenta
introducción
práctica
análisis
diseño
orientado
objetos
DOO
aspectos
relacionados
desarrollo
iterativo
objetivo
principal
libro
ayudar
estudiantes
desarrolladores
crear
diseños
orientados
objetos
aplicación
conjunto
principios
heurísticas
explicables
libro
dirigido
desarrolladores
estudiantes
experiencia
lenguaje
programación
orientado
objetos
experiencia
análisis
diseño
orientado
objetos
estudiantes
informática
cursos
ingeniería
software
estudien
tecnología
objetos
personas
familiarizadas
DOO
quieran
aprender
notación
UML
aplicar
patrones
mejorar
perfeccionar
habilidades
análisis
diseño
edición
presenta
mejoras
importantes
tales
actualizan
casos
seguir
enfoque
Cockburn01
aceptación
utiliza
conocido
Proceso
Unificado
Unified
Process
UP
ejemplo
proceso
iterativo
artefactos
nombran
terminología
UP
Modelo
Dominio
Tratamiento
atualizado
patrones
diseño
Introducción
análisis
arquitectural
Introducción
Variaciones
Protegidas
patrón
GRASP
Actualización
notación
UML
reciente
Discusión
aspectos
prácticos
dibujo
utilizando
pizarras
herramientas
CASE
UML
LibroSite
página
web
asociada
libro
variedad
recursos
material
adicional
profesores
estudiantes
Apoyos
docencia
ejercicios
autocontrol
enlaces
relacionados
material
investigación
etc.
LibroSite
complemento
académico
perfecto
libro
www.librosite.net/larman
2ª
Edición
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIwww.librosite.net
larman
