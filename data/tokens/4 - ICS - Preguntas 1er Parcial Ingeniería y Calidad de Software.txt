Ingeniería
Calidad
Software
pág.
Preguntas
1er
Parcial
Ingeniería
Calidad
Software
Unidad
INTRODUCCIÓN
INGENIERÍA
SOFTWARE
1.1-Introducción
Ingeniería
Software
crisis
software
problemas
aparecen
desarrollo
software
desarrollar
mantener
atender
demanda
aplicaciones
Insatisfacción
cliente
planificación
estimaciones
imprecisas
calidad
falta
tiempo
recoger
datos
históricos
baja
productividad
dificultad
mantenimiento
etc.
produjo
1965
1985
mitos
desarrollo
software
Mencione
ejemplo
Creencias
acerca
software
procesos
empleados
construirlo
Gestión
estándares
procedimientos
escritos
equipo
necesita
depende
costumbres
hardware
moderno
suficiente
desarrollo
software
calidad
allá
herramientas
software
recuperar
tiempo
perdido
agregando
programadores
Cliente
cambios
requisitos
impacto
software
flexible
impacto
dependo
momento
introduzca
cambio
Desarrolladores
trabajo
termina
escribió
programa
funcionando
60%
80%
esfuerzo
entrega
testeado
forma
comprobar
calidad
programa
ejecutándose
entrega
finalizar
proyecto
programa
funcionando
Nombre
características
software
desarrolla
fabrica
calidad
obtiene
diseño
costos
encuentran
ingeniería
estropea
deteriora
lentamente
cambios
mantenimiento
complejo
hardware
construye
medida
ensamblan
componentes
existentes
busca
reutilización
Defina
Ingeniería
Software
Disciplina
ingeniería
comprende
aspectos
producción
software
Abarca
etapas
iniciales
especificación
sistema
mantenimiento
tratamiento
sistemático
fases
ciclo
vida
software
objetivo
Ing.
Software
basado
Tecnología
multicapa
fundamento
Ingeniería
Software
objetivo
Ingeniería
Software
lograr
productos
software
calidad
proceso
apoyado
métodos
herramientas
Ingeniería
Calidad
Software
pág.
fundamento
Ingeniería
Software
capa
proceso
define
marco
trabajo
áreas
clave
forman
base
control
gestión
proyectos
establece
contexto
aplican
métodos
técnicos
producen
resultados
establecen
hitos
asegura
calidad
gestiona
cambio
adecuadamente
Nombre
procesos
Ingeniería
Software
consisten
Organizacionales
relacionados
objetivos
organización
elaboran
procesos
productos
activos
ayuden
alcanzar
objetivos
Transversales
apoyan
contratación
desarrollo
entrega
software
cliente
contribuyen
correcto
Gestión
Proyectos
relacionados
establecimiento
proyecto
coordinación
gestión
recursos
necesarios
Desarrollo
mantenimiento
sistemas
software
documentación
usuarios
equipos
mantenimiento
Soporte
empleados
procesos
categoría
punto
ciclo
vida
software
Indique
dividen
procesos
Soporte
Desarrollo
documentación
Gestión
configuración
software
Aseguramiento
calidad
Resolución
problemas
Revisiones
software
8)
problemas
identifican
requerimientos
usuarios
quieren
sistema
usuarios
visión
conjunto
usuarios
eficiente
operación
conjunto
usuarios
partes
trabajo
transformarse
software
usuarios
detallar
forma
precisa
leyes
Lemas
requerimientos
indican
Ley
Ziv
requerimientos
entienden
completamente
Ley
Humphrey
usuarios
realmente
software
quieren
ven
funcionando
Lema
Wagner
sistema
interactivo
especificado
testeado
completo
10
tipos
requerimientos
función
calidad
Indique
ligan
satisfacción
cliente
Normales
objetivos
metas
establecidas
presencia
satisface
cliente
Esperados
implícitos
ausencia
causa
insatisfacción
Emocionantes
Innovadores
superan
expectativas
presencia
causa
satisfacción
11
Nombre
técnicas
validación
requerimientos
usarse
Revisiones
requerimientos
Construcción
prototipos
Generación
casos
prueba
Análisis
consistencia
automática
Ingeniería
Calidad
Software
pág.
12
requerimientos
funcionales
funcionales
dominio
restricciones
diseño
cuadro
Funcionales
funciones
sistema
capaz
funcionales
restricciones
servicios
funciones
ofrecidos
sistema
proceso
desarrollo
dominio
provienen
dominio
aplicación
sistema
reflejan
características
funcionales
funcionales
restricciones
diseño
condicionantes
existentes
diseño
anticiparlo
13
Cuadro
incumplimiento
requerimientos
funcionales
funcionales
explíquelo
requisitos
funcionales
establecen
restricciones
requisitos
funcionales
implementados
indican
producto
faltan
funcionales
degrada
sistema
faltan
funcionales
inutiliza
funcionales
suelen
críticos
funcionales
particulares
14
diferencian
requisitos
usuario
DRU
requisitos
software
ERS
Requisitos
DRU
ERS
Detalles
Punto
vista
cliente
equipo
desarrollo
Contenido
Descripción
problema
metas
esperadas
Responde
características
poseer
sistema
permita
alcanzar
objetivos
evitar
problemas
expuestos
DRU
15
Defina
proceso
Ingeniería
Software
gráfica
Proceso
iterativo
incremental
abarca
ciclo
vida
software
definición
desarrollo
mantenimiento
integrando
modificaciones
adaptaciones
16
especificar
proceso
Ingeniería
Software
secuencia
actividades
equipo
desarrollo
productos
crearse
asignación
tareas
miembro
equipo
criterios
controlar
proceso
17
Nombre
características
productos
software
Mantenibles
Confiabilidad
Utilización
Adecuada
Eficiencia
Entendible
Escalable
Visible
Aceptable
Soportable
Seguridad
Robusto
Rápido
18
retos
Ingeniería
Software
Explíquelos
brevemente
Ingeniería
Calidad
Software
pág.
heredado
mantener
actualizar
software
evitando
costos
excesivos
manteniendo
negocio
funcionamiento
heterogeneidad
desarrollar
técnicas
construir
software
confiable
flexible
entrega
reducir
tiempos
entrega
comprometer
calidad
19
consiste
Interfaz
Usuaria
calidad
percibida
calidad
externa
calidad
Calidad
percibida
características
producto
aportan
satisfacción
usuarios
específicos
Calidad
externa
instante
producto
satisface
necesidades
establecidas
implícitas
utilizado
condiciones
específicas
Calidad
efectividad
eficiencia
satisfacción
usuarios
alcanzar
metas
entornos
concretos
20
Defina
usabilidad
indique
referencia
forma
alcanzan
objetivos
efectividad
eficiencia
satisfacción
Instante
producto
utilizado
usuarios
específicos
alcanzar
metas
específicas
efectividad
eficiencia
satisfacción
contexto
concreto
referencia
rapidez
facilidad
personas
llevan
cabo
tareas
producto
21
importancia
usabilidad
toma
Importancia
Reducción
costos
producción
Reducción
costos
mantenimiento
apoyo
Reducción
costos
Mejora
calidad
producto
Toma
Rapidez
facilidad
cosas
Aproximación
usuario
Conocimiento
contexto
Satisfacer
necesidades
usuario
usuarios
determinan
producto
fácil
22
referencia
usabilidad
puntos
descansa
referencia
rapidez
facilidad
personas
llevan
cabo
tareas
producto
Descansa
Aproximación
usuario
Conocimiento
contexto
Satisfacer
necesidades
usuario
usuarios
determinan
producto
fácil
23
usabilidad
considerada
proyecto
allá
método
desarrollo
sistema
24
fines
guía
SWEBOK
Ingeniería
Software
Ingeniería
Calidad
Software
pág.
Software
Engineering
Body
Of
Knowledge
guía
completa
actualizada
identifica
partes
cuerpo
conocimientos
consenso
generalizado
ingeniería
software
organiza
áreas
conocimiento
crea
medios
necesarios
acceder
25
ventajas
GUI
Somerville
págs
327
347
fáciles
aprender
utilizar
Pantallas
múltiples
tarea
perder
vista
información
generada
interactuar
rápidamente
26
Nombre
principios
diseño
interfaces
usuarias
Somerville
Familiaridad
usuario
Consistencia
Mínima
sorpresa
Recuperabilidad
Guía
usuario
Diversidad
usuarios
27
estilos
primarios
interacción
usuario
Shneiderman
Somerville
Manipulación
directa
objetos
pantalla
Selección
menús
Llenado
formularios
Lenguaje
comandos
Lenguaje
natural
28
lineamientos
claves
utilización
efectiva
color
interfaces
usuario
Somerville
Limitar
número
colores
utilizados
conservador
utilizarlos
Utilizar
cambio
color
mostrar
cambio
sistema
Utilizar
código
colores
apoyar
tarea
usuarios
tratando
cabo
Utilizar
código
colores
forma
consciente
consistente
cuidadoso
utilizar
pares
colores
29
factores
diseño
influyen
redacción
mensajes
Somerville
Contexto
Experiencia
Nivel
habilidad
Estilo
Cultura
30
consiste
evaluación
interfaz
comprende
Somerville
proceso
valorar
forma
utiliza
interfaz
verificar
cumple
requerimientos
Técnicas
Diseñar
experimentos
estadísticos
usuarios
típicos
laboratorios
construidos
especialmente
equipos
supervisión
Cuestionarios
recolectan
información
opinión
usuarios
Observación
usuarios
Instantáneas
videos
típico
sistema
Ingeniería
Calidad
Software
pág.
Inclusión
código
recolecte
información
recursos
utilizados
errores
1.2-Disciplinas
Ingeniería
Software
31
Identifique
objetivos
implementar
optar
servicio
Ingeniería
Software
Diseñar
programas
adaptados
necesidades
exigencias
clientes
Desarrollar
desplegar
implementar
mantener
sistemas
Solucionar
problemas
programación
presente
fases
ciclo
vida
producto
Estimar
contabilizar
costos
evaluar
tiempo
desarrollo
seguimiento
presupuesto
cumplir
plazos
entrega
Liderar
equipos
trabajo
desarrollo
software
Estructurar
elaboración
evidencias
comprueben
funcionamiento
programa
Diseñar
construir
administrar
mantener
bases
datos
Liderar
orientar
programadores
desarrollo
Incluir
procesos
calidad
calculando
métricas
indicadores
verificando
calidad
software
producido
Estructurar
inspeccionar
trabajo
equipo
32
Nombre
disciplinas
software
usadas
ingeniero
software
Modelado
Negocios
Requerimientos
Análisis
Diseño
Pruebas
Administración
Configuración
Cambio
Administración
Proyectos
Ambientes
Implementación
33
Nombre
principios
Ingeniería
Software
analice
principio
razón
exista
trabajar
sentido
Mantenerlo
sencillo
KISS
fácil
mantener
Mantener
visión
desarrollar
necesario
consumirán
produce
considerado
Abrace
futuro
software
quede
obsoleto
rápidamente
Planee
anticipado
reutilización
asegurar
mantenibilidad
llevarlo
extremo
Pensar
34
Nombre
explique
reglas
vinculadas
Código
limpio
90/90
Navaja
Oakham
YAGNI
DRY
ley
Demeter
optimización
prematura
etc.
90/90
principio
Pareto
90%
código
ocupa
90%
tiempo
desarrollo
10%
restante
código
ocupa
90%
tiempo
desarrollo
Navaja
Oakham
pensar
añadir
YAGNI
vas
necesitar
agregar
necesario
principio
extender
funcionalidad
necesario
Diseño
adelantado
pensar
detalle
suficiente
arquitectura
empezar
desarrollar
Ingeniería
Calidad
Software
pág.
DRY
repitas
sencillo
apoyo
modificación
posterior
Ley
Demeter
LoD
hablar
extraños
dividir
responsabilidades
encapsular
lógica
clases
métodos
estructuras
Evitar
Optimización
Prematura
cosas
sencillas
momento
optimizar
necesario
Principio
Menor
Asombro
código
intuitivo
obvio
wtfs
min
Inversión
Control
IoC
acoplamiento
alta
modularidad
Composición
Herencia
lograr
polimorfismo
reutilización
Encapsular
varía
aislar
puntos
inestabilidad
abstracciones
reglas
diseño
simple
tests
pasan
expresa
intención
duplicidades
mínimo
número
elementos
Regla
Boy
Scouts
código
mejorar
mejorar
momento
responsable
diferir
decisiones
momento
minimizar
costos
cambios
requisitos
Patrones
GoF
Patrones
SOLID
35
Explique
consiste
SOLID
sirven
principios
Grupo
principios
diseño
orientado
objetos
lograr
software
calidad
SRP
Single
Responsibility
razón
cambie
clase
OCP
Open
Closed
abierto
extensión
cerrado
modificación
LSP
Liskov
Sustitution
clase
heredada
complementar
comportamiento
base
ISP
Interface
Segregation
interfaces
específicas
mejores
general
DIP
Dependency
Inversion
programador
trabajar
nivel
interfaz
implementación
clases
alto
nivel
nivel
dependan
abstracciones
36
Nombre
malas
prácticas
desarrollo
mantenimiento
Planificación
estimaciones
imprecisas
recopilan
datos
proyectos
pasados
invierte
dinero
mantenimiento
formación
ingenieros
documenta
suficiente
pasa
directamente
codificación
Procesos
software
improvisados
siguen
rigurosamente
especificaciones
planificación
riesgos
resuelven
crisis
inmediatas
apagando
fuego
sacrifica
funcionalidad
calidad
cumplir
plazos
realizan
pruebas
verificaciones
revisiones
37
complejo
software
Mencione
motivos
complejidad
dominio
problema
dificultad
controlar
proceso
desarrollo
problemas
caracterizar
sistemas
discretos
38
proponer
mejorar
desarrollo
software
Aplicar
métodos
técnicas
herramientas
desarrollo
Adoptar
estándares
desarrollo
Ingeniería
Calidad
Software
pág.
Utilizar
experiencia
acumulada
Documentación
Aplicar
estándares
lecciones
aprendidas
prácticas
39
consiste
Desarrollo
Distribuido
Global
Software
DGS
escenarios
cuadro
Escenario
organización
organización
lugar
Desarrollo
co-localizado
Desarrollo
co-localizado
subcontratación
país
Desarrollo
distribuido
DSD
Desarrollo
distribuido
subcontratación
DSD
país
Deslocalización
Desarrollo
Global
GSD
Subcontratación
deslocalizada
Desarrollo
Global
GSD
40
desafíos
Desarrollo
Global
Software
DGS
Diferencias
culturales
prácticas
negocio
cliente
Participación
apropiada
usuarios
personal
campo
Consciencia
trabajo
local
comunicación
informal
Relación
confianza
laboral
Gestión
conflictos
discusiones
abiertas
interés
Entendimiento
común
requisitos
Reuniones
efectivas
Demoras
41
outsourcing
porqué
recurre
punto
clave
sistema
contratación
empresa
recurre
tareas
especializadas
razón
importante
recurrir
delegar
responsabilidad
preocupación
administración
operacional
punto
clave
evitar
único
proveedor
depender
42
tipos
outsourcing
transfieren
infraestructuras
personal
proveedor
cargo
fases
implementación
asume
riesgo
propiedad
recursos
Selectivo
cliente
cubrir
responsabilidades
minimizar
riesgos
outsourcing
43
Indique
tratan
modelos
delivery
global
cuadro
comparativo
término
descripción
ubicación
geográfica
Onsite
instalaciones
cliente
Offsite
instalaciones
cliente
distinto
país
Onshore
empresas
país
Nearshore
empresas
países
vecinos
zonas
horarias
similares
Offshore
empresas
países
Híbrido
gestión
local
onshore
contratación
nearshore
offshore
Unidad
PROCESO
INGENIERÍA
SOFTWARE
GESTIÓN
ÁGIL
Unidad
2.1
Introducción
gestión
ágil
proyectos
desarrollo
software
44
Defina
agilidad
colaboración
requiere
agilidad
habilidad
responder
forma
versátil
cambio
evolución
requisitos
circunstancias
entorno
maximizar
beneficios
Requiere
colaboración
interna
equipo
externa
cliente
Ingeniería
Calidad
Software
pág.
45
Nombre
enfoques
ligeros
completos
diapositiva
paraguas
Agile
usados
Ligeros
SCRUM
Lean
Kanban
XP
CI
FDD
Feature
Driven
Development
TDD
Test
Driven
Development
Crystal
Clear
Completos
DSDM
Dynamic
Systems
Developing
Method
AgilePM
Agile
Project
Management
AUP
Agile
Unified
Process
OpenUP
Open
Unified
Process
SAFe
ScaledAgile
Framework
DAD
Disciplined
Agile
Delivery
Sappient|Approach
PMI-ACP
46
razones
surge
ágil
Entorno
cambiante
Dependencia
procesos
rígidos
Intangibilidad
software
Falta
visibilidad
producto
terminado
Insatisfacción
usuario
Soluciones
medida
Costosas
fases
Errores
introducidos
fases
tempranas
Falta
flexibilidad
cambios
Proceso
desarrollo
encorsetado
documentos
firmados
Desarrollo
lento
entendimiento
negocio
47
Manifiesto
desarrollo
ágil
SOFTWARE
nombre
valores
ágiles
Individuos
Interacciones
Procesos
Herramientas
Software
Funcionando
Documentación
Exhaustiva
Colaboración
Cliente
Negociación
Cambios
Respuesta
Cambio
Seguimiento
Plan
48
principios
Manifiesto
Ágil
explique
concepto
feedback
ágil
Principios
nros.1
Feedback
respuesta
obtenida
comunicación
equipo
cliente
indica
mejorar
49
principio
número
fórmula
mejorar
agilidad
Ingeniería
Calidad
Software
pág.
10
Atención
continua
excelencia
técnica
diseño
mejora
agilidad
50
elementos
claves
documentación
Simplicidad
valores
Análisis
actividad
constante
Diseño
evolutivo
Integraciones
Testeos
diarios
51
Cuadro
comparativo
Gestión
Tradicional
vs
Ágil
Tradicional
Ágil
Basada
normas
provenientes
estándares
Basada
experiencias
proyectos
anteriores
Equipo
especialización
Equipo
multidisciplinario
cliente
interactúa
equipo
desarrollo
reuniones
cliente
equipo
desarrollo
Fases
Solapamiento
Requisitos
detallados
Visión
producto
resistencia
cambios
Adaptación
cambios
Seguimiento
plan
Seguimiento
backlogs
Grupos
Grupos
pequeños
artefactos
roles
artefactos
roles
52
Ágil
vs
Tradicional
elegir
elegir
tradicional
desarrollar
forma
repetible
productos
especificados
tiempo
costes
previstos
elegir
ágil
entregar
forma
repetible
valor
innovador
tradicional
busca
previamente
negociado
ágil
iterativo
adaptable
cambios
53
premisas
Gestión
Ágil
Tradicional
Indique
predictiva
adaptativa
Tradicional
predictiva
plan
crea
estimaciones
costos
cronogramas
proyectos
mantienen
características
comportamientos
regulares
objetivo
lograr
producto
previsto
tiempo
planificado
desbordar
costes
estimados
Ágil
adaptativa
visión
crea
estimaciones
funcionalidades
forma
única
válida
gestionar
tipo
proyecto
objetivo
valor
producto
funcionalidad
fechas
costes
54
Explique
conversión
triángulo
restricciones
Tradicional
Ágil
armar
gráfica
Ingeniería
Calidad
Software
pág.
11
proyecto
tradicional
dirigido
plan
tiempo
costo
calculan
alcance
convertirlo
ágil
establecer
tiempo
costo
alcance
dirigido
valor
55
Nombre
ventajas
desventajas
framework
gestión
tradicional
vs
ágil
Framework
Ventajas
Desventajas
Waterfall
cliente
Medición
sencilla
progreso
Participación
miembros
proyectos
fase
activa
diseño
completa
principio
CVDS
software
diseñado
completamente
cuidado
Suele
fallar
eficacia
requisitos
Posibilidad
insatisfacción
cliente
producto
entregado
Ágil
Alto
nivel
participación
cliente
Sentido
pertenencia
cliente
Oportunidades
frecuentes
cliente
trabajo
tomar
decisiones
solicitar
cambios
producir
versión
básica
software
operativo
completada
Desarrollo
centrado
usuario
Clientes
tiempo
interés
participar
miembros
equipo
completamente
dedicados
proyecto
Posibilidad
completar
elementos
establecidos
entrega
plazo
asignado
frecuente
refactorización
56
elegimos
framework
Considerando
marco
trabajo
Tamaño
empresa
Estructura
equipo
Recursos
disponibles
Necesidades
partes
interesadas
Estructura
Tamaño
cartera
productos
Prioridades
cliente
desarrollo
proyecto
57
tipo
modelo
Scrum
modelo
ágil
referencia
centrado
prácticas
gestión
58
Defina
empowerment
feedback
constante
Empowerment
otorgar
autonomía
tomar
decisiones
equipo
desarrollo
generando
clima
sinergia
grupal
Feedback
constante
crecimiento
incremental
desarrollo
adaptativo
programación
mejora
constante
forma
trabajo
equipo
Unidad
2.2
Scrum
ceremonias
roles
artefactos
59
Defina
Scrum
permite
porqué
framework
diapositivas
Ingeniería
Calidad
Software
pág.
12
Scrum
framework
permite
organizar
equipo
logre
ritmo
sostenible
cíclico
trabajo
múltiples
iteraciones
transcurso
ciclo
vida
proyecto
equipo
sienta
cómodo
entregando
productos
parciales
incrementos
valor
cliente
framework
indica
equipos
trabajar
empíricamente
60
Nombre
valores
principios
base
actividad
Scrum
gráfica
Transparencia
franqueza
Respeto
Coraje
Compromiso
Enfoque
Focus
61
Explique
proceso
Scrum
gráfica
diapositiva
14
indicando
roles
ceremonias
eventos
artefactos
flujo
proceso
Identifique
resumen
proceso
comienza
PO
definiendo
US
Product
Backlog
Sprint
Planning
PO
SM
Scrum
Team
analizan
US
cumplen
DoR
pasarán
Sprint
Backlog
Scrum
Team
desarrolla
sprint
teniendo
Daily
Scrum
SM
verifican
progreso
solucionan
inconvenientes
finaliza
sprint
debería
incremento
cumpla
DoD.
realiza
Sprint
Review
PO
SM
Scrum
Team
Stakeholders
mostrando
sprint
realiza
Sprint
Retrospective
PO
SM
Scrum
Team
Backlog
Refinement
corregir
mejorar
US
corresponda
comienza
Sprint
Planning
sprint
62
MVP
MVP
Producto
Mínimo
Viable
producto
características
esenciales
satisfacer
clientes
63
gráfica
diapositiva
21
comprende
Sprint
cero
Comprende
elaboración
documentos
iniciales
contrato
MVP
Kick
Off
capacitación
metodológica
KT
Knowledge
Transfer
DoD
DoR
DoT
roadmap
alcance
visión
mapeo
impacto
mapeo
US
definición
ambientes
Development
Testing
Staging
Production
definición
arquitectura
64
roles
scrum
buscan
gráfica
círculos
buscan
balance
PO
busca
haga
correcto
priorizando
US
backlog
SM
busca
haga
rápido
siguiendo
metodología
Scrum
Scrum
Team
busca
incremento
calidad
prácticas
dejar
deuda
técnica
65
deuda
técnica
ejemplos
formas
suma
cosas
deberían
anteriormente
software
decente
calidad
costo
trabajo
adicional
causado
elección
solución
rápida
lugar
efectiva
Formas
definición
inicial
proyecto
insuficiente
infringir
prácticas
arquitectura
estructura
código
patrones
diseño
estándares
algoritmos
funciones
difíciles
leer
entender
falta
unit
tests
alto
acoplamiento
alta
complejidad
código
falta
code
reviews
refactorizaciones
atrasadas
Ingeniería
Calidad
Software
pág.
13
bugs
resueltos
sprints
tests
aceptación
duplicación
código
falta
builds
deploys
automatizados
falta
colaboración
equipos
mala
aplicación
Scrum
etc.
66
tipos
deuda
técnica
S.
McConnell
forma
gestionar
Tipos
Intencional
decisión
consciente
optimizar
presente
lugar
futuro
Intencionada
Accidental
error
inevitable
Formas
gestión
Mantener
lista
sistema
seguimiento
determinando
tareas
necesarias
esfuerzo
cronograma
estimado
saldar
deuda
Mantener
lista
trabajo
pendiente
producto
Scrum
tratando
deuda
US
67
objetivos
agregan
Scrum
2020
prescriptivo
lenguaje
simple
eliminación
terminología
específica
software
preguntas
Daily
Scrum
entrega
valor
derivado
objetivo
producto
product
goal
sprint
goal
Responsabilidades
reemplaza
funciones
roles
Artefactos
reemplaza
componentes
68
objetivo
responsabilidades
roles
cuadro
Responsable
Objetivo
Responsabilidades
Developers
Generar
incremento
usable
Crear
Sprint
Backlog
Velar
calidad
DoD
Adaptarse
alcanzar
Spring
Goal
responsables
profesionales
Product
Owner
Maximizar
valor
Scrum
Team
Entregar
backlog
priorizado
Sprint
Mantener
Product
Backlog
Desarrollar
comunicar
explícitamente
Product
Goal
Aclarar
PBI
Product
Backlog
Items
Mantener
PB
transparente
visible
Disponer
PB
ordenado
Scrum
Master
Scrum
Team
organización
entiendan
Scrum
efectivo
Scrum
Team
líder
servicial
Scrum
Team
Enseñar
autogestionado
multifuncional
Acompañar
crear
productos
alto
valor
Eliminar
impedimentos
PO
Enseñar
definir
Product
Goal
mantener
PB
importancia
PBI
claros
entender
planificamos
entorno
complejo
empirismo
Facilitar
colaboración
Stakeholders
organización
Liderar
organizar
implantación
Scrum
Planificar
asesorar
implantación
Scrum
Ayudar
entender
Stakeholders
trabaja
empirismo
Eliminar
barreras
Stakeholders
Scrum
Team
69
Scrum
nombre
resultados
mantenemos
valores
persona
trabaja
equipo
desarrolla
proyecto
reviews
backlog
saneado
equipo
alto
rendimiento
etc.
Ingeniería
Calidad
Software
pág.
14
Reviews
trabajo
presentación
situación
Backlog
saneado
priorización
actualizada
listo
sprint
Equipo
alto
rendimiento
Sprints
cortos
Time-Box
70
Explique
características
equipo
ágil
autoorganizado
autónomo
multidisciplinario
cross-
funcional
autogestionado
empowerment
autogestionado
Autónomo
multidisciplinario
depender
evitar
esperas
retrasos
Autoorganización
equipo
decide
convertir
PBIs
soluciones
funcionan
Cross-funcional
equipo
habilidades
necesarias
crear
incremento
títulos
desarrolladores
sub-equipos
Comprometidos
Sprint
Goal
calidad
Autogestionado
empowerment
potencia
trabajo
equipo
motiva
equipo
compromiso
miembros
dándoles
capacidad
toma
decisiones
Sprint
Planning
organizando
Sprint
Review
participando
activamente
Retrospectiva
71
Scrum
cuadro
Eventos
nombre
explique
evento
ceremonia
objetivos
reutilizar
preguntas
siguen
72
Defina
sprint
durar
73
Indique
definición
backlog
74
preguntas
responden
Sprint
Planning
gráfica
75
Sprint
Planning
gráficas
pasos
objetivos
Sprint
backlog
Plan
roles
PO
equipo
SM
76
único
compromiso
asume
equipo
77
preguntas
responden
Daily
centra
dirección
propósito
78
sirve
Sprint
Review
demo
79
agenda
guión
Review
80
retrospectiva
propósito
Evento
Descripción
Sprint
Periodo
tiempo
desarrolla
incremento
funcionalidad
Duración
máxima
30
duran
abortar
SM
PO
deciden
viable
realiza
backlog
decidida
Scrum
Team
Backlog
listado
requisitos
sistema
contenido
priorización
disponibilidad
Sprint
Planning
Objetivo
planificar
trabajo
sprint
Preguntas
Sprint
Goal
Sprint
Backlog
Scrum
Team
decide
entra
sprint
forma
Sprint
Backlog
Pasos
Definir
objetivo
sprint
Crear
Sprint
Backlog
Elaborar
plan
Roles
Ingeniería
Calidad
Software
pág.
15
PO
gestiona
PB
disponible
equipo
colabora
Stakeholders
Scrum
Team
construye
solución
vela
calidad
autoorganiza
SM
Ayuda
eliminar
impedimentos
forma
acompaña
prácticas
ágiles
facilitador
líder
servicial
único
compromiso
asume
equipo
Sprint
Goal
elementos
específicos
backlog
Daily
Scrum
Objetivo
permitir
inspeccionar
adaptar
Sprint
Goal
Duración
15
minutos
dirección
centra
Identificación
eliminación
impedimentos
camino
desarrolladores
Revisión
prioridades
pregunta
hicimos
ayer
bloqueando
Sprint
Review
Demo
Sirve
inspeccionar
resultado
sprint
generar
adaptaciones
Scrum
Team
presenta
Stakeholders
juntos
analizan
avance
Product
Goal
agenda
guión
lista
issues
presentar
done
llegaron
presentar
basado
Sprint
Backlog
Ayuda
ordenar
Demo
Sprint
Retrospective
Reunión
duración
fija
realizada
sprint
equipo
reflexione
progreso
darse
retroalimentación
mejorar
Objetivo
mejorar
calidad
efectividad
equipo
inspecciona
personas
interacciones
procesos
herramientas
analiza
falló
salió
identifica
acciones
mejora
implementar
81
PRACTICA
ARMADO
DESARROLLO
USER
STORIES
CRITERIOS
ACEPTACION
APLICANDO
REGLAS
ESCRITURA
VISTAS
TEORIA
PRACTICA
DESARROLLO
STORY
MAPPING
CASO
PLANTEADO
Global
integrador
Recuperatorio
Finales
82
Defina
User
Story
representa
estructura
jerarquía
backlog
Indique
Épica
Storyboard
PRACTICA
US
proporcionar
identificador
descripción
rol
quiero
motivo
colocar
estimación
SP
Scrum
Poker
ejemplo
conversación
aspectos
definidos
tiempos
documentación
criterios
aceptación
Espero
Epic
Link
US
relacionadas
obtienen
dividir
Épica
US
estimación
13
SP
Storyboard
representación
visual
derivada
Kanban
swimlanes
columnas
representan
progreso
trabajo
sprint
83
Explique
consiste
INVEST
PRACTICA
características
definir
US
Independant
completarse
orden
Negotiable
cocreadas
desarrolladores
clientes
Valuable
clientes
usuarios
Estimable
programadores
encontrar
estimación
razonable
Small
construibles
tiempo
persona
Testable
escribir
pruebas
verificarlas
84
Explique
técnicas
usadas
priorizar
US
MoSCoW
pares
Kano
100
puntos
PRACTICA
Ingeniería
Calidad
Software
pág.
16
MoSCoW
Must
Should
Could
Won’t
Pares
comparación
US
Kano
satisfacción
disatisfacción
provocará
clientes
cumplimiento
incumplimiento
clasifican
satisfactores
disatisfactores
excitantes
100
puntos
participantes
distribuyen
100
puntos
US
teniendo
prioridad
puntos
sumen
85
Explique
dependencias
US
PRACTICA
dependencias
obligatorias
discrecionales
internas
externas
combinaciones
86
Explique
criterios
aceptación
formatos
Gherkin
PRACTICA
condiciones
producto
software
satisfacer
aceptado
usuario
cliente
Formatos
Comprobar
criterios
Demostrar
comportamiento
esperado
Verificar
rol
acción
resultado
comportamiento
esperado
contexto
escenario
adicionalmente
contexto
evento
comportamiento
resultado
comportamiento
esperado
Gherkin
Escenario
número
título
contexto
adicionalmente
contexto
evento
resultado
comportamiento
esperado
87
Explique
método
medir
calidad
criterio
aceptación
SMART
PRACTICA
Specific
Measurable
Achievable
Relevant
Time-boxed
88
Indique
reglas
escritura
criterios
aceptación
PRACTICA
Evitar
voz
activa
Evitar
pronombres
Evitar
conjunciones
Evitar
absolutos
inalcanzables
89
Explique
consiste
user
story
mapping
compone
mapa
PRACTICA
Ingeniería
Calidad
Software
pág.
17
US
Mapping
establece
Goal
obtienen
actividades
épicas
finalmente
US
US
ubican
épica
surgen
grafican
líneas
horizontales
dividiéndolas
sprint
realizarían
90
función
artefactos
Scrum
compromiso
contienen
gráfica
función
aumentar
transparencia
inspeccionar
adaptar
eventos
compromiso
asegurar
transparencia
91
Indique
cuadro
definición
artefactos
compromiso
Artefacto
Descripción
Product
Backlog
Lista
ordenada
fuente
trabajo
Scrum
Team
Compromiso
Product
Goal
futuro
producto
sirve
guía
Scrum
Team
planificaciones
Sprint
Backlog
Contiene
Sprint
Goal
PBIs
seleccionados
plan
lograrlo
detalle
suficiente
DoR
desarrollado
Compromiso
Sprint
Goal
maneras
conseguirlo
renegociar
PO
tareas
caso
alcanzarlo
Incremento
paso
Product
Goal
cumplir
DoD.
Sprint
presenta
juntos
Sprint
Review
Compromiso
Definition
of
Done
DoD
descripción
formal
incremento
alcanza
medidas
calidad
requeridas
producto
92
representan
Story
Points
tratan
SP
representan
afectar
esfuerzo
necesario
completar
ítem
Tratan
incertidumbre
complejidad
riesgo
93
estimar
Midiendo
velocidad
trabajo
completado
intervalo
tiempo
suele
sprint
valor
aportado
94
Defina
refinamiento
ayuda
Reorganización
PB
ayuda
dejar
listos
DoR
PBIs
permite
conversaciones
necesarias
retrasar
equipo
entrega
valor
95
formas
estimar
cuadro
Talla
camiseta
Estimación
Mágica
Planning
Poker
96
diferencia
PBI
US
US
PBI
Explicación
general
informal
función
software
escrita
perspectiva
usuario
cliente
Elemento
alto
nivel
describe
funcionalidad
general
incluir
US
elementos
Enfoque
centradas
valor
cliente
Enfoque
centradas
amplia
variedad
elementos
trabajo
Perspectiva
usuario
Contenido
especificaciones
solicitudes
funciones
correcciones
errores
requisitos
cambio
Unidad
trabajo
pequeña
desarrollo
ágil
Priorización
basada
valor
aporta
complejidad
Ingeniería
Calidad
Software
pág.
18
Colaboración
fomenta
partes
interesadas
técnicas
Inclusión
técnica
97
Slicing
ventajas
descomponer
trabajo
ítems
pequeños
ayuden
negocio
equipo
priorización
estimación
momento
planificar
vertical
horizontal
método
SPIDR
Ventajas
Entrega
valor
frecuencia
Planificación
fácil
Feedback
frecuente
negocio
sincronización
personas
equipos
Mejores
prioridades
riesgo
Integraciones
complicadas
Entendimiento
compartido
98
Indique
DoR
DoD.
debería
incluir
definición
DONE
DoR
técnica
definir
características
cumplir
ítem
sprint
DoD
entendimiento
compartido
completado
producto
genérico
incremento
visible
universalmente
entendido
formado
consenso
PO
desarrolladores
Testing
denominador
común
calidad
producto
suelen
relacionar
requerimientos
funcionales
99
Scrum
Dejar
respetar
framework
específico
comunicarse
PO
Dejar
actualizar
tableros
herramientas
gestionan
información
disponible
comuniquen
disponer
PO
Contar
SM
asignado
clientes
proyectos
Asignar
proyectos
miembros
Scrum
Team
excepciones
aplicar
prácticas
Sacrificar
calidad
software
2.3-Desarrollo
Métricas
Agiles
100
eligen
métricas
proyecto
ágil
eligen
proyecto
necesita
medir
reportar
manager
proyecto
cliente
permita
medir
calidad
cumplimiento
objetivos
hallar
errores
oportunidades
mejora
puedan
realimentar
actualizar
101
Kanban
significa
WIP
mide
WIP
significa
Trabajo
curso
estableciendo
límite
mide
lead
time
tiempo
completar
elemento
tratando
minimizarlo
102
XP
framework
ágil
Significa
Programación
Extrema
consiste
integrar
prácticas
métodos
tradicionales
resumiendo
utilizando
práctico
eficaz
Ingeniería
Calidad
Software
pág.
19
103
responsabilidades
arquitecto
responsabilidad
investigar
evaluar
seleccionar
mejores
alternativas
tecnológicas
atender
necesidades
específicas
negocio
costo
razonable
104
Completar
arquitectos
identificar
involucrar
activamente
interesados
Comprender
restricciones
reales
sistema
Administrar
expectativas
interesados
Negociar
prioridades
sistema
Tomar
decisiones
compromiso
105
etapas
proceso
arquitectura
software
Definir
requerimientos
Diseño
arquitectura
Validación
106
cuestionamientos
precisar
funcionamiento
software
Costo
dispuesto
invertir
desarrollo
mantenimiento
Duración
desarrollo
Cantidad
usuarios
Grado
aislamiento
funciona
forma
aislada
integra
productos
107
Nombre
ejemplos
trabaja
arquitecto
gráfica
colores
Patrones
empresariales
Patrones
arquitectura
Estilos
arquitectura
Principios
arquitectura
Patrones
diseño
Principios
diseño
OOP
Paradigmas
programación
Código
limpio
108
Nombre
responsabilidades
posee
Arquitecto
software
Articular
visión
arquitectónica
Conceptuar
experimentar
alternativas
tecnológicas
Crear
modelos
componentes
documentos
especificación
interfaces
Validar
arquitectura
requerimientos
presunciones
impacto
alternativa
seleccionada
estrategia
tecnológica
organización
109
Nombre
funciones
Arquitecto
software
fundamental
rol
Gestión
requisitos
funcionales
definición
Arquitectura
Software
Selección
tecnología
responsabilidad
riesgo
técnico
Mejora
continua
arquitectura
Facilitador
líder
formador
aspectos
arquitectura
área
desarrollo
Aseguramiento
calidad
fundamental
rol
CI
110
tamaño
sistema
tipos
arquitectos
especializados
intervenir
especialización
Ingeniería
Calidad
Software
pág.
20
soluciones
proporciona
soluciones
específicas
integrales
serie
aplicaciones
proveedor
programa
específico
organización
sistemas
diseña
arquitectura
global
sistemas
informáticos
involucrando
hardware
Enterprise
diseña
arquitectura
sistemas
transversales
empresa
Orientado
servicios
SOA
específico
tecnología
DevOps
especializado
CI
CD
111
plantean
sirven
métricas
Plantean
medimos
valor
agregan
Sirven
apalancar
mejora
continua
ayudando
organizaciones
enfocar
personas
importante
generar
valor
112
calcula
avance
proyecto
ágil
métricas
ágiles
miden
aspectos
proceso
desarrollo
lugar
métricas
empresariales
sirven
gestión
avance
horas
fecha
proyecto
113
métricas
agiles
principales
definición
Velocidad
cantidad
trabajo
completado
sprint
Lead
time
tiempo
transcurrido
solicita
trabajo
completa
Cycle
time
tiempo
tarda
completar
tarea
comenzó
trabajar
Burnup
Burndown
charts
representaciones
visuales
trabajo
frente
planificado
Evolución
épicas
versiones
seguimiento
progreso
sprint
Gráficos
control
tiempo
progreso
termina
Diagramas
flujo
acumulado
cantidad
trabajo
acumulado
etapas
periodo
determinado
Throughput
rendimiento
cantidad
trabajo
completa
periodo
tiempo
determinado
Defect
rate
cantidad
errores
defectos
encontrados
trabajo
entregado
Customer
satisfaction
medida
cliente
satisfecho
producto
entregado
Net
promoter
score
medida
disposición
clientes
recomendar
producto
Team
happiness
satisfacción
compromiso
equipo
trabajo
proceso
ágil
114
métricas
ágiles
optimizar
entrega
antipatrones
alerta
Sprint
burndown
chart
permite
observar
cantidad
trabajo
pendiente
sprint
velocidad
equipo
Antipatrones
equipo
termina
sprints
tiempo
equipo
cumple
previsiones
sprints
línea
evolución
marca
caídas
pronunciadas
PO
añade
cambia
alcance
mitad
sprint
Evolución
épicas
versiones
informan
flujo
trabajo
épica
versión
Antipatrones
previsiones
épicas
versiones
actualizan
media
equipo
avanza
observa
progreso
iteraciones
PO
entiende
completamente
problema
solucionar
alcance
aumenta
rapidez
capacidad
atenderlo
equipo
equipo
lanza
versiones
incrementales
desarrollo
épicas
Velocidad
permite
predecir
rapidez
equipo
recorrer
backlog
ve
burndown
Antipatrones
variaciones
periodo
tiempo
Ingeniería
Calidad
Software
pág.
21
Gráfico
control
centra
tiempo
ciclo
permite
medir
resultados
cambios
instantáneamente
Antipatrones
buscar
tendencias
variable
principio
Aumento
duración
ciclo
Duración
ciclo
heterogénea
Diagrama
flujo
acumulado
ayuda
entender
fluye
trabajo
identificar
cuellos
botella
evaluar
eficiencia
velocidad
entrega
Antipatrones
incidencias
causan
bloqueos
causan
enormes
copias
seguridad
partes
proceso
escasas
Crecimiento
incontrolado
backlog
tiempo
115
Describa
magnitudes
miden
gestión
proyectos
agiles
Tiempo
utiliza
timeboxing
sprint
Scrum
Velocidad
cantidad
trabajo
realizada
periodo
tiempo
Trabajo
unidades
relacionadas
directa
indirectamente
producto
registra
trabajo
estima
trabajo
116
Explique
consiste
mide
velocidad
velocidad
absoluta
relativa
trabajo
tiempo
tiempo
real
ideal
tiempo
teórico
tarea
trabajo
trabajo
pendiente
unidades
trabajo
puntos
función
Velocidad
magnitud
determinada
trabajo
periodo
tiempo
ideal
Velocidad
absoluta
cantidad
producto
construido
sprint
Velocidad
relativa
cantidad
producto
construido
unidad
tiempo
trabajo
Trabajo
medida
trabajo
Tiempo
timeboxing
Tiempo
real
tiempo
efectivo
trabajo
Tiempo
ideal
teórico
tarea
tiempo
necesario
trabajo
condiciones
ideales
Trabajo
completo
Trabajo
pendiente
estimar
Unidades
trabajo
relacionada
directa
indirectamente
producto
consistente
Puntos
función
unidad
medida
relativa
determinar
cantidad
trabajo
necesaria
construir
funcionalidad
historia
usuario
Product
Backlog
117
consisten
métricas
Lead
Time
Cycle
time
Lead
time
tiempo
inicia
tarea
completa
incluyendo
tiempos
espera
Cycle
time
tiempo
completar
tarea
trabajo
empieza
trabajar
activamente
completa
Ingeniería
Calidad
Software
pág.
22
