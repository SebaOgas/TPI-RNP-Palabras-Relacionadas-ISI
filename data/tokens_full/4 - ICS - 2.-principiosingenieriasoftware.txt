Principios
de
la
Ingeniería
de
Software
 
 
 

Introduccci
ón
.........................................................................................................................
1


Rigor
y
formalidad
:
................................
.................................................................................
1


Separaci
ón
de
intereses
:
.........................................................................................................
2


Modularidad:
..........................................................................................................................
3


Abstracci
ón
:
.................................................
..........................................................................
3


Anticipaci
ón
al
cambio:
............................................................................................................
4


Generalidad
:
..........................................................................................................................
4


Incrementalidad
:
....................................................................................................................
5

 

Introduccci
ón


En
este
documento
se
presentan
algunos
principios
g
enerales
de
importancia
,
que
son
centrales
para


desarrollar
software
en
forma
exitosa
,
y
que
tratan
 
tanto
del
proceso
de
ingenier
ía
de
software
como
del


producto
final
.
El
proceso
adecuado
ayudar
á
a
desarrollar
el
producto
deseado
,
pero
tambi
én
el
producto


deseado
afectar
á
la
elecci
ón
del
proceso
a
utilizar
.
Un
problema
tradicional
d
e
la
ingenier
ía
de
software
es


poner
el
énfasis
en
el
proceso
o
en
el
producto
excluyendo
al
otro
,
sin
embargo
,
ambos
son
importantes
.
 
 

Estos
principios
son
suficientemente
generales
para
 
ser
aplicados
a
lo
largo
del
proceso
de
construcci
ón
y


gesti
ón
del
software
,
sin
embargo
no
son
suficientes
para
 
guiar
el
desarrollo
ya
que
describen
propiedades


deseables
de
los
procesos
y
productos
de
software
;
para
aplicarlos
es
necesario
contar
con
m
étodos


apropiados
y
t
écnicas
espec
íficas
.
Los
m
étodos
son
gu
ías
generales
que
gobiernan
la
ejecuci
ón
de
alguna


actividad
,
presentan
enfoques
rigurosos
,
sistem
áticos
y
disciplinados
,
por
otro
lado
,
las
t
écnicas
son
m
ás


mec
ánicas
y
se
refieren
a
aspectos
m
ás
“
técnicos
”
que
los
m
étodos
y
tienen
aplicaci
ón
restringida
.
Una


metodolog
ía
es
un
conjunto
de
m
étodos
y
t
écnicas
cuyo
prop
ósito
es
promover
cierto
enfoque
para
la


resoluci
ón
de
un
problema
mediante
ese
conjunto
seleccionado
.
Las
herramientas
son
desarrolladas
para


apoyar
la
aplicaci
ón
de
t
écnicas
,
m
étodos
y
metodolog
ías
.
Los
principios
son
la
base
de
todos
los
m
étodos
,


técnicas
,
metodolog
ías
y
herramientas
.

 
 

Rigor
y
formalidad
:
 

En
cualquier
proceso
creativo
existe
la
tendencia
a
 
seguir
la
inspiraci
ón
del
momento
de
forma
no


estructurada
,
sin
ser
precisos
;
el
desarrollo
de
so
ftware
es
de
por
s
í
una
actividad
creativa
.
Por
otro
lado
,
el


rigor
es
un
complemento
necesario
de
la
creatividad
 
en
todas
las
actividades
de
la
ingenier
ía
;
únicamente
a


trav
és
de
un
enfoque
riguroso
podr
án
producirse
productos
m
ás
confiables
,
controlando
sus
costos
e


incrementando
el
grado
de
confianza
en
los
mismos
.
El
rigor
no
tiene
por
qu
é
restringir
la
creatividad
,
por
el


contrario
,
puede
potenciar
la
creatividad
aumentand
o
la
confianza
del
ingeniero
en
los
resultados
de
l
a


misma
,
una
vez
que
estos
son
analizados
a
la
luz
de
 
evaluaciones
rigurosas
.
Parad
ójicamente
el
rigor
es
una


cualidad
intuitiva
que
no
puede
ser
definida
en
for
ma
rigurosa
,
pero
s
í
pueden
alcanzarse
varios
niveles
de


rigurosidad
siendo
el
m
ás
alto
la
formalidad
.
 
 

La
formalidad
es
un
requerimiento
m
ás
fuerte
que
el
rigor
:
requiere
que
el
proceso
de
s
oftware
sea
guiado
y


evaluado
por
leyes
matem
áticas
.
Obviamente
formalidad
implica
rigor
pero
no
a
la
inversa
:
se
puede
ser


riguroso
incluso
informalmente
.
En
todos
los
campos
 
de
la
ingenier
ía
el
proceso
de
dise
ño
sigue
una


secuencia
de
pasos
bien
definidos
,
establecidos
en
forma
precisa
y
posiblemente
probados
,
siguiendo
en
 

cada
paso
alg
ún
m
étodo
o
aplicando
alguna
t
écnica
.
Estos
m
étodos
y
t
écnicas
estar
án
basados
en
alguna


combinaci
ón
de
resultados
te
óricos
derivados
de
un
modelado
formal
de
la
realida
d
,
ajustes
emp
íricos
que


tienen
en
cuenta
fen
ómenos
no
presentes
en
el
modelo
,
y
m
étodos
pr
ácticos
de
evaluaci
ón
que
dependen
de


la
experiencia
pasada
(
“
rules
of
thumb
”
)
.

 
 

Un
ingeniero
debe
saber
c
ómo
y
cu
ándo
ser
formal
si
es
requerido
,
entendiendo
el
nive
l
de
rigor
y


formalidad
que
debe
ser
alcanzado
dependiendo
de
la
 
dificultad
conceptual
de
la
tarea
y
su
criticidad
,
 
lo
que


puede
variar
para
diferentes
partes
del
mismo
siste
ma
.
Por
ejemplo
,
partes
cr
íticas
pueden
requerir
una


descripci
ón
formal
de
las
funciones
esperadas
y
un
enfoque
fo
rmal
para
su
evaluaci
ón
mientras
que
partes


est
ándares
o
bien
entendidas
requerir
án
enfoques
m
ás
simples
.
Esto
aplica
tambi
én
en
el
caso
de
la


ingenier
ía
de
software
,
por
ejemplo
en
el
caso
de
la
especif
icaci
ón
del
software
la
cual
puede
establecerse
de
forma
rigurosa
utilizando
lenguaje
natural
o
tam
bi
én
puede
darse
formalmente
mediante
una
descripci
ón


formal
en
un
lenguaje
de
sentencias
l
ógicas
.
La
ventaja
de
la
formalidad
sobre
el
rigor
e
s
que
puede
ser
la


base
para
la
mecanizaci
ón
del
proceso
,
por
ejemplo
si
se
quiere
utilizar
la
 
descripci
ón
formal
para
crear
el


programa
si
éste
no
existe
,
o
para
mostrar
que
el
programa
se
co
rresponde
con
las
especificaciones


establecidas
si
tanto
el
programa
como
las
especifi
caciones
existen
.
 
 

Tradicionalmente
es
en
la
fase
de
codificaci
ón
donde
se
utiliza
un
enfoque
formal
ya
que
los
pro
gramas
son


objetos
formales
:
son
escritos
en
un
lenguaje
cuya
sintaxis
y
sem
ántica
est
án
completamente
definidas
.
Los


programas
son
descripciones
formales
que
son
manipu
ladas
autom
áticamente
por
los
compiladores
que


chequean
su
correctitud
y
las
transforman
en
una
fo
rma
equivalente
en
otro
lenguaje
(
assembler
o
lengu
aje


de
m
áquina
)
,
todo
lo
cual
es
posible
gracias
a
la
utilizaci
ón
de
la
formalidad
en
la
programaci
ón
.
 
 

La
aplicaci
ón
del
principio
de
rigor
y
formalidad
tiene
influen
cia
beneficiosa
en
la
obtenci
ón
de
cualidades
del


software
como
la
confiabilidad
,
verificabilidad
,
ma
ntenibilidad
,
reusabilidad
,
portabilidad
,
comprensi
bilidad
e


interoperabilidad
.
Por
ejemplo
,
una
documentaci
ón
del
software
rigurosa
o
incluso
formal
puede
mejo
rar


todas
estas
cualidades
sobre
una
documentaci
ón
informal
que
puede
ser
ambigua
,
inconsistente
e


incompleta
.

 
 

El
principio
de
rigor
y
formalidad
tambi
én
se
aplica
al
proceso
de
software
;
la
documentaci
ón
rigurosa
del


proceso
ayuda
a
que
éste
sea
reutilizado
en
proyectos
similares
y
tambi
én
ayuda
a
mantener
un
producto


existente
permitiendo
que
las
modificaciones
se
rea
licen
partiendo
del
nivel
intermedio
apropiado
,
en
lugar


de
hacerlo
solamente
sobre
el
c
ódigo
final
.
Si
el
proceso
de
software
est
á
especificado
en
forma
rigurosa
,
los


gerentes
podr
án
controlar
su
adecuaci
ón
y
evaluar
su
oportunidad
para
mejorar
la
productividad
.

 

Separaci
ón
de
intereses
:
 

Este
principio
permite
enfrentarse
a
los
distintos
aspectos
individuales
de
un
problema
de
forma
de


concentrarse
en
cada
uno
por
separado
.
En
el
desarr
ollo
de
un
producto
de
software
deben
tomarse
mucha
s


decisiones
como
las
funciones
que
ser
án
ofrecidas
,
la
confiabilidad
esperada
,
eficiencia
de
tiempo
y
espacio
,


relaciones
con
el
ambiente
como
recursos
de
softwar
e
o
hardware
especial
,
interfaces
de
usuario
,
entre
 

otras
.
Otras
decisiones
tienen
que
ver
con
el
proce
so
de
desarrollo
como
el
ambiente
de
desarrollo
,
la
 

organizaci
ón
y
estructura
del
equipo
,
la
agenda
,
los
procedimi
entos
de
control
,
las
estrategias
de
dise
ño
,
los


mecanismos
de
recuperaci
ón
frente
a
errores
,
entre
otras
.
Y
otras
m
ás
que
tienen
que
ver
con
temas


econ
ómicos
y
financieros
.
Muchas
de
estas
decisiones
pued
en
no
estar
relacionadas
entre
s
í
por
lo
que


obviamente
podr
án
ser
tratadas
en
forma
separada
,
pero
muchas
otras
 
estar
án
fuertemente
relacionadas
y


ser
á
pr
ácticamente
imposible
tener
en
cuenta
todos
los
tema
s
al
mismo
tiempo
o
por
parte
de
las
mismas


personas
.
La
única
forma
de
enfrentar
la
complejidad
de
un
proyecto
es
separar
los
distintos
intereses
.
 
 

La
primer
forma
en
la
que
se
pueden
separar
los
dis
tintos
intereses
es
seg
ún
el
tiempo


,
lo
que
permite


planificar
las
distintas
actividades
y
eliminar
el
trabajo
extra
que
implica
cambiar
de
una
a
otra
en
forma
no


restringida
.
Esta
separaci
ón
seg
ún
el
tiempo
es
la
motivaci
ón
que
hay
tras
el
ciclo
de
vida
del
software
;
un


modelo
racional
de
la
secuencia
de
actividades
que
deber
ían
seguirse
en
la
producci
ón
de
software
.
 
 

Otra
forma
de
separaci
ón
de
intereses
es
en
t
érminos
de
las
cualidades

 
que
deber
ían
tratarse
por
separado
,


por
ejemplo
podr
ían
enfrentarse
separadamente
la
eficiencia
y
correc
titud
de
un
programa
,
primero


dise
ñándolo
cuidadosa
y
estructuradamente
para
garantizar
 
su
correctitud
a
priori
y
luego
reestructurarlo


para
mejorar
su
eficiencia
.
 
 

Otro
tipo
importante
de
separaci
ón
de
intereses
permite
que
distintas
visiones
del
s
oftware

 
sean
analizadas


en
forma
separada
,
por
ejemplo
al
analizar
los
requ
erimientos
de
una
aplicaci
ón
podr
ía
ser
de
ayuda


concentrarse
por
un
lado
en
los
datos
que
fluyen
de
 
una
actividad
a
otra
y
por
otro
lado
en
el
flujo
d
e


control
que
gobierna
la
sincronizaci
ón
de
dichas
actividades
.
Ambas
ayudan
a
entender
el
 
sistema
y
ninguna


de
las
dos
provee
una
visi
ón
completa
del
mismo
.
 
 

Otra
forma
m
ás
de
aplicaci
ón
de
este
principio
es
enfrentar
partes
del
mismo
s
istema
en
forma
separada
,


esto
es
en
t
érminos
de
tama
ño


.
Este
es
un
concepto
fundamental
que
debe
dominars
e
para
enfrentar
la


complejidad
de
la
producci
ón
de
software
,
y
es
tan
importante
que
se
trata
com
o
un
punto
aparte
bajo
el


principio
de
modularidad
.
 
 

Si
bien
podr
ían
perderse
algunas
optimizaciones
potenciales
al
n
o
tener
en
cuenta
el
problema
en
su
conjunto
,
la
complejidad
global
puede
resolverse
mu
cho
mejor
concentr
ándose
en
los
distintos
aspectos
por


separado
,
incluso
si
no
fuera
posible
descomponer
el
problema
en
los
distintos
aspectos
en
forma
inmed
iata
,


es
posible
tomar
inicialmente
algunas
decisiones
de
 
dise
ño
generales
y
luego
aplicar
el
principio
de


separaci
ón
de
intereses
en
forma
efectiva
.
 
 

Como
observaci
ón
final
,
la
separaci
ón
de
intereses
podr
ía
resultar
en
la
separaci
ón
de
responsabilidades
al


enfrentarse
a
los
distintos
aspectos
a
tener
en
cue
nta
,
por
lo
tanto
es
la
base
para
dividir
el
trabaj
o
en
un


problema
complejo
en
asignaciones
de
trabajo
espec
íficas
posiblemente
a
personas
distintas
con
distint
as


habilidades
.

 
 

Modularidad
:


Un
sistema
complejo
puede
dividirse
en
piezas
m
ás
simples
llamadas
m
ódulos
,
un
sistema
compuesto
de


módulos
es
llamado
modular
.
El
principal
beneficio
de
 
la
modularidad
es
que
permite
la
aplicaci
ón
del


principio
de
separaci
ón
de
intereses
en
dos
fases
:
al
enfrentar
los
detal
les
de
cada
m
ódulo
por
separado


ignorando
detalles
de
los
otros
m
ódulos
,
y
al
enfrentar
las
caracter
ísticas
globales
de
todos
los
m
ódulos
y


sus
relaciones
para
integrarlos
en
un
único
sistema
coherente
.
Si
estas
fases
son
ejecutad
as
en
ese
orden
se


dice
que
el
sistema
es
dise
ñado
de
abajo
hacia
arriba
(
bottom
up
)
,
en
el
orden
inverso
se
dice
que
el


sistema
es
dise
ñado
de
arriba
hacia
abajo
(
top
down
)
.
 
 

El
principio
de
modularidad
tiene
tres
(
3
)
objetivo
s
principales
:
capacidad
de
descomponer
un
sistema


complejo
,
capacidad
de
componerlo
a
partir
de
m
ódulos
existentes
y
comprensi
ón
del
sistema
en
piezas
(
o


pedazos
)
.

 
 

La
posibilidad
de
descomponer
un
sistema
se
basa
en
 
dividir
en
subproblemas
de
forma
top
down
el


problema
original
y
luego
aplicar
el
principio
a
ca
da
subproblema
en
forma
recursiva
.
Este
procedimien
to


refleja
el
bien
conocido
principio
de
Divide
y
Vencer
ás
(
Divide
&
Conquer
)
.

 
 

La
posibilidad
de
componer
un
sistema
est
á
basada
en
obtener
el
sistema
final
de
forma
bottom
 
up
a
partir


de
componentes
elementales
.
Idealmente
en
la
produc
ci
ón
de
software
se
quisiera
poder
ensamblar
nuevas


aplicaciones
tomando
m
ódulos
de
una
biblioteca
y
combin
ándolos
para
formar
el
producto
requerido
;
estos


módulos
deber
ían
ser
dise
ñados
con
el
objetivo
expreso
de
ser
reusables
.

 
 

La
capacidad
de
comprender
cada
parte
de
un
sistema
 
en
forma
separada
ayuda
a
la
modificabilidad
del


sistema
.
Debido
a
la
naturaleza
evolutiva
del
softw
are
muchas
veces
se
debe
volver
hacia
atr
ás
al
trabajo


previo
y
modificarlo
.
Si
el
sistema
solo
puede
ser
comprendido
como
un
todo
las
modificaciones
ser
án


dif
íciles
de
aplicar
y
el
resultado
ser
á
poco
confiable
.
Cuando
se
hace
necesario
reparar
e
l
sistema
,
la


modularizaci
ón
apropiada
ayuda
a
restringir
la
b
úsqueda
de
la
fuente
de
error
a
componentes
separados
.

 
 

Para
alcanzar
estos
objetivos
los
m
ódulos
en
los
que
se
divida
el
sistema
deben
tener
a
lta
cohesi
ón
y
bajo


acoplamiento
.
Un
m
ódulo
tiene
alta
cohesi
ón
si
todos
sus
elementos
est
án
fuertemente
relacionados
y
son


agrupados
por
una
raz
ón
l
ógica
,
esto
es
todos
cooperan
para
alcanzar
un
objet
ivo
com
ún
que
es
la
funci
ón


del
m
ódulo
.
La
cohesi
ón
es
una
propiedad
interna
de
cada
m
ódulo
,
por
el
contrario
el
acoplamiento


caracteriza
las
relaciones
de
un
m
ódulo
con
otros
.
El
acoplamiento
mide
la
interdepend
encia
de
dos


módulos
,
por
ejemplo
si
el
m
ódulo
A
hace
una
llamada
a
una
rutina
provista
por
e
l
m
ódulo
B
o
accede
a
una


variable
declarada
por
el
m
ódulo
B.
Si
dos
m
ódulos
dependen
fuertemente
uno
del
otro
tienen
un
a
lto


acoplamiento
lo
que
los
vuelve
dif
íciles
de
analizar
,
comprender
,
modificar
,
testear
o
 
reusar
en
forma


separada
.
Idealmente
se
quiere
que
los
m
ódulos
de
un
sistema
tengan
bajo
acoplamiento
.

 
 

Una
estructura
modular
con
alta
cohesi
ón
y
bajo
acoplamiento
permite
ver
los
m
ódulos
como
cajas
negras


cuando
se
describe
la
estructura
global
del
sistema
 
y
luego
encarar
cada
m
ódulo
por
separado
cuando
se


analiza
o
describe
la
funcionalidad
del
m
ódulo
.

 
 

Abstracci
ón
:
 

La
abstracci
ón
es
un
proceso
mediante
el
 
cual
se
identifican
lo
s
aspectos
relevantes
de
un
problema


ignorando
los
detalles
;
es
un
caso
especial
del
pri
ncipio
de
separación
de
intereses
en
el
cual
se
separan
los


aspectos
importantes
de
los
detalles
de
menor
impor
tancia
.
Lo
que
se
abstrae
y
lo
que
se
considera


depender
á
del
prop
ósito
de
la
abstracci
ón
,
por
lo
que
podr
án
hacerse
distintas
abstracciones
de
la
misma
realidad
cada
una
de
las
cuales
proveer
á
una
visi
ón
de
la
realidad
que
sirve
para
un
prop
ósito
espec
ífico
.
 
 

Por
ejemplo
,
cuando
los
requerimientos
de
una
nueva
 
aplicaci
ón
son
analizados
y
especificados
se
construye


un
modelo
de
la
aplicaci
ón
propuesta
,
el
cual
podr
á
ser
expresado
en
varias
formas
dependiendo
del
gra
do


requerido
de
rigor
y
formalidad
.
Sin
importar
cual
sea
el
lenguaje
elegido
para
expresar
los
requerimi
entos
,


lo
que
se
provee
es
un
modelo
que
abstrae
los
detal
les
que
se
decidi
ó
que
pod
ían
ser
ignorados
en
forma


segura
.
Los
lenguajes
de
programaci
ón
tambi
én
son
abstracciones
construidas
sobre
el
hardware
q
ue


proveen
constructores
útiles
y
poderosos
para
escribir
programas
ignorando
 
detalles
como
el
n
úmero
de
bits


que
se
utilizan
para
representar
n
úmeros
o
los
mecanismos
de
direccionamiento
,
lo
que
permite


concentrarse
en
el
problema
a
resolver
en
lugar
de
la
forma
de
instruir
a
la
m
áquina
para
hacerlo
.

 
 

El
principio
de
abstracci
ón
es
un
principio
importante
que
se
aplica
tanto
a
los
productos
de
software
como
a


los
procesos
.
En
este
último
caso
,
por
ejemplo
,
al
realizar
la
estimaci
ón
de
costos
para
una
nueva
aplicaci
ón


una
forma
posible
es
identificar
algunos
factores
c
laves
del
nuevo
sistema
y
extrapolar
los
valores
a
partir
de


perfiles
de
costo
de
sistemas
previos
similares
.
Lo
s
factores
claves
utilizados
para
realizar
el
an
álisis
son


abstracciones
del
sistema
.

 
 

Anticipaci
ón
al
cambio
:
 

El
software
sufre
cambios
constantemente
,
como
se
v
io
al
tratar
la
mantenibilidad
del
software
estos


cambios
pueden
surgir
por
la
necesidad
de
eliminar
errores
que
no
fueron
detectados
antes
de
liberar
l
a


aplicaci
ón
,
o
por
la
necesidad
de
apoyar
la
evoluci
ón
de
la
aplicaci
ón
debido
a
nuevos
requerimientos
o


cambios
en
los
requerimientos
existentes
.
 
 

La
habilidad
del
software
para
evolucionar
no
viene
 
sola
sino
que
requiere
esfuerzo
especial
para
anti
cipar


cómo
y
cu
ándo
pueden
ocurrir
estos
cambios
.
Cuando
se
identif
ican
posibles
cambios
futuros
,
se
debe
tener


cuidado
de
proceder
de
forma
que
estos
sean
f
áciles
de
aplicar
,
es
importante
aislar
los
posibles
 
cambios
en


porciones
espec
íficas
del
software
de
tal
forma
que
est
én
restringidos
a
esas
partes
.

 
 

La
anticipaci
ón
al
cambio
es
posiblemente
el
principio
que
m
ás
distingue
al
software
de
otros
tipos
de


producci
ón
industrial
.
Muchas
veces
una
aplicaci
ón
de
software
es
desarrollada
mientras
sus
requerim
ientos


aún
no
est
án
completamente
comprendidos
,
al
ser
liberado
y
obt
ener
retroalimentaci
ón
del
usuario
debe


evolucionar
con
nuevos
requerimientos
o
cambios
a
l
os
requerimientos
ya
existentes
los
cuales
pueden
t
ener


distintos
or
ígenes
,
por
ejemplo
debido
a
cambios
en
el
ambiente
de
la
organizaci
ón
.
Por
lo
tanto
este


principio
puede
ser
utilizado
para
lograr
la
evoluc
ionabilidad
del
software
y
tambi
én
la
reusabilidad
de


componentes
,
viendo
la
reusabilidad
como
evoluciona
bilidad
de
granularidad
m
ás
fina
,
a
nivel
de


componentes
.

 
 

La
aplicaci
ón
de
este
principio
requiere
que
se
disponga
de
her
ramientas
apropiadas
para
gestionar
las


varias
versiones
y
revisiones
del
software
en
forma
 
controlada
.
Debe
ser
posible
almacenar
y
recuperar
 

documentaci
ón
,
fuentes
,
ejecutables
,
etc.
de
una
base
de
datos
que
act
úe
como
repositorio
central
de


componentes
reusables
,
y
el
acceso
a
la
misma
debe
estar
controlado
.
Un
sistema
de
software
debe


mantenerse
consistente
,
incluso
cuando
se
aplican
c
ambios
a
algunos
de
sus
componentes
.
La
disciplina
que


estudia
esta
clase
de
problemas
es
la
Gesti
ón
de
Configuraci
ón
y
se
ver
á
posteriormente
.

 
 

La
anticipaci
ón
al
cambio
tambi
én
aplica
al
proceso
de
desarrollo
de
software
,
por
ejemplo
,
en
la
gesti
ón
del


proyecto
los
gerentes
deber
ían
anticipar
los
efectos
de
una
reducci
ón
de
personal
,
estimar
los
costos
y


dise
ñar
la
estructura
de
la
organizaci
ón
que
apoyar
á
la
evoluci
ón
del
software
,
y
decidir
cuando
vale
la
pena


invertir
tiempo
y
esfuerzo
en
la
producci
ón
de
componentes
reusables
tanto
como
parte
de
un
p
royecto
de


desarrollo
de
software
o
como
un
esfuerzo
de
desarrollo
paralelo
.

 

Generalidad
:
 

El
principio
de
generalidad
establece
que
al
tener
que
resolver
un
problema
se
debe
buscar
un
problema
 

más
general
que
posiblemente
est
é
oculto
tras
el
problema
original
,
puesto
que
puede
 
suceder
que
el


problema
general
no
sea
mucho
m
ás
complejo
(
a
veces
puede
ser
incluso
m
ás
simple
)
que
el
original
y


posiblemente
la
soluci
ón
al
problema
general
tenga
potencial
de
reuso
,
o
e
xista
en
el
mercado
como


producto
off-the-shelf
,
o
se
dise
ñe
un
m
ódulo
que
puede
ser
invocado
por
m
ás
de
un
punto
en
la
aplicaci
ón


en
lugar
de
tener
varias
soluciones
especializadas
.

 
Por
otro
lado
,
una
soluci
ón
general
posiblemente
sea
m
ás
costosa
en
t
érminos
de
rapidez
de
ejecuci
ón
,


requerimientos
de
memoria
o
tiempo
de
desarrollo
,
q
ue
una
soluci
ón
especializada
al
problema
original
,
por


lo
que
debe
evaluarse
la
generalidad
respecto
al
co
sto
y
la
eficiencia
al
momento
de
decidir
qu
é
vale
m
ás
la


pena
,
una
soluci
ón
general
o
una
especializada
.
 
 

La
generalidad
es
un
principio
fundamental
si
se
ti
ene
como
objetivo
el
desarrollo
de
herramientas
gen
erales


o
paquetes
para
el
mercado
,
ya
que
para
ser
exitosa
s
deber
án
cubrir
las
necesidades
de
distintas
personas
.


Estos
productos
de
prop
ósito
general
,
off-the-shelf
como
por
ejempo
los
pro
cesadores
de
texto
,
representan


una
tendencia
general
en
el
software
;
para
cada
área
espec
ífica
de
aplicaci
ón
existen
paquetes
generales


que
proveen
soluciones
est
ándares
a
problemas
comunes
.
Esta
tendencia
es
id
éntica
a
lo
que
ocurri
ó
en


otras
áreas
de
la
industria
como
por
ejemplo
,
los
autom
óviles
que
en
los
inicios
de
la
tecnolog
ía
automotriz


era
posible
hacer
autos
de
acuerdo
a
los
requerimie
ntos
espec
íficos
de
un
cliente
,
pero
a
medida
que
el
área


se
fue
industrializando
solo
pod
ían
encargarse
a
partir
de
un
cat
álogo
y
actualmente
no
es
posible
pedir
un


dise
ño
de
auto
personal
a
menos
que
se
est
é
dispuesto
a
pagar
una
enorme
cantidad
de
dinero
.

 
 

Incrementalidad
:
 

La
incrementalidad
caracteriza
un
proceso
que
se
de
sarrolla
en
forma
de
pasos
,
en
incrementos
,
alcanza
ndo


el
objetivo
deseado
mediante
aproximaciones
sucesiv
as
al
mismo
,
donde
cada
aproximaci
ón
es
alcanzada
a


trav
és
de
un
incremento
de
la
previa
.
 
 

Una
forma
de
aplicar
el
principio
de
incrementalida
d
consiste
en
identificar
subconjuntos
tempranos
de
 
una


aplicaci
ón
que
sean
útiles
de
forma
de
obtener
retroalimentaci
ón
(
feedback
)
temprana
del
cliente
.
Esto


permite
que
la
aplicaci
ón
evolucione
en
forma
controlada
en
los
casos
en
qu
e
los
requerimientos
iniciales
no


est
án
estables
o
completamente
entendidos
.
La
motivaci
ón
de
este
principio
es
que
muchas
veces
no
es


posible
obtener
todos
los
requerimientos
antes
de
c
omenzar
el
desarrollo
de
una
aplicaci
ón
sino
que
éstos


van
emergiendo
a
partir
de
la
experimentaci
ón
con
la
aplicaci
ón
o
partes
de
ésta
.
Por
lo
tanto
,
lo
antes
que


se
pueda
contar
con
feedback
del
usuario
sobre
la
u
tilidad
de
la
aplicaci
ón
,
m
ás
f
ácil
ser
á
incorporar
los


cambios
requeridos
la
producto
.
Este
principio
est
á
ligado
al
principio
de
anticipaci
ón
al
cambio
y
es
otro
de


los
principios
en
los
que
se
basa
la
evolucionabilidad
.

 

La
incrementalidad
se
aplica
a
muchas
de
las
cualid
ades
del
software
vistas
previamente
.
Se
puede
por


ejemplo
,
comenzar
con
un
n
úcleo
de
la
aplicaci
ón
que
sea
útil
e
ir
agregando
funcionalidades
,
tambi
én
se


puede
agregar
performance
en
forma
incremental
si
p
or
ejemplo
,
la
versi
ón
inicial
enfatizaba
las
interfaces


de
usuario
y
la
confiabilidad
,
luego
sucesivas
liberaciones
ir
án
mejorando
la
eficiencia
en
tiempo
y
espacio
.

 

Cuando
se
construye
una
aplicaci
ón
en
forma
incremental
,
los
pasos
intermedios
puede
n
ser
prototipos
del


producto
final
,
esto
es
solamente
una
aproximaci
ón
al
mismo
.
Obviamente
un
ciclo
de
vida
basado
en
 

prototipos
es
bastante
distinto
al
tradicional
mode
lo
en
cascada
,
y
est
á
basado
en
un
modelo
de
desarrollo


más
flexible
e
iterativo
.
Estas
diferencias
tendr
án
efectos
no
solo
en
los
aspectos
t
écnicos
sino
tambi
én
en
los


organizativos
y
de
gesti
ón
.

 

Como
se
mencionaba
en
el
principio
de
anticipaci
ón
al
cambio
,
el
desarrollo
de
software
en
forma
evo
lutiva


requiere
tener
especial
cuidado
en
la
gesti
ón
de
documentaci
ón
,
programas
,
datos
de
testeo
,
etc.
que
son


desarrollados
para
las
varias
versiones
del
softwar
e.
Cada
incremento
significativo
debe
ser
registrad
o
,
la


documentaci
ón
debe
poder
ser
f
ácilmente
recuperada
,
los
cambios
deben
aplicarse
en
forma
ordenada
,
etc.
 

Si
lo
anterior
no
se
realiza
con
cuidado
,
un
intent
o
de
desarrollo
evolutivo
podr
ía
r
ápidamente
transformarse


en
un
desarrollo
de
software
indisciplinado
y
perderse
todas
las
ventajas
potenciales
de
la
evolucionabilidad
.

 
 

A
partir
de
:
Fundamentals
of
Software
Engineering
–
Carlo
Ghezzi
,
Mehdi
Jazayeri
,
Dino
Mandrioli
.
Prenti
ce-


Hall
,
Inc
.
1991
,
edici
ón
en
ingl
és
.
ISBN-0-13-820432-2
,
Cap
ítulo
3
–
Software
Engineering
Principles
.

 
