ANALISIS
SISTEMAS
Nivel
UNIDAD
ANÁLISIS
SISTEMAS
ANÁLISIS
SISTEMAS
ORIENTADO
OBJETOS
Bibliografía
LENGUAJE
11
UNIFICADO
MODELADO
Capítulo
PRESENTACIÓN
UML
capítulo
Visión
general
UML
pasos
comprender
UML
Arquitectura
software
proceso
desarrollo
software
Lenguaje
Unificado
Modelado
Unified
Modeling
Language
UML
lenguaje
estándar
escribir
planos
software
UML
utilizarse
visualizar
espe-
cificar
construir
documentar
artefactos
sistema
involucra
cantidad
software
UML
apropiado
modelar
sistemas
información
empresas
aplicaciones
distribuidas
basadas
Web
sistemas
empotrados
tiem-
po
real
exigentes
lenguaje
expresivo
cubre
vistas
nece-
sarias
desarrollar
desplegar
tales
sistemas
expresivo
UML
difícil
aprender
utilizar
Aprender
aplicar
UML
eficaz
comienza
crear
modelo
conceptual
lenguaje
requiere
aprender
elementos
principales
bloques
básicos
construcción
UML
reglas
dictan
combinarse
bloques
mecanismos
comunes
aplican
lar-
go
lenguaje
UML
lenguaje
método
des-
arrollo
software
UML
independiente
proceso
utilizarlo
óptima-
mente
debería
proceso
fuese
dirigido
casos
centrado
arquitectura
iterativo
incremental
Visión
general
UML
UML
lenguaje
Visualizar
Especificar
Construir
Documentar
artefactos
sistema
cantidad
software
12
LENGUAJE
UNIFICADO
MODELADO
UML
lenguaje
principios
básicos
modelado
discuten
Capitulo
lenguaje
proporciona
vocabulario
reglas
combinar
palabras
vocabulario
objetivo
posibilitar
comunicación
lenguaje
modelado
lenguaje
cuyo
vocabulario
reglas
centran
representación
conceptual
físi-
ca
sistema
lenguaje
modelado
UML
lenguaje
están-
planos
software
modelado
proporciona
comprensión
sistema
suficiente
único
modelo
comprender
cosa
necesitan
múltiples
modelos
conectados
sistemas
triviales
sis-
temas
cantidad
software
requiere
lenguaje
cubra
vistas
arquitectura
sistema
evoluciona
ciclo
vida
desarrollo
software
vocabulario
reglas
lenguaje
UML
indican
crear
leer
modelos
formados
modelos
crear
deberían
crear
tarea
proceso
desarrollo
software
proceso
definido
guiará
usuarios
decidir
artefactos
producir
actividades
personal
emplea
crearlos
gestionarlos
artefactos
medir
controlar
proyecto
forma
global
UML
lenguaje
visualizar
programadores
distancia
pensar
implementación
trans-
formarla
código
cero
piensas
codificas
cosas
mo-
delan
directamente
código
texto
maravilloso
escribir
expresiones
algoritmos
forma
concisa
directa
tales
casos
programador
modelado
forma
completamente
mental
bosquejar
ideas
pizarra
blanca
servilleta
plantea
problemas
comunicación
modelos
conceptuales
sujeta
errores
persona
implicada
hable
lenguaje
Normalmente
pro-
yectos
organizaciones
desarrollan
lenguaje
difícil
comprender
pasando
alguien
ajeno
grupo
cuestiones
sistema
software
entender
construyan
modelos
trasciendan
lenguaje
programación
textual
ejemplo
signifi-
cado
jerarquía
clases
inferirse
capturarse
completamente
inspeccionando
código
clases
jerarquía
forma
parecida
dis-
tribución
física
migración
objetos
sistema
basado
Web
pue-
inferirse
capturarse
completamente
estudiando
código
fuente
sistema
desarrollador
escribió
código
documentación
escrita
modelos
cabeza
información
perderá
parcialmente
reproducible
implementación
desarrollador
marchado
escribir
modelos
UML
afronta
tercer
problema
modelo
explícito
fa-
cilita
comunicación
PRESENTACIÓN
UML
13
semántica
completa
UML
discute
The
Unified
Modeling
Language
Reference
Manual
modelado
estructura
sistema
discute
Secciones
modelado
comportamiento
sistema
discute
Secciones
cosas
modelan
textualmente
modelan
forma
grá-
fica
realidad
sistemas
interesantes
estructuras
trascienden
representado
lenguaje
programación
UML
lenguajes
gráficos
afronta
problema
mencionado
anteriormente
UML
simple
montón
símbolos
gráficos
símbolo
notación
UML
semántica
definida
desarrollador
escribir
modelo
UML
desarrollador
herramienta
interpretar
modelo
ambigüedad
afronta
pro-
blema
mencionado
anteriormente
UML
lenguaje
especificar
contexto
especificar
significa
construir
modelos
precisos
ambiguos
com-
pletos
particular
UML
cubre
especificación
decisiones
análisis
diseño
implementación
realizarse
desarrollar
desplegar
sistema
cantidad
software
UML
lenguaje
construir
UML
lenguaje
programación
visual
modelos
conectarse
forma
directa
variedad
lenguajes
programación
significa
establecer
correspondencias
modelo
UML
lenguaje
progra-
mación
Java
C++
Visual
Basic
tablas
base
datos
rela-
cional
almacenamiento
persistente
base
datos
orientada
objetos
cosas
expresan
gráficamente
representan
gráficamente
UML
cosas
expresan
textualmente
plasman
lenguaje
programación
correspondencia
permite
ingeniería
directa
generación
código
modelo
UML
lenguaje
programación
contrario
reconstruir
modelo
UML
implementación
ingeniería
inversa
magia
codifique
información
implementación
información
pierde
pasa
modelos
código
ingeniería
inversa
requiere
herramientas
soporten
intervención
humana
combi-
nación
vías
generación
código
ingeniería
inversa
produce
ingeniería
ida
vuelta
entendiendo
posibilidad
trabajar
vista
gráfica
textual
herramientas
mantienen
consistencia
vistas
correspondencia
directa
UML
suficientemente
expresivo
ambiguo
permitir
ejecución
directa
modelos
simulación
sistemas
instrumentación
sistemas
ejecución
UML
lenguaje
documentar
organización
software
trabaje
produce
clase
artefactos
código
ejecutable
artefactos
incluyen
limitan
14
LENGUAJE
UNIFICADO
MODELADO
Requisitos
Arquitectura
Diseño
Código
fuente
Planificación
proyectos
Pruebas
Prototipos
Versiones
Dependiendo
cultura
desarrollo
artefactos
tratan
formalmente
Tales
artefactos
entregables
pro-
yecto
críticos
control
medición
comunicación
requiere
sistema
desarrollo
despliegue
UML
cubre
documentación
arquitectura
sistema
deta-
lles
UML
proporciona
lenguaje
expresar
requisitos
pruebas
Fi-
nalmente
UML
proporciona
lenguaje
modelar
actividades
planificación
proyectos
gestión
versiones
utilizarse
UML
UML
pensado
principalmente
sistemas
cantidad
software
utilizado
forma
efectiva
dominios
tales
Sistemas
información
empresa
Bancos
servicios
financieros
Telecomunicaciones
Transporte
Defensa
industria
aeroespacial
Comercio
Electrónica
médica
Ámbito
científico
Servicios
distribuidos
basados
Web
UML
limitado
modelado
software
suficientemente
ex-
presivo
modelar
sistemas
software
flujos
trabajo
workflows
sistema
jurídico
estructura
comportamiento
sistema
vigilancia
médica
enfermo
diseño
hardware
PRESENTACIÓN
UML
15
modelo
conceptual
UML
comprender
UML
necesita
adquirir
modelo
conceptual
lenguaje
requiere
aprender
elementos
principales
bloques
básicos
construcción
UML
reglas
dictan
combinar
bloques
básicos
mecanismos
comunes
aplican
UML
comprendidas
ideas
leer
modelos
UML
crear
modelos
básicos
Conforme
gana
experiencia
aplicación
UML
edificar
modelo
concep-
tual
utilizando
características
avanzadas
lenguaje
clases
discuten
Capítulos
4y
Bloques
construcción
UML
vocabulario
UML
incluye
clases
bloques
construcción
Elementos
Relaciones
Diagramas
elementos
abstracciones
ciudadanos
clase
modelo
relaciones
ligan
elementos
diagramas
agrupan
colecciones
interesantes
elementos
Elementos
UML
tipos
elementos
UML
Elementos
estructurales
Elementos
comportamiento
Elementos
agrupación
Elementos
anotación
elementos
bloques
básicos
construcción
orientados
objetos
UML
utilizan
escribir
modelos
formados
Elementos
estructurales
elementos
estructurales
nombres
mode-
UML
mayoría
partes
estáticas
modelo
representan
cosas
conceptuales
materiales
tipos
elementos
estructurales
clase
descripción
conjunto
objetos
comparten
atributos
operaciones
relaciones
semántica
clase
implementa
interfaces
Gráficamente
clase
representa
rectángulo
normalmen-
incluye
nombre
atributos
operaciones
muestra
Figura
2.1
Ventana
origen
tamaño
abrir
cerrar
mover
dibujar
Figura
2.1
Clases
16
LENGUAJE
UNIFICADO
MODELADO
interfaces
discuten
Capitulo
11
interfaz
colección
operaciones
especifican
servicio
clase
componente
interfaz
describe
comportamiento
visible
externamente
elemento
interfaz
representar
comportamiento
com-
pleto
clase
componente
comportamiento
interfaz
define
conjunto
especificaciones
operaciones
signaturas
conjunto
implementaciones
operaciones
Gráficamente
interfaz
representa
círculo
nombre
interfaz
raramente
aislada
suele
conectada
clase
componente
realiza
muestra
Figura
2.2
lOrtografia
Figura
2.2
Interfaces
colaboraciones
discuten
Capítulo
27
colaboración
define
interacción
sociedad
roles
elementos
colaboran
proporcionar
comportamiento
cooperativo
suma
comportamientos
elementos
colaboraciones
dimensión
estructural
comportamiento
clase
dada
participar
colaboraciones
colaboraciones
representan
implementación
patrones
forman
sistema
Gráficamente
colaboración
representa
elipse
borde
discontinuo
incluyendo
normalmente
nombre
muestra
Figura
2.3
Cadena
responsabilidad
Figura
2.3
Colaboraciones
casos
discuten
Capítulo
16
Cuarto
caso
descripción
conjunto
secuencias
acciones
sistema
ejecuta
produce
resultado
observable
interés
actor
particular
caso
utiliza
estructurar
aspectos
comportamiento
modelo
caso
colaboración
Gráficamente
caso
representa
elipse
borde
continuo
incluyendo
normalmente
nombre
muestra
Figura
2.4
pedido
Figura
2.4
Casos
elementos
restantes
clases
activas
componentes
nodos
simi-
lares
clases
describen
conjunto
objetos
compar-
ten
atributos
operaciones
relaciones
semántica
PRESENTACIÓN
UML
17
clases
activas
discuten
Capítulo
22
componentes
discuten
Capítulo
24
nodos
discuten
Capítulo
26
suficientemente
necesarios
modelar
aspectos
sis-
tema
orientado
objetos
justificado
tratamiento
especial
Quinto
clase
activa
clase
cuyos
objetos
procesos
hilos
ejecución
origen
actividades
control
clase
activa
clase
objetos
representan
elementos
cuyo
compor-
tamiento
concurrente
elementos
Gráficamente
clase
activa
repre-
senta
clase
líneas
gruesas
incluyendo
normalmente
nombre
atributos
operaciones
muestra
Figura
2.5
GestorEventos
suspender
vaciarCola
Figura
2.5
Clases
activas
elementos
restantes
componentes
nodos
Repre-
sentan
elementos
físicos
elementos
anteriores
representan
cosas
conceptuales
lógicas
Sexto
componente
física
reemplazable
sistema
confor-
ma
conjunto
interfaces
proporciona
implementación
conjunto
sistema
encontrar
tipos
componentes
despliegue
tales
componentes
COM+
JavaBeans
componentes
artefactos
proceso
desarrollo
tales
archivos
código
fuente
componente
represen-
ta
típicamente
empaquetamiento
físico
elementos
lógicos
clases
interfaces
colaboraciones
Gráficamente
componente
representa
rec-
tángulo
pestañas
incluyendo
normalmente
nombre
muestra
Figura
2.6
orderform.java
Figura
2.6
Componentes
Séptimo
nodo
elemento
físico
tiempo
ejecución
repre-
senta
recurso
computacional
general
dispone
memoria
frecuencia
capacidad
procesamiento
conjunto
componentes
residir
nodo
migrar
nodo
Gráficamente
nodo
representa
cubo
incluyendo
normalmente
nombre
muestra
Figu-
ra
2.7
elementos
clasés
interfaces
colaboraciones
casos
clases
activas
componentes
nodos
elementos
estructurales
básicos
incluir
modelo
UML
variaciones
elementos
tales
ac-
tores
señales
utilidades
tipos
clases
procesos
hilos
tipos
clases
activas
aplicaciones
documentos
archivos
bibliotecas
páginas
tablas
tipos
componentes
18
LENGUAJE
UNIFICADO
MODELADO
casos
utilizan
estructurar
elementos
comportamiento
modelo
discuten
Capítulo
16
interacciones
discuten
Capítulo
15
Figura
2.7
Nodos
Elementos
comportamiento
elementos
comportamiento
partes
di-
námicas
modelos
UML
verbos
modelo
representan
com-
portamiento
tiempo
espacio
tipos
principales
elementos
comportamiento
interacción
comportamiento
comprende
conjunto
mensajes
intercambiados
conjunto
objetos
contexto
particular
alcanzar
propósito
específico
comportamiento
sociedad
objetos
operación
individual
especificarse
interacción
interacción
in-
volucra
elementos
incluyendo
mensajes
secuencias
acción
com-
portamiento
invocado
mensaje
enlaces
conexiones
objetos
Gráfica-
mente
mensaje
muestra
línea
dirigida
incluyendo
nombre
operación
muestra
Figura
2.8
dibujar
Figura
2.8
Mensajes
máquinas
discuten
ene
Capitulo
21
máquina
comportamiento
especifica
secuen-
cias
pasa
objeto
interacción
vida
respues-
ta
eventos
reacciones
eventos
comportamiento
clase
individual
colaboración
clases
especificarse
máquina
máquina
involucra
elementos
incluyendo
transiciones
flujo
eventos
disparan
transición
actividades
res-
puesta
transición
Gráficamente
representa
rectángulo
esquinas
redondeadas
incluyendo
normalmente
nombre
subestados
tie-
ne
muestra
Figura
2.9
Esperando
Figura
2.9
elementos
interacciones
máquinas
elementos
básicos
comportamiento
incluir
modelo
UML
Semánticamente
elementos
conectados
normalmente
diversos
elementos
estructurales
principal-
mente
clases
colaboraciones
objetos
Elementos
agrupación
elementos
agrupación
partes
organizativas
modelos
UML
cajas
descomponerse
modelo
elemento
agrupación
principal
paquetes
PRESENTACIÓN
UML
19
paquetes
discuten
Capítulo
12
paquete
mecanismo
propósito
general
organizar
elementos
grupos
elementos
estructurales
elementos
comportamiento
elementos
agrupación
incluirse
paquete
contrario
compo-
nentes
tiempo
ejecución
paquete
puramente
conceptual
tiempo
desarrollo
Gráficamente
paquete
visualiza
carpeta
incluyendo
normalmente
nombre
contenido
muestra
Figura
2.10
Reglas
negocio
Figura
2.10
Paquetes
notas
discuten
Capítulo
paquetes
elementos
agrupación
básicos
or-
ganizar
modelo
UML
variaciones
tales
frameworks
mo-
delos
subsistemas
tipos
paquetes
Elementos
anotación
elementos
anotación
partes
explicativas
modelos
UML
comentarios
aplicar
describir
clarificar
observaciones
elemento
modelo
tipo
principal
elemento
anotación
llamado
nota
nota
simplemente
símbolo
mostrar
restricciones
comentarios
elemento
colección
elementos
Gráfi-
camente
nota
representa
rectángulo
esquina
doblada
comentario
textual
gráfico
muestra
Figura
2.11
devuelve
copia
objeto
receptor
Figura
2.11
Notas
elemento
objeto
básico
anotación
incluir
modelo
UML
Típicamente
notas
utilizarán
adornar
diagramas
restricciones
comentarios
expresen
texto
informal
formal
varia-
ciones
elemento
tales
requisitos
especifican
comporta-
miento
deseado
perspectiva
externa
modelo
Relaciones
UML
tipos
relaciones
UML
I.
Dependencia
Asociación
Generalización
Realización
relaciones
bloques
básicos
construcción
relaciones
UML
utilizan
escribir
modelos
formados
20
LENGUAJE
UNIFICADO
MODELADO
dependencias
discuten
Capítulos
5y
10
dependencia
relación
semántica
elementos
cambio
elemento
elemento
independiente
afectar
semántica
elemento
elemento
dependiente
Gráficamente
dependencia
repre-
senta
línea
discontinua
posiblemente
dirigida
incluye
eti-
queta
muestra
Figura
2.12
Figura
2.12
Dependencias
asociaciones
discuten
Capítulos
53
10
asociación
relación
estructural
describe
conjunto
en-
laces
conexiones
objetos
agregación
tipo
especial
aso-
ciación
representa
relación
estructural
partes
Gráficamen-
asociación
representa
línea
continua
posiblemente
dirigida
incluye
etiqueta
incluye
adornos
multiplicidad
nombres
rol
muestra
Figura
2.13
patrón
empleado
Figura
2.13
Asociaciones
generalizaciones
discuten
Capítulos
5y
10
generalización
relación
especialización
generalización
objetos
elemento
especializado
hijo
sustituir
objetos
elemento
general
padre
forma
hijo
comparte
estructura
compor-
tamiento
padre
Gráficamente
relación
generalización
representa
línea
continua
punta
flecha
vacía
apuntando
padre
muestra
Figura
2.14
Figura
2.14
Generalizaciones
realizaciones
discuten
Capítulo
10
Cuarto
realización
relación
semántica
clasificadores
clasificador
especifica
contrato
clasificador
garantiza
cumplirá
encontrar
relaciones
yealización
sitios
interfaces
clases
componentes
realizan
casos
colaboraciones
re-
alizan
Gráficamente
relación
realización
representa
mezcla
generalización
relación
dependencia
muestra
Figura
2.15
Figura
2.15
Realización
vistas
arquitectura
discuten
sección
elementos
elementos
básicos
relacionales
incluir
modelo
UML
variaciones
tales
refina-
miento
traza
inclusión
extensión
dependencias
Diagramas
UML
diagrama
representación
gráfica
conjunto
ele-
mentos
visualizado
mayoría
grafo
conexo
nodos
elementos
arcos
relaciones
diagramas
dibujan
visualizar
sistema
dife-
PRESENTACIÓN
UML
21
rentes
perspectivas
forma
diagrama
proyección
sistema
to-
sistemas
triviales
diagrama
representa
vista
resumida
elementos
constituyen
sistema
elemento
aparecer
diagramas
diagramas
caso
común
diagra-
ma
caso
raro
teoría
diagrama
contener
combinación
elementos
relaciones
práctica
surge
pequeño
número
combinaciones
consistentes
vistas
útiles
com-
prenden
arquitectura
sistema
cantidad
software
razón
UML
incluye
diagramas:•
Diagrama
clases
Diagrama
objetos
Diagrama
casos
Diagrama
secuencia
Diagrama
colaboración
Diagrama
statechart
Diagrama
actividades
Diagrama
componentes
Diagrama
despliegue
diagramas
clases
discuten
Capítulo
diagramas
objetos
discuten
Capítulo
14
diagrama
clases
muestra
conjunto
clases
interfaces
colaboraciones
relaciones
diagramas
diagramas
comunes
mode-
sistemas
orientados
objetos
diagramas
clases
cubren
vista
dise-
ño
estática
sistema
diagramas
clases
incluyen
clases
activas
cubren
vista
procesos
estática
sistema
diagrama
objetos
muestra
conjunto
objetos
relaciones
dia-
gramas
objetos
representan
instantáneas
instancias
elementos
encontrados
diagramas
clases
diagramas
cubren
vista
diseño
estática
vista
procesos
estática
sistema
diagramas
clases
perspectiva
casos
reales
prototípicos
diagrama
casos
muestra
conjunto
casos
actores
tipo
especial
clases
relaciones
diagramas
casos
cubren
vista
ca-
sos
estática
sistema
diagramas
especialmente
importantes
modelado
organización
comportamiento
sistema
diagramas
secuencia
diagramas
colaboración
tipo
diagramas
interacción
diagrama
interacción
muestra
interacción
consta
conjunto
objetos
relaciones
incluyendo
mensajes
enviados
diagramas
interacción
cubren
vista
dinámica
sis-
tema
diagrama
secuencia
diagrama
interacción
resalta
ordenación
temporal
mensajes
diagrama
colaboración
diagrama
interacción
resalta
organización
estructural
objetos
envían
reciben
mensajes
diagramas
secuencia
diagramas
colaboración
isomorfos
tomar
transformarlo
diagramas
casos
discuten
Capítulo
17
diagramas
interacción
discuten
Capítulo
18
22
LENGUAJE
UNIFICADO
MODELADO
diagramas
discuten
Capítulo
24
diagrama
muestra
máquina
consta
transiciones
eventos
actividades
diagramas
cubren
vista
dinámica
sistema
especialmente
importantes
modelado
comportamiento
interfaz
clase
colaboración
resaltan
comportamiento
dirigido
eventos
objeto
especialmente
útil
modelado
sistemas
reactivos
diagrama
actividades
tipo
especial
diagrama
muestra
flujo
actividades
sistema
diagramas
actividades
cubren
vis-
ta
dinámica
sistema
especialmente
importantes
modelar
funcionamien-
to
sistema
resaltan
flujo
control
objetos
diagrama
componentes
muestra
organización
dependencias
conjunto
componentes
diagramas
componentes
cubren
vista
implemen-
tación
estática
sistema
relacionan
diagramas
clases
com-
ponente
corresponde
común
clases
interfaces
colaboraciones
diagrama
despliegue
muestra
configuración
nodos
procesamiento
tiempo
ejecución
componentes
residen
diagramas
despliegue
cubren
vista
despliegue
estática
arquitectura
relacionan
diagra-
componentes
nodo
incluye
común
componentes
lista
cerrada
diagramas
herramientas
utilizar
UML
proporcionar
tipos
diagramas
frecuencia
aparecerán
práctica
diagramas
actividades
discuten
Capítulo
19
diagramas
componentes
discuten
Capítulo
29
diagramas
despliegue
discuten
Capítulo
30
Reglas
UML
bloques
construcción
UML
simplemente
combinarse
cual-
quier
lenguaje
UML
número
reglas
especifican
parecerse
modelo
formado
modelo
formado
semánticamente
autoconsistente
armonía
modelos
relacionados
UML
reglas
semánticas
Nombres
Alcance
Visibilidad
Integridad
Ejecución
llamar
elementos
relaciones
diagramas
contexto
significado
específico
nombre
utilizar
nombres
relacionan
apropiada
consistentemente
elementos
significa
ejecutar
simular
modelo
dinámico
modelos
construidos
desarrollo
sistema
cantidad
software
tienden
evolucionar
vistos
usuarios
formas
di-
ferentes
momentos
razón
común
equipo
desarrollo
construir
modelos
formados
construir
modelos
Abreviados
elementos
ocultan
simplificar
vista
Incompletos
ausentes
elementos
Inconsistentes
garantiza
integridad
modelo
PRESENTACIÓN
UML
23
modelos
llegan
formados
inevitables
conforme
de-
talles
sistema
apareciendo
mezclándose
proceso
desarrollo
software
reglas
UML
estimulan
obligan
considerar
cuestiones
importantes
análisis
diseño
implementación
llevan
tales
sistemas
con-
vertirse
formados
paso
tiempo
Mecanismos
comunes
UML
notas
adornos
discuten
Capítulo
edificio
simple
armonioso
ajustarse
patrón
caracterís-
ticas
comunes
casa
construirse
estilo
victoriano
francés
utilizando
patrones
arquitectónicos
definen
estilos
UML
simplifica
presencia
mecanismos
co-
munes
aplican
forma
consistente
lenguaje
Especificaciones
Adornos
Divisiones
comunes
Mecanismos
extensibilidad
Especificaciones
UML
lenguaje
gráfico
elemento
notación
gráfica
especificación
proporciona
explicación
textual
sintaxis
semántica
bloque
construcción
ejemplo
icono
clase
especificación
proporciona
conjunto
completo
atributos
operaciones
incluyendo
signaturas
completas
comportamiento
incluye
clase
visualmente
icono
clase
mostrar
pequeña
especificación
vista
clase
presentara
conjunto
elementos
totalmente
consistente
especifi-
cación
subyacente
clase
notación
gráfica
UML
utiliza
visualizar
sistema
especificación
UML
utiliza
enunciar
detalles
sistema
Hecha
división
construir
modelo
forma
incremental
dibujando
pri-
mero
diagramas
añadiendo
semántica
especificaciones
modelo
directamente
creación
especificación
ingeniería
inversa
sistema
creando
diagramas
obtienen
proyecciones
especificaciones
especificaciones
UML
proporcionan
base
semántica
incluye
elementos
modelos
sistema
elemento
relacionado
consistente
diagramas
UML
simples
proyecciones
vi-
suales
base
diagrama
revela
aspecto
específico
interesante
sistema
Adornos
mayoría
elementos
UML
única
clara
notación
grá-
fica
proporciona
representación
visual
aspectos
importantes
ele-
mento
ejemplo
notación
clase
diseñado
intencionadamente
for-
ma
fácil
dibujar
clases
elementos
aparecen
frecuencia
modelar
sistemas
orientados
objetos
notación
clase
revela
aspectos
importantes
clase
nombre
atributos
operaciones
especificación
clase
incluir
detalles
tales
abstrac-
ta
visibilidad
atributos
operaciones
detalles
in-
24
LENGUAJE
UNIFICADO
MODELADO
objetos
discuten
Capítulo
13
cluir
adornos
gráficos
textuales
notación
rectangular
básica
clase
ejemplo
Figura
2.16
muestra
clase
adornos
indican
clase
abs-
tracta
operaciones
públicas
protegida
privada
Transacción
ejecutar
rollback
prioridad
marcaDeTiempo
Figura
2.16
Adornos
elementos
Flotación
UML
comienzan
símbolo
básico
añadirse
variedad
adornos
específicos
símbolo
Divisiones
comunes
modelar
sistemas
orientados
objetos
mundo
di-
vidirse
par
formas
lugar
división
clase
objeto
clase
abstracción
objeto
manifestación
concreta
abstracción
UML
mode-
lar
clases
objetos
muestra
Figura
2.17
Juan
Cliente
Cliente
nombre
dirección
teléfono
Cliente
Elisa
Figura
2.17
Clases
objetos
interfaces
discuten
Capítulo
11
figura
clase
llamada
Cliente
objetos
Juan
indica
explícitamente
objeto
ente
Cliente
objeto
Cliente
anónimo
Elisa
etiquetado
especificación
objeto
clase
Cliente
muestra
forma
explícita
bloques
construcción
UML
presentan
tipo
dico-
tomía
clase
objeto
ejemplo
casos
instancias
casos
componentes
instancias
componentes
nodos
instancias
nodos
etcétera
Gráficamente
UML
distingue
objeto
utilizando
símbolo
clase
subrayando
nombre
objeto
lugar
separación
interfaz
implementación
in-
terfaz
declara
contrato
implementación
representa
realización
concreta
contrato
responsable
efectiva
forma
fidedigna
semántica
com-
pleta
interfaz
UML
modelar
interfaces
implementacio-
nes
muestra
Figura
2.18
figura
componente
llamado
asistenteortografico
dl
implementa
interfaces
IUnknown
IOrtograf
ia
ColaEventos
versión
3.2
autor
egb
sexcephonii
Ove
rflow
añadir
quitar
vaciar
PRESENTACIÓN
UML
25
lUnknown
10rtografía
Figura
2.18
Interfaces
implementaciones
asistenteortográfico.d11
mecanismos
extensibilidad
UML
discuten
Capítulo
bloques
construcción
UML
presentan
tipo
dicotomía
interfaz
implementación
ejemplo
casos
co-
laboraciones
realizan
operaciones
métodos
implementan
Mecanismos
extensibilidad
UML
proporciona
lenguaje
estándar
escribir
planos
software
lenguaje
cerrado
suficiente
expresar
matices
posibles
modelos
dominios
momentos
razón
UML
abierto-cenado
extender
lenguaje
controlada
mecanismos
extensión
UML
incluyen
Estereotipos
Valores
etiquetados
Restricciones
estereotipo
extiende
vocabulario
UML
permitiendo
crear
tipos
bloques
construcción
deriven
existentes
específicos
problema
ejemplo
trabajando
lenguaje
programación
Java
C++
necesario
modelar
excepciones
lenguajes
excepciones
simplemente
clases
tratan
formas
especiales
Nor-
malmente
permitirá
lanzadas
capturadas
excepciones
ciudadanos
clase
modelo
significa
tratadas
bloques
básicos
construcción
marcándolas
estereo-
tipo
apropiado
clase
Over
ow
Figura
2.19
ordenado
Figura
2.19
Mecanismos
extensibilidad
valor
etiquetado
extiende
propiedades
bloque
construcción
UML
permitiendo
añadir
información
especificación
elemento
ejemplo
trabajando
producto
atraviesa
versiones
N.
T.
libro
traducido
identificadores
forman
lenguaje
modelo
programación
existentes
caso
conserva
término
lUnknown
tratarse
identificador
modelo
COM
Microsoft
26
LENGUAJE
UNIFICADO
MODELADO
tiempo
querrá
registrar
versión
autor
abstracciones
críticas
versión
autor
conceptos
primitivos
UML
añadidos
bloque
construcción
clase
introduciendo
valores
etiquetados
bloque
construcción
Figura
2.19
ejemplo
clase
ColaEventos
extiende
indicando
explícitamente
versión
autor
restricción
extiende
semántica
bloque
construcción
UML
per-
mitiendo
añadir
reglas
modificar
existentes
ejemplo
desee
restringir
clase
ColaEventos
adiciones
hiciesen
orden
muestra
Figura
2.19
añadir
restricción
indique
explí-
citamente
operación
añadir
conjunto
mecanismos
extensibilidad
permiten
configurar
exten-
der
UML
necesidades
proyecto
mecanismos
permiten
UML
adaptarse
tecnologías
software
probable
aparición
lenguajes
programación
distribuida
potentes
añadir
bloques
construcción
modificar
especificación
existentes
cambiar
semántica
Naturalmente
importante
forma
controlada
extensiones
siga
fiel
propósito
UML
comunicación
información
Arquitectura
necesidad
sistemas
complejos
vistas
discute
Capítulo
visualización
especificación
construcción
documentación
sistema
cantidad
software
requiere
sistema
visto
perspectivas
Dife-
rentes
usuarios
usuarios
finales
analistas
desarrolladores
integradores
sistemas
encargados
tests
encargados
documentación
técnica
jefes
proyectos
siguen
agendas
relación
proyecto
mira
sistema
formas
diversos
momentos
vida
proyecto
arquitec-
tura
sistema
artefacto
importante
emplearse
manejar
puntos
vista
controlar
desarrollo
iterativo
incremental
sistema
ciclo
vida
arquitectura
conjunto
decisiones
significativas
organización
sistema
software
selección
elementos
estructurales
interfaces
constituye
sistema
comportamiento
especifica
colaboraciones
elementos
composición
elementos
estructurales
comportamiento
subsis-
temas
progresivamente
estilo
arquitectónico
guía
organización
elementos
estáticos
di-
námicos
interfaces
colaboraciones
composición
arquitectura
software
estructura
comporta-
miento
funcionalidad
rendimiento
capacidad
adap-
tación
reutilización
capacidad
comprendido
restricciones
económicas
tecnología
compromisos
alternativas
aspectos
estéticos
vocabulario
funcionalidad
comportamiento
Vista
casos
Vista
diseño
Vista
implementación
Vista
procesos
Vista
despliegue
PRESENTACIÓN
UML
27
modelado
arquitectura
sistema
discute
Capítulo
31
ilustra
Figura
2.20
arquitectura
sistema
cantidad
software
describirse
vistas
interrelacionadas
vista
proyección
organización
estructura
sistema
centrada
aspecto
particular
sistema
ensamblado
sistema
gestión
configuraciones
funcionamiento
topologia
sistema
capacidad
distribución
crecimiento
entrega
rendimiento
instalación
Figura
2.20
Modelado
arquitectura
sistema
vista
casos
sistema
comprende
casos
describen
comportamiento
sistema
percibido
usuarios
finales
analistas
encargados
pruebas
vista
especifica
realmente
organización
sis-
tema
software
especificar
fuerzas
configuran
arquitectura
sistema
UML
aspectos
estáticos
vista
capturan
diagramas
casos
aspectos
dinámicos
vista
capturan
diagramas
in-
teracción
diagramas
diagramas
actividades
vista
diseño
sistema
comprende
clases
interfaces
colaboraciones
forman
vocabulario
problema
solución
vista
soporta
principalmente
requisitos
funcionales
sistema
entendiendo
servicios
sistema
debería
proporcionar
usuarios
finales
UML
aspectos
estáticos
vis-
ta
capturan
diagramas
clases
objetos
aspectos
dinámicos
captu-
ran
diagramas
interacción
diagramas
diagramas
actividades
vista
procesos
sistema
comprende
hilos
procesos
forman
mecanismos
sincronización
concurrencia
sistema
vista
cubre
principal-
mente
funcionamiento
capacidad
crecimiento
rendimiento
sistema
UML
aspectos
estáticos
dinámicos
vista
capturan
tipo
diagramas
vista
diseño
énfasis
clases
activas
representan
hilos
procesos
vista
implementación
sistema
comprende
componentes
archivos
utilizan
ensamblar
disponible
sistema
físico
vista
preo-
cupa
principalmente
gestión
configuraciones
distintas
versiones
sis-
tema
componentes
archivos
independientes
ensam-
blarse
formas
producir
sistema
ejecución
UML
aspectos
estáticos
vista
capturan
diagramas
componentes
aspectos
diná-
micos
vista
capturan
diagramas
interacción
diagramas
diagramas
actividades
28
LENGUAJE
UNIFICADO
MODELADO
vista
despliegue
sistema
contiene
nodos
forman
topología
hardware
ejecuta
sistema
vista
preocupa
principalmente
distribución
entrega
instalación
partes
constituyen
sistema
físico
UML
aspectos
estáticos
vista
capturan
diagramas
despliegue
aspectos
dinámicos
vista
capturan
diagramas
interacción
diagramas
diagramas
actividades
vistas
existir
forma
usuarios
puedan
centrarse
cuestiones
arquitectura
sistema
in-
teresen
vistas
interactuar
nodos
vista
despliegue
contienen
componentes
vista
implementación
repre-
sentan
realización
física
clases
interfaces
colaboraciones
clases
activas
vistas
diseño
procesos
UML
permite
expresar
vistas
interacciones
Ciclo
vida
desarrollo
software
Proceso
Unificado
Rational
resume
apéndice
tratamiento
completo
proceso
discute
The
Unified
Software
Development
Process
UML
independiente
proceso
significa
ligado
ciclo
vida
desarrollo
software
particular
obtener
máximo
beneficio
UML
debería
considerar
proceso
fuese
Dirigido
casos
Centrado
arquitectura
Iterativo
incremental
Dirigido
casos
significa
casos
utilizan
ar-
tefacto
básico
establecer
comportamiento
deseado
sistema
verificar
validar
arquitectura
sistema
pruebas
comunicación
per-
sonas
involucradas
proyecto
Centrado
arquitectura
significa
arquitectura
sistema
utiliza
artefacto
básico
conceptualizar
construir
gestionar
evolucionar
sis-
tema
desarrollo
proceso
iterativo
involucra
gestión
flujo
ejecutables
sistema
proceso
incremental
involucra
continua
integración
arquitectura
sistema
producir
ejecutables
ejecutable
incorpora
mejoras
incrementales
conjunto
proceso
iterativo
incremental
dirigido
riesgo
significa
versión
encarga
atacar
reducir
riesgos
significativos
éxito
proyecto
proceso
dirigido
casos
centrado
arquitectura
iterativo
incremental
descomponerse
fases
fase
intervalo
tiempo
hitos
importantes
proceso
cumplen
conjunto
objetivos
definidos
completan
artefactos
toman
decisiones
pasar
fase
muestra
Figura
2.21
fases
ciclo
vida
desarrollo
software
iniciación
elaboración
construcción
transición
diagrama
flujos
trabajo
representan
frente
fases
mostrando
varía
tiempo
nivel
atención
fase
presta
flujo
trabajo
PRESENTACIÓN
UML
29
Iniciación
Elaboración
Construcción
Transición
iteración(es
preliminares
iter
iter
iter
iter
n+1
iter
n+2
iter
iter
m+1
Flujos
trabajo
proceso
Modelado
negocio
Requisitos
Análisis
diseño
Implementación
Pruebas
Despliegue
Flujos
trabajo
soporte
Gestión
cambio
configuraciones
Gestión
proyecto
Entorno
Figura
2.21
Ciclo
vida
desarrollo
software
iniciación
fase
proceso
idea
inicial
desarrollo
punto
internamente
suficientemente
fundamentada
garantizar
entrada
fase
elaboración
elaboración
fase
proceso
definen
visión
pro-
ducto
arquitectura
fase
expresan
claridad
requisitos
sistema
priorizados
utilizan
crear
sólida
base
arquitectónica
requisitos
sistema
variar
enunciados
carácter
general
criterios
precisos
evaluación
especificando
comportamiento
funcional
funcional
proporcionando
referencia
pruebas
construcción
fase
proceso
software
base
arquitectónica
ejecutable
disponibilidad
comunidad
usuarios
requisitos
sistema
especialmente
criterios
evaluación
constantemente
reexaminados
frente
necesidades
proyecto
recursos
asignan
proyecto
forma
apropiada
atacar
riesgos
transición
cuarta
fase
proceso
software
puesto
ma-
comunidad
usuarios
proceso
software
raramente
termina
por-
fase
sistema
mejorado
continuamente
erradican
errores
programación
añaden
características
incluían
versión
elemento
distingue
proceso
afecta
fases
ite-
ración
iteración
conjunto
definido
actividades
plan
criterios
evaluación
establecidos
acaba
versión
interna
ex-
terna
significa
ciclo
vida
desarrollo
software
caracterizarse
involucrar
flujo
continuo
versiones
ejecutables
arquitectura
sistema
énfasis
arquitectura
artefacto
importante
conduce
UML
centrarse
modelado
vistas
arquitectura
sistema
