UNIDAD
ESTRUCTURAS
CONTROL
FLUJO
TECNICAS
PROGRAMACIÓN
teoría
programación
técnicas
programación
modular
programación
estructurada
diseño
programa
establece
descomposición
problema
módulos
programación
modular
programación
módulo
métodos
estructurados
programación
estructurada
posterior
unión
procedimientos
ascendentes
descendentes
PROGRAMACIÓN
MODULAR
programa
divide
módulos
partes
independientes
ejecuta
única
tarea
codifican
independiente
módulos
programa
principal
controla
sucede
transfiriendo
control
distintos
submódulos
subprogramas
módulos
independientes
acceso
programa
principal
descomposición
programa
módulos
independientes
conoce
método
divide
vencerás
caso
funciones
entrada
proceso
salida
conveniente
esté
módulo
separado
PROGRAMACION
ESTRUCTURADA
refiere
conjunto
técnicas
aumentan
considerablemente
productividad
programa
programas
fáciles
escribir
verificar
leer
mantener
Conjunto
técnicas
incorporan
Recursos
abstractos
Diseño
descendente
top-down
Estructuras
básicas
RECURSOS
ABSTRACTOS
programación
estructurada
auxilia
recursos
abstractos
lugar
recursos
concretos
dispone
determinado
lenguaje
programación
Descomponer
programa
términos
recursos
abstractos
consiste
descomponer
determinada
acción
compleja
función
número
acciones
simples
capaces
ejecutadas
constituirán
instrucciones
DISEÑO
DESCENDENTE
TOP-DOWN
proceso
problema
descompone
serie
pasos
sucesivos
refinamiento
obteniendo
estructuras
jerárquicas
Nivel
Vista
exterior
Nivel
n+1
Vista
interior
ESTRUCTURAS
BÁSICAS
programa
escrito
utilizando
tipos
estructuras
control
Secuenciales
Selectivas
Repetitivas
CARACTERISTICAS
programa
cumple
siguientes
características
Posee
punto
entrada
salida
control
programa
caminos
entrada
salida
seguir
pasan
partes
programa
instrucciones
ejecutables
lazos
bucles
infinitos
SECUENCIALIZACION
estructura
permite
controlar
ejecución
conjunto
acciones
orden
secuencial
acciones
operaciones
primitivas
elementales
declaraciones
variables
leer
datos
escribir
mostrar
datos
calcular
expresión
PSEUDOCODIGO
PROGRAMA
nombre
INICIO
Acción
Acción
Acción
FINPROGRAMA
ELABORAR
ALGORITMO
seguir
pasos
elaborar
algoritmo
Definir
problema
Analizar
problema
Diseñar
programa
EJEMPLO
Definir
problema
Calcular
sueldo
empleado
Analizar
problema
Entrada
nombre
horas
trabajadas
valor
hora
Proceso
sueldo
equivale
horas
trabajadas
valor
hora
Salida
nombre
sueldo
Diseñar
algoritmo
Diseñar
estructura
solución
elaborando
algoritmo
Acción
Acción
Acción
PROGRAMA
calculaSueldo
VAR
empleado
CADENA
horasTrab
ENTERO
valorHora
sueldo
REAL
INICIO
solicitar
ingresen
datos
leerlos
Escribir
Ingrese
nombre
empleado
Leer
empleado
10
Escribir
Ingrese
número
horas
trabajadas
11
Leer
horasTrab
12
Escribir
Ingrese
valor
hora
13
Leer
valorHora
14
//calcular
sueldo
15
sueldo
horasTrab
valorHora
16
mostramos
sueldo
empleado
17
Escribir(“El
sueldo
empleado
sueldo
18
FINPROGRAMA
SELECCIÓN
estructura
permite
controlar
ejecución
acciones
requieren
condiciones
realización
surge
necesidad
condiciones
resultado
seguir
camino
estructuras
evalúan
condición
función
resultado
realiza
acción
TIPOS
ESTRUCTURAS
SELECTIVAS
estructuras
selectivas
Simples
Dobles
Múltiples
SELECCIÓN
SIMPLE
Ejecuta
determinada
acción
cumple
condición
condición
ejecuta
acción
falsa
ejecuta
acción
condición
Acciones
FINSI
Condición
Acciones
EJEMPLO
Elaborar
algoritmo
calcular
mostrar
sueldo
empleado
empleado
trabajado
40
horas
agregamos
sueldo
5%
incentivo
Definir
problema
Calcular
sueldo
empleado
Analizar
problema
Entrada
nombre
horas
trabajadas
valor
hora
Proceso
sueldo
horas
trabajadas
valor
hora
trabajó
40
horas
sueldo
sueldo
sueldo
0.05
Salida
nombre
sueldo
Diseñar
algoritmo
PROGRAMA
calculaSueldo2
VAR
empleado
CADENA
horasTrab
ENTERO
valorHora
sueldo
REAL
INICIO
solicitar
ingresen
datos
leerlos
Escribir
Ingrese
nombre
empleado
Leer
empleado
Escribir
Ingrese
número
horas
trabajadas
10
Leer
horasTrab
11
Escribir
Ingrese
valor
hora
12
Leer
valorHora
13
//calcular
sueldo
14
sueldo
horasTrab
valorHora
15
horasTrab
40
sueldo
sueldo
sueldo
0,05
15
FINSI
16
mostramos
sueldo
empleado
17
Escribir(“El
sueldo
empleado
sueldo
18
FINPROGRAMA
SELECCIÓN
DOBLE
estructura
permite
elegir
opciones
función
cumplimiento
determinada
condición
ejecuta
condición
Acciones
Acciones
FINSI
EJEMPLO
Elaborar
algoritmo
calcular
mostrar
sueldo
empleado
empleado
trabajado
40
horas
horas
exceden
pagamos
doble
valor
Definir
problema
Calcular
sueldo
empleado
Analizar
problema
Entrada
Nombre
horas
trabajadas
valor
hora
Proceso
trabajó
40
hs
sueldo
horas
trabajadas
valor
hora
trabajó
40
hs
sueldo
40
valor
hora
horas
trabajadas
40
valor
hora
Salida
nombre
sueldo
Diseñar
algoritmo
PROGRAMA
calculaSueldo3
VAR
empleado
CADENA
horasTrab
ENTERO
valorHora
sueldo
REAL
INICIO
solicitar
ingresen
datos
leerlos
Escribir
Ingrese
nombre
empleado
Leer
empleado
Escribir
Ingrese
número
horas
trabajadas
10
Leer
horasTrab
11
Escribir
Ingrese
valor
hora
12
Leer
valorHora
13
//calcular
sueldo
14
sueldo
horasTrab
valorHora
15
horasTrab
40
sueldo
horasTrab
valorHora
15
sueldo=
40
valorHora
horasTrab
40
valorHora
15
FINSI
16
mostramos
sueldo
empleado
17
Escribir
sueldo
empleado
sueldo
18
FINPROGRAMA
Condición
Acciones
Acciones
SELECCIÓN
MULTIPLE
alternativas
posibles
base
condición
seguir
caminos
caso
selección
múltiple
evalúa
expresión
tomar
valores
distintos
resultado
seguir
acciones
posibles
ALTERNATIVAS
ANIDADAS
caso
selección
anidada
alternativas
anidadas
presenta
selección
simple
anidada
sucesivamente
tomar
decisión
señalar
correspondiente
necesario
tomar
decisión
sucesivamente
CASO
selector
v1
acción
v2
acción
acción
FINSEGUN
EJEMPLO
Elaboremos
algoritmo
lea
número
semana
imprima
nombre
lunes
martes
domingo
Definir
problema
Escribir
nombre
semana
número
orden
Analizar
problema
Entrada
variable
indica
número
semana
Proceso
número
ingresado
dará
nombre
Lunes
Martes
Miércoles
Jueves
Viernes
Sábado
Domingo
Salida
nombre
semana
Diseñar
algoritmo
PROGRAMA
nombreDia
VAR
numDia
ENTERO
Selector
Acción
Acción
Acción
v1
v2
vn
INICIO
solicitar
ingrese
número
Escribir
Ingrese
número
semana
Leer
numDia
//determinar
nombre
CASO
numDia
Escribir
Lunes
10
Escribir
Martes
11
Escribir
Miércoles
12
Escribir
Jueves
13
Escribir
Viernes
14
Escribir
Sábado
15
Escribir
Domingo
16
17
Escribir
rango
18
FINSEGUN
19
FINPROGRAMA
SELECCIÓN
ANIDADA
condición
condición
condición
Acción3
Acción
FINSI
Acción
FINSI
condición
Acción
FINSI
FINSI
Condic.1
Acción
Condic.3
Acción
Condic.2
Condic.4
Acción
Acción
Elaboremos
algoritmo
lea
monto
compra
informe
porcentaje
descuento
corresponde
Definir
problema
Establecer
porcentaje
descuento
compra
monto
Analizar
problema
Entrada
variable
indica
monto
compra
Proceso
Establecer
función
monto
descuento
monto
200
0%
monto
201
300
10%
monto
301
400
20%
monto
401
25%
Salida
Porcentaje
descuento
Diseñar
algoritmo
PROGRAMA
Descuento
VAR
montoCompra
descuento
ENTERO
INICIO
//solicitar
ingrese
monto
compra
leer
Escribir
Ingrese
monto
compra
Leer
montoCompra
//determinar
porcentaje
descuento
montoCompra
200
montoCompra
300
10
montoCompra
400
11
descuento
25
12
13
descuento
20
14
FINSI
15
16
descuento
10
17
FINSI
18
19
descuento
20
FINSI
21
//Mostramos
porcentaje
descuento
22
Escribir
corresponde
descuento
descuento
23
FINPROGRAMA
ESTRUCTURAS
REPETITIVAS
CICLOS
BUCLES
visto
estructuras
control
Secuenciales
Selectivas
problemas
necesitan
operaciones
ejecuten
número
determinado
llama
estructuras
repetitivas
estructuras
repiten
secuencia
instrucciones
número
determinado
denominan
bucles
ciclos
llama
iteración
repetir
ejecución
secuencia
acciones
estructuras
repetitivas
Repetir
Variar
Iterar
REPETIR
CICLO
1-X
Ejecuta
acciones
tantas
necesario
cumpla
condición
salida
bucle
condición
ciclo
1-x
ejecuta
llama
cola
inteligente
condición
REPETIR
Acciones
condición
Algoritmo
división
entera
números
enteros
restas
sucesivas
PROGRAMA
divisionEntera
VAR
dividendo
divisor
cociente
resto
ENTERO
INICIO
cociente
inicializo
variables
Escribir
introduzca
dividendo
divisor
Leer
dividendo
REPETIR
Leer
divisor
ingreso
datos
divisor
resto
dividendo
REPETIR
resto
resto
divisor
cociente
cociente
resto
divisor
Escribir
cociente
cociente
resto
resto
FINPROGRAMA
CICLO
estructura
analizar
condición
condición
cumple
ejecutan
acciones
condición
Falsa
sale
bucle
llama
cabeza
inteligente
condición
principio
Condición
Acciones
ciclo
0-x
ejecutar
acciones
ejecuten
condición
falsa
condición
Acciones
EJEMPLO
Algoritmo
división
entera
números
enteros
restas
sucesivas
PROGRAMA
divisionEntera
VAR
dividendo
divisor
cociente
resto
ENTERO
INICIO
cociente
Escribir
introduzca
dividendo
divisor
Leer
dividendo
REPETIR
Leer(divisor
divisor
resto
dividendo
resto
divisor
resto
resto
divisor
cociente
cociente
FIN_MIENTRAS
Escribir
cociente
cociente
resto
resto
FINPROGRAMA
VARIAR
CICLO
EXACTO
VARIAR
var1
VI
VF
PASO
Inc
Acciones
FINVARIAR
Var1
variable
control
ENTERO
VI
variable
inicial
ENTERO
VF
variable
ENTERO
Inc
variable
constante
expresión
aritmética
ENTERO
incluye
asume
Condición
Acciones
modificarse
acciones
variables
control
inicial
incremento
EJEMPLO
Algoritmo
valor
entero
realice
suma
números
enteros
PROGRAMA
sumaEnteros
Var
num
suma
contador
ENTERO
INICIO
Escribir
introduzca
número
Leer
num
suma
VARIAR
contador
num
suma
suma
contador
FINVARIAR
Escribir
suma
resultante
es:",suma
FINPROGRAMA
ITERAR
combinación
repetir
ejecutan
acciones
evalúa
condición
condición
Falsa
ejecuta
acciones
ejecutar
acciones
vuelve
evaluar
condición
sucesivamente
salida
bucle
condición
ITERAR
Acciones
SALIR
condición
Acciones
FINITERAR
Acciones
Variar
var1
VI
VF
paso
Inc
EJEMPLO
Algoritmo
Ingresar
valores
enteros
obtener
suma
ingreso
datos
finaliza
ingresa
cero
PROGRAMA
sumaValores
VAR
num
suma
ENTERO
INICIO
suma
ITERAR
Escribir
introduzca
número
Leer
num
SALIR
num
suma
suma
num
calculo
suma
FINITERAR
Escribir
suma
resultante
es:",suma
FINPROGRAMA
CUADRO
COMPARATIVO
Repetir
Iterar
Variar
Ciclo
Acciones
1-x
Acciones
0-x
exacto
Condición
salida
Falsa
condición
Posición
condición
cola
inteligente
Principio
cabeza
inteligente
condición
PUESTA
PUNTO
PROGRAMAS
Consiste
localizar
verificar
corregir
errores
programación
objetivo
prevenir
tantos
errores
hora
ejecutar
programa
prueba
ensayo
satisfactoria
detectan
errores
Condición
Acciones
Acciones
puesta
punto
programa
consta
siguientes
fases
Detección
errores
Depuración
errores
a.
Localización
b.
Eliminación
Prueba
programa
ERRORES
TIPICOS
Errores
típicos
sintaxis
originan
fase
compilación
interpretación
programa
causas
sintaxis
lenguaje
escrituras
incorrectas
omisión
signo
etc.
lógica
detener
ejecución
programa
producir
resultados
erróneos
Ej
división
n1
n2
valida
n2
distinto
cero
ejecutar
instrucción
iría
programa
PRUEBA
PROGRAMA
Prueba
programa
pruebas
conjuntos
datos
muestra
cuya
solución
conocida
correcta
tabla
variables
programa
siguiendo
instrucción
instrucción
resultados
obtenidos
plantean
juegos
datos
resultado
previsto
VALIDACION
DATOS
TRAZA
Validación
datos
datos
entrada
correctos
estén
rango
válido
Traza
indica
secuencia
ejecución
instrucciones
conjunto
valores
PREPARAR
PRUEBA
Determinar
caminos
programa
controlados
estructura
definen
recorridos
programa
deducen
paso
datos
introducirse
entrada
deducen
datos
obtenerse
salida
programa
EJEMPLO
Calcular
suma
producto
números
enteros
Ingresar
nro1
nro2
Calcular
nro1
nro2
nro1*nro2
Mostrar
resultado
suma
producto
PROGRAMA
sumaprod
VAR
nro1
nro2
suma
producto
ENTERO
INICIO
ingresar
datos
Escribir
Ingrese
número
Leer
nro1
Escribir
Ingrese
número
Leer
nro2
//calcular
suma
producto
10
suma
nro1
nro2
11
producto
nro1
nro2
12
//mostrar
resultados
13
Escribir
Suma
suma
Producto
producto
14
FINPROGRAMA
Determinar
datos
prueba
nro1
nro2
suma
producto
1ra
Prueba
23
56
79
1288
2da
Prueba
-89
90
-8010
3ra
Prueba
24
24
4ta
Prueba
-7
-67
-74
469
traza
1,2,3,4,5,6,7,8,9,10,11,12,13
14
PRUEBAS
PROGRAMAS
tabla
reflejan
variables
programa
variables
declaradas
tipo
dato
definidas
tengan
valor
1ra
prueba
Instruc-
ción
nro1
nro2
suma
producto
Pantalla
ENTERO
Vacío
ENTERO
Vacío
ENTERO
Vacío
ENTERO
Vacío
Ingrese
número
23
Ingrese
número
56
10
79
11
1288
Resulta-
previstos
13
Suma
79
Producto
1288
prueba
Instruc-
ción
nro1
nro2
suma
producto
Pantalla
ENTERO
Vacío
ENTERO
Vacío
ENTERO
Vacío
ENTERO
Vacío
Ingrese
número
-89
Ingrese
número
90
10
11
-8010
Resulta-
previstos
13
Suma
Producto
-8010
ra
Prueba
Instruc-
ción
nro1
nro2
suma
producto
Pantalla
ENTERO
Vacío
ENTERO
Vacío
ENTERO
Vacío
ENTERO
Vacío
Ingrese
número
24
Ingrese
número
10
24
11
Resultados
previstos
13
Suma
24
Producto
ta
Prueba
Instruc-
ción
nro1
nro2
suma
producto
Pantalla
ENTERO
Vacío
ENTERO
Vacío
ENTERO
Vacío
ENTERO
Vacío
Ingrese
número
-7
Ingrese
número
-67
10
-74
11
469
Resultados
previstos
13
Suma
-74
Producto
469
COMPLEJIDAD
COMPUTACIONAL
Complejidad
Computacional
estudia
recursos
requeridos
cálculo
resolver
problema
cálculo
difícil
requerirá
recursos
menor
dificultad
recursos
estudiados
Tiempo
número
pasos
ejecución
algoritmo
Espacio
cantidad
memoria
utilizada
CLASIFICACION
PROBLEMAS
estudio
procesos
computacionales
conduce
clasificación
clases
problemas
solución
problemas
solución
problemas
solucionables
requieren
cantidad
recursos
ORDEN
COMPLEJIDADEl
algoritmo
eficiente
rápido
común
ocupa
memoria
eficiencia
expresa
función
tamaño
problema
problemas
solución
orden
complejidad
lineal
resuelven
tiempo
relaciona
linealmente
tamaño
MIDE
exactitud
tiempo
tardar
programa
salida
vuelve
tarea
difícil
calcular
tiempo
exacto
tardar
algoritmo
calcula
cantidad
operaciones
función
tamaño
entrada
Tamaño
entrada
tiempo
operación
EJEMPLO
CLASICO
problema
ordenación
números
común
bastantes
algoritmos
resolver
problema
diferencia
Aparte
nombre
complejidad
ANALISIS
ALGORITMO
Normalmente
tipos
Análisis
caso
Análisis
caso
promedio
Análisis
caso
calcular
función
crecimiento
dándole
entradas
posibles
Análisis
caso
promedio
promedio
tardaría
algoritmo
entradas
posibles
COSTO
COMPUTACIONAL
caso
fácil
razonar
analizar
costo
computacional
algoritmo
siguen
pasos
Suponer
casos
ejecutan
líneas
Asignar
costo
operación
línea
código
ejecutada
línea
código
