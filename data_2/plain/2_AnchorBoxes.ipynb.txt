Anchor Boxes

Los algoritmos de detección de objetos generalmente muestrean una gran cantidad de regiones en la imagen de entrada, determinan si estas regiones contienen objetos de interés y ajustan los límites de las regiones para predecir las Bounding Boxes del Ground Truth de los objetos con mayor precisión. Diferentes modelos pueden adoptar diferentes esquemas de muestreo de regiones. Aquí introducimos uno de esos métodos: genera múltiples Bounding Boxes con diferentes escalas y relaciones de aspecto centradas en cada píxel. Estas Bounding Boxes se llaman Anchor Boxes.

Generando Multiples Anchor Boxes

Supongamos que la imagen de entrada tiene una altura de  y un ancho de . Generamos Anchor Boxes con diferentes formas centradas en cada píxel de la imagen. Sea la escala  y la relación de aspecto (relación de ancho a altura) . Entonces, [el ancho y la altura del Anchor Box son  y , respectivamente.]
Nota que cuando se da la posición del centro, se determina un Anchor Box con un ancho y una altura conocidos.

Para generar múltiples Anchor Boxes con diferentes formas, establezcamos una serie de escalas  y una serie de relaciones de aspecto . Al usar todas las combinaciones de estas escalas y relaciones de aspecto con cada píxel como centro, la imagen de entrada tendrá un total de  Anchor Boxes. Aunque estos Anchor Boxes pueden cubrir todas las Bounding Boxes del Ground Truth, la complejidad computacional es fácilmente demasiado alta. En la práctica, solo podemos (considerar aquellas combinaciones que contengan)  o :

()

Es decir, el número de Anchor Boxes centrados en el mismo píxel es . Para toda la imagen de entrada, generaremos un total de  Anchor Boxes.

El método anterior de generar Anchor Boxes se implementa en la siguiente función multibox_prior. Especificamos la imagen de entrada, una lista de escalas y una lista de relaciones de aspecto, luego esta función devolverá todos los Anchor Boxes.

Podemos ver que la forma de la variable devuelta Y del Anchor Box es (tamaño del lote, número de Anchor Boxes, 4).

Después de cambiar la forma de la variable de Anchor Box Y a (altura de la imagen, ancho de la imagen, número de Anchor Boxes centradas en el mismo píxel, 4), podemos obtener todas las Anchor Boxes centradas en una posición de píxel especificada.

En lo siguiente, accedemos a la primera Anchor Box centrada en (250, 250). Tiene cuatro elementos: las coordenadas del eje  en la esquina superior izquierda y las coordenadas del eje  en la esquina inferior derecha de la Anchor Box. Los valores de coordenadas de ambos ejes se dividen por el ancho y la altura de la imagen, respectivamente.

Para mostrar todas las Anchor Boxes centradas en un píxel en la imagen, definimos la siguiente función show_bboxes para dibujar múltiples bounding boxes en la imagen.

Como acabamos de ver, los valores de coordenadas de los ejes x e y en la variable boxes han sido divididos por el ancho y la altura de la imagen, respectivamente. Al dibujar cajas de anclaje, necesitamos restaurar sus valores de coordenadas originales; por lo tanto, definimos la variable bbox_scale a continuación. Ahora, podemos dibujar todas las cajas de anclaje centradas en (250, 250) en la imagen. Como puedes ver, la caja de anclaje azul con una escala de 0.75 y una relación de aspecto de 1 rodea bien al perro en la imagen.

Intersección sobre Unión (IoU)

Acabamos de mencionar que una anchor box "rodea bien" al perro en la imagen. Si se conoce la bounding box de verdad (ground-truth) del objeto, ¿cómo se puede cuantificar aquí "rodea bien"? Intuitivamente, podemos medir la similitud entre la anchor box y la bounding box de verdad. Sabemos que el índice de Jaccard puede medir la similitud entre dos conjuntos. Dados los conjuntos  y , su índice de Jaccard es el tamaño de su intersección dividido por el tamaño de su unión:

De hecho, podemos considerar el área de píxeles de cualquier bounding box como un conjunto de píxeles. De esta manera, podemos medir la similitud de las dos bounding boxes mediante el índice de Jaccard de sus conjuntos de píxeles. Para dos bounding boxes, generalmente nos referimos a su índice de Jaccard como intersección sobre unión (IoU), que es la proporción del área de su intersección respecto al área de su unión, como se muestra en la figura. El rango de un IoU está entre 0 y 1: 0 significa que dos bounding boxes no se superponen en absoluto, mientras que 1 indica que las dos bounding boxes son iguales.

Para el resto de esta clase, usaremos IoU para medir la similitud entre anchor boxes y bounding boxes de verdad, y entre diferentes anchor boxes. Dadas dos listas de anchor o bounding boxes, la siguiente función box_iou calcula su IoU en pares a través de estas dos listas.

Etiquetado de Anchor Boxes en los Datos de Entrenamiento

En un conjunto de datos de entrenamiento, consideramos cada anchor box como un ejemplo de entrenamiento. Para entrenar un modelo de detección de objetos, necesitamos clases y desplazamientos para cada anchor box, donde la primera es la clase del objeto relevante para la anchor box y la segunda es el desplazamiento de la bounding box de verdad relativa a la anchor box.

Durante la predicción, para cada imagen:
generamos múltiples anchor boxes,
predecimos clases y desplazamientos para todas las anchor boxes,
ajustamos sus posiciones según los desplazamientos predichos para obtener las bounding boxes predichas,
finalmente solo emitimos aquellas bounding boxes predichas que satisfacen ciertos criterios.

Como sabemos, un conjunto de entrenamiento de detección de objetos viene con etiquetas de ubicaciones de ground-truth bounding boxes y clases de los objetos que rodean. Para etiquetar cualquier anchor box generada, nos referimos a la ubicación etiquetada y la clase de la ground-truth bounding box que está más cercana a la anchor box. A continuación, describimos un algoritmo para asignar las ground-truth bounding boxes más cercanas a las anchor boxes.
Asignación de Bounding Boxes de Verdad a Anchor Boxes

Dada una imagen, supongamos que las anchor boxes son  y las bounding boxes de verdad son , donde . Definimos una matriz , cuyo elemento  en la  fila y  columna es el IoU de la anchor box  y la bounding box de verdad . El algoritmo consiste en los siguientes pasos:
Encontrar el elemento más grande en la matriz  y denotar sus índices de fila y columna como  y , respectivamente. Luego, la ground-truth bounding box  se asigna a la anchor box . Esto es bastante intuitivo porque  y  son las más cercanas entre todas las parejas de anchor boxes y ground-truth bounding boxes. Después de la primera asignación, descartar todos los elementos en la fila  y la columna  en la matriz .
Encontrar el más grande de los elementos restantes en la matriz  y denotar sus índices de fila y columna como  y , respectivamente. Asignamos la ground-truth bounding box  a la anchor box  y descartamos todos los elementos en la fila  y la columna  en la matriz .
En este punto, los elementos en dos filas y dos columnas en la matriz  han sido descartados. Procedemos hasta que todos los elementos en  columnas en la matriz  sean descartados. En este momento, hemos asignado una ground-truth bounding box a cada una de las  anchor boxes.
Solo atravesar las  anchor boxes restantes. Por ejemplo, dada cualquier anchor box , encontrar la ground-truth bounding box  con el mayor IoU con  a lo largo de la  fila de la matriz , y asignar  a  solo si este IoU es mayor que un umbral predefinido.

Ilustremos el algoritmo anterior usando un ejemplo concreto.

Como se muestra en la figura, asumiendo que el valor máximo en la matriz  es , asignamos la ground-truth bounding box  a la anchor box . Luego, descartamos todos los elementos en la fila 2 y la columna 3 de la matriz, encontramos el mayor  en los elementos restantes (área sombreada) y asignamos la ground-truth bounding box  a la anchor box . A continuación, como se muestra en la figura, descartamos todos los elementos en la fila 7 y la columna 1 de la matriz, encontramos el mayor  en los elementos restantes (área sombreada) y asignamos la ground-truth bounding box  a la anchor box . Finalmente, como se muestra en la figura, descartamos todos los elementos en la fila 5 y la columna 4 de la matriz, encontramos el mayor  en los elementos restantes (área sombreada) y asignamos la ground-truth bounding box  a la anchor box . Después de eso, solo necesitamos recorrer las anchor boxes restantes  y determinar si asignarles ground-truth bounding boxes según el umbral.

Este algoritmo se implementa en la siguiente función assignanchorto_bbox.

Etiquetado de Clases y Desplazamientos

Ahora podemos etiquetar la clase y el desplazamiento para cada anchor box. Supongamos que a una anchor box  se le asigna una bounding box de verdad . Por un lado, la clase de la anchor box  se etiquetará como la de . Por otro lado, el desplazamiento de la anchor box  se etiquetará de acuerdo con la posición relativa entre las coordenadas centrales de  y , junto con el tamaño relativo entre estas dos cajas. Dadas las diferentes posiciones y tamaños de diferentes cajas en el conjunto de datos, podemos aplicar transformaciones a esas posiciones y tamaños relativos que pueden conducir a desplazamientos más uniformemente distribuidos que sean más fáciles de ajustar. Aquí describimos una transformación común.

Dado que las coordenadas centrales de  y  son  y , respectivamente, sus anchos son  y , y sus alturas son  y , respectivamente. Podemos etiquetar el desplazamiento de  como

donde los valores predeterminados de las constantes son ,  y . Esta transformación se implementa a continuación en la función offset_boxes.

Si una anchor box no se asigna a una bounding box de verdad, simplemente etiquetamos la clase de la anchor box como "fondo". Las anchor boxes cuyas clases son fondo a menudo se denominan anchor boxes negativas, y el resto se llaman anchor boxes positivas. Implementamos la siguiente función multibox_target para etiquetar clases y desplazamientos para anchor boxes (el argumento anchors) usando bounding boxes de verdad (el argumento labels). Esta función establece la clase de fondo en cero e incrementa el índice entero de una nueva clase en uno.

Un Ejemplo

Ilustremos el etiquetado de anchor boxes mediante un ejemplo concreto. Definimos bounding boxes de verdad para el perro y el gato en la imagen cargada, donde el primer elemento es la clase (0 para perro y 1 para gato) y los cuatro elementos restantes son las coordenadas del eje  en la esquina superior izquierda y la esquina inferior derecha (el rango está entre 0 y 1). También construimos cinco anchor boxes para ser etiquetadas usando las coordenadas de la esquina superior izquierda y la esquina inferior derecha:  (el índice comienza desde 0). Luego graficamos estas bounding boxes de verdad y anchor boxes en la imagen.

Usando la función multibox_target definida anteriormente, podemos etiquetar clases y desplazamientos de estas anchor boxes basadas en las bounding boxes de verdad para el perro y el gato. En este ejemplo, los índices de las clases de fondo, perro y gato son 0, 1 y 2, respectivamente. A continuación, agregamos una dimensión para ejemplos de anchor boxes y bounding boxes de verdad.

Hay tres elementos en el resultado devuelto, todos en formato tensor. El tercer elemento contiene las clases etiquetadas de las anchor boxes de entrada.

Analizaremos las etiquetas de clases devueltas a continuación en función de las posiciones de las anchor boxes y las bounding boxes de verdad en la imagen. Primero, entre todas las parejas de anchor boxes y bounding boxes de verdad, el IoU de la anchor box  y la bounding box de verdad del gato es el más grande. Por lo tanto, la clase de  se etiqueta como gato. Sacando parejas que contienen  o la bounding box de verdad del gato, entre el resto la pareja de la anchor box  y la bounding box de verdad del perro tiene el IoU más grande. Por lo tanto, la clase de  se etiqueta como perro. A continuación, necesitamos recorrer las tres anchor boxes no etiquetadas restantes: ,  y . Para , la clase de la bounding box de verdad con el IoU más grande es el perro, pero el IoU está por debajo del umbral predefinido (0.5), por lo que la clase se etiqueta como fondo; para , la clase de la bounding box de verdad con el IoU más grande es el gato y el IoU supera el umbral, por lo que la clase se etiqueta como gato; para , la clase de la bounding box de verdad con el IoU más grande es el gato, pero el valor está por debajo del umbral, por lo que la clase se etiqueta como fondo.

El segundo elemento devuelto es una variable de máscara de forma (tamaño del lote, cuatro veces el número de anchor boxes). Cada cuatro elementos en la variable de máscara corresponden a los cuatro valores de desplazamiento de cada anchor box. Dado que no nos importa la detección de fondo, los desplazamientos de esta clase negativa no deben afectar la función objetivo. A través de multiplicaciones elemento por elemento, los ceros en la variable de máscara filtrarán los desplazamientos de clase negativa antes de calcular la función objetivo.

El primer elemento devuelto contiene los cuatro valores de desplazamiento etiquetados para cada anchor box. Ten en cuenta que los desplazamientos de las anchor boxes de clase negativa se etiquetan como ceros.

Predicción de Bounding Boxes con Supresión de No Máximo

Durante la predicción, generamos múltiples anchor boxes para la imagen y predecimos clases y desplazamientos para cada una de ellas. Por lo tanto, se obtiene una bounding box predicha de acuerdo con una anchor box con su desplazamiento predicho. A continuación, implementamos la función offset_inverse que toma como entrada anchors y predicciones de desplazamiento y aplica transformaciones de desplazamiento inverso para devolver las coordenadas de la bounding box predicha.

Cuando hay muchas anchor boxes, es posible que se generen muchas bounding boxes predichas similares (con una superposición significativa) para rodear el mismo objeto. Para simplificar la salida, podemos fusionar bounding boxes predichas similares que pertenecen al mismo objeto utilizando la supresión de no máximo (NMS).

Así es como funciona la supresión de no máximo. Para una bounding box predicha , el modelo de detección de objetos calcula la probabilidad predicha para cada clase. Denotando por  la mayor probabilidad predicha, la clase correspondiente a esta probabilidad es la clase predicha para . Específicamente, nos referimos a  como la confianza (score) de la bounding box predicha . En la misma imagen, todas las bounding boxes predichas que no son de fondo se ordenan por confianza en orden descendente para generar una lista . Luego manipulamos la lista ordenada  en los siguientes pasos:
Seleccionamos la bounding box predicha  con la mayor confianza de  como base y eliminamos todas las bounding boxes predichas no base cuya IoU con  excede un umbral predefinido  de . En este punto,  mantiene la bounding box predicha con la mayor confianza pero elimina otras que son demasiado similares a ella. En resumen, aquellas con scores de confianza no máximos son suprimidos.
Seleccionamos la bounding box predicha  con la segunda mayor confianza de  como otra base y eliminamos todas las bounding boxes predichas no base cuya IoU con  excede  de .
Repetimos el proceso anterior hasta que todas las bounding boxes predichas en  hayan sido utilizadas como base. En este momento, la IoU de cualquier par de bounding boxes predichas en  está por debajo del umbral ; por lo tanto, ningún par es demasiado similar entre sí.
Se emiten todas las bounding boxes predichas en la lista .

La siguiente función nms ordena los scores de confianza en orden descendente y devuelve sus índices.

Definimos la siguiente función multibox_detection para aplicar la supresión de no máximo a las bounding boxes predichas. No te preocupes si encuentras la implementación un poco complicada: mostraremos cómo funciona con un ejemplo concreto justo después de la implementación.

Ahora vamos a aplicar las implementaciones anteriores a un ejemplo concreto con cuatro anchor boxes. Para simplificar, asumimos que los desplazamientos predichos son todos ceros. Esto significa que las bounding boxes predichas son anchor boxes. Para cada clase entre el fondo, perro y gato, también definimos su probabilidad predicha.

Ahora podemos invocar la función multibox_detection para realizar la supresión de no máximo, donde el umbral se establece en 0.5. Ten en cuenta que agregamos una dimensión para ejemplos en la entrada del tensor.

Podemos ver que la forma del resultado devuelto es (tamaño del lote, número de anchor boxes, 6). Los seis elementos en la dimensión más interna proporcionan la información de salida para la misma bounding box predicha. El primer elemento es el índice de clase predicho, que comienza desde 0 (0 es perro y 1 es gato). El valor -1 indica fondo o eliminación en la supresión de no máximo. El segundo elemento es la confianza de la bounding box predicha. Los cuatro elementos restantes son las coordenadas del eje  de la esquina superior izquierda y la esquina inferior derecha de la bounding box predicha, respectivamente (el rango está entre 0 y 1).

Después de eliminar esas bounding boxes predichas de clase -1, podemos emitir la bounding box predicha final mantenida por la supresión de no máximo.

En la práctica, podemos eliminar las bounding boxes predichas con menor confianza incluso antes de realizar la supresión de no máximo, reduciendo así la computación en este algoritmo. También podemos postprocesar la salida de la supresión de no máximo, por ejemplo, manteniendo solo los resultados con mayor confianza en la salida final.