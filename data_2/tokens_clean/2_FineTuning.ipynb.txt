href="https://colab.research.google.com
github
institutohumai
cursos-python
blob
master
CV/4TransferLearning/2_FineTuning.ipynb
img
src='https://colab.research.google.com
assets
colab-badge.svg
/a
Fine-Tuning
clases
anteriores
discutimos
entrenar
modelos
dataset
entrenamiento
Fashion-MNIST
60000
imágenes
describimos
ImageNet
dataset
imágenes
escala
utilizado
mundo
académico
10
millones
imágenes
1000
clases
tamaño
dataset
solemos
encontrar
Supongamos
reconocer
tipos
sillas
imágenes
recomendar
enlaces
compra
usuarios
método
identificar
100
sillas
comunes
tomar
1000
imágenes
ángulos
silla
entrenar
modelo
clasificación
dataset
imágenes
recopiladas
dataset
sillas
dataset
Fashion-MNIST
cantidad
ejemplos
décima
ImageNet
provocar
sobreajuste
modelos
complicados
adecuados
ImageNet
dataset
silla
cantidad
limitada
ejemplos
entrenamiento
precisión
modelo
entrenado
cumpla
requisitos
prácticos
abordar
problemas
anteriores
solución
obvia
recopilar
datos
recopilar
etiquetar
datos
requerir
tiempo
dinero
ejemplo
recopilar
dataset
ImageNet
investigadores
gastado
millones
dólares
fondos
investigación
costo
actual
recopilación
datos
reducido
significativamente
costo
ignorar
solución
aplicar
aprendizaje
transferencia
transfer
learning
transferir
conocimiento
aprendido
dataset
origen
dataset
destino
ejemplo
mayoría
imágenes
dataset
ImageNet
sillas
modelo
entrenado
dataset
extraer
características
imagen
generales
ayudar
identificar
bordes
texturas
formas
composición
objetos
características
similares
efectivas
reconocer
sillas
Pasos
sección
presentaremos
técnica
común
aprendizaje
transferencia
fine
tuning
ajuste
fino
muestra
figura
fine
tuning
consta
siguientes
pasos
Entrene
previamente
modelo
red
neuronal
modelo
origen
conjunto
datos
origen
ejemplo
conjunto
datos
ImageNet
Cree
modelo
red
neuronal
modelo
destino
copia
diseño
parámetros
modelo
origen
capa
salida
Suponemos
parámetros
modelo
contienen
conocimiento
aprendido
conjunto
datos
origen
conocimiento
aplicable
conjunto
datos
destino
suponemos
capa
salida
modelo
origen
estrechamente
relacionada
etiquetas
conjunto
datos
origen
utiliza
modelo
destino
Agregue
capa
salida
modelo
destino
cuyo
número
salidas
número
clases
conjunto
datos
destino
inicialice
aleatoriamente
parámetros
modelo
capa
Entrene
modelo
destino
conjunto
datos
destino
conjunto
datos
sillas
capa
salida
entrenará
cero
parámetros
capas
ajustarán
función
parámetros
modelo
origen
conjunto
datos
destino
pequeño
conjunto
datos
origen
fine
tuning
ayuda
mejorar
capacidad
generalización
modelos
Reconocimiento
Hot
Dogs
Demostremos
ajuste
fino
caso
concreto
reconocimiento
hot
dogs
Haremos
fine-tuning
modelo
ResNet
entrenó
previamente
conjunto
datos
ImageNet
fine
tuning
hará
pequeño
conjunto
datos
consta
miles
imágenes
hot
dogs
Usaremos
modelo
ajustado
reconocer
hot
dogs
imágenes
Lectura
dataset
dataset
hot
dogs
tomó
imágenes
línea
conjunto
datos
consta
1400
imágenes
clase
positiva
contienen
hot
dogs
tantas
imágenes
clase
negativa
contienen
alimentos
utilizan
1000
imágenes
ambas
clases
entrenamiento
resto
pruebas
descomprimir
conjunto
datos
descargado
obtenemos
carpetas
hotdog
train
hotdog
test
Ambas
carpetas
subcarpetas
hotdog
not-hotdog
cualquiera
contiene
imágenes
clase
correspondiente
Creamos
instancias
leer
archivos
imagen
conjunto
datos
entrenamiento
prueba
respectivamente
ejemplos
positivos
imágenes
negativas
muestran
continuación
imágenes
varían
tamaño
relación
aspecto
Data
Augmentation
entrenamiento
recortamos
imagen
área
aleatoria
tamaño
aleatorio
relación
aspecto
aleatoria
escalamos
área
imagen
entrada
pruebas
escalamos
alto
ancho
imagen
256
píxeles
recortamos
área
central
entrada
canales
color
RGB
rojo
verde
azul
estandarizamos
valores
canal
canal
Concretamente
valor
canal
resta
valor
canal
resultado
divide
desviación
estándar
canal
Definición
inicialización
modelo
modelo
origen
ResNet-18
entrenó
previamente
conjunto
datos
ImageNet
especificamos
pretrained
True
descargar
automáticamente
parámetros
modelo
previamente
entrenado
modelo
utiliza
requiere
conexión
Internet
descarga
instancia
modelo
origen
previamente
entrenada
contiene
capas
características
capa
salida
fc
objetivo
principal
división
facilitar
ajuste
fino
parámetros
modelo
capas
capa
salida
atributo
fc
modelo
origen
proporciona
continuación
capa
densa
transforma
resultados
capa
avg-pooling
global
ResNet
1000
probabilidades
clase
conjunto
datos
ImageNet
construimos
red
neuronal
modelo
objetivo
define
modelo
origen
previamente
entrenado
número
salidas
capa
establece
número
clases
conjunto
datos
destino
lugar
1000
código
parámetros
modelo
capa
salida
instancia
modelo
destino
finetune_net
inicializan
parámetros
modelo
capas
correspondientes
modelo
origen
parámetros
modelo
obtuvieron
entrenamiento
previo
ImageNet
efectivos
pequeña
tasa
aprendizaje
ajustar
dichos
parámetros
previamente
entrenados
contrario
parámetros
modelo
capa
salida
inicializan
aleatoriamente
generalmente
requieren
tasa
aprendizaje
aprender
cero
Dejando
tasa
aprendizaje
base
utilizará
tasa
aprendizaje
10η
iterar
parámetros
modelo
capa
salida
Fine-Tuning
modelo
definimos
función
entrenamiento
trainfinetuning
llamarse
Establecemos
tasa
aprendizaje
base
valor
pequeño
afinar
parámetros
modelo
obtenidos
entrenamiento
previo
configuración
entrenaremos
parámetros
capa
salida
modelo
destino
cero
utilizando
tasa
aprendizaje
comparación
definimos
modelo
idéntico
inicializamos
parámetros
modelo
valores
aleatorios
modelo
entrenarse
cero
tasa
aprendizaje
modelo
ajustado
tiende
funcionar
época
valores
iniciales
parámetros
efectivos
